# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Group(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, viaf_id=None, number_of_volunteers=None, leader_function=None, art_patron=None, manager_season=None, ideology=None, description=None, secretary_general=None, membership=None, number_of_locations=None, discipline=None, type=None, ceo=None, formation_year=None, junior_season=None, revenue=None, affiliation=None, headquarter=None, extinction_year=None, child_organisation=None, season=None, honours=None, id=None, parent_organisation=None, organisation_member=None, nla_id=None, chairperson=None, number_of_staff=None, product=None, hometown=None, region_served=None, foundation_place=None, national_selection=None, superintendent=None, formation_date=None, label=None, legal_form=None, number_of_employees=None, extinction_date=None, general_council=None, player_season=None, trustee=None, endowment=None, slogan=None, regional_council=None, age=None, location_city=None, main_organ=None):  # noqa: E501
        """Group - a model defined in OpenAPI

        :param viaf_id: The viaf_id of this Group.  # noqa: E501
        :type viaf_id: List[str]
        :param number_of_volunteers: The number_of_volunteers of this Group.  # noqa: E501
        :type number_of_volunteers: List[int]
        :param leader_function: The leader_function of this Group.  # noqa: E501
        :type leader_function: List[object]
        :param art_patron: The art_patron of this Group.  # noqa: E501
        :type art_patron: List[object]
        :param manager_season: The manager_season of this Group.  # noqa: E501
        :type manager_season: List[object]
        :param ideology: The ideology of this Group.  # noqa: E501
        :type ideology: List[object]
        :param description: The description of this Group.  # noqa: E501
        :type description: List[str]
        :param secretary_general: The secretary_general of this Group.  # noqa: E501
        :type secretary_general: List[object]
        :param membership: The membership of this Group.  # noqa: E501
        :type membership: List[str]
        :param number_of_locations: The number_of_locations of this Group.  # noqa: E501
        :type number_of_locations: List[int]
        :param discipline: The discipline of this Group.  # noqa: E501
        :type discipline: List[object]
        :param type: The type of this Group.  # noqa: E501
        :type type: List[str]
        :param ceo: The ceo of this Group.  # noqa: E501
        :type ceo: List[object]
        :param formation_year: The formation_year of this Group.  # noqa: E501
        :type formation_year: List[str]
        :param junior_season: The junior_season of this Group.  # noqa: E501
        :type junior_season: List[object]
        :param revenue: The revenue of this Group.  # noqa: E501
        :type revenue: List[float]
        :param affiliation: The affiliation of this Group.  # noqa: E501
        :type affiliation: List[object]
        :param headquarter: The headquarter of this Group.  # noqa: E501
        :type headquarter: List[object]
        :param extinction_year: The extinction_year of this Group.  # noqa: E501
        :type extinction_year: List[str]
        :param child_organisation: The child_organisation of this Group.  # noqa: E501
        :type child_organisation: List[object]
        :param season: The season of this Group.  # noqa: E501
        :type season: List[object]
        :param honours: The honours of this Group.  # noqa: E501
        :type honours: List[object]
        :param id: The id of this Group.  # noqa: E501
        :type id: str
        :param parent_organisation: The parent_organisation of this Group.  # noqa: E501
        :type parent_organisation: List[object]
        :param organisation_member: The organisation_member of this Group.  # noqa: E501
        :type organisation_member: List[object]
        :param nla_id: The nla_id of this Group.  # noqa: E501
        :type nla_id: List[str]
        :param chairperson: The chairperson of this Group.  # noqa: E501
        :type chairperson: List[object]
        :param number_of_staff: The number_of_staff of this Group.  # noqa: E501
        :type number_of_staff: List[int]
        :param product: The product of this Group.  # noqa: E501
        :type product: List[object]
        :param hometown: The hometown of this Group.  # noqa: E501
        :type hometown: List[object]
        :param region_served: The region_served of this Group.  # noqa: E501
        :type region_served: List[object]
        :param foundation_place: The foundation_place of this Group.  # noqa: E501
        :type foundation_place: List[object]
        :param national_selection: The national_selection of this Group.  # noqa: E501
        :type national_selection: List[object]
        :param superintendent: The superintendent of this Group.  # noqa: E501
        :type superintendent: List[object]
        :param formation_date: The formation_date of this Group.  # noqa: E501
        :type formation_date: List[str]
        :param label: The label of this Group.  # noqa: E501
        :type label: List[str]
        :param legal_form: The legal_form of this Group.  # noqa: E501
        :type legal_form: List[object]
        :param number_of_employees: The number_of_employees of this Group.  # noqa: E501
        :type number_of_employees: List[int]
        :param extinction_date: The extinction_date of this Group.  # noqa: E501
        :type extinction_date: List[str]
        :param general_council: The general_council of this Group.  # noqa: E501
        :type general_council: List[object]
        :param player_season: The player_season of this Group.  # noqa: E501
        :type player_season: List[object]
        :param trustee: The trustee of this Group.  # noqa: E501
        :type trustee: List[object]
        :param endowment: The endowment of this Group.  # noqa: E501
        :type endowment: List[float]
        :param slogan: The slogan of this Group.  # noqa: E501
        :type slogan: List[str]
        :param regional_council: The regional_council of this Group.  # noqa: E501
        :type regional_council: List[object]
        :param age: The age of this Group.  # noqa: E501
        :type age: List[int]
        :param location_city: The location_city of this Group.  # noqa: E501
        :type location_city: List[object]
        :param main_organ: The main_organ of this Group.  # noqa: E501
        :type main_organ: List[object]
        """


        self.openapi_types = {
            'viaf_id': List[str],
            'number_of_volunteers': List[int],
            'leader_function': List[object],
            'art_patron': List[object],
            'manager_season': List[object],
            'ideology': List[object],
            'description': List[str],
            'secretary_general': List[object],
            'membership': List[str],
            'number_of_locations': List[int],
            'discipline': List[object],
            'type': List[str],
            'ceo': List[object],
            'formation_year': List[str],
            'junior_season': List[object],
            'revenue': List[float],
            'affiliation': List[object],
            'headquarter': List[object],
            'extinction_year': List[str],
            'child_organisation': List[object],
            'season': List[object],
            'honours': List[object],
            'id': str,
            'parent_organisation': List[object],
            'organisation_member': List[object],
            'nla_id': List[str],
            'chairperson': List[object],
            'number_of_staff': List[int],
            'product': List[object],
            'hometown': List[object],
            'region_served': List[object],
            'foundation_place': List[object],
            'national_selection': List[object],
            'superintendent': List[object],
            'formation_date': List[str],
            'label': List[str],
            'legal_form': List[object],
            'number_of_employees': List[int],
            'extinction_date': List[str],
            'general_council': List[object],
            'player_season': List[object],
            'trustee': List[object],
            'endowment': List[float],
            'slogan': List[str],
            'regional_council': List[object],
            'age': List[int],
            'location_city': List[object],
            'main_organ': List[object]
        }

        self.attribute_map = {
            'viaf_id': 'viafId',
            'number_of_volunteers': 'numberOfVolunteers',
            'leader_function': 'leaderFunction',
            'art_patron': 'artPatron',
            'manager_season': 'managerSeason',
            'ideology': 'ideology',
            'description': 'description',
            'secretary_general': 'secretaryGeneral',
            'membership': 'membership',
            'number_of_locations': 'numberOfLocations',
            'discipline': 'discipline',
            'type': 'type',
            'ceo': 'ceo',
            'formation_year': 'formationYear',
            'junior_season': 'juniorSeason',
            'revenue': 'revenue',
            'affiliation': 'affiliation',
            'headquarter': 'headquarter',
            'extinction_year': 'extinctionYear',
            'child_organisation': 'childOrganisation',
            'season': 'season',
            'honours': 'honours',
            'id': 'id',
            'parent_organisation': 'parentOrganisation',
            'organisation_member': 'organisationMember',
            'nla_id': 'nlaId',
            'chairperson': 'chairperson',
            'number_of_staff': 'numberOfStaff',
            'product': 'product',
            'hometown': 'hometown',
            'region_served': 'regionServed',
            'foundation_place': 'foundationPlace',
            'national_selection': 'nationalSelection',
            'superintendent': 'superintendent',
            'formation_date': 'formationDate',
            'label': 'label',
            'legal_form': 'legalForm',
            'number_of_employees': 'numberOfEmployees',
            'extinction_date': 'extinctionDate',
            'general_council': 'generalCouncil',
            'player_season': 'playerSeason',
            'trustee': 'trustee',
            'endowment': 'endowment',
            'slogan': 'slogan',
            'regional_council': 'regionalCouncil',
            'age': 'age',
            'location_city': 'locationCity',
            'main_organ': 'mainOrgan'
        }

        self._viaf_id = viaf_id
        self._number_of_volunteers = number_of_volunteers
        self._leader_function = leader_function
        self._art_patron = art_patron
        self._manager_season = manager_season
        self._ideology = ideology
        self._description = description
        self._secretary_general = secretary_general
        self._membership = membership
        self._number_of_locations = number_of_locations
        self._discipline = discipline
        self._type = type
        self._ceo = ceo
        self._formation_year = formation_year
        self._junior_season = junior_season
        self._revenue = revenue
        self._affiliation = affiliation
        self._headquarter = headquarter
        self._extinction_year = extinction_year
        self._child_organisation = child_organisation
        self._season = season
        self._honours = honours
        self._id = id
        self._parent_organisation = parent_organisation
        self._organisation_member = organisation_member
        self._nla_id = nla_id
        self._chairperson = chairperson
        self._number_of_staff = number_of_staff
        self._product = product
        self._hometown = hometown
        self._region_served = region_served
        self._foundation_place = foundation_place
        self._national_selection = national_selection
        self._superintendent = superintendent
        self._formation_date = formation_date
        self._label = label
        self._legal_form = legal_form
        self._number_of_employees = number_of_employees
        self._extinction_date = extinction_date
        self._general_council = general_council
        self._player_season = player_season
        self._trustee = trustee
        self._endowment = endowment
        self._slogan = slogan
        self._regional_council = regional_council
        self._age = age
        self._location_city = location_city
        self._main_organ = main_organ

    @classmethod
    def from_dict(cls, dikt) -> 'Group':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Group of this Group.  # noqa: E501
        :rtype: Group
        """
        return util.deserialize_model(dikt, cls)

    @property
    def viaf_id(self):
        """Gets the viaf_id of this Group.

        International authority data from the Online Computer Library Center (OCLC)  # noqa: E501

        :return: The viaf_id of this Group.
        :rtype: List[str]
        """
        return self._viaf_id

    @viaf_id.setter
    def viaf_id(self, viaf_id):
        """Sets the viaf_id of this Group.

        International authority data from the Online Computer Library Center (OCLC)  # noqa: E501

        :param viaf_id: The viaf_id of this Group.
        :type viaf_id: List[str]
        """

        self._viaf_id = viaf_id

    @property
    def number_of_volunteers(self):
        """Gets the number_of_volunteers of this Group.

        Description not available  # noqa: E501

        :return: The number_of_volunteers of this Group.
        :rtype: List[int]
        """
        return self._number_of_volunteers

    @number_of_volunteers.setter
    def number_of_volunteers(self, number_of_volunteers):
        """Sets the number_of_volunteers of this Group.

        Description not available  # noqa: E501

        :param number_of_volunteers: The number_of_volunteers of this Group.
        :type number_of_volunteers: List[int]
        """

        self._number_of_volunteers = number_of_volunteers

    @property
    def leader_function(self):
        """Gets the leader_function of this Group.

        Description not available  # noqa: E501

        :return: The leader_function of this Group.
        :rtype: List[object]
        """
        return self._leader_function

    @leader_function.setter
    def leader_function(self, leader_function):
        """Sets the leader_function of this Group.

        Description not available  # noqa: E501

        :param leader_function: The leader_function of this Group.
        :type leader_function: List[object]
        """

        self._leader_function = leader_function

    @property
    def art_patron(self):
        """Gets the art_patron of this Group.

        An influential, wealthy person who supported an artist, craftsman, a scholar or a noble.. See also  # noqa: E501

        :return: The art_patron of this Group.
        :rtype: List[object]
        """
        return self._art_patron

    @art_patron.setter
    def art_patron(self, art_patron):
        """Sets the art_patron of this Group.

        An influential, wealthy person who supported an artist, craftsman, a scholar or a noble.. See also  # noqa: E501

        :param art_patron: The art_patron of this Group.
        :type art_patron: List[object]
        """

        self._art_patron = art_patron

    @property
    def manager_season(self):
        """Gets the manager_season of this Group.

        Description not available  # noqa: E501

        :return: The manager_season of this Group.
        :rtype: List[object]
        """
        return self._manager_season

    @manager_season.setter
    def manager_season(self, manager_season):
        """Sets the manager_season of this Group.

        Description not available  # noqa: E501

        :param manager_season: The manager_season of this Group.
        :type manager_season: List[object]
        """

        self._manager_season = manager_season

    @property
    def ideology(self):
        """Gets the ideology of this Group.

        Description not available  # noqa: E501

        :return: The ideology of this Group.
        :rtype: List[object]
        """
        return self._ideology

    @ideology.setter
    def ideology(self, ideology):
        """Sets the ideology of this Group.

        Description not available  # noqa: E501

        :param ideology: The ideology of this Group.
        :type ideology: List[object]
        """

        self._ideology = ideology

    @property
    def description(self):
        """Gets the description of this Group.

        small description  # noqa: E501

        :return: The description of this Group.
        :rtype: List[str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Group.

        small description  # noqa: E501

        :param description: The description of this Group.
        :type description: List[str]
        """

        self._description = description

    @property
    def secretary_general(self):
        """Gets the secretary_general of this Group.

        Description not available  # noqa: E501

        :return: The secretary_general of this Group.
        :rtype: List[object]
        """
        return self._secretary_general

    @secretary_general.setter
    def secretary_general(self, secretary_general):
        """Sets the secretary_general of this Group.

        Description not available  # noqa: E501

        :param secretary_general: The secretary_general of this Group.
        :type secretary_general: List[object]
        """

        self._secretary_general = secretary_general

    @property
    def membership(self):
        """Gets the membership of this Group.

        Description not available  # noqa: E501

        :return: The membership of this Group.
        :rtype: List[str]
        """
        return self._membership

    @membership.setter
    def membership(self, membership):
        """Sets the membership of this Group.

        Description not available  # noqa: E501

        :param membership: The membership of this Group.
        :type membership: List[str]
        """

        self._membership = membership

    @property
    def number_of_locations(self):
        """Gets the number_of_locations of this Group.

        Description not available  # noqa: E501

        :return: The number_of_locations of this Group.
        :rtype: List[int]
        """
        return self._number_of_locations

    @number_of_locations.setter
    def number_of_locations(self, number_of_locations):
        """Sets the number_of_locations of this Group.

        Description not available  # noqa: E501

        :param number_of_locations: The number_of_locations of this Group.
        :type number_of_locations: List[int]
        """

        self._number_of_locations = number_of_locations

    @property
    def discipline(self):
        """Gets the discipline of this Group.

        Description not available  # noqa: E501

        :return: The discipline of this Group.
        :rtype: List[object]
        """
        return self._discipline

    @discipline.setter
    def discipline(self, discipline):
        """Sets the discipline of this Group.

        Description not available  # noqa: E501

        :param discipline: The discipline of this Group.
        :type discipline: List[object]
        """

        self._discipline = discipline

    @property
    def type(self):
        """Gets the type of this Group.

        type of the resource  # noqa: E501

        :return: The type of this Group.
        :rtype: List[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Group.

        type of the resource  # noqa: E501

        :param type: The type of this Group.
        :type type: List[str]
        """

        self._type = type

    @property
    def ceo(self):
        """Gets the ceo of this Group.

        Description not available  # noqa: E501

        :return: The ceo of this Group.
        :rtype: List[object]
        """
        return self._ceo

    @ceo.setter
    def ceo(self, ceo):
        """Sets the ceo of this Group.

        Description not available  # noqa: E501

        :param ceo: The ceo of this Group.
        :type ceo: List[object]
        """

        self._ceo = ceo

    @property
    def formation_year(self):
        """Gets the formation_year of this Group.

        Description not available  # noqa: E501

        :return: The formation_year of this Group.
        :rtype: List[str]
        """
        return self._formation_year

    @formation_year.setter
    def formation_year(self, formation_year):
        """Sets the formation_year of this Group.

        Description not available  # noqa: E501

        :param formation_year: The formation_year of this Group.
        :type formation_year: List[str]
        """

        self._formation_year = formation_year

    @property
    def junior_season(self):
        """Gets the junior_season of this Group.

        Description not available  # noqa: E501

        :return: The junior_season of this Group.
        :rtype: List[object]
        """
        return self._junior_season

    @junior_season.setter
    def junior_season(self, junior_season):
        """Sets the junior_season of this Group.

        Description not available  # noqa: E501

        :param junior_season: The junior_season of this Group.
        :type junior_season: List[object]
        """

        self._junior_season = junior_season

    @property
    def revenue(self):
        """Gets the revenue of this Group.

        Description not available  # noqa: E501

        :return: The revenue of this Group.
        :rtype: List[float]
        """
        return self._revenue

    @revenue.setter
    def revenue(self, revenue):
        """Sets the revenue of this Group.

        Description not available  # noqa: E501

        :param revenue: The revenue of this Group.
        :type revenue: List[float]
        """

        self._revenue = revenue

    @property
    def affiliation(self):
        """Gets the affiliation of this Group.

        Description not available  # noqa: E501

        :return: The affiliation of this Group.
        :rtype: List[object]
        """
        return self._affiliation

    @affiliation.setter
    def affiliation(self, affiliation):
        """Sets the affiliation of this Group.

        Description not available  # noqa: E501

        :param affiliation: The affiliation of this Group.
        :type affiliation: List[object]
        """

        self._affiliation = affiliation

    @property
    def headquarter(self):
        """Gets the headquarter of this Group.

        Description not available  # noqa: E501

        :return: The headquarter of this Group.
        :rtype: List[object]
        """
        return self._headquarter

    @headquarter.setter
    def headquarter(self, headquarter):
        """Sets the headquarter of this Group.

        Description not available  # noqa: E501

        :param headquarter: The headquarter of this Group.
        :type headquarter: List[object]
        """

        self._headquarter = headquarter

    @property
    def extinction_year(self):
        """Gets the extinction_year of this Group.

        Description not available  # noqa: E501

        :return: The extinction_year of this Group.
        :rtype: List[str]
        """
        return self._extinction_year

    @extinction_year.setter
    def extinction_year(self, extinction_year):
        """Sets the extinction_year of this Group.

        Description not available  # noqa: E501

        :param extinction_year: The extinction_year of this Group.
        :type extinction_year: List[str]
        """

        self._extinction_year = extinction_year

    @property
    def child_organisation(self):
        """Gets the child_organisation of this Group.

        Description not available  # noqa: E501

        :return: The child_organisation of this Group.
        :rtype: List[object]
        """
        return self._child_organisation

    @child_organisation.setter
    def child_organisation(self, child_organisation):
        """Sets the child_organisation of this Group.

        Description not available  # noqa: E501

        :param child_organisation: The child_organisation of this Group.
        :type child_organisation: List[object]
        """

        self._child_organisation = child_organisation

    @property
    def season(self):
        """Gets the season of this Group.

        Description not available  # noqa: E501

        :return: The season of this Group.
        :rtype: List[object]
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this Group.

        Description not available  # noqa: E501

        :param season: The season of this Group.
        :type season: List[object]
        """

        self._season = season

    @property
    def honours(self):
        """Gets the honours of this Group.

        Description not available  # noqa: E501

        :return: The honours of this Group.
        :rtype: List[object]
        """
        return self._honours

    @honours.setter
    def honours(self, honours):
        """Sets the honours of this Group.

        Description not available  # noqa: E501

        :param honours: The honours of this Group.
        :type honours: List[object]
        """

        self._honours = honours

    @property
    def id(self):
        """Gets the id of this Group.

        identifier  # noqa: E501

        :return: The id of this Group.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Group.

        identifier  # noqa: E501

        :param id: The id of this Group.
        :type id: str
        """

        self._id = id

    @property
    def parent_organisation(self):
        """Gets the parent_organisation of this Group.

        Description not available  # noqa: E501

        :return: The parent_organisation of this Group.
        :rtype: List[object]
        """
        return self._parent_organisation

    @parent_organisation.setter
    def parent_organisation(self, parent_organisation):
        """Sets the parent_organisation of this Group.

        Description not available  # noqa: E501

        :param parent_organisation: The parent_organisation of this Group.
        :type parent_organisation: List[object]
        """

        self._parent_organisation = parent_organisation

    @property
    def organisation_member(self):
        """Gets the organisation_member of this Group.

        Identify the members of an organisation.  # noqa: E501

        :return: The organisation_member of this Group.
        :rtype: List[object]
        """
        return self._organisation_member

    @organisation_member.setter
    def organisation_member(self, organisation_member):
        """Sets the organisation_member of this Group.

        Identify the members of an organisation.  # noqa: E501

        :param organisation_member: The organisation_member of this Group.
        :type organisation_member: List[object]
        """

        self._organisation_member = organisation_member

    @property
    def nla_id(self):
        """Gets the nla_id of this Group.

        NLA Trove’s People and Organisation view allows the discovery of biographical and other contextual information about people and organisations. Search also available via VIAF.  # noqa: E501

        :return: The nla_id of this Group.
        :rtype: List[str]
        """
        return self._nla_id

    @nla_id.setter
    def nla_id(self, nla_id):
        """Sets the nla_id of this Group.

        NLA Trove’s People and Organisation view allows the discovery of biographical and other contextual information about people and organisations. Search also available via VIAF.  # noqa: E501

        :param nla_id: The nla_id of this Group.
        :type nla_id: List[str]
        """

        self._nla_id = nla_id

    @property
    def chairperson(self):
        """Gets the chairperson of this Group.

        Description not available  # noqa: E501

        :return: The chairperson of this Group.
        :rtype: List[object]
        """
        return self._chairperson

    @chairperson.setter
    def chairperson(self, chairperson):
        """Sets the chairperson of this Group.

        Description not available  # noqa: E501

        :param chairperson: The chairperson of this Group.
        :type chairperson: List[object]
        """

        self._chairperson = chairperson

    @property
    def number_of_staff(self):
        """Gets the number_of_staff of this Group.

        Description not available  # noqa: E501

        :return: The number_of_staff of this Group.
        :rtype: List[int]
        """
        return self._number_of_staff

    @number_of_staff.setter
    def number_of_staff(self, number_of_staff):
        """Sets the number_of_staff of this Group.

        Description not available  # noqa: E501

        :param number_of_staff: The number_of_staff of this Group.
        :type number_of_staff: List[int]
        """

        self._number_of_staff = number_of_staff

    @property
    def product(self):
        """Gets the product of this Group.

        Description not available  # noqa: E501

        :return: The product of this Group.
        :rtype: List[object]
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this Group.

        Description not available  # noqa: E501

        :param product: The product of this Group.
        :type product: List[object]
        """

        self._product = product

    @property
    def hometown(self):
        """Gets the hometown of this Group.

        Description not available  # noqa: E501

        :return: The hometown of this Group.
        :rtype: List[object]
        """
        return self._hometown

    @hometown.setter
    def hometown(self, hometown):
        """Sets the hometown of this Group.

        Description not available  # noqa: E501

        :param hometown: The hometown of this Group.
        :type hometown: List[object]
        """

        self._hometown = hometown

    @property
    def region_served(self):
        """Gets the region_served of this Group.

        Description not available  # noqa: E501

        :return: The region_served of this Group.
        :rtype: List[object]
        """
        return self._region_served

    @region_served.setter
    def region_served(self, region_served):
        """Sets the region_served of this Group.

        Description not available  # noqa: E501

        :param region_served: The region_served of this Group.
        :type region_served: List[object]
        """

        self._region_served = region_served

    @property
    def foundation_place(self):
        """Gets the foundation_place of this Group.

        Description not available  # noqa: E501

        :return: The foundation_place of this Group.
        :rtype: List[object]
        """
        return self._foundation_place

    @foundation_place.setter
    def foundation_place(self, foundation_place):
        """Sets the foundation_place of this Group.

        Description not available  # noqa: E501

        :param foundation_place: The foundation_place of this Group.
        :type foundation_place: List[object]
        """

        self._foundation_place = foundation_place

    @property
    def national_selection(self):
        """Gets the national_selection of this Group.

        Description not available  # noqa: E501

        :return: The national_selection of this Group.
        :rtype: List[object]
        """
        return self._national_selection

    @national_selection.setter
    def national_selection(self, national_selection):
        """Sets the national_selection of this Group.

        Description not available  # noqa: E501

        :param national_selection: The national_selection of this Group.
        :type national_selection: List[object]
        """

        self._national_selection = national_selection

    @property
    def superintendent(self):
        """Gets the superintendent of this Group.

        Description not available  # noqa: E501

        :return: The superintendent of this Group.
        :rtype: List[object]
        """
        return self._superintendent

    @superintendent.setter
    def superintendent(self, superintendent):
        """Sets the superintendent of this Group.

        Description not available  # noqa: E501

        :param superintendent: The superintendent of this Group.
        :type superintendent: List[object]
        """

        self._superintendent = superintendent

    @property
    def formation_date(self):
        """Gets the formation_date of this Group.

        Description not available  # noqa: E501

        :return: The formation_date of this Group.
        :rtype: List[str]
        """
        return self._formation_date

    @formation_date.setter
    def formation_date(self, formation_date):
        """Sets the formation_date of this Group.

        Description not available  # noqa: E501

        :param formation_date: The formation_date of this Group.
        :type formation_date: List[str]
        """

        self._formation_date = formation_date

    @property
    def label(self):
        """Gets the label of this Group.

        short description of the resource  # noqa: E501

        :return: The label of this Group.
        :rtype: List[str]
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Group.

        short description of the resource  # noqa: E501

        :param label: The label of this Group.
        :type label: List[str]
        """

        self._label = label

    @property
    def legal_form(self):
        """Gets the legal_form of this Group.

        There are many types of business entity defined in the legal systems of various countries. These include corporations, cooperatives, partnerships, sole traders, limited liability company and other specialized types of organization.  # noqa: E501

        :return: The legal_form of this Group.
        :rtype: List[object]
        """
        return self._legal_form

    @legal_form.setter
    def legal_form(self, legal_form):
        """Sets the legal_form of this Group.

        There are many types of business entity defined in the legal systems of various countries. These include corporations, cooperatives, partnerships, sole traders, limited liability company and other specialized types of organization.  # noqa: E501

        :param legal_form: The legal_form of this Group.
        :type legal_form: List[object]
        """

        self._legal_form = legal_form

    @property
    def number_of_employees(self):
        """Gets the number_of_employees of this Group.

        Description not available  # noqa: E501

        :return: The number_of_employees of this Group.
        :rtype: List[int]
        """
        return self._number_of_employees

    @number_of_employees.setter
    def number_of_employees(self, number_of_employees):
        """Sets the number_of_employees of this Group.

        Description not available  # noqa: E501

        :param number_of_employees: The number_of_employees of this Group.
        :type number_of_employees: List[int]
        """

        self._number_of_employees = number_of_employees

    @property
    def extinction_date(self):
        """Gets the extinction_date of this Group.

        Description not available  # noqa: E501

        :return: The extinction_date of this Group.
        :rtype: List[str]
        """
        return self._extinction_date

    @extinction_date.setter
    def extinction_date(self, extinction_date):
        """Sets the extinction_date of this Group.

        Description not available  # noqa: E501

        :param extinction_date: The extinction_date of this Group.
        :type extinction_date: List[str]
        """

        self._extinction_date = extinction_date

    @property
    def general_council(self):
        """Gets the general_council of this Group.

        Description not available  # noqa: E501

        :return: The general_council of this Group.
        :rtype: List[object]
        """
        return self._general_council

    @general_council.setter
    def general_council(self, general_council):
        """Sets the general_council of this Group.

        Description not available  # noqa: E501

        :param general_council: The general_council of this Group.
        :type general_council: List[object]
        """

        self._general_council = general_council

    @property
    def player_season(self):
        """Gets the player_season of this Group.

        Description not available  # noqa: E501

        :return: The player_season of this Group.
        :rtype: List[object]
        """
        return self._player_season

    @player_season.setter
    def player_season(self, player_season):
        """Sets the player_season of this Group.

        Description not available  # noqa: E501

        :param player_season: The player_season of this Group.
        :type player_season: List[object]
        """

        self._player_season = player_season

    @property
    def trustee(self):
        """Gets the trustee of this Group.

        Description not available  # noqa: E501

        :return: The trustee of this Group.
        :rtype: List[object]
        """
        return self._trustee

    @trustee.setter
    def trustee(self, trustee):
        """Sets the trustee of this Group.

        Description not available  # noqa: E501

        :param trustee: The trustee of this Group.
        :type trustee: List[object]
        """

        self._trustee = trustee

    @property
    def endowment(self):
        """Gets the endowment of this Group.

        Description not available  # noqa: E501

        :return: The endowment of this Group.
        :rtype: List[float]
        """
        return self._endowment

    @endowment.setter
    def endowment(self, endowment):
        """Sets the endowment of this Group.

        Description not available  # noqa: E501

        :param endowment: The endowment of this Group.
        :type endowment: List[float]
        """

        self._endowment = endowment

    @property
    def slogan(self):
        """Gets the slogan of this Group.

        Description not available  # noqa: E501

        :return: The slogan of this Group.
        :rtype: List[str]
        """
        return self._slogan

    @slogan.setter
    def slogan(self, slogan):
        """Sets the slogan of this Group.

        Description not available  # noqa: E501

        :param slogan: The slogan of this Group.
        :type slogan: List[str]
        """

        self._slogan = slogan

    @property
    def regional_council(self):
        """Gets the regional_council of this Group.

        Description not available  # noqa: E501

        :return: The regional_council of this Group.
        :rtype: List[object]
        """
        return self._regional_council

    @regional_council.setter
    def regional_council(self, regional_council):
        """Sets the regional_council of this Group.

        Description not available  # noqa: E501

        :param regional_council: The regional_council of this Group.
        :type regional_council: List[object]
        """

        self._regional_council = regional_council

    @property
    def age(self):
        """Gets the age of this Group.

        Description not available  # noqa: E501

        :return: The age of this Group.
        :rtype: List[int]
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this Group.

        Description not available  # noqa: E501

        :param age: The age of this Group.
        :type age: List[int]
        """

        self._age = age

    @property
    def location_city(self):
        """Gets the location_city of this Group.

        City the thing is located.  # noqa: E501

        :return: The location_city of this Group.
        :rtype: List[object]
        """
        return self._location_city

    @location_city.setter
    def location_city(self, location_city):
        """Sets the location_city of this Group.

        City the thing is located.  # noqa: E501

        :param location_city: The location_city of this Group.
        :type location_city: List[object]
        """

        self._location_city = location_city

    @property
    def main_organ(self):
        """Gets the main_organ of this Group.

        Description not available  # noqa: E501

        :return: The main_organ of this Group.
        :rtype: List[object]
        """
        return self._main_organ

    @main_organ.setter
    def main_organ(self, main_organ):
        """Sets the main_organ of this Group.

        Description not available  # noqa: E501

        :param main_organ: The main_organ of this Group.
        :type main_organ: List[object]
        """

        self._main_organ = main_organ
