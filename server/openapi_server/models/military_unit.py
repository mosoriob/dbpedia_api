# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class MilitaryUnit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, viaf_id=None, notable_commander=None, leader_function=None, aircraft_trainer=None, art_patron=None, manager_season=None, secretary_general=None, number_of_locations=None, discipline=None, type=None, aircraft_patrol=None, revenue=None, aircraft_interceptor=None, battle_honours=None, affiliation=None, aircraft_recon=None, fourth_commander=None, aircraft_helicopter_attack=None, season=None, id=None, nla_id=None, chairperson=None, region_served=None, superintendent=None, formation_date=None, aircraft_helicopter_utility=None, third_commander=None, number_of_employees=None, extinction_date=None, aircraft_helicopter_cargo=None, aircraft_electronic=None, player_season=None, endowment=None, slogan=None, regional_council=None, location_city=None, number_of_volunteers=None, ideology=None, identification_symbol=None, description=None, membership=None, ceo=None, formation_year=None, junior_season=None, headquarter=None, extinction_year=None, child_organisation=None, honours=None, parent_organisation=None, aircraft_fighter=None, organisation_member=None, aircraft_transport=None, number_of_staff=None, product=None, patron=None, hometown=None, foundation_place=None, national_selection=None, aircraft_helicopter=None, aircraft_helicopter_multirole=None, disbanded=None, flying_hours=None, label=None, aircraft_helicopter_transport=None, legal_form=None, march=None, command_structure=None, second_commander=None, aircraft_bomber=None, garrison=None, general_council=None, trustee=None, aircraft_attack=None, age=None, anniversary=None, main_organ=None, aircraft_helicopter_observation=None):  # noqa: E501
        """MilitaryUnit - a model defined in OpenAPI

        :param viaf_id: The viaf_id of this MilitaryUnit.  # noqa: E501
        :type viaf_id: List[str]
        :param notable_commander: The notable_commander of this MilitaryUnit.  # noqa: E501
        :type notable_commander: List[object]
        :param leader_function: The leader_function of this MilitaryUnit.  # noqa: E501
        :type leader_function: List[object]
        :param aircraft_trainer: The aircraft_trainer of this MilitaryUnit.  # noqa: E501
        :type aircraft_trainer: List[object]
        :param art_patron: The art_patron of this MilitaryUnit.  # noqa: E501
        :type art_patron: List[object]
        :param manager_season: The manager_season of this MilitaryUnit.  # noqa: E501
        :type manager_season: List[object]
        :param secretary_general: The secretary_general of this MilitaryUnit.  # noqa: E501
        :type secretary_general: List[object]
        :param number_of_locations: The number_of_locations of this MilitaryUnit.  # noqa: E501
        :type number_of_locations: List[int]
        :param discipline: The discipline of this MilitaryUnit.  # noqa: E501
        :type discipline: List[object]
        :param type: The type of this MilitaryUnit.  # noqa: E501
        :type type: List[str]
        :param aircraft_patrol: The aircraft_patrol of this MilitaryUnit.  # noqa: E501
        :type aircraft_patrol: List[object]
        :param revenue: The revenue of this MilitaryUnit.  # noqa: E501
        :type revenue: List[float]
        :param aircraft_interceptor: The aircraft_interceptor of this MilitaryUnit.  # noqa: E501
        :type aircraft_interceptor: List[object]
        :param battle_honours: The battle_honours of this MilitaryUnit.  # noqa: E501
        :type battle_honours: List[str]
        :param affiliation: The affiliation of this MilitaryUnit.  # noqa: E501
        :type affiliation: List[object]
        :param aircraft_recon: The aircraft_recon of this MilitaryUnit.  # noqa: E501
        :type aircraft_recon: List[object]
        :param fourth_commander: The fourth_commander of this MilitaryUnit.  # noqa: E501
        :type fourth_commander: List[object]
        :param aircraft_helicopter_attack: The aircraft_helicopter_attack of this MilitaryUnit.  # noqa: E501
        :type aircraft_helicopter_attack: List[object]
        :param season: The season of this MilitaryUnit.  # noqa: E501
        :type season: List[object]
        :param id: The id of this MilitaryUnit.  # noqa: E501
        :type id: str
        :param nla_id: The nla_id of this MilitaryUnit.  # noqa: E501
        :type nla_id: List[str]
        :param chairperson: The chairperson of this MilitaryUnit.  # noqa: E501
        :type chairperson: List[object]
        :param region_served: The region_served of this MilitaryUnit.  # noqa: E501
        :type region_served: List[object]
        :param superintendent: The superintendent of this MilitaryUnit.  # noqa: E501
        :type superintendent: List[object]
        :param formation_date: The formation_date of this MilitaryUnit.  # noqa: E501
        :type formation_date: List[str]
        :param aircraft_helicopter_utility: The aircraft_helicopter_utility of this MilitaryUnit.  # noqa: E501
        :type aircraft_helicopter_utility: List[object]
        :param third_commander: The third_commander of this MilitaryUnit.  # noqa: E501
        :type third_commander: List[object]
        :param number_of_employees: The number_of_employees of this MilitaryUnit.  # noqa: E501
        :type number_of_employees: List[int]
        :param extinction_date: The extinction_date of this MilitaryUnit.  # noqa: E501
        :type extinction_date: List[str]
        :param aircraft_helicopter_cargo: The aircraft_helicopter_cargo of this MilitaryUnit.  # noqa: E501
        :type aircraft_helicopter_cargo: List[object]
        :param aircraft_electronic: The aircraft_electronic of this MilitaryUnit.  # noqa: E501
        :type aircraft_electronic: List[object]
        :param player_season: The player_season of this MilitaryUnit.  # noqa: E501
        :type player_season: List[object]
        :param endowment: The endowment of this MilitaryUnit.  # noqa: E501
        :type endowment: List[float]
        :param slogan: The slogan of this MilitaryUnit.  # noqa: E501
        :type slogan: List[str]
        :param regional_council: The regional_council of this MilitaryUnit.  # noqa: E501
        :type regional_council: List[object]
        :param location_city: The location_city of this MilitaryUnit.  # noqa: E501
        :type location_city: List[object]
        :param number_of_volunteers: The number_of_volunteers of this MilitaryUnit.  # noqa: E501
        :type number_of_volunteers: List[int]
        :param ideology: The ideology of this MilitaryUnit.  # noqa: E501
        :type ideology: List[object]
        :param identification_symbol: The identification_symbol of this MilitaryUnit.  # noqa: E501
        :type identification_symbol: List[str]
        :param description: The description of this MilitaryUnit.  # noqa: E501
        :type description: List[str]
        :param membership: The membership of this MilitaryUnit.  # noqa: E501
        :type membership: List[str]
        :param ceo: The ceo of this MilitaryUnit.  # noqa: E501
        :type ceo: List[object]
        :param formation_year: The formation_year of this MilitaryUnit.  # noqa: E501
        :type formation_year: List[str]
        :param junior_season: The junior_season of this MilitaryUnit.  # noqa: E501
        :type junior_season: List[object]
        :param headquarter: The headquarter of this MilitaryUnit.  # noqa: E501
        :type headquarter: List[object]
        :param extinction_year: The extinction_year of this MilitaryUnit.  # noqa: E501
        :type extinction_year: List[str]
        :param child_organisation: The child_organisation of this MilitaryUnit.  # noqa: E501
        :type child_organisation: List[object]
        :param honours: The honours of this MilitaryUnit.  # noqa: E501
        :type honours: List[object]
        :param parent_organisation: The parent_organisation of this MilitaryUnit.  # noqa: E501
        :type parent_organisation: List[object]
        :param aircraft_fighter: The aircraft_fighter of this MilitaryUnit.  # noqa: E501
        :type aircraft_fighter: List[object]
        :param organisation_member: The organisation_member of this MilitaryUnit.  # noqa: E501
        :type organisation_member: List[object]
        :param aircraft_transport: The aircraft_transport of this MilitaryUnit.  # noqa: E501
        :type aircraft_transport: List[object]
        :param number_of_staff: The number_of_staff of this MilitaryUnit.  # noqa: E501
        :type number_of_staff: List[int]
        :param product: The product of this MilitaryUnit.  # noqa: E501
        :type product: List[object]
        :param patron: The patron of this MilitaryUnit.  # noqa: E501
        :type patron: List[object]
        :param hometown: The hometown of this MilitaryUnit.  # noqa: E501
        :type hometown: List[object]
        :param foundation_place: The foundation_place of this MilitaryUnit.  # noqa: E501
        :type foundation_place: List[object]
        :param national_selection: The national_selection of this MilitaryUnit.  # noqa: E501
        :type national_selection: List[object]
        :param aircraft_helicopter: The aircraft_helicopter of this MilitaryUnit.  # noqa: E501
        :type aircraft_helicopter: List[object]
        :param aircraft_helicopter_multirole: The aircraft_helicopter_multirole of this MilitaryUnit.  # noqa: E501
        :type aircraft_helicopter_multirole: List[object]
        :param disbanded: The disbanded of this MilitaryUnit.  # noqa: E501
        :type disbanded: List[str]
        :param flying_hours: The flying_hours of this MilitaryUnit.  # noqa: E501
        :type flying_hours: List[float]
        :param label: The label of this MilitaryUnit.  # noqa: E501
        :type label: List[str]
        :param aircraft_helicopter_transport: The aircraft_helicopter_transport of this MilitaryUnit.  # noqa: E501
        :type aircraft_helicopter_transport: List[object]
        :param legal_form: The legal_form of this MilitaryUnit.  # noqa: E501
        :type legal_form: List[object]
        :param march: The march of this MilitaryUnit.  # noqa: E501
        :type march: List[object]
        :param command_structure: The command_structure of this MilitaryUnit.  # noqa: E501
        :type command_structure: List[object]
        :param second_commander: The second_commander of this MilitaryUnit.  # noqa: E501
        :type second_commander: List[object]
        :param aircraft_bomber: The aircraft_bomber of this MilitaryUnit.  # noqa: E501
        :type aircraft_bomber: List[object]
        :param garrison: The garrison of this MilitaryUnit.  # noqa: E501
        :type garrison: List[object]
        :param general_council: The general_council of this MilitaryUnit.  # noqa: E501
        :type general_council: List[object]
        :param trustee: The trustee of this MilitaryUnit.  # noqa: E501
        :type trustee: List[object]
        :param aircraft_attack: The aircraft_attack of this MilitaryUnit.  # noqa: E501
        :type aircraft_attack: List[object]
        :param age: The age of this MilitaryUnit.  # noqa: E501
        :type age: List[int]
        :param anniversary: The anniversary of this MilitaryUnit.  # noqa: E501
        :type anniversary: List[str]
        :param main_organ: The main_organ of this MilitaryUnit.  # noqa: E501
        :type main_organ: List[object]
        :param aircraft_helicopter_observation: The aircraft_helicopter_observation of this MilitaryUnit.  # noqa: E501
        :type aircraft_helicopter_observation: List[object]
        """


        self.openapi_types = {
            'viaf_id': List[str],
            'notable_commander': List[object],
            'leader_function': List[object],
            'aircraft_trainer': List[object],
            'art_patron': List[object],
            'manager_season': List[object],
            'secretary_general': List[object],
            'number_of_locations': List[int],
            'discipline': List[object],
            'type': List[str],
            'aircraft_patrol': List[object],
            'revenue': List[float],
            'aircraft_interceptor': List[object],
            'battle_honours': List[str],
            'affiliation': List[object],
            'aircraft_recon': List[object],
            'fourth_commander': List[object],
            'aircraft_helicopter_attack': List[object],
            'season': List[object],
            'id': str,
            'nla_id': List[str],
            'chairperson': List[object],
            'region_served': List[object],
            'superintendent': List[object],
            'formation_date': List[str],
            'aircraft_helicopter_utility': List[object],
            'third_commander': List[object],
            'number_of_employees': List[int],
            'extinction_date': List[str],
            'aircraft_helicopter_cargo': List[object],
            'aircraft_electronic': List[object],
            'player_season': List[object],
            'endowment': List[float],
            'slogan': List[str],
            'regional_council': List[object],
            'location_city': List[object],
            'number_of_volunteers': List[int],
            'ideology': List[object],
            'identification_symbol': List[str],
            'description': List[str],
            'membership': List[str],
            'ceo': List[object],
            'formation_year': List[str],
            'junior_season': List[object],
            'headquarter': List[object],
            'extinction_year': List[str],
            'child_organisation': List[object],
            'honours': List[object],
            'parent_organisation': List[object],
            'aircraft_fighter': List[object],
            'organisation_member': List[object],
            'aircraft_transport': List[object],
            'number_of_staff': List[int],
            'product': List[object],
            'patron': List[object],
            'hometown': List[object],
            'foundation_place': List[object],
            'national_selection': List[object],
            'aircraft_helicopter': List[object],
            'aircraft_helicopter_multirole': List[object],
            'disbanded': List[str],
            'flying_hours': List[float],
            'label': List[str],
            'aircraft_helicopter_transport': List[object],
            'legal_form': List[object],
            'march': List[object],
            'command_structure': List[object],
            'second_commander': List[object],
            'aircraft_bomber': List[object],
            'garrison': List[object],
            'general_council': List[object],
            'trustee': List[object],
            'aircraft_attack': List[object],
            'age': List[int],
            'anniversary': List[str],
            'main_organ': List[object],
            'aircraft_helicopter_observation': List[object]
        }

        self.attribute_map = {
            'viaf_id': 'viafId',
            'notable_commander': 'notableCommander',
            'leader_function': 'leaderFunction',
            'aircraft_trainer': 'aircraftTrainer',
            'art_patron': 'artPatron',
            'manager_season': 'managerSeason',
            'secretary_general': 'secretaryGeneral',
            'number_of_locations': 'numberOfLocations',
            'discipline': 'discipline',
            'type': 'type',
            'aircraft_patrol': 'aircraftPatrol',
            'revenue': 'revenue',
            'aircraft_interceptor': 'aircraftInterceptor',
            'battle_honours': 'battleHonours',
            'affiliation': 'affiliation',
            'aircraft_recon': 'aircraftRecon',
            'fourth_commander': 'fourthCommander',
            'aircraft_helicopter_attack': 'aircraftHelicopterAttack',
            'season': 'season',
            'id': 'id',
            'nla_id': 'nlaId',
            'chairperson': 'chairperson',
            'region_served': 'regionServed',
            'superintendent': 'superintendent',
            'formation_date': 'formationDate',
            'aircraft_helicopter_utility': 'aircraftHelicopterUtility',
            'third_commander': 'thirdCommander',
            'number_of_employees': 'numberOfEmployees',
            'extinction_date': 'extinctionDate',
            'aircraft_helicopter_cargo': 'aircraftHelicopterCargo',
            'aircraft_electronic': 'aircraftElectronic',
            'player_season': 'playerSeason',
            'endowment': 'endowment',
            'slogan': 'slogan',
            'regional_council': 'regionalCouncil',
            'location_city': 'locationCity',
            'number_of_volunteers': 'numberOfVolunteers',
            'ideology': 'ideology',
            'identification_symbol': 'identificationSymbol',
            'description': 'description',
            'membership': 'membership',
            'ceo': 'ceo',
            'formation_year': 'formationYear',
            'junior_season': 'juniorSeason',
            'headquarter': 'headquarter',
            'extinction_year': 'extinctionYear',
            'child_organisation': 'childOrganisation',
            'honours': 'honours',
            'parent_organisation': 'parentOrganisation',
            'aircraft_fighter': 'aircraftFighter',
            'organisation_member': 'organisationMember',
            'aircraft_transport': 'aircraftTransport',
            'number_of_staff': 'numberOfStaff',
            'product': 'product',
            'patron': 'patron',
            'hometown': 'hometown',
            'foundation_place': 'foundationPlace',
            'national_selection': 'nationalSelection',
            'aircraft_helicopter': 'aircraftHelicopter',
            'aircraft_helicopter_multirole': 'aircraftHelicopterMultirole',
            'disbanded': 'disbanded',
            'flying_hours': 'flyingHours',
            'label': 'label',
            'aircraft_helicopter_transport': 'aircraftHelicopterTransport',
            'legal_form': 'legalForm',
            'march': 'march',
            'command_structure': 'commandStructure',
            'second_commander': 'secondCommander',
            'aircraft_bomber': 'aircraftBomber',
            'garrison': 'garrison',
            'general_council': 'generalCouncil',
            'trustee': 'trustee',
            'aircraft_attack': 'aircraftAttack',
            'age': 'age',
            'anniversary': 'anniversary',
            'main_organ': 'mainOrgan',
            'aircraft_helicopter_observation': 'aircraftHelicopterObservation'
        }

        self._viaf_id = viaf_id
        self._notable_commander = notable_commander
        self._leader_function = leader_function
        self._aircraft_trainer = aircraft_trainer
        self._art_patron = art_patron
        self._manager_season = manager_season
        self._secretary_general = secretary_general
        self._number_of_locations = number_of_locations
        self._discipline = discipline
        self._type = type
        self._aircraft_patrol = aircraft_patrol
        self._revenue = revenue
        self._aircraft_interceptor = aircraft_interceptor
        self._battle_honours = battle_honours
        self._affiliation = affiliation
        self._aircraft_recon = aircraft_recon
        self._fourth_commander = fourth_commander
        self._aircraft_helicopter_attack = aircraft_helicopter_attack
        self._season = season
        self._id = id
        self._nla_id = nla_id
        self._chairperson = chairperson
        self._region_served = region_served
        self._superintendent = superintendent
        self._formation_date = formation_date
        self._aircraft_helicopter_utility = aircraft_helicopter_utility
        self._third_commander = third_commander
        self._number_of_employees = number_of_employees
        self._extinction_date = extinction_date
        self._aircraft_helicopter_cargo = aircraft_helicopter_cargo
        self._aircraft_electronic = aircraft_electronic
        self._player_season = player_season
        self._endowment = endowment
        self._slogan = slogan
        self._regional_council = regional_council
        self._location_city = location_city
        self._number_of_volunteers = number_of_volunteers
        self._ideology = ideology
        self._identification_symbol = identification_symbol
        self._description = description
        self._membership = membership
        self._ceo = ceo
        self._formation_year = formation_year
        self._junior_season = junior_season
        self._headquarter = headquarter
        self._extinction_year = extinction_year
        self._child_organisation = child_organisation
        self._honours = honours
        self._parent_organisation = parent_organisation
        self._aircraft_fighter = aircraft_fighter
        self._organisation_member = organisation_member
        self._aircraft_transport = aircraft_transport
        self._number_of_staff = number_of_staff
        self._product = product
        self._patron = patron
        self._hometown = hometown
        self._foundation_place = foundation_place
        self._national_selection = national_selection
        self._aircraft_helicopter = aircraft_helicopter
        self._aircraft_helicopter_multirole = aircraft_helicopter_multirole
        self._disbanded = disbanded
        self._flying_hours = flying_hours
        self._label = label
        self._aircraft_helicopter_transport = aircraft_helicopter_transport
        self._legal_form = legal_form
        self._march = march
        self._command_structure = command_structure
        self._second_commander = second_commander
        self._aircraft_bomber = aircraft_bomber
        self._garrison = garrison
        self._general_council = general_council
        self._trustee = trustee
        self._aircraft_attack = aircraft_attack
        self._age = age
        self._anniversary = anniversary
        self._main_organ = main_organ
        self._aircraft_helicopter_observation = aircraft_helicopter_observation

    @classmethod
    def from_dict(cls, dikt) -> 'MilitaryUnit':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MilitaryUnit of this MilitaryUnit.  # noqa: E501
        :rtype: MilitaryUnit
        """
        return util.deserialize_model(dikt, cls)

    @property
    def viaf_id(self):
        """Gets the viaf_id of this MilitaryUnit.

        International authority data from the Online Computer Library Center (OCLC)  # noqa: E501

        :return: The viaf_id of this MilitaryUnit.
        :rtype: List[str]
        """
        return self._viaf_id

    @viaf_id.setter
    def viaf_id(self, viaf_id):
        """Sets the viaf_id of this MilitaryUnit.

        International authority data from the Online Computer Library Center (OCLC)  # noqa: E501

        :param viaf_id: The viaf_id of this MilitaryUnit.
        :type viaf_id: List[str]
        """

        self._viaf_id = viaf_id

    @property
    def notable_commander(self):
        """Gets the notable_commander of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The notable_commander of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._notable_commander

    @notable_commander.setter
    def notable_commander(self, notable_commander):
        """Sets the notable_commander of this MilitaryUnit.

        Description not available  # noqa: E501

        :param notable_commander: The notable_commander of this MilitaryUnit.
        :type notable_commander: List[object]
        """

        self._notable_commander = notable_commander

    @property
    def leader_function(self):
        """Gets the leader_function of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The leader_function of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._leader_function

    @leader_function.setter
    def leader_function(self, leader_function):
        """Sets the leader_function of this MilitaryUnit.

        Description not available  # noqa: E501

        :param leader_function: The leader_function of this MilitaryUnit.
        :type leader_function: List[object]
        """

        self._leader_function = leader_function

    @property
    def aircraft_trainer(self):
        """Gets the aircraft_trainer of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The aircraft_trainer of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._aircraft_trainer

    @aircraft_trainer.setter
    def aircraft_trainer(self, aircraft_trainer):
        """Sets the aircraft_trainer of this MilitaryUnit.

        Description not available  # noqa: E501

        :param aircraft_trainer: The aircraft_trainer of this MilitaryUnit.
        :type aircraft_trainer: List[object]
        """

        self._aircraft_trainer = aircraft_trainer

    @property
    def art_patron(self):
        """Gets the art_patron of this MilitaryUnit.

        An influential, wealthy person who supported an artist, craftsman, a scholar or a noble.. See also  # noqa: E501

        :return: The art_patron of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._art_patron

    @art_patron.setter
    def art_patron(self, art_patron):
        """Sets the art_patron of this MilitaryUnit.

        An influential, wealthy person who supported an artist, craftsman, a scholar or a noble.. See also  # noqa: E501

        :param art_patron: The art_patron of this MilitaryUnit.
        :type art_patron: List[object]
        """

        self._art_patron = art_patron

    @property
    def manager_season(self):
        """Gets the manager_season of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The manager_season of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._manager_season

    @manager_season.setter
    def manager_season(self, manager_season):
        """Sets the manager_season of this MilitaryUnit.

        Description not available  # noqa: E501

        :param manager_season: The manager_season of this MilitaryUnit.
        :type manager_season: List[object]
        """

        self._manager_season = manager_season

    @property
    def secretary_general(self):
        """Gets the secretary_general of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The secretary_general of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._secretary_general

    @secretary_general.setter
    def secretary_general(self, secretary_general):
        """Sets the secretary_general of this MilitaryUnit.

        Description not available  # noqa: E501

        :param secretary_general: The secretary_general of this MilitaryUnit.
        :type secretary_general: List[object]
        """

        self._secretary_general = secretary_general

    @property
    def number_of_locations(self):
        """Gets the number_of_locations of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The number_of_locations of this MilitaryUnit.
        :rtype: List[int]
        """
        return self._number_of_locations

    @number_of_locations.setter
    def number_of_locations(self, number_of_locations):
        """Sets the number_of_locations of this MilitaryUnit.

        Description not available  # noqa: E501

        :param number_of_locations: The number_of_locations of this MilitaryUnit.
        :type number_of_locations: List[int]
        """

        self._number_of_locations = number_of_locations

    @property
    def discipline(self):
        """Gets the discipline of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The discipline of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._discipline

    @discipline.setter
    def discipline(self, discipline):
        """Sets the discipline of this MilitaryUnit.

        Description not available  # noqa: E501

        :param discipline: The discipline of this MilitaryUnit.
        :type discipline: List[object]
        """

        self._discipline = discipline

    @property
    def type(self):
        """Gets the type of this MilitaryUnit.

        type of the resource  # noqa: E501

        :return: The type of this MilitaryUnit.
        :rtype: List[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MilitaryUnit.

        type of the resource  # noqa: E501

        :param type: The type of this MilitaryUnit.
        :type type: List[str]
        """

        self._type = type

    @property
    def aircraft_patrol(self):
        """Gets the aircraft_patrol of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The aircraft_patrol of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._aircraft_patrol

    @aircraft_patrol.setter
    def aircraft_patrol(self, aircraft_patrol):
        """Sets the aircraft_patrol of this MilitaryUnit.

        Description not available  # noqa: E501

        :param aircraft_patrol: The aircraft_patrol of this MilitaryUnit.
        :type aircraft_patrol: List[object]
        """

        self._aircraft_patrol = aircraft_patrol

    @property
    def revenue(self):
        """Gets the revenue of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The revenue of this MilitaryUnit.
        :rtype: List[float]
        """
        return self._revenue

    @revenue.setter
    def revenue(self, revenue):
        """Sets the revenue of this MilitaryUnit.

        Description not available  # noqa: E501

        :param revenue: The revenue of this MilitaryUnit.
        :type revenue: List[float]
        """

        self._revenue = revenue

    @property
    def aircraft_interceptor(self):
        """Gets the aircraft_interceptor of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The aircraft_interceptor of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._aircraft_interceptor

    @aircraft_interceptor.setter
    def aircraft_interceptor(self, aircraft_interceptor):
        """Sets the aircraft_interceptor of this MilitaryUnit.

        Description not available  # noqa: E501

        :param aircraft_interceptor: The aircraft_interceptor of this MilitaryUnit.
        :type aircraft_interceptor: List[object]
        """

        self._aircraft_interceptor = aircraft_interceptor

    @property
    def battle_honours(self):
        """Gets the battle_honours of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The battle_honours of this MilitaryUnit.
        :rtype: List[str]
        """
        return self._battle_honours

    @battle_honours.setter
    def battle_honours(self, battle_honours):
        """Sets the battle_honours of this MilitaryUnit.

        Description not available  # noqa: E501

        :param battle_honours: The battle_honours of this MilitaryUnit.
        :type battle_honours: List[str]
        """

        self._battle_honours = battle_honours

    @property
    def affiliation(self):
        """Gets the affiliation of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The affiliation of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._affiliation

    @affiliation.setter
    def affiliation(self, affiliation):
        """Sets the affiliation of this MilitaryUnit.

        Description not available  # noqa: E501

        :param affiliation: The affiliation of this MilitaryUnit.
        :type affiliation: List[object]
        """

        self._affiliation = affiliation

    @property
    def aircraft_recon(self):
        """Gets the aircraft_recon of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The aircraft_recon of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._aircraft_recon

    @aircraft_recon.setter
    def aircraft_recon(self, aircraft_recon):
        """Sets the aircraft_recon of this MilitaryUnit.

        Description not available  # noqa: E501

        :param aircraft_recon: The aircraft_recon of this MilitaryUnit.
        :type aircraft_recon: List[object]
        """

        self._aircraft_recon = aircraft_recon

    @property
    def fourth_commander(self):
        """Gets the fourth_commander of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The fourth_commander of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._fourth_commander

    @fourth_commander.setter
    def fourth_commander(self, fourth_commander):
        """Sets the fourth_commander of this MilitaryUnit.

        Description not available  # noqa: E501

        :param fourth_commander: The fourth_commander of this MilitaryUnit.
        :type fourth_commander: List[object]
        """

        self._fourth_commander = fourth_commander

    @property
    def aircraft_helicopter_attack(self):
        """Gets the aircraft_helicopter_attack of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The aircraft_helicopter_attack of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._aircraft_helicopter_attack

    @aircraft_helicopter_attack.setter
    def aircraft_helicopter_attack(self, aircraft_helicopter_attack):
        """Sets the aircraft_helicopter_attack of this MilitaryUnit.

        Description not available  # noqa: E501

        :param aircraft_helicopter_attack: The aircraft_helicopter_attack of this MilitaryUnit.
        :type aircraft_helicopter_attack: List[object]
        """

        self._aircraft_helicopter_attack = aircraft_helicopter_attack

    @property
    def season(self):
        """Gets the season of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The season of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this MilitaryUnit.

        Description not available  # noqa: E501

        :param season: The season of this MilitaryUnit.
        :type season: List[object]
        """

        self._season = season

    @property
    def id(self):
        """Gets the id of this MilitaryUnit.

        identifier  # noqa: E501

        :return: The id of this MilitaryUnit.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MilitaryUnit.

        identifier  # noqa: E501

        :param id: The id of this MilitaryUnit.
        :type id: str
        """

        self._id = id

    @property
    def nla_id(self):
        """Gets the nla_id of this MilitaryUnit.

        NLA Trove’s People and Organisation view allows the discovery of biographical and other contextual information about people and organisations. Search also available via VIAF.  # noqa: E501

        :return: The nla_id of this MilitaryUnit.
        :rtype: List[str]
        """
        return self._nla_id

    @nla_id.setter
    def nla_id(self, nla_id):
        """Sets the nla_id of this MilitaryUnit.

        NLA Trove’s People and Organisation view allows the discovery of biographical and other contextual information about people and organisations. Search also available via VIAF.  # noqa: E501

        :param nla_id: The nla_id of this MilitaryUnit.
        :type nla_id: List[str]
        """

        self._nla_id = nla_id

    @property
    def chairperson(self):
        """Gets the chairperson of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The chairperson of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._chairperson

    @chairperson.setter
    def chairperson(self, chairperson):
        """Sets the chairperson of this MilitaryUnit.

        Description not available  # noqa: E501

        :param chairperson: The chairperson of this MilitaryUnit.
        :type chairperson: List[object]
        """

        self._chairperson = chairperson

    @property
    def region_served(self):
        """Gets the region_served of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The region_served of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._region_served

    @region_served.setter
    def region_served(self, region_served):
        """Sets the region_served of this MilitaryUnit.

        Description not available  # noqa: E501

        :param region_served: The region_served of this MilitaryUnit.
        :type region_served: List[object]
        """

        self._region_served = region_served

    @property
    def superintendent(self):
        """Gets the superintendent of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The superintendent of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._superintendent

    @superintendent.setter
    def superintendent(self, superintendent):
        """Sets the superintendent of this MilitaryUnit.

        Description not available  # noqa: E501

        :param superintendent: The superintendent of this MilitaryUnit.
        :type superintendent: List[object]
        """

        self._superintendent = superintendent

    @property
    def formation_date(self):
        """Gets the formation_date of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The formation_date of this MilitaryUnit.
        :rtype: List[str]
        """
        return self._formation_date

    @formation_date.setter
    def formation_date(self, formation_date):
        """Sets the formation_date of this MilitaryUnit.

        Description not available  # noqa: E501

        :param formation_date: The formation_date of this MilitaryUnit.
        :type formation_date: List[str]
        """

        self._formation_date = formation_date

    @property
    def aircraft_helicopter_utility(self):
        """Gets the aircraft_helicopter_utility of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The aircraft_helicopter_utility of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._aircraft_helicopter_utility

    @aircraft_helicopter_utility.setter
    def aircraft_helicopter_utility(self, aircraft_helicopter_utility):
        """Sets the aircraft_helicopter_utility of this MilitaryUnit.

        Description not available  # noqa: E501

        :param aircraft_helicopter_utility: The aircraft_helicopter_utility of this MilitaryUnit.
        :type aircraft_helicopter_utility: List[object]
        """

        self._aircraft_helicopter_utility = aircraft_helicopter_utility

    @property
    def third_commander(self):
        """Gets the third_commander of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The third_commander of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._third_commander

    @third_commander.setter
    def third_commander(self, third_commander):
        """Sets the third_commander of this MilitaryUnit.

        Description not available  # noqa: E501

        :param third_commander: The third_commander of this MilitaryUnit.
        :type third_commander: List[object]
        """

        self._third_commander = third_commander

    @property
    def number_of_employees(self):
        """Gets the number_of_employees of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The number_of_employees of this MilitaryUnit.
        :rtype: List[int]
        """
        return self._number_of_employees

    @number_of_employees.setter
    def number_of_employees(self, number_of_employees):
        """Sets the number_of_employees of this MilitaryUnit.

        Description not available  # noqa: E501

        :param number_of_employees: The number_of_employees of this MilitaryUnit.
        :type number_of_employees: List[int]
        """

        self._number_of_employees = number_of_employees

    @property
    def extinction_date(self):
        """Gets the extinction_date of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The extinction_date of this MilitaryUnit.
        :rtype: List[str]
        """
        return self._extinction_date

    @extinction_date.setter
    def extinction_date(self, extinction_date):
        """Sets the extinction_date of this MilitaryUnit.

        Description not available  # noqa: E501

        :param extinction_date: The extinction_date of this MilitaryUnit.
        :type extinction_date: List[str]
        """

        self._extinction_date = extinction_date

    @property
    def aircraft_helicopter_cargo(self):
        """Gets the aircraft_helicopter_cargo of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The aircraft_helicopter_cargo of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._aircraft_helicopter_cargo

    @aircraft_helicopter_cargo.setter
    def aircraft_helicopter_cargo(self, aircraft_helicopter_cargo):
        """Sets the aircraft_helicopter_cargo of this MilitaryUnit.

        Description not available  # noqa: E501

        :param aircraft_helicopter_cargo: The aircraft_helicopter_cargo of this MilitaryUnit.
        :type aircraft_helicopter_cargo: List[object]
        """

        self._aircraft_helicopter_cargo = aircraft_helicopter_cargo

    @property
    def aircraft_electronic(self):
        """Gets the aircraft_electronic of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The aircraft_electronic of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._aircraft_electronic

    @aircraft_electronic.setter
    def aircraft_electronic(self, aircraft_electronic):
        """Sets the aircraft_electronic of this MilitaryUnit.

        Description not available  # noqa: E501

        :param aircraft_electronic: The aircraft_electronic of this MilitaryUnit.
        :type aircraft_electronic: List[object]
        """

        self._aircraft_electronic = aircraft_electronic

    @property
    def player_season(self):
        """Gets the player_season of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The player_season of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._player_season

    @player_season.setter
    def player_season(self, player_season):
        """Sets the player_season of this MilitaryUnit.

        Description not available  # noqa: E501

        :param player_season: The player_season of this MilitaryUnit.
        :type player_season: List[object]
        """

        self._player_season = player_season

    @property
    def endowment(self):
        """Gets the endowment of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The endowment of this MilitaryUnit.
        :rtype: List[float]
        """
        return self._endowment

    @endowment.setter
    def endowment(self, endowment):
        """Sets the endowment of this MilitaryUnit.

        Description not available  # noqa: E501

        :param endowment: The endowment of this MilitaryUnit.
        :type endowment: List[float]
        """

        self._endowment = endowment

    @property
    def slogan(self):
        """Gets the slogan of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The slogan of this MilitaryUnit.
        :rtype: List[str]
        """
        return self._slogan

    @slogan.setter
    def slogan(self, slogan):
        """Sets the slogan of this MilitaryUnit.

        Description not available  # noqa: E501

        :param slogan: The slogan of this MilitaryUnit.
        :type slogan: List[str]
        """

        self._slogan = slogan

    @property
    def regional_council(self):
        """Gets the regional_council of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The regional_council of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._regional_council

    @regional_council.setter
    def regional_council(self, regional_council):
        """Sets the regional_council of this MilitaryUnit.

        Description not available  # noqa: E501

        :param regional_council: The regional_council of this MilitaryUnit.
        :type regional_council: List[object]
        """

        self._regional_council = regional_council

    @property
    def location_city(self):
        """Gets the location_city of this MilitaryUnit.

        City the thing is located.  # noqa: E501

        :return: The location_city of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._location_city

    @location_city.setter
    def location_city(self, location_city):
        """Sets the location_city of this MilitaryUnit.

        City the thing is located.  # noqa: E501

        :param location_city: The location_city of this MilitaryUnit.
        :type location_city: List[object]
        """

        self._location_city = location_city

    @property
    def number_of_volunteers(self):
        """Gets the number_of_volunteers of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The number_of_volunteers of this MilitaryUnit.
        :rtype: List[int]
        """
        return self._number_of_volunteers

    @number_of_volunteers.setter
    def number_of_volunteers(self, number_of_volunteers):
        """Sets the number_of_volunteers of this MilitaryUnit.

        Description not available  # noqa: E501

        :param number_of_volunteers: The number_of_volunteers of this MilitaryUnit.
        :type number_of_volunteers: List[int]
        """

        self._number_of_volunteers = number_of_volunteers

    @property
    def ideology(self):
        """Gets the ideology of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The ideology of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._ideology

    @ideology.setter
    def ideology(self, ideology):
        """Sets the ideology of this MilitaryUnit.

        Description not available  # noqa: E501

        :param ideology: The ideology of this MilitaryUnit.
        :type ideology: List[object]
        """

        self._ideology = ideology

    @property
    def identification_symbol(self):
        """Gets the identification_symbol of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The identification_symbol of this MilitaryUnit.
        :rtype: List[str]
        """
        return self._identification_symbol

    @identification_symbol.setter
    def identification_symbol(self, identification_symbol):
        """Sets the identification_symbol of this MilitaryUnit.

        Description not available  # noqa: E501

        :param identification_symbol: The identification_symbol of this MilitaryUnit.
        :type identification_symbol: List[str]
        """

        self._identification_symbol = identification_symbol

    @property
    def description(self):
        """Gets the description of this MilitaryUnit.

        small description  # noqa: E501

        :return: The description of this MilitaryUnit.
        :rtype: List[str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MilitaryUnit.

        small description  # noqa: E501

        :param description: The description of this MilitaryUnit.
        :type description: List[str]
        """

        self._description = description

    @property
    def membership(self):
        """Gets the membership of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The membership of this MilitaryUnit.
        :rtype: List[str]
        """
        return self._membership

    @membership.setter
    def membership(self, membership):
        """Sets the membership of this MilitaryUnit.

        Description not available  # noqa: E501

        :param membership: The membership of this MilitaryUnit.
        :type membership: List[str]
        """

        self._membership = membership

    @property
    def ceo(self):
        """Gets the ceo of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The ceo of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._ceo

    @ceo.setter
    def ceo(self, ceo):
        """Sets the ceo of this MilitaryUnit.

        Description not available  # noqa: E501

        :param ceo: The ceo of this MilitaryUnit.
        :type ceo: List[object]
        """

        self._ceo = ceo

    @property
    def formation_year(self):
        """Gets the formation_year of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The formation_year of this MilitaryUnit.
        :rtype: List[str]
        """
        return self._formation_year

    @formation_year.setter
    def formation_year(self, formation_year):
        """Sets the formation_year of this MilitaryUnit.

        Description not available  # noqa: E501

        :param formation_year: The formation_year of this MilitaryUnit.
        :type formation_year: List[str]
        """

        self._formation_year = formation_year

    @property
    def junior_season(self):
        """Gets the junior_season of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The junior_season of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._junior_season

    @junior_season.setter
    def junior_season(self, junior_season):
        """Sets the junior_season of this MilitaryUnit.

        Description not available  # noqa: E501

        :param junior_season: The junior_season of this MilitaryUnit.
        :type junior_season: List[object]
        """

        self._junior_season = junior_season

    @property
    def headquarter(self):
        """Gets the headquarter of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The headquarter of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._headquarter

    @headquarter.setter
    def headquarter(self, headquarter):
        """Sets the headquarter of this MilitaryUnit.

        Description not available  # noqa: E501

        :param headquarter: The headquarter of this MilitaryUnit.
        :type headquarter: List[object]
        """

        self._headquarter = headquarter

    @property
    def extinction_year(self):
        """Gets the extinction_year of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The extinction_year of this MilitaryUnit.
        :rtype: List[str]
        """
        return self._extinction_year

    @extinction_year.setter
    def extinction_year(self, extinction_year):
        """Sets the extinction_year of this MilitaryUnit.

        Description not available  # noqa: E501

        :param extinction_year: The extinction_year of this MilitaryUnit.
        :type extinction_year: List[str]
        """

        self._extinction_year = extinction_year

    @property
    def child_organisation(self):
        """Gets the child_organisation of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The child_organisation of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._child_organisation

    @child_organisation.setter
    def child_organisation(self, child_organisation):
        """Sets the child_organisation of this MilitaryUnit.

        Description not available  # noqa: E501

        :param child_organisation: The child_organisation of this MilitaryUnit.
        :type child_organisation: List[object]
        """

        self._child_organisation = child_organisation

    @property
    def honours(self):
        """Gets the honours of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The honours of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._honours

    @honours.setter
    def honours(self, honours):
        """Sets the honours of this MilitaryUnit.

        Description not available  # noqa: E501

        :param honours: The honours of this MilitaryUnit.
        :type honours: List[object]
        """

        self._honours = honours

    @property
    def parent_organisation(self):
        """Gets the parent_organisation of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The parent_organisation of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._parent_organisation

    @parent_organisation.setter
    def parent_organisation(self, parent_organisation):
        """Sets the parent_organisation of this MilitaryUnit.

        Description not available  # noqa: E501

        :param parent_organisation: The parent_organisation of this MilitaryUnit.
        :type parent_organisation: List[object]
        """

        self._parent_organisation = parent_organisation

    @property
    def aircraft_fighter(self):
        """Gets the aircraft_fighter of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The aircraft_fighter of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._aircraft_fighter

    @aircraft_fighter.setter
    def aircraft_fighter(self, aircraft_fighter):
        """Sets the aircraft_fighter of this MilitaryUnit.

        Description not available  # noqa: E501

        :param aircraft_fighter: The aircraft_fighter of this MilitaryUnit.
        :type aircraft_fighter: List[object]
        """

        self._aircraft_fighter = aircraft_fighter

    @property
    def organisation_member(self):
        """Gets the organisation_member of this MilitaryUnit.

        Identify the members of an organisation.  # noqa: E501

        :return: The organisation_member of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._organisation_member

    @organisation_member.setter
    def organisation_member(self, organisation_member):
        """Sets the organisation_member of this MilitaryUnit.

        Identify the members of an organisation.  # noqa: E501

        :param organisation_member: The organisation_member of this MilitaryUnit.
        :type organisation_member: List[object]
        """

        self._organisation_member = organisation_member

    @property
    def aircraft_transport(self):
        """Gets the aircraft_transport of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The aircraft_transport of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._aircraft_transport

    @aircraft_transport.setter
    def aircraft_transport(self, aircraft_transport):
        """Sets the aircraft_transport of this MilitaryUnit.

        Description not available  # noqa: E501

        :param aircraft_transport: The aircraft_transport of this MilitaryUnit.
        :type aircraft_transport: List[object]
        """

        self._aircraft_transport = aircraft_transport

    @property
    def number_of_staff(self):
        """Gets the number_of_staff of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The number_of_staff of this MilitaryUnit.
        :rtype: List[int]
        """
        return self._number_of_staff

    @number_of_staff.setter
    def number_of_staff(self, number_of_staff):
        """Sets the number_of_staff of this MilitaryUnit.

        Description not available  # noqa: E501

        :param number_of_staff: The number_of_staff of this MilitaryUnit.
        :type number_of_staff: List[int]
        """

        self._number_of_staff = number_of_staff

    @property
    def product(self):
        """Gets the product of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The product of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this MilitaryUnit.

        Description not available  # noqa: E501

        :param product: The product of this MilitaryUnit.
        :type product: List[object]
        """

        self._product = product

    @property
    def patron(self):
        """Gets the patron of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The patron of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._patron

    @patron.setter
    def patron(self, patron):
        """Sets the patron of this MilitaryUnit.

        Description not available  # noqa: E501

        :param patron: The patron of this MilitaryUnit.
        :type patron: List[object]
        """

        self._patron = patron

    @property
    def hometown(self):
        """Gets the hometown of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The hometown of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._hometown

    @hometown.setter
    def hometown(self, hometown):
        """Sets the hometown of this MilitaryUnit.

        Description not available  # noqa: E501

        :param hometown: The hometown of this MilitaryUnit.
        :type hometown: List[object]
        """

        self._hometown = hometown

    @property
    def foundation_place(self):
        """Gets the foundation_place of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The foundation_place of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._foundation_place

    @foundation_place.setter
    def foundation_place(self, foundation_place):
        """Sets the foundation_place of this MilitaryUnit.

        Description not available  # noqa: E501

        :param foundation_place: The foundation_place of this MilitaryUnit.
        :type foundation_place: List[object]
        """

        self._foundation_place = foundation_place

    @property
    def national_selection(self):
        """Gets the national_selection of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The national_selection of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._national_selection

    @national_selection.setter
    def national_selection(self, national_selection):
        """Sets the national_selection of this MilitaryUnit.

        Description not available  # noqa: E501

        :param national_selection: The national_selection of this MilitaryUnit.
        :type national_selection: List[object]
        """

        self._national_selection = national_selection

    @property
    def aircraft_helicopter(self):
        """Gets the aircraft_helicopter of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The aircraft_helicopter of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._aircraft_helicopter

    @aircraft_helicopter.setter
    def aircraft_helicopter(self, aircraft_helicopter):
        """Sets the aircraft_helicopter of this MilitaryUnit.

        Description not available  # noqa: E501

        :param aircraft_helicopter: The aircraft_helicopter of this MilitaryUnit.
        :type aircraft_helicopter: List[object]
        """

        self._aircraft_helicopter = aircraft_helicopter

    @property
    def aircraft_helicopter_multirole(self):
        """Gets the aircraft_helicopter_multirole of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The aircraft_helicopter_multirole of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._aircraft_helicopter_multirole

    @aircraft_helicopter_multirole.setter
    def aircraft_helicopter_multirole(self, aircraft_helicopter_multirole):
        """Sets the aircraft_helicopter_multirole of this MilitaryUnit.

        Description not available  # noqa: E501

        :param aircraft_helicopter_multirole: The aircraft_helicopter_multirole of this MilitaryUnit.
        :type aircraft_helicopter_multirole: List[object]
        """

        self._aircraft_helicopter_multirole = aircraft_helicopter_multirole

    @property
    def disbanded(self):
        """Gets the disbanded of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The disbanded of this MilitaryUnit.
        :rtype: List[str]
        """
        return self._disbanded

    @disbanded.setter
    def disbanded(self, disbanded):
        """Sets the disbanded of this MilitaryUnit.

        Description not available  # noqa: E501

        :param disbanded: The disbanded of this MilitaryUnit.
        :type disbanded: List[str]
        """

        self._disbanded = disbanded

    @property
    def flying_hours(self):
        """Gets the flying_hours of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The flying_hours of this MilitaryUnit.
        :rtype: List[float]
        """
        return self._flying_hours

    @flying_hours.setter
    def flying_hours(self, flying_hours):
        """Sets the flying_hours of this MilitaryUnit.

        Description not available  # noqa: E501

        :param flying_hours: The flying_hours of this MilitaryUnit.
        :type flying_hours: List[float]
        """

        self._flying_hours = flying_hours

    @property
    def label(self):
        """Gets the label of this MilitaryUnit.

        short description of the resource  # noqa: E501

        :return: The label of this MilitaryUnit.
        :rtype: List[str]
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this MilitaryUnit.

        short description of the resource  # noqa: E501

        :param label: The label of this MilitaryUnit.
        :type label: List[str]
        """

        self._label = label

    @property
    def aircraft_helicopter_transport(self):
        """Gets the aircraft_helicopter_transport of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The aircraft_helicopter_transport of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._aircraft_helicopter_transport

    @aircraft_helicopter_transport.setter
    def aircraft_helicopter_transport(self, aircraft_helicopter_transport):
        """Sets the aircraft_helicopter_transport of this MilitaryUnit.

        Description not available  # noqa: E501

        :param aircraft_helicopter_transport: The aircraft_helicopter_transport of this MilitaryUnit.
        :type aircraft_helicopter_transport: List[object]
        """

        self._aircraft_helicopter_transport = aircraft_helicopter_transport

    @property
    def legal_form(self):
        """Gets the legal_form of this MilitaryUnit.

        There are many types of business entity defined in the legal systems of various countries. These include corporations, cooperatives, partnerships, sole traders, limited liability company and other specialized types of organization.  # noqa: E501

        :return: The legal_form of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._legal_form

    @legal_form.setter
    def legal_form(self, legal_form):
        """Sets the legal_form of this MilitaryUnit.

        There are many types of business entity defined in the legal systems of various countries. These include corporations, cooperatives, partnerships, sole traders, limited liability company and other specialized types of organization.  # noqa: E501

        :param legal_form: The legal_form of this MilitaryUnit.
        :type legal_form: List[object]
        """

        self._legal_form = legal_form

    @property
    def march(self):
        """Gets the march of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The march of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._march

    @march.setter
    def march(self, march):
        """Sets the march of this MilitaryUnit.

        Description not available  # noqa: E501

        :param march: The march of this MilitaryUnit.
        :type march: List[object]
        """

        self._march = march

    @property
    def command_structure(self):
        """Gets the command_structure of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The command_structure of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._command_structure

    @command_structure.setter
    def command_structure(self, command_structure):
        """Sets the command_structure of this MilitaryUnit.

        Description not available  # noqa: E501

        :param command_structure: The command_structure of this MilitaryUnit.
        :type command_structure: List[object]
        """

        self._command_structure = command_structure

    @property
    def second_commander(self):
        """Gets the second_commander of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The second_commander of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._second_commander

    @second_commander.setter
    def second_commander(self, second_commander):
        """Sets the second_commander of this MilitaryUnit.

        Description not available  # noqa: E501

        :param second_commander: The second_commander of this MilitaryUnit.
        :type second_commander: List[object]
        """

        self._second_commander = second_commander

    @property
    def aircraft_bomber(self):
        """Gets the aircraft_bomber of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The aircraft_bomber of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._aircraft_bomber

    @aircraft_bomber.setter
    def aircraft_bomber(self, aircraft_bomber):
        """Sets the aircraft_bomber of this MilitaryUnit.

        Description not available  # noqa: E501

        :param aircraft_bomber: The aircraft_bomber of this MilitaryUnit.
        :type aircraft_bomber: List[object]
        """

        self._aircraft_bomber = aircraft_bomber

    @property
    def garrison(self):
        """Gets the garrison of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The garrison of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._garrison

    @garrison.setter
    def garrison(self, garrison):
        """Sets the garrison of this MilitaryUnit.

        Description not available  # noqa: E501

        :param garrison: The garrison of this MilitaryUnit.
        :type garrison: List[object]
        """

        self._garrison = garrison

    @property
    def general_council(self):
        """Gets the general_council of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The general_council of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._general_council

    @general_council.setter
    def general_council(self, general_council):
        """Sets the general_council of this MilitaryUnit.

        Description not available  # noqa: E501

        :param general_council: The general_council of this MilitaryUnit.
        :type general_council: List[object]
        """

        self._general_council = general_council

    @property
    def trustee(self):
        """Gets the trustee of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The trustee of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._trustee

    @trustee.setter
    def trustee(self, trustee):
        """Sets the trustee of this MilitaryUnit.

        Description not available  # noqa: E501

        :param trustee: The trustee of this MilitaryUnit.
        :type trustee: List[object]
        """

        self._trustee = trustee

    @property
    def aircraft_attack(self):
        """Gets the aircraft_attack of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The aircraft_attack of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._aircraft_attack

    @aircraft_attack.setter
    def aircraft_attack(self, aircraft_attack):
        """Sets the aircraft_attack of this MilitaryUnit.

        Description not available  # noqa: E501

        :param aircraft_attack: The aircraft_attack of this MilitaryUnit.
        :type aircraft_attack: List[object]
        """

        self._aircraft_attack = aircraft_attack

    @property
    def age(self):
        """Gets the age of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The age of this MilitaryUnit.
        :rtype: List[int]
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this MilitaryUnit.

        Description not available  # noqa: E501

        :param age: The age of this MilitaryUnit.
        :type age: List[int]
        """

        self._age = age

    @property
    def anniversary(self):
        """Gets the anniversary of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The anniversary of this MilitaryUnit.
        :rtype: List[str]
        """
        return self._anniversary

    @anniversary.setter
    def anniversary(self, anniversary):
        """Sets the anniversary of this MilitaryUnit.

        Description not available  # noqa: E501

        :param anniversary: The anniversary of this MilitaryUnit.
        :type anniversary: List[str]
        """

        self._anniversary = anniversary

    @property
    def main_organ(self):
        """Gets the main_organ of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The main_organ of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._main_organ

    @main_organ.setter
    def main_organ(self, main_organ):
        """Sets the main_organ of this MilitaryUnit.

        Description not available  # noqa: E501

        :param main_organ: The main_organ of this MilitaryUnit.
        :type main_organ: List[object]
        """

        self._main_organ = main_organ

    @property
    def aircraft_helicopter_observation(self):
        """Gets the aircraft_helicopter_observation of this MilitaryUnit.

        Description not available  # noqa: E501

        :return: The aircraft_helicopter_observation of this MilitaryUnit.
        :rtype: List[object]
        """
        return self._aircraft_helicopter_observation

    @aircraft_helicopter_observation.setter
    def aircraft_helicopter_observation(self, aircraft_helicopter_observation):
        """Sets the aircraft_helicopter_observation of this MilitaryUnit.

        Description not available  # noqa: E501

        :param aircraft_helicopter_observation: The aircraft_helicopter_observation of this MilitaryUnit.
        :type aircraft_helicopter_observation: List[object]
        """

        self._aircraft_helicopter_observation = aircraft_helicopter_observation
