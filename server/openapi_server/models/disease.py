# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Disease(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, genereviewsname=None, medlineplus=None, description=None, label=None, type=None, mesh_id=None, genereviewsid=None, emedicine_topic=None, icdo=None, emedicine_subject=None, id=None, diseasesdb=None, icd9=None, icd10=None):  # noqa: E501
        """Disease - a model defined in OpenAPI

        :param genereviewsname: The genereviewsname of this Disease.  # noqa: E501
        :type genereviewsname: List[str]
        :param medlineplus: The medlineplus of this Disease.  # noqa: E501
        :type medlineplus: List[str]
        :param description: The description of this Disease.  # noqa: E501
        :type description: List[str]
        :param label: The label of this Disease.  # noqa: E501
        :type label: List[str]
        :param type: The type of this Disease.  # noqa: E501
        :type type: List[str]
        :param mesh_id: The mesh_id of this Disease.  # noqa: E501
        :type mesh_id: List[str]
        :param genereviewsid: The genereviewsid of this Disease.  # noqa: E501
        :type genereviewsid: List[str]
        :param emedicine_topic: The emedicine_topic of this Disease.  # noqa: E501
        :type emedicine_topic: List[str]
        :param icdo: The icdo of this Disease.  # noqa: E501
        :type icdo: List[str]
        :param emedicine_subject: The emedicine_subject of this Disease.  # noqa: E501
        :type emedicine_subject: List[str]
        :param id: The id of this Disease.  # noqa: E501
        :type id: str
        :param diseasesdb: The diseasesdb of this Disease.  # noqa: E501
        :type diseasesdb: List[str]
        :param icd9: The icd9 of this Disease.  # noqa: E501
        :type icd9: List[str]
        :param icd10: The icd10 of this Disease.  # noqa: E501
        :type icd10: List[str]
        """


        self.openapi_types = {
            'genereviewsname': List[str],
            'medlineplus': List[str],
            'description': List[str],
            'label': List[str],
            'type': List[str],
            'mesh_id': List[str],
            'genereviewsid': List[str],
            'emedicine_topic': List[str],
            'icdo': List[str],
            'emedicine_subject': List[str],
            'id': str,
            'diseasesdb': List[str],
            'icd9': List[str],
            'icd10': List[str]
        }

        self.attribute_map = {
            'genereviewsname': 'genereviewsname',
            'medlineplus': 'medlineplus',
            'description': 'description',
            'label': 'label',
            'type': 'type',
            'mesh_id': 'meshId',
            'genereviewsid': 'genereviewsid',
            'emedicine_topic': 'emedicineTopic',
            'icdo': 'icdo',
            'emedicine_subject': 'emedicineSubject',
            'id': 'id',
            'diseasesdb': 'diseasesdb',
            'icd9': 'icd9',
            'icd10': 'icd10'
        }

        self._genereviewsname = genereviewsname
        self._medlineplus = medlineplus
        self._description = description
        self._label = label
        self._type = type
        self._mesh_id = mesh_id
        self._genereviewsid = genereviewsid
        self._emedicine_topic = emedicine_topic
        self._icdo = icdo
        self._emedicine_subject = emedicine_subject
        self._id = id
        self._diseasesdb = diseasesdb
        self._icd9 = icd9
        self._icd10 = icd10

    @classmethod
    def from_dict(cls, dikt) -> 'Disease':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Disease of this Disease.  # noqa: E501
        :rtype: Disease
        """
        return util.deserialize_model(dikt, cls)

    @property
    def genereviewsname(self):
        """Gets the genereviewsname of this Disease.

        Description not available  # noqa: E501

        :return: The genereviewsname of this Disease.
        :rtype: List[str]
        """
        return self._genereviewsname

    @genereviewsname.setter
    def genereviewsname(self, genereviewsname):
        """Sets the genereviewsname of this Disease.

        Description not available  # noqa: E501

        :param genereviewsname: The genereviewsname of this Disease.
        :type genereviewsname: List[str]
        """

        self._genereviewsname = genereviewsname

    @property
    def medlineplus(self):
        """Gets the medlineplus of this Disease.

        Description not available  # noqa: E501

        :return: The medlineplus of this Disease.
        :rtype: List[str]
        """
        return self._medlineplus

    @medlineplus.setter
    def medlineplus(self, medlineplus):
        """Sets the medlineplus of this Disease.

        Description not available  # noqa: E501

        :param medlineplus: The medlineplus of this Disease.
        :type medlineplus: List[str]
        """

        self._medlineplus = medlineplus

    @property
    def description(self):
        """Gets the description of this Disease.

        small description  # noqa: E501

        :return: The description of this Disease.
        :rtype: List[str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Disease.

        small description  # noqa: E501

        :param description: The description of this Disease.
        :type description: List[str]
        """

        self._description = description

    @property
    def label(self):
        """Gets the label of this Disease.

        short description of the resource  # noqa: E501

        :return: The label of this Disease.
        :rtype: List[str]
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Disease.

        short description of the resource  # noqa: E501

        :param label: The label of this Disease.
        :type label: List[str]
        """

        self._label = label

    @property
    def type(self):
        """Gets the type of this Disease.

        type of the resource  # noqa: E501

        :return: The type of this Disease.
        :rtype: List[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Disease.

        type of the resource  # noqa: E501

        :param type: The type of this Disease.
        :type type: List[str]
        """

        self._type = type

    @property
    def mesh_id(self):
        """Gets the mesh_id of this Disease.

        Description not available  # noqa: E501

        :return: The mesh_id of this Disease.
        :rtype: List[str]
        """
        return self._mesh_id

    @mesh_id.setter
    def mesh_id(self, mesh_id):
        """Sets the mesh_id of this Disease.

        Description not available  # noqa: E501

        :param mesh_id: The mesh_id of this Disease.
        :type mesh_id: List[str]
        """

        self._mesh_id = mesh_id

    @property
    def genereviewsid(self):
        """Gets the genereviewsid of this Disease.

        Description not available  # noqa: E501

        :return: The genereviewsid of this Disease.
        :rtype: List[str]
        """
        return self._genereviewsid

    @genereviewsid.setter
    def genereviewsid(self, genereviewsid):
        """Sets the genereviewsid of this Disease.

        Description not available  # noqa: E501

        :param genereviewsid: The genereviewsid of this Disease.
        :type genereviewsid: List[str]
        """

        self._genereviewsid = genereviewsid

    @property
    def emedicine_topic(self):
        """Gets the emedicine_topic of this Disease.

        Description not available  # noqa: E501

        :return: The emedicine_topic of this Disease.
        :rtype: List[str]
        """
        return self._emedicine_topic

    @emedicine_topic.setter
    def emedicine_topic(self, emedicine_topic):
        """Sets the emedicine_topic of this Disease.

        Description not available  # noqa: E501

        :param emedicine_topic: The emedicine_topic of this Disease.
        :type emedicine_topic: List[str]
        """

        self._emedicine_topic = emedicine_topic

    @property
    def icdo(self):
        """Gets the icdo of this Disease.

        Description not available  # noqa: E501

        :return: The icdo of this Disease.
        :rtype: List[str]
        """
        return self._icdo

    @icdo.setter
    def icdo(self, icdo):
        """Sets the icdo of this Disease.

        Description not available  # noqa: E501

        :param icdo: The icdo of this Disease.
        :type icdo: List[str]
        """

        self._icdo = icdo

    @property
    def emedicine_subject(self):
        """Gets the emedicine_subject of this Disease.

        Description not available  # noqa: E501

        :return: The emedicine_subject of this Disease.
        :rtype: List[str]
        """
        return self._emedicine_subject

    @emedicine_subject.setter
    def emedicine_subject(self, emedicine_subject):
        """Sets the emedicine_subject of this Disease.

        Description not available  # noqa: E501

        :param emedicine_subject: The emedicine_subject of this Disease.
        :type emedicine_subject: List[str]
        """

        self._emedicine_subject = emedicine_subject

    @property
    def id(self):
        """Gets the id of this Disease.

        identifier  # noqa: E501

        :return: The id of this Disease.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Disease.

        identifier  # noqa: E501

        :param id: The id of this Disease.
        :type id: str
        """

        self._id = id

    @property
    def diseasesdb(self):
        """Gets the diseasesdb of this Disease.

        Description not available  # noqa: E501

        :return: The diseasesdb of this Disease.
        :rtype: List[str]
        """
        return self._diseasesdb

    @diseasesdb.setter
    def diseasesdb(self, diseasesdb):
        """Sets the diseasesdb of this Disease.

        Description not available  # noqa: E501

        :param diseasesdb: The diseasesdb of this Disease.
        :type diseasesdb: List[str]
        """

        self._diseasesdb = diseasesdb

    @property
    def icd9(self):
        """Gets the icd9 of this Disease.

        Description not available  # noqa: E501

        :return: The icd9 of this Disease.
        :rtype: List[str]
        """
        return self._icd9

    @icd9.setter
    def icd9(self, icd9):
        """Sets the icd9 of this Disease.

        Description not available  # noqa: E501

        :param icd9: The icd9 of this Disease.
        :type icd9: List[str]
        """

        self._icd9 = icd9

    @property
    def icd10(self):
        """Gets the icd10 of this Disease.

        Description not available  # noqa: E501

        :return: The icd10 of this Disease.
        :rtype: List[str]
        """
        return self._icd10

    @icd10.setter
    def icd10(self, icd10):
        """Sets the icd10 of this Disease.

        Description not available  # noqa: E501

        :param icd10: The icd10 of this Disease.
        :type icd10: List[str]
        """

        self._icd10 = icd10
