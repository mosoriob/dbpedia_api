# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Settlement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, irish_name=None, reff_bourgmestre=None, wilaya=None, same_name=None, geoloc_department=None, cornish_name=None, official_name=None, type=None, minority=None, lowest_point=None, agglomeration_population=None, distance_to_cardiff=None, daira=None, meaning=None, dutch_name=None, manx_name=None, code_settlement=None, winter_temperature=None, id=None, twin_city=None, day=None, distance_to_charing_cross=None, distance_to_london=None, distance_to_dublin=None, sharing_out_name=None, distance_to_capital=None, distance_to_edinburgh=None, other_information=None, gaelic_name=None, coast_line=None, kabyle_name=None, association_of_local_government=None, iso_code_region=None, administrative_collectivity=None, merged_settlement=None, joint_community=None, federal_state=None, welsh_name=None, collectivity_minority=None, chaoui_name=None, scottish_name=None, english_name=None, algerian_settlement_name=None, patron_saint=None, phone_prefix_label=None, commune=None, description=None, frazioni=None, political_majority=None, arabic_name=None, tamazight_name=None, insee_code=None, population_total_reference=None, touareg_name=None, political_seats=None, distance_to_douglas=None, algerian_name=None, other_language=None, ofs_code=None, touareg_settlement_name=None, distance_to_belfast=None, prov_code=None, largest_metro=None, label=None, mozabite_name=None, highest_point=None, bourgmestre=None, summer_temperature=None, finnish_name=None, tamazight_settlement_name=None, canton=None, administrative_district=None, agglomeration_population_year=None):  # noqa: E501
        """Settlement - a model defined in OpenAPI

        :param irish_name: The irish_name of this Settlement.  # noqa: E501
        :type irish_name: List[str]
        :param reff_bourgmestre: The reff_bourgmestre of this Settlement.  # noqa: E501
        :type reff_bourgmestre: List[object]
        :param wilaya: The wilaya of this Settlement.  # noqa: E501
        :type wilaya: List[object]
        :param same_name: The same_name of this Settlement.  # noqa: E501
        :type same_name: List[str]
        :param geoloc_department: The geoloc_department of this Settlement.  # noqa: E501
        :type geoloc_department: List[object]
        :param cornish_name: The cornish_name of this Settlement.  # noqa: E501
        :type cornish_name: List[str]
        :param official_name: The official_name of this Settlement.  # noqa: E501
        :type official_name: List[str]
        :param type: The type of this Settlement.  # noqa: E501
        :type type: List[str]
        :param minority: The minority of this Settlement.  # noqa: E501
        :type minority: List[object]
        :param lowest_point: The lowest_point of this Settlement.  # noqa: E501
        :type lowest_point: List[object]
        :param agglomeration_population: The agglomeration_population of this Settlement.  # noqa: E501
        :type agglomeration_population: List[object]
        :param distance_to_cardiff: The distance_to_cardiff of this Settlement.  # noqa: E501
        :type distance_to_cardiff: List[float]
        :param daira: The daira of this Settlement.  # noqa: E501
        :type daira: List[object]
        :param meaning: The meaning of this Settlement.  # noqa: E501
        :type meaning: List[str]
        :param dutch_name: The dutch_name of this Settlement.  # noqa: E501
        :type dutch_name: List[str]
        :param manx_name: The manx_name of this Settlement.  # noqa: E501
        :type manx_name: List[str]
        :param code_settlement: The code_settlement of this Settlement.  # noqa: E501
        :type code_settlement: List[str]
        :param winter_temperature: The winter_temperature of this Settlement.  # noqa: E501
        :type winter_temperature: List[float]
        :param id: The id of this Settlement.  # noqa: E501
        :type id: str
        :param twin_city: The twin_city of this Settlement.  # noqa: E501
        :type twin_city: List[object]
        :param day: The day of this Settlement.  # noqa: E501
        :type day: List[str]
        :param distance_to_charing_cross: The distance_to_charing_cross of this Settlement.  # noqa: E501
        :type distance_to_charing_cross: List[float]
        :param distance_to_london: The distance_to_london of this Settlement.  # noqa: E501
        :type distance_to_london: List[float]
        :param distance_to_dublin: The distance_to_dublin of this Settlement.  # noqa: E501
        :type distance_to_dublin: List[float]
        :param sharing_out_name: The sharing_out_name of this Settlement.  # noqa: E501
        :type sharing_out_name: List[object]
        :param distance_to_capital: The distance_to_capital of this Settlement.  # noqa: E501
        :type distance_to_capital: List[float]
        :param distance_to_edinburgh: The distance_to_edinburgh of this Settlement.  # noqa: E501
        :type distance_to_edinburgh: List[float]
        :param other_information: The other_information of this Settlement.  # noqa: E501
        :type other_information: List[str]
        :param gaelic_name: The gaelic_name of this Settlement.  # noqa: E501
        :type gaelic_name: List[str]
        :param coast_line: The coast_line of this Settlement.  # noqa: E501
        :type coast_line: List[float]
        :param kabyle_name: The kabyle_name of this Settlement.  # noqa: E501
        :type kabyle_name: List[str]
        :param association_of_local_government: The association_of_local_government of this Settlement.  # noqa: E501
        :type association_of_local_government: List[object]
        :param iso_code_region: The iso_code_region of this Settlement.  # noqa: E501
        :type iso_code_region: List[object]
        :param administrative_collectivity: The administrative_collectivity of this Settlement.  # noqa: E501
        :type administrative_collectivity: List[object]
        :param merged_settlement: The merged_settlement of this Settlement.  # noqa: E501
        :type merged_settlement: List[object]
        :param joint_community: The joint_community of this Settlement.  # noqa: E501
        :type joint_community: List[object]
        :param federal_state: The federal_state of this Settlement.  # noqa: E501
        :type federal_state: List[object]
        :param welsh_name: The welsh_name of this Settlement.  # noqa: E501
        :type welsh_name: List[str]
        :param collectivity_minority: The collectivity_minority of this Settlement.  # noqa: E501
        :type collectivity_minority: List[object]
        :param chaoui_name: The chaoui_name of this Settlement.  # noqa: E501
        :type chaoui_name: List[str]
        :param scottish_name: The scottish_name of this Settlement.  # noqa: E501
        :type scottish_name: List[str]
        :param english_name: The english_name of this Settlement.  # noqa: E501
        :type english_name: List[str]
        :param algerian_settlement_name: The algerian_settlement_name of this Settlement.  # noqa: E501
        :type algerian_settlement_name: List[str]
        :param patron_saint: The patron_saint of this Settlement.  # noqa: E501
        :type patron_saint: List[object]
        :param phone_prefix_label: The phone_prefix_label of this Settlement.  # noqa: E501
        :type phone_prefix_label: List[str]
        :param commune: The commune of this Settlement.  # noqa: E501
        :type commune: List[object]
        :param description: The description of this Settlement.  # noqa: E501
        :type description: List[str]
        :param frazioni: The frazioni of this Settlement.  # noqa: E501
        :type frazioni: List[object]
        :param political_majority: The political_majority of this Settlement.  # noqa: E501
        :type political_majority: List[object]
        :param arabic_name: The arabic_name of this Settlement.  # noqa: E501
        :type arabic_name: List[str]
        :param tamazight_name: The tamazight_name of this Settlement.  # noqa: E501
        :type tamazight_name: List[str]
        :param insee_code: The insee_code of this Settlement.  # noqa: E501
        :type insee_code: List[int]
        :param population_total_reference: The population_total_reference of this Settlement.  # noqa: E501
        :type population_total_reference: List[object]
        :param touareg_name: The touareg_name of this Settlement.  # noqa: E501
        :type touareg_name: List[str]
        :param political_seats: The political_seats of this Settlement.  # noqa: E501
        :type political_seats: List[int]
        :param distance_to_douglas: The distance_to_douglas of this Settlement.  # noqa: E501
        :type distance_to_douglas: List[float]
        :param algerian_name: The algerian_name of this Settlement.  # noqa: E501
        :type algerian_name: List[str]
        :param other_language: The other_language of this Settlement.  # noqa: E501
        :type other_language: List[str]
        :param ofs_code: The ofs_code of this Settlement.  # noqa: E501
        :type ofs_code: List[str]
        :param touareg_settlement_name: The touareg_settlement_name of this Settlement.  # noqa: E501
        :type touareg_settlement_name: List[str]
        :param distance_to_belfast: The distance_to_belfast of this Settlement.  # noqa: E501
        :type distance_to_belfast: List[float]
        :param prov_code: The prov_code of this Settlement.  # noqa: E501
        :type prov_code: List[str]
        :param largest_metro: The largest_metro of this Settlement.  # noqa: E501
        :type largest_metro: List[object]
        :param label: The label of this Settlement.  # noqa: E501
        :type label: List[str]
        :param mozabite_name: The mozabite_name of this Settlement.  # noqa: E501
        :type mozabite_name: List[str]
        :param highest_point: The highest_point of this Settlement.  # noqa: E501
        :type highest_point: List[object]
        :param bourgmestre: The bourgmestre of this Settlement.  # noqa: E501
        :type bourgmestre: List[object]
        :param summer_temperature: The summer_temperature of this Settlement.  # noqa: E501
        :type summer_temperature: List[float]
        :param finnish_name: The finnish_name of this Settlement.  # noqa: E501
        :type finnish_name: List[str]
        :param tamazight_settlement_name: The tamazight_settlement_name of this Settlement.  # noqa: E501
        :type tamazight_settlement_name: List[str]
        :param canton: The canton of this Settlement.  # noqa: E501
        :type canton: List[object]
        :param administrative_district: The administrative_district of this Settlement.  # noqa: E501
        :type administrative_district: List[object]
        :param agglomeration_population_year: The agglomeration_population_year of this Settlement.  # noqa: E501
        :type agglomeration_population_year: List[str]
        """


        self.openapi_types = {
            'irish_name': List[str],
            'reff_bourgmestre': List[object],
            'wilaya': List[object],
            'same_name': List[str],
            'geoloc_department': List[object],
            'cornish_name': List[str],
            'official_name': List[str],
            'type': List[str],
            'minority': List[object],
            'lowest_point': List[object],
            'agglomeration_population': List[object],
            'distance_to_cardiff': List[float],
            'daira': List[object],
            'meaning': List[str],
            'dutch_name': List[str],
            'manx_name': List[str],
            'code_settlement': List[str],
            'winter_temperature': List[float],
            'id': str,
            'twin_city': List[object],
            'day': List[str],
            'distance_to_charing_cross': List[float],
            'distance_to_london': List[float],
            'distance_to_dublin': List[float],
            'sharing_out_name': List[object],
            'distance_to_capital': List[float],
            'distance_to_edinburgh': List[float],
            'other_information': List[str],
            'gaelic_name': List[str],
            'coast_line': List[float],
            'kabyle_name': List[str],
            'association_of_local_government': List[object],
            'iso_code_region': List[object],
            'administrative_collectivity': List[object],
            'merged_settlement': List[object],
            'joint_community': List[object],
            'federal_state': List[object],
            'welsh_name': List[str],
            'collectivity_minority': List[object],
            'chaoui_name': List[str],
            'scottish_name': List[str],
            'english_name': List[str],
            'algerian_settlement_name': List[str],
            'patron_saint': List[object],
            'phone_prefix_label': List[str],
            'commune': List[object],
            'description': List[str],
            'frazioni': List[object],
            'political_majority': List[object],
            'arabic_name': List[str],
            'tamazight_name': List[str],
            'insee_code': List[int],
            'population_total_reference': List[object],
            'touareg_name': List[str],
            'political_seats': List[int],
            'distance_to_douglas': List[float],
            'algerian_name': List[str],
            'other_language': List[str],
            'ofs_code': List[str],
            'touareg_settlement_name': List[str],
            'distance_to_belfast': List[float],
            'prov_code': List[str],
            'largest_metro': List[object],
            'label': List[str],
            'mozabite_name': List[str],
            'highest_point': List[object],
            'bourgmestre': List[object],
            'summer_temperature': List[float],
            'finnish_name': List[str],
            'tamazight_settlement_name': List[str],
            'canton': List[object],
            'administrative_district': List[object],
            'agglomeration_population_year': List[str]
        }

        self.attribute_map = {
            'irish_name': 'irishName',
            'reff_bourgmestre': 'reffBourgmestre',
            'wilaya': 'wilaya',
            'same_name': 'sameName',
            'geoloc_department': 'geolocDepartment',
            'cornish_name': 'cornishName',
            'official_name': 'officialName',
            'type': 'type',
            'minority': 'minority',
            'lowest_point': 'lowestPoint',
            'agglomeration_population': 'agglomerationPopulation',
            'distance_to_cardiff': 'distanceToCardiff',
            'daira': 'daira',
            'meaning': 'meaning',
            'dutch_name': 'dutchName',
            'manx_name': 'manxName',
            'code_settlement': 'codeSettlement',
            'winter_temperature': 'winterTemperature',
            'id': 'id',
            'twin_city': 'twinCity',
            'day': 'day',
            'distance_to_charing_cross': 'distanceToCharingCross',
            'distance_to_london': 'distanceToLondon',
            'distance_to_dublin': 'distanceToDublin',
            'sharing_out_name': 'sharingOutName',
            'distance_to_capital': 'distanceToCapital',
            'distance_to_edinburgh': 'distanceToEdinburgh',
            'other_information': 'otherInformation',
            'gaelic_name': 'gaelicName',
            'coast_line': 'coastLine',
            'kabyle_name': 'kabyleName',
            'association_of_local_government': 'associationOfLocalGovernment',
            'iso_code_region': 'isoCodeRegion',
            'administrative_collectivity': 'administrativeCollectivity',
            'merged_settlement': 'mergedSettlement',
            'joint_community': 'jointCommunity',
            'federal_state': 'federalState',
            'welsh_name': 'welshName',
            'collectivity_minority': 'collectivityMinority',
            'chaoui_name': 'chaouiName',
            'scottish_name': 'scottishName',
            'english_name': 'englishName',
            'algerian_settlement_name': 'algerianSettlementName',
            'patron_saint': 'patronSaint',
            'phone_prefix_label': 'phonePrefixLabel',
            'commune': 'commune',
            'description': 'description',
            'frazioni': 'frazioni',
            'political_majority': 'politicalMajority',
            'arabic_name': 'arabicName',
            'tamazight_name': 'tamazightName',
            'insee_code': 'inseeCode',
            'population_total_reference': 'populationTotalReference',
            'touareg_name': 'touaregName',
            'political_seats': 'politicalSeats',
            'distance_to_douglas': 'distanceToDouglas',
            'algerian_name': 'algerianName',
            'other_language': 'otherLanguage',
            'ofs_code': 'ofsCode',
            'touareg_settlement_name': 'touaregSettlementName',
            'distance_to_belfast': 'distanceToBelfast',
            'prov_code': 'provCode',
            'largest_metro': 'largestMetro',
            'label': 'label',
            'mozabite_name': 'mozabiteName',
            'highest_point': 'highestPoint',
            'bourgmestre': 'bourgmestre',
            'summer_temperature': 'summerTemperature',
            'finnish_name': 'finnishName',
            'tamazight_settlement_name': 'tamazightSettlementName',
            'canton': 'canton',
            'administrative_district': 'administrativeDistrict',
            'agglomeration_population_year': 'agglomerationPopulationYear'
        }

        self._irish_name = irish_name
        self._reff_bourgmestre = reff_bourgmestre
        self._wilaya = wilaya
        self._same_name = same_name
        self._geoloc_department = geoloc_department
        self._cornish_name = cornish_name
        self._official_name = official_name
        self._type = type
        self._minority = minority
        self._lowest_point = lowest_point
        self._agglomeration_population = agglomeration_population
        self._distance_to_cardiff = distance_to_cardiff
        self._daira = daira
        self._meaning = meaning
        self._dutch_name = dutch_name
        self._manx_name = manx_name
        self._code_settlement = code_settlement
        self._winter_temperature = winter_temperature
        self._id = id
        self._twin_city = twin_city
        self._day = day
        self._distance_to_charing_cross = distance_to_charing_cross
        self._distance_to_london = distance_to_london
        self._distance_to_dublin = distance_to_dublin
        self._sharing_out_name = sharing_out_name
        self._distance_to_capital = distance_to_capital
        self._distance_to_edinburgh = distance_to_edinburgh
        self._other_information = other_information
        self._gaelic_name = gaelic_name
        self._coast_line = coast_line
        self._kabyle_name = kabyle_name
        self._association_of_local_government = association_of_local_government
        self._iso_code_region = iso_code_region
        self._administrative_collectivity = administrative_collectivity
        self._merged_settlement = merged_settlement
        self._joint_community = joint_community
        self._federal_state = federal_state
        self._welsh_name = welsh_name
        self._collectivity_minority = collectivity_minority
        self._chaoui_name = chaoui_name
        self._scottish_name = scottish_name
        self._english_name = english_name
        self._algerian_settlement_name = algerian_settlement_name
        self._patron_saint = patron_saint
        self._phone_prefix_label = phone_prefix_label
        self._commune = commune
        self._description = description
        self._frazioni = frazioni
        self._political_majority = political_majority
        self._arabic_name = arabic_name
        self._tamazight_name = tamazight_name
        self._insee_code = insee_code
        self._population_total_reference = population_total_reference
        self._touareg_name = touareg_name
        self._political_seats = political_seats
        self._distance_to_douglas = distance_to_douglas
        self._algerian_name = algerian_name
        self._other_language = other_language
        self._ofs_code = ofs_code
        self._touareg_settlement_name = touareg_settlement_name
        self._distance_to_belfast = distance_to_belfast
        self._prov_code = prov_code
        self._largest_metro = largest_metro
        self._label = label
        self._mozabite_name = mozabite_name
        self._highest_point = highest_point
        self._bourgmestre = bourgmestre
        self._summer_temperature = summer_temperature
        self._finnish_name = finnish_name
        self._tamazight_settlement_name = tamazight_settlement_name
        self._canton = canton
        self._administrative_district = administrative_district
        self._agglomeration_population_year = agglomeration_population_year

    @classmethod
    def from_dict(cls, dikt) -> 'Settlement':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Settlement of this Settlement.  # noqa: E501
        :rtype: Settlement
        """
        return util.deserialize_model(dikt, cls)

    @property
    def irish_name(self):
        """Gets the irish_name of this Settlement.

        Description not available  # noqa: E501

        :return: The irish_name of this Settlement.
        :rtype: List[str]
        """
        return self._irish_name

    @irish_name.setter
    def irish_name(self, irish_name):
        """Sets the irish_name of this Settlement.

        Description not available  # noqa: E501

        :param irish_name: The irish_name of this Settlement.
        :type irish_name: List[str]
        """

        self._irish_name = irish_name

    @property
    def reff_bourgmestre(self):
        """Gets the reff_bourgmestre of this Settlement.

        Description not available  # noqa: E501

        :return: The reff_bourgmestre of this Settlement.
        :rtype: List[object]
        """
        return self._reff_bourgmestre

    @reff_bourgmestre.setter
    def reff_bourgmestre(self, reff_bourgmestre):
        """Sets the reff_bourgmestre of this Settlement.

        Description not available  # noqa: E501

        :param reff_bourgmestre: The reff_bourgmestre of this Settlement.
        :type reff_bourgmestre: List[object]
        """

        self._reff_bourgmestre = reff_bourgmestre

    @property
    def wilaya(self):
        """Gets the wilaya of this Settlement.

        Description not available  # noqa: E501

        :return: The wilaya of this Settlement.
        :rtype: List[object]
        """
        return self._wilaya

    @wilaya.setter
    def wilaya(self, wilaya):
        """Sets the wilaya of this Settlement.

        Description not available  # noqa: E501

        :param wilaya: The wilaya of this Settlement.
        :type wilaya: List[object]
        """

        self._wilaya = wilaya

    @property
    def same_name(self):
        """Gets the same_name of this Settlement.

        Description not available  # noqa: E501

        :return: The same_name of this Settlement.
        :rtype: List[str]
        """
        return self._same_name

    @same_name.setter
    def same_name(self, same_name):
        """Sets the same_name of this Settlement.

        Description not available  # noqa: E501

        :param same_name: The same_name of this Settlement.
        :type same_name: List[str]
        """

        self._same_name = same_name

    @property
    def geoloc_department(self):
        """Gets the geoloc_department of this Settlement.

        Description not available  # noqa: E501

        :return: The geoloc_department of this Settlement.
        :rtype: List[object]
        """
        return self._geoloc_department

    @geoloc_department.setter
    def geoloc_department(self, geoloc_department):
        """Sets the geoloc_department of this Settlement.

        Description not available  # noqa: E501

        :param geoloc_department: The geoloc_department of this Settlement.
        :type geoloc_department: List[object]
        """

        self._geoloc_department = geoloc_department

    @property
    def cornish_name(self):
        """Gets the cornish_name of this Settlement.

        Description not available  # noqa: E501

        :return: The cornish_name of this Settlement.
        :rtype: List[str]
        """
        return self._cornish_name

    @cornish_name.setter
    def cornish_name(self, cornish_name):
        """Sets the cornish_name of this Settlement.

        Description not available  # noqa: E501

        :param cornish_name: The cornish_name of this Settlement.
        :type cornish_name: List[str]
        """

        self._cornish_name = cornish_name

    @property
    def official_name(self):
        """Gets the official_name of this Settlement.

        Description not available  # noqa: E501

        :return: The official_name of this Settlement.
        :rtype: List[str]
        """
        return self._official_name

    @official_name.setter
    def official_name(self, official_name):
        """Sets the official_name of this Settlement.

        Description not available  # noqa: E501

        :param official_name: The official_name of this Settlement.
        :type official_name: List[str]
        """

        self._official_name = official_name

    @property
    def type(self):
        """Gets the type of this Settlement.

        type of the resource  # noqa: E501

        :return: The type of this Settlement.
        :rtype: List[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Settlement.

        type of the resource  # noqa: E501

        :param type: The type of this Settlement.
        :type type: List[str]
        """

        self._type = type

    @property
    def minority(self):
        """Gets the minority of this Settlement.

        Description not available  # noqa: E501

        :return: The minority of this Settlement.
        :rtype: List[object]
        """
        return self._minority

    @minority.setter
    def minority(self, minority):
        """Sets the minority of this Settlement.

        Description not available  # noqa: E501

        :param minority: The minority of this Settlement.
        :type minority: List[object]
        """

        self._minority = minority

    @property
    def lowest_point(self):
        """Gets the lowest_point of this Settlement.

        Description not available  # noqa: E501

        :return: The lowest_point of this Settlement.
        :rtype: List[object]
        """
        return self._lowest_point

    @lowest_point.setter
    def lowest_point(self, lowest_point):
        """Sets the lowest_point of this Settlement.

        Description not available  # noqa: E501

        :param lowest_point: The lowest_point of this Settlement.
        :type lowest_point: List[object]
        """

        self._lowest_point = lowest_point

    @property
    def agglomeration_population(self):
        """Gets the agglomeration_population of this Settlement.

        Description not available  # noqa: E501

        :return: The agglomeration_population of this Settlement.
        :rtype: List[object]
        """
        return self._agglomeration_population

    @agglomeration_population.setter
    def agglomeration_population(self, agglomeration_population):
        """Sets the agglomeration_population of this Settlement.

        Description not available  # noqa: E501

        :param agglomeration_population: The agglomeration_population of this Settlement.
        :type agglomeration_population: List[object]
        """

        self._agglomeration_population = agglomeration_population

    @property
    def distance_to_cardiff(self):
        """Gets the distance_to_cardiff of this Settlement.

        Description not available  # noqa: E501

        :return: The distance_to_cardiff of this Settlement.
        :rtype: List[float]
        """
        return self._distance_to_cardiff

    @distance_to_cardiff.setter
    def distance_to_cardiff(self, distance_to_cardiff):
        """Sets the distance_to_cardiff of this Settlement.

        Description not available  # noqa: E501

        :param distance_to_cardiff: The distance_to_cardiff of this Settlement.
        :type distance_to_cardiff: List[float]
        """

        self._distance_to_cardiff = distance_to_cardiff

    @property
    def daira(self):
        """Gets the daira of this Settlement.

        Description not available  # noqa: E501

        :return: The daira of this Settlement.
        :rtype: List[object]
        """
        return self._daira

    @daira.setter
    def daira(self, daira):
        """Sets the daira of this Settlement.

        Description not available  # noqa: E501

        :param daira: The daira of this Settlement.
        :type daira: List[object]
        """

        self._daira = daira

    @property
    def meaning(self):
        """Gets the meaning of this Settlement.

        Description not available  # noqa: E501

        :return: The meaning of this Settlement.
        :rtype: List[str]
        """
        return self._meaning

    @meaning.setter
    def meaning(self, meaning):
        """Sets the meaning of this Settlement.

        Description not available  # noqa: E501

        :param meaning: The meaning of this Settlement.
        :type meaning: List[str]
        """

        self._meaning = meaning

    @property
    def dutch_name(self):
        """Gets the dutch_name of this Settlement.

        Description not available  # noqa: E501

        :return: The dutch_name of this Settlement.
        :rtype: List[str]
        """
        return self._dutch_name

    @dutch_name.setter
    def dutch_name(self, dutch_name):
        """Sets the dutch_name of this Settlement.

        Description not available  # noqa: E501

        :param dutch_name: The dutch_name of this Settlement.
        :type dutch_name: List[str]
        """

        self._dutch_name = dutch_name

    @property
    def manx_name(self):
        """Gets the manx_name of this Settlement.

        Description not available  # noqa: E501

        :return: The manx_name of this Settlement.
        :rtype: List[str]
        """
        return self._manx_name

    @manx_name.setter
    def manx_name(self, manx_name):
        """Sets the manx_name of this Settlement.

        Description not available  # noqa: E501

        :param manx_name: The manx_name of this Settlement.
        :type manx_name: List[str]
        """

        self._manx_name = manx_name

    @property
    def code_settlement(self):
        """Gets the code_settlement of this Settlement.

        Description not available  # noqa: E501

        :return: The code_settlement of this Settlement.
        :rtype: List[str]
        """
        return self._code_settlement

    @code_settlement.setter
    def code_settlement(self, code_settlement):
        """Sets the code_settlement of this Settlement.

        Description not available  # noqa: E501

        :param code_settlement: The code_settlement of this Settlement.
        :type code_settlement: List[str]
        """

        self._code_settlement = code_settlement

    @property
    def winter_temperature(self):
        """Gets the winter_temperature of this Settlement.

        Description not available  # noqa: E501

        :return: The winter_temperature of this Settlement.
        :rtype: List[float]
        """
        return self._winter_temperature

    @winter_temperature.setter
    def winter_temperature(self, winter_temperature):
        """Sets the winter_temperature of this Settlement.

        Description not available  # noqa: E501

        :param winter_temperature: The winter_temperature of this Settlement.
        :type winter_temperature: List[float]
        """

        self._winter_temperature = winter_temperature

    @property
    def id(self):
        """Gets the id of this Settlement.

        identifier  # noqa: E501

        :return: The id of this Settlement.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Settlement.

        identifier  # noqa: E501

        :param id: The id of this Settlement.
        :type id: str
        """

        self._id = id

    @property
    def twin_city(self):
        """Gets the twin_city of this Settlement.

        Description not available  # noqa: E501

        :return: The twin_city of this Settlement.
        :rtype: List[object]
        """
        return self._twin_city

    @twin_city.setter
    def twin_city(self, twin_city):
        """Sets the twin_city of this Settlement.

        Description not available  # noqa: E501

        :param twin_city: The twin_city of this Settlement.
        :type twin_city: List[object]
        """

        self._twin_city = twin_city

    @property
    def day(self):
        """Gets the day of this Settlement.

        Description not available  # noqa: E501

        :return: The day of this Settlement.
        :rtype: List[str]
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this Settlement.

        Description not available  # noqa: E501

        :param day: The day of this Settlement.
        :type day: List[str]
        """

        self._day = day

    @property
    def distance_to_charing_cross(self):
        """Gets the distance_to_charing_cross of this Settlement.

        Description not available  # noqa: E501

        :return: The distance_to_charing_cross of this Settlement.
        :rtype: List[float]
        """
        return self._distance_to_charing_cross

    @distance_to_charing_cross.setter
    def distance_to_charing_cross(self, distance_to_charing_cross):
        """Sets the distance_to_charing_cross of this Settlement.

        Description not available  # noqa: E501

        :param distance_to_charing_cross: The distance_to_charing_cross of this Settlement.
        :type distance_to_charing_cross: List[float]
        """

        self._distance_to_charing_cross = distance_to_charing_cross

    @property
    def distance_to_london(self):
        """Gets the distance_to_london of this Settlement.

        Description not available  # noqa: E501

        :return: The distance_to_london of this Settlement.
        :rtype: List[float]
        """
        return self._distance_to_london

    @distance_to_london.setter
    def distance_to_london(self, distance_to_london):
        """Sets the distance_to_london of this Settlement.

        Description not available  # noqa: E501

        :param distance_to_london: The distance_to_london of this Settlement.
        :type distance_to_london: List[float]
        """

        self._distance_to_london = distance_to_london

    @property
    def distance_to_dublin(self):
        """Gets the distance_to_dublin of this Settlement.

        Description not available  # noqa: E501

        :return: The distance_to_dublin of this Settlement.
        :rtype: List[float]
        """
        return self._distance_to_dublin

    @distance_to_dublin.setter
    def distance_to_dublin(self, distance_to_dublin):
        """Sets the distance_to_dublin of this Settlement.

        Description not available  # noqa: E501

        :param distance_to_dublin: The distance_to_dublin of this Settlement.
        :type distance_to_dublin: List[float]
        """

        self._distance_to_dublin = distance_to_dublin

    @property
    def sharing_out_name(self):
        """Gets the sharing_out_name of this Settlement.

        Description not available  # noqa: E501

        :return: The sharing_out_name of this Settlement.
        :rtype: List[object]
        """
        return self._sharing_out_name

    @sharing_out_name.setter
    def sharing_out_name(self, sharing_out_name):
        """Sets the sharing_out_name of this Settlement.

        Description not available  # noqa: E501

        :param sharing_out_name: The sharing_out_name of this Settlement.
        :type sharing_out_name: List[object]
        """

        self._sharing_out_name = sharing_out_name

    @property
    def distance_to_capital(self):
        """Gets the distance_to_capital of this Settlement.

        Description not available  # noqa: E501

        :return: The distance_to_capital of this Settlement.
        :rtype: List[float]
        """
        return self._distance_to_capital

    @distance_to_capital.setter
    def distance_to_capital(self, distance_to_capital):
        """Sets the distance_to_capital of this Settlement.

        Description not available  # noqa: E501

        :param distance_to_capital: The distance_to_capital of this Settlement.
        :type distance_to_capital: List[float]
        """

        self._distance_to_capital = distance_to_capital

    @property
    def distance_to_edinburgh(self):
        """Gets the distance_to_edinburgh of this Settlement.

        Description not available  # noqa: E501

        :return: The distance_to_edinburgh of this Settlement.
        :rtype: List[float]
        """
        return self._distance_to_edinburgh

    @distance_to_edinburgh.setter
    def distance_to_edinburgh(self, distance_to_edinburgh):
        """Sets the distance_to_edinburgh of this Settlement.

        Description not available  # noqa: E501

        :param distance_to_edinburgh: The distance_to_edinburgh of this Settlement.
        :type distance_to_edinburgh: List[float]
        """

        self._distance_to_edinburgh = distance_to_edinburgh

    @property
    def other_information(self):
        """Gets the other_information of this Settlement.

        Description not available  # noqa: E501

        :return: The other_information of this Settlement.
        :rtype: List[str]
        """
        return self._other_information

    @other_information.setter
    def other_information(self, other_information):
        """Sets the other_information of this Settlement.

        Description not available  # noqa: E501

        :param other_information: The other_information of this Settlement.
        :type other_information: List[str]
        """

        self._other_information = other_information

    @property
    def gaelic_name(self):
        """Gets the gaelic_name of this Settlement.

        Description not available  # noqa: E501

        :return: The gaelic_name of this Settlement.
        :rtype: List[str]
        """
        return self._gaelic_name

    @gaelic_name.setter
    def gaelic_name(self, gaelic_name):
        """Sets the gaelic_name of this Settlement.

        Description not available  # noqa: E501

        :param gaelic_name: The gaelic_name of this Settlement.
        :type gaelic_name: List[str]
        """

        self._gaelic_name = gaelic_name

    @property
    def coast_line(self):
        """Gets the coast_line of this Settlement.

        Description not available  # noqa: E501

        :return: The coast_line of this Settlement.
        :rtype: List[float]
        """
        return self._coast_line

    @coast_line.setter
    def coast_line(self, coast_line):
        """Sets the coast_line of this Settlement.

        Description not available  # noqa: E501

        :param coast_line: The coast_line of this Settlement.
        :type coast_line: List[float]
        """

        self._coast_line = coast_line

    @property
    def kabyle_name(self):
        """Gets the kabyle_name of this Settlement.

        Description not available  # noqa: E501

        :return: The kabyle_name of this Settlement.
        :rtype: List[str]
        """
        return self._kabyle_name

    @kabyle_name.setter
    def kabyle_name(self, kabyle_name):
        """Sets the kabyle_name of this Settlement.

        Description not available  # noqa: E501

        :param kabyle_name: The kabyle_name of this Settlement.
        :type kabyle_name: List[str]
        """

        self._kabyle_name = kabyle_name

    @property
    def association_of_local_government(self):
        """Gets the association_of_local_government of this Settlement.

        Description not available  # noqa: E501

        :return: The association_of_local_government of this Settlement.
        :rtype: List[object]
        """
        return self._association_of_local_government

    @association_of_local_government.setter
    def association_of_local_government(self, association_of_local_government):
        """Sets the association_of_local_government of this Settlement.

        Description not available  # noqa: E501

        :param association_of_local_government: The association_of_local_government of this Settlement.
        :type association_of_local_government: List[object]
        """

        self._association_of_local_government = association_of_local_government

    @property
    def iso_code_region(self):
        """Gets the iso_code_region of this Settlement.

        Description not available  # noqa: E501

        :return: The iso_code_region of this Settlement.
        :rtype: List[object]
        """
        return self._iso_code_region

    @iso_code_region.setter
    def iso_code_region(self, iso_code_region):
        """Sets the iso_code_region of this Settlement.

        Description not available  # noqa: E501

        :param iso_code_region: The iso_code_region of this Settlement.
        :type iso_code_region: List[object]
        """

        self._iso_code_region = iso_code_region

    @property
    def administrative_collectivity(self):
        """Gets the administrative_collectivity of this Settlement.

        Description not available  # noqa: E501

        :return: The administrative_collectivity of this Settlement.
        :rtype: List[object]
        """
        return self._administrative_collectivity

    @administrative_collectivity.setter
    def administrative_collectivity(self, administrative_collectivity):
        """Sets the administrative_collectivity of this Settlement.

        Description not available  # noqa: E501

        :param administrative_collectivity: The administrative_collectivity of this Settlement.
        :type administrative_collectivity: List[object]
        """

        self._administrative_collectivity = administrative_collectivity

    @property
    def merged_settlement(self):
        """Gets the merged_settlement of this Settlement.

        Description not available  # noqa: E501

        :return: The merged_settlement of this Settlement.
        :rtype: List[object]
        """
        return self._merged_settlement

    @merged_settlement.setter
    def merged_settlement(self, merged_settlement):
        """Sets the merged_settlement of this Settlement.

        Description not available  # noqa: E501

        :param merged_settlement: The merged_settlement of this Settlement.
        :type merged_settlement: List[object]
        """

        self._merged_settlement = merged_settlement

    @property
    def joint_community(self):
        """Gets the joint_community of this Settlement.

        Description not available  # noqa: E501

        :return: The joint_community of this Settlement.
        :rtype: List[object]
        """
        return self._joint_community

    @joint_community.setter
    def joint_community(self, joint_community):
        """Sets the joint_community of this Settlement.

        Description not available  # noqa: E501

        :param joint_community: The joint_community of this Settlement.
        :type joint_community: List[object]
        """

        self._joint_community = joint_community

    @property
    def federal_state(self):
        """Gets the federal_state of this Settlement.

        Description not available  # noqa: E501

        :return: The federal_state of this Settlement.
        :rtype: List[object]
        """
        return self._federal_state

    @federal_state.setter
    def federal_state(self, federal_state):
        """Sets the federal_state of this Settlement.

        Description not available  # noqa: E501

        :param federal_state: The federal_state of this Settlement.
        :type federal_state: List[object]
        """

        self._federal_state = federal_state

    @property
    def welsh_name(self):
        """Gets the welsh_name of this Settlement.

        Description not available  # noqa: E501

        :return: The welsh_name of this Settlement.
        :rtype: List[str]
        """
        return self._welsh_name

    @welsh_name.setter
    def welsh_name(self, welsh_name):
        """Sets the welsh_name of this Settlement.

        Description not available  # noqa: E501

        :param welsh_name: The welsh_name of this Settlement.
        :type welsh_name: List[str]
        """

        self._welsh_name = welsh_name

    @property
    def collectivity_minority(self):
        """Gets the collectivity_minority of this Settlement.

        Description not available  # noqa: E501

        :return: The collectivity_minority of this Settlement.
        :rtype: List[object]
        """
        return self._collectivity_minority

    @collectivity_minority.setter
    def collectivity_minority(self, collectivity_minority):
        """Sets the collectivity_minority of this Settlement.

        Description not available  # noqa: E501

        :param collectivity_minority: The collectivity_minority of this Settlement.
        :type collectivity_minority: List[object]
        """

        self._collectivity_minority = collectivity_minority

    @property
    def chaoui_name(self):
        """Gets the chaoui_name of this Settlement.

        Description not available  # noqa: E501

        :return: The chaoui_name of this Settlement.
        :rtype: List[str]
        """
        return self._chaoui_name

    @chaoui_name.setter
    def chaoui_name(self, chaoui_name):
        """Sets the chaoui_name of this Settlement.

        Description not available  # noqa: E501

        :param chaoui_name: The chaoui_name of this Settlement.
        :type chaoui_name: List[str]
        """

        self._chaoui_name = chaoui_name

    @property
    def scottish_name(self):
        """Gets the scottish_name of this Settlement.

        Description not available  # noqa: E501

        :return: The scottish_name of this Settlement.
        :rtype: List[str]
        """
        return self._scottish_name

    @scottish_name.setter
    def scottish_name(self, scottish_name):
        """Sets the scottish_name of this Settlement.

        Description not available  # noqa: E501

        :param scottish_name: The scottish_name of this Settlement.
        :type scottish_name: List[str]
        """

        self._scottish_name = scottish_name

    @property
    def english_name(self):
        """Gets the english_name of this Settlement.

        Description not available  # noqa: E501

        :return: The english_name of this Settlement.
        :rtype: List[str]
        """
        return self._english_name

    @english_name.setter
    def english_name(self, english_name):
        """Sets the english_name of this Settlement.

        Description not available  # noqa: E501

        :param english_name: The english_name of this Settlement.
        :type english_name: List[str]
        """

        self._english_name = english_name

    @property
    def algerian_settlement_name(self):
        """Gets the algerian_settlement_name of this Settlement.

        Description not available  # noqa: E501

        :return: The algerian_settlement_name of this Settlement.
        :rtype: List[str]
        """
        return self._algerian_settlement_name

    @algerian_settlement_name.setter
    def algerian_settlement_name(self, algerian_settlement_name):
        """Sets the algerian_settlement_name of this Settlement.

        Description not available  # noqa: E501

        :param algerian_settlement_name: The algerian_settlement_name of this Settlement.
        :type algerian_settlement_name: List[str]
        """

        self._algerian_settlement_name = algerian_settlement_name

    @property
    def patron_saint(self):
        """Gets the patron_saint of this Settlement.

        Description not available  # noqa: E501

        :return: The patron_saint of this Settlement.
        :rtype: List[object]
        """
        return self._patron_saint

    @patron_saint.setter
    def patron_saint(self, patron_saint):
        """Sets the patron_saint of this Settlement.

        Description not available  # noqa: E501

        :param patron_saint: The patron_saint of this Settlement.
        :type patron_saint: List[object]
        """

        self._patron_saint = patron_saint

    @property
    def phone_prefix_label(self):
        """Gets the phone_prefix_label of this Settlement.

        Description not available  # noqa: E501

        :return: The phone_prefix_label of this Settlement.
        :rtype: List[str]
        """
        return self._phone_prefix_label

    @phone_prefix_label.setter
    def phone_prefix_label(self, phone_prefix_label):
        """Sets the phone_prefix_label of this Settlement.

        Description not available  # noqa: E501

        :param phone_prefix_label: The phone_prefix_label of this Settlement.
        :type phone_prefix_label: List[str]
        """

        self._phone_prefix_label = phone_prefix_label

    @property
    def commune(self):
        """Gets the commune of this Settlement.

        Description not available  # noqa: E501

        :return: The commune of this Settlement.
        :rtype: List[object]
        """
        return self._commune

    @commune.setter
    def commune(self, commune):
        """Sets the commune of this Settlement.

        Description not available  # noqa: E501

        :param commune: The commune of this Settlement.
        :type commune: List[object]
        """

        self._commune = commune

    @property
    def description(self):
        """Gets the description of this Settlement.

        small description  # noqa: E501

        :return: The description of this Settlement.
        :rtype: List[str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Settlement.

        small description  # noqa: E501

        :param description: The description of this Settlement.
        :type description: List[str]
        """

        self._description = description

    @property
    def frazioni(self):
        """Gets the frazioni of this Settlement.

        Description not available  # noqa: E501

        :return: The frazioni of this Settlement.
        :rtype: List[object]
        """
        return self._frazioni

    @frazioni.setter
    def frazioni(self, frazioni):
        """Sets the frazioni of this Settlement.

        Description not available  # noqa: E501

        :param frazioni: The frazioni of this Settlement.
        :type frazioni: List[object]
        """

        self._frazioni = frazioni

    @property
    def political_majority(self):
        """Gets the political_majority of this Settlement.

        Description not available  # noqa: E501

        :return: The political_majority of this Settlement.
        :rtype: List[object]
        """
        return self._political_majority

    @political_majority.setter
    def political_majority(self, political_majority):
        """Sets the political_majority of this Settlement.

        Description not available  # noqa: E501

        :param political_majority: The political_majority of this Settlement.
        :type political_majority: List[object]
        """

        self._political_majority = political_majority

    @property
    def arabic_name(self):
        """Gets the arabic_name of this Settlement.

        Description not available  # noqa: E501

        :return: The arabic_name of this Settlement.
        :rtype: List[str]
        """
        return self._arabic_name

    @arabic_name.setter
    def arabic_name(self, arabic_name):
        """Sets the arabic_name of this Settlement.

        Description not available  # noqa: E501

        :param arabic_name: The arabic_name of this Settlement.
        :type arabic_name: List[str]
        """

        self._arabic_name = arabic_name

    @property
    def tamazight_name(self):
        """Gets the tamazight_name of this Settlement.

        Description not available  # noqa: E501

        :return: The tamazight_name of this Settlement.
        :rtype: List[str]
        """
        return self._tamazight_name

    @tamazight_name.setter
    def tamazight_name(self, tamazight_name):
        """Sets the tamazight_name of this Settlement.

        Description not available  # noqa: E501

        :param tamazight_name: The tamazight_name of this Settlement.
        :type tamazight_name: List[str]
        """

        self._tamazight_name = tamazight_name

    @property
    def insee_code(self):
        """Gets the insee_code of this Settlement.

        numerical indexing code used by the French National Institute for Statistics and Economic Studies (INSEE) to identify various entities  # noqa: E501

        :return: The insee_code of this Settlement.
        :rtype: List[int]
        """
        return self._insee_code

    @insee_code.setter
    def insee_code(self, insee_code):
        """Sets the insee_code of this Settlement.

        numerical indexing code used by the French National Institute for Statistics and Economic Studies (INSEE) to identify various entities  # noqa: E501

        :param insee_code: The insee_code of this Settlement.
        :type insee_code: List[int]
        """

        self._insee_code = insee_code

    @property
    def population_total_reference(self):
        """Gets the population_total_reference of this Settlement.

        Description not available  # noqa: E501

        :return: The population_total_reference of this Settlement.
        :rtype: List[object]
        """
        return self._population_total_reference

    @population_total_reference.setter
    def population_total_reference(self, population_total_reference):
        """Sets the population_total_reference of this Settlement.

        Description not available  # noqa: E501

        :param population_total_reference: The population_total_reference of this Settlement.
        :type population_total_reference: List[object]
        """

        self._population_total_reference = population_total_reference

    @property
    def touareg_name(self):
        """Gets the touareg_name of this Settlement.

        Description not available  # noqa: E501

        :return: The touareg_name of this Settlement.
        :rtype: List[str]
        """
        return self._touareg_name

    @touareg_name.setter
    def touareg_name(self, touareg_name):
        """Sets the touareg_name of this Settlement.

        Description not available  # noqa: E501

        :param touareg_name: The touareg_name of this Settlement.
        :type touareg_name: List[str]
        """

        self._touareg_name = touareg_name

    @property
    def political_seats(self):
        """Gets the political_seats of this Settlement.

        Description not available  # noqa: E501

        :return: The political_seats of this Settlement.
        :rtype: List[int]
        """
        return self._political_seats

    @political_seats.setter
    def political_seats(self, political_seats):
        """Sets the political_seats of this Settlement.

        Description not available  # noqa: E501

        :param political_seats: The political_seats of this Settlement.
        :type political_seats: List[int]
        """

        self._political_seats = political_seats

    @property
    def distance_to_douglas(self):
        """Gets the distance_to_douglas of this Settlement.

        Description not available  # noqa: E501

        :return: The distance_to_douglas of this Settlement.
        :rtype: List[float]
        """
        return self._distance_to_douglas

    @distance_to_douglas.setter
    def distance_to_douglas(self, distance_to_douglas):
        """Sets the distance_to_douglas of this Settlement.

        Description not available  # noqa: E501

        :param distance_to_douglas: The distance_to_douglas of this Settlement.
        :type distance_to_douglas: List[float]
        """

        self._distance_to_douglas = distance_to_douglas

    @property
    def algerian_name(self):
        """Gets the algerian_name of this Settlement.

        Description not available  # noqa: E501

        :return: The algerian_name of this Settlement.
        :rtype: List[str]
        """
        return self._algerian_name

    @algerian_name.setter
    def algerian_name(self, algerian_name):
        """Sets the algerian_name of this Settlement.

        Description not available  # noqa: E501

        :param algerian_name: The algerian_name of this Settlement.
        :type algerian_name: List[str]
        """

        self._algerian_name = algerian_name

    @property
    def other_language(self):
        """Gets the other_language of this Settlement.

        Description not available  # noqa: E501

        :return: The other_language of this Settlement.
        :rtype: List[str]
        """
        return self._other_language

    @other_language.setter
    def other_language(self, other_language):
        """Sets the other_language of this Settlement.

        Description not available  # noqa: E501

        :param other_language: The other_language of this Settlement.
        :type other_language: List[str]
        """

        self._other_language = other_language

    @property
    def ofs_code(self):
        """Gets the ofs_code of this Settlement.

        Description not available  # noqa: E501

        :return: The ofs_code of this Settlement.
        :rtype: List[str]
        """
        return self._ofs_code

    @ofs_code.setter
    def ofs_code(self, ofs_code):
        """Sets the ofs_code of this Settlement.

        Description not available  # noqa: E501

        :param ofs_code: The ofs_code of this Settlement.
        :type ofs_code: List[str]
        """

        self._ofs_code = ofs_code

    @property
    def touareg_settlement_name(self):
        """Gets the touareg_settlement_name of this Settlement.

        Description not available  # noqa: E501

        :return: The touareg_settlement_name of this Settlement.
        :rtype: List[str]
        """
        return self._touareg_settlement_name

    @touareg_settlement_name.setter
    def touareg_settlement_name(self, touareg_settlement_name):
        """Sets the touareg_settlement_name of this Settlement.

        Description not available  # noqa: E501

        :param touareg_settlement_name: The touareg_settlement_name of this Settlement.
        :type touareg_settlement_name: List[str]
        """

        self._touareg_settlement_name = touareg_settlement_name

    @property
    def distance_to_belfast(self):
        """Gets the distance_to_belfast of this Settlement.

        Description not available  # noqa: E501

        :return: The distance_to_belfast of this Settlement.
        :rtype: List[float]
        """
        return self._distance_to_belfast

    @distance_to_belfast.setter
    def distance_to_belfast(self, distance_to_belfast):
        """Sets the distance_to_belfast of this Settlement.

        Description not available  # noqa: E501

        :param distance_to_belfast: The distance_to_belfast of this Settlement.
        :type distance_to_belfast: List[float]
        """

        self._distance_to_belfast = distance_to_belfast

    @property
    def prov_code(self):
        """Gets the prov_code of this Settlement.

        Description not available  # noqa: E501

        :return: The prov_code of this Settlement.
        :rtype: List[str]
        """
        return self._prov_code

    @prov_code.setter
    def prov_code(self, prov_code):
        """Sets the prov_code of this Settlement.

        Description not available  # noqa: E501

        :param prov_code: The prov_code of this Settlement.
        :type prov_code: List[str]
        """

        self._prov_code = prov_code

    @property
    def largest_metro(self):
        """Gets the largest_metro of this Settlement.

        Description not available  # noqa: E501

        :return: The largest_metro of this Settlement.
        :rtype: List[object]
        """
        return self._largest_metro

    @largest_metro.setter
    def largest_metro(self, largest_metro):
        """Sets the largest_metro of this Settlement.

        Description not available  # noqa: E501

        :param largest_metro: The largest_metro of this Settlement.
        :type largest_metro: List[object]
        """

        self._largest_metro = largest_metro

    @property
    def label(self):
        """Gets the label of this Settlement.

        short description of the resource  # noqa: E501

        :return: The label of this Settlement.
        :rtype: List[str]
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Settlement.

        short description of the resource  # noqa: E501

        :param label: The label of this Settlement.
        :type label: List[str]
        """

        self._label = label

    @property
    def mozabite_name(self):
        """Gets the mozabite_name of this Settlement.

        Description not available  # noqa: E501

        :return: The mozabite_name of this Settlement.
        :rtype: List[str]
        """
        return self._mozabite_name

    @mozabite_name.setter
    def mozabite_name(self, mozabite_name):
        """Sets the mozabite_name of this Settlement.

        Description not available  # noqa: E501

        :param mozabite_name: The mozabite_name of this Settlement.
        :type mozabite_name: List[str]
        """

        self._mozabite_name = mozabite_name

    @property
    def highest_point(self):
        """Gets the highest_point of this Settlement.

        Description not available  # noqa: E501

        :return: The highest_point of this Settlement.
        :rtype: List[object]
        """
        return self._highest_point

    @highest_point.setter
    def highest_point(self, highest_point):
        """Sets the highest_point of this Settlement.

        Description not available  # noqa: E501

        :param highest_point: The highest_point of this Settlement.
        :type highest_point: List[object]
        """

        self._highest_point = highest_point

    @property
    def bourgmestre(self):
        """Gets the bourgmestre of this Settlement.

        Description not available  # noqa: E501

        :return: The bourgmestre of this Settlement.
        :rtype: List[object]
        """
        return self._bourgmestre

    @bourgmestre.setter
    def bourgmestre(self, bourgmestre):
        """Sets the bourgmestre of this Settlement.

        Description not available  # noqa: E501

        :param bourgmestre: The bourgmestre of this Settlement.
        :type bourgmestre: List[object]
        """

        self._bourgmestre = bourgmestre

    @property
    def summer_temperature(self):
        """Gets the summer_temperature of this Settlement.

        Description not available  # noqa: E501

        :return: The summer_temperature of this Settlement.
        :rtype: List[float]
        """
        return self._summer_temperature

    @summer_temperature.setter
    def summer_temperature(self, summer_temperature):
        """Sets the summer_temperature of this Settlement.

        Description not available  # noqa: E501

        :param summer_temperature: The summer_temperature of this Settlement.
        :type summer_temperature: List[float]
        """

        self._summer_temperature = summer_temperature

    @property
    def finnish_name(self):
        """Gets the finnish_name of this Settlement.

        Description not available  # noqa: E501

        :return: The finnish_name of this Settlement.
        :rtype: List[str]
        """
        return self._finnish_name

    @finnish_name.setter
    def finnish_name(self, finnish_name):
        """Sets the finnish_name of this Settlement.

        Description not available  # noqa: E501

        :param finnish_name: The finnish_name of this Settlement.
        :type finnish_name: List[str]
        """

        self._finnish_name = finnish_name

    @property
    def tamazight_settlement_name(self):
        """Gets the tamazight_settlement_name of this Settlement.

        Description not available  # noqa: E501

        :return: The tamazight_settlement_name of this Settlement.
        :rtype: List[str]
        """
        return self._tamazight_settlement_name

    @tamazight_settlement_name.setter
    def tamazight_settlement_name(self, tamazight_settlement_name):
        """Sets the tamazight_settlement_name of this Settlement.

        Description not available  # noqa: E501

        :param tamazight_settlement_name: The tamazight_settlement_name of this Settlement.
        :type tamazight_settlement_name: List[str]
        """

        self._tamazight_settlement_name = tamazight_settlement_name

    @property
    def canton(self):
        """Gets the canton of this Settlement.

        Description not available  # noqa: E501

        :return: The canton of this Settlement.
        :rtype: List[object]
        """
        return self._canton

    @canton.setter
    def canton(self, canton):
        """Sets the canton of this Settlement.

        Description not available  # noqa: E501

        :param canton: The canton of this Settlement.
        :type canton: List[object]
        """

        self._canton = canton

    @property
    def administrative_district(self):
        """Gets the administrative_district of this Settlement.

        Description not available  # noqa: E501

        :return: The administrative_district of this Settlement.
        :rtype: List[object]
        """
        return self._administrative_district

    @administrative_district.setter
    def administrative_district(self, administrative_district):
        """Sets the administrative_district of this Settlement.

        Description not available  # noqa: E501

        :param administrative_district: The administrative_district of this Settlement.
        :type administrative_district: List[object]
        """

        self._administrative_district = administrative_district

    @property
    def agglomeration_population_year(self):
        """Gets the agglomeration_population_year of this Settlement.

        Description not available  # noqa: E501

        :return: The agglomeration_population_year of this Settlement.
        :rtype: List[str]
        """
        return self._agglomeration_population_year

    @agglomeration_population_year.setter
    def agglomeration_population_year(self, agglomeration_population_year):
        """Sets the agglomeration_population_year of this Settlement.

        Description not available  # noqa: E501

        :param agglomeration_population_year: The agglomeration_population_year of this Settlement.
        :type agglomeration_population_year: List[str]
        """

        self._agglomeration_population_year = agglomeration_population_year
