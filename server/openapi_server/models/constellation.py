# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Constellation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, number_of_stars=None, periapsis=None, absolute_magnitude=None, orbital_eccentricity=None, description=None, right_ascension=None, label=None, neighbour_constellations=None, type=None, max_absolute_magnitude=None, apoapsis=None, declination=None, von_klitzing_constant=None, messier_name=None, max_apparent_magnitude=None, id=None, ngc_name=None):  # noqa: E501
        """Constellation - a model defined in OpenAPI

        :param number_of_stars: The number_of_stars of this Constellation.  # noqa: E501
        :type number_of_stars: List[int]
        :param periapsis: The periapsis of this Constellation.  # noqa: E501
        :type periapsis: List[float]
        :param absolute_magnitude: The absolute_magnitude of this Constellation.  # noqa: E501
        :type absolute_magnitude: List[float]
        :param orbital_eccentricity: The orbital_eccentricity of this Constellation.  # noqa: E501
        :type orbital_eccentricity: List[float]
        :param description: The description of this Constellation.  # noqa: E501
        :type description: List[str]
        :param right_ascension: The right_ascension of this Constellation.  # noqa: E501
        :type right_ascension: List[int]
        :param label: The label of this Constellation.  # noqa: E501
        :type label: List[str]
        :param neighbour_constellations: The neighbour_constellations of this Constellation.  # noqa: E501
        :type neighbour_constellations: List[str]
        :param type: The type of this Constellation.  # noqa: E501
        :type type: List[str]
        :param max_absolute_magnitude: The max_absolute_magnitude of this Constellation.  # noqa: E501
        :type max_absolute_magnitude: List[float]
        :param apoapsis: The apoapsis of this Constellation.  # noqa: E501
        :type apoapsis: List[float]
        :param declination: The declination of this Constellation.  # noqa: E501
        :type declination: List[int]
        :param von_klitzing_constant: The von_klitzing_constant of this Constellation.  # noqa: E501
        :type von_klitzing_constant: List[float]
        :param messier_name: The messier_name of this Constellation.  # noqa: E501
        :type messier_name: List[str]
        :param max_apparent_magnitude: The max_apparent_magnitude of this Constellation.  # noqa: E501
        :type max_apparent_magnitude: List[float]
        :param id: The id of this Constellation.  # noqa: E501
        :type id: str
        :param ngc_name: The ngc_name of this Constellation.  # noqa: E501
        :type ngc_name: List[str]
        """


        self.openapi_types = {
            'number_of_stars': List[int],
            'periapsis': List[float],
            'absolute_magnitude': List[float],
            'orbital_eccentricity': List[float],
            'description': List[str],
            'right_ascension': List[int],
            'label': List[str],
            'neighbour_constellations': List[str],
            'type': List[str],
            'max_absolute_magnitude': List[float],
            'apoapsis': List[float],
            'declination': List[int],
            'von_klitzing_constant': List[float],
            'messier_name': List[str],
            'max_apparent_magnitude': List[float],
            'id': str,
            'ngc_name': List[str]
        }

        self.attribute_map = {
            'number_of_stars': 'numberOfStars',
            'periapsis': 'periapsis',
            'absolute_magnitude': 'absoluteMagnitude',
            'orbital_eccentricity': 'orbitalEccentricity',
            'description': 'description',
            'right_ascension': 'rightAscension',
            'label': 'label',
            'neighbour_constellations': 'neighbourConstellations',
            'type': 'type',
            'max_absolute_magnitude': 'maxAbsoluteMagnitude',
            'apoapsis': 'apoapsis',
            'declination': 'declination',
            'von_klitzing_constant': 'vonKlitzingConstant',
            'messier_name': 'messierName',
            'max_apparent_magnitude': 'maxApparentMagnitude',
            'id': 'id',
            'ngc_name': 'ngcName'
        }

        self._number_of_stars = number_of_stars
        self._periapsis = periapsis
        self._absolute_magnitude = absolute_magnitude
        self._orbital_eccentricity = orbital_eccentricity
        self._description = description
        self._right_ascension = right_ascension
        self._label = label
        self._neighbour_constellations = neighbour_constellations
        self._type = type
        self._max_absolute_magnitude = max_absolute_magnitude
        self._apoapsis = apoapsis
        self._declination = declination
        self._von_klitzing_constant = von_klitzing_constant
        self._messier_name = messier_name
        self._max_apparent_magnitude = max_apparent_magnitude
        self._id = id
        self._ngc_name = ngc_name

    @classmethod
    def from_dict(cls, dikt) -> 'Constellation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Constellation of this Constellation.  # noqa: E501
        :rtype: Constellation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def number_of_stars(self):
        """Gets the number_of_stars of this Constellation.

        Description not available  # noqa: E501

        :return: The number_of_stars of this Constellation.
        :rtype: List[int]
        """
        return self._number_of_stars

    @number_of_stars.setter
    def number_of_stars(self, number_of_stars):
        """Sets the number_of_stars of this Constellation.

        Description not available  # noqa: E501

        :param number_of_stars: The number_of_stars of this Constellation.
        :type number_of_stars: List[int]
        """

        self._number_of_stars = number_of_stars

    @property
    def periapsis(self):
        """Gets the periapsis of this Constellation.

        Description not available  # noqa: E501

        :return: The periapsis of this Constellation.
        :rtype: List[float]
        """
        return self._periapsis

    @periapsis.setter
    def periapsis(self, periapsis):
        """Sets the periapsis of this Constellation.

        Description not available  # noqa: E501

        :param periapsis: The periapsis of this Constellation.
        :type periapsis: List[float]
        """

        self._periapsis = periapsis

    @property
    def absolute_magnitude(self):
        """Gets the absolute_magnitude of this Constellation.

        Description not available  # noqa: E501

        :return: The absolute_magnitude of this Constellation.
        :rtype: List[float]
        """
        return self._absolute_magnitude

    @absolute_magnitude.setter
    def absolute_magnitude(self, absolute_magnitude):
        """Sets the absolute_magnitude of this Constellation.

        Description not available  # noqa: E501

        :param absolute_magnitude: The absolute_magnitude of this Constellation.
        :type absolute_magnitude: List[float]
        """

        self._absolute_magnitude = absolute_magnitude

    @property
    def orbital_eccentricity(self):
        """Gets the orbital_eccentricity of this Constellation.

        Description not available  # noqa: E501

        :return: The orbital_eccentricity of this Constellation.
        :rtype: List[float]
        """
        return self._orbital_eccentricity

    @orbital_eccentricity.setter
    def orbital_eccentricity(self, orbital_eccentricity):
        """Sets the orbital_eccentricity of this Constellation.

        Description not available  # noqa: E501

        :param orbital_eccentricity: The orbital_eccentricity of this Constellation.
        :type orbital_eccentricity: List[float]
        """

        self._orbital_eccentricity = orbital_eccentricity

    @property
    def description(self):
        """Gets the description of this Constellation.

        small description  # noqa: E501

        :return: The description of this Constellation.
        :rtype: List[str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Constellation.

        small description  # noqa: E501

        :param description: The description of this Constellation.
        :type description: List[str]
        """

        self._description = description

    @property
    def right_ascension(self):
        """Gets the right_ascension of this Constellation.

        Description not available  # noqa: E501

        :return: The right_ascension of this Constellation.
        :rtype: List[int]
        """
        return self._right_ascension

    @right_ascension.setter
    def right_ascension(self, right_ascension):
        """Sets the right_ascension of this Constellation.

        Description not available  # noqa: E501

        :param right_ascension: The right_ascension of this Constellation.
        :type right_ascension: List[int]
        """

        self._right_ascension = right_ascension

    @property
    def label(self):
        """Gets the label of this Constellation.

        short description of the resource  # noqa: E501

        :return: The label of this Constellation.
        :rtype: List[str]
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Constellation.

        short description of the resource  # noqa: E501

        :param label: The label of this Constellation.
        :type label: List[str]
        """

        self._label = label

    @property
    def neighbour_constellations(self):
        """Gets the neighbour_constellations of this Constellation.

        Description not available  # noqa: E501

        :return: The neighbour_constellations of this Constellation.
        :rtype: List[str]
        """
        return self._neighbour_constellations

    @neighbour_constellations.setter
    def neighbour_constellations(self, neighbour_constellations):
        """Sets the neighbour_constellations of this Constellation.

        Description not available  # noqa: E501

        :param neighbour_constellations: The neighbour_constellations of this Constellation.
        :type neighbour_constellations: List[str]
        """

        self._neighbour_constellations = neighbour_constellations

    @property
    def type(self):
        """Gets the type of this Constellation.

        type of the resource  # noqa: E501

        :return: The type of this Constellation.
        :rtype: List[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Constellation.

        type of the resource  # noqa: E501

        :param type: The type of this Constellation.
        :type type: List[str]
        """

        self._type = type

    @property
    def max_absolute_magnitude(self):
        """Gets the max_absolute_magnitude of this Constellation.

        Description not available  # noqa: E501

        :return: The max_absolute_magnitude of this Constellation.
        :rtype: List[float]
        """
        return self._max_absolute_magnitude

    @max_absolute_magnitude.setter
    def max_absolute_magnitude(self, max_absolute_magnitude):
        """Sets the max_absolute_magnitude of this Constellation.

        Description not available  # noqa: E501

        :param max_absolute_magnitude: The max_absolute_magnitude of this Constellation.
        :type max_absolute_magnitude: List[float]
        """

        self._max_absolute_magnitude = max_absolute_magnitude

    @property
    def apoapsis(self):
        """Gets the apoapsis of this Constellation.

        Description not available  # noqa: E501

        :return: The apoapsis of this Constellation.
        :rtype: List[float]
        """
        return self._apoapsis

    @apoapsis.setter
    def apoapsis(self, apoapsis):
        """Sets the apoapsis of this Constellation.

        Description not available  # noqa: E501

        :param apoapsis: The apoapsis of this Constellation.
        :type apoapsis: List[float]
        """

        self._apoapsis = apoapsis

    @property
    def declination(self):
        """Gets the declination of this Constellation.

        Description not available  # noqa: E501

        :return: The declination of this Constellation.
        :rtype: List[int]
        """
        return self._declination

    @declination.setter
    def declination(self, declination):
        """Sets the declination of this Constellation.

        Description not available  # noqa: E501

        :param declination: The declination of this Constellation.
        :type declination: List[int]
        """

        self._declination = declination

    @property
    def von_klitzing_constant(self):
        """Gets the von_klitzing_constant of this Constellation.

        Description not available  # noqa: E501

        :return: The von_klitzing_constant of this Constellation.
        :rtype: List[float]
        """
        return self._von_klitzing_constant

    @von_klitzing_constant.setter
    def von_klitzing_constant(self, von_klitzing_constant):
        """Sets the von_klitzing_constant of this Constellation.

        Description not available  # noqa: E501

        :param von_klitzing_constant: The von_klitzing_constant of this Constellation.
        :type von_klitzing_constant: List[float]
        """

        self._von_klitzing_constant = von_klitzing_constant

    @property
    def messier_name(self):
        """Gets the messier_name of this Constellation.

        Name for Messier objects  # noqa: E501

        :return: The messier_name of this Constellation.
        :rtype: List[str]
        """
        return self._messier_name

    @messier_name.setter
    def messier_name(self, messier_name):
        """Sets the messier_name of this Constellation.

        Name for Messier objects  # noqa: E501

        :param messier_name: The messier_name of this Constellation.
        :type messier_name: List[str]
        """

        self._messier_name = messier_name

    @property
    def max_apparent_magnitude(self):
        """Gets the max_apparent_magnitude of this Constellation.

        Description not available  # noqa: E501

        :return: The max_apparent_magnitude of this Constellation.
        :rtype: List[float]
        """
        return self._max_apparent_magnitude

    @max_apparent_magnitude.setter
    def max_apparent_magnitude(self, max_apparent_magnitude):
        """Sets the max_apparent_magnitude of this Constellation.

        Description not available  # noqa: E501

        :param max_apparent_magnitude: The max_apparent_magnitude of this Constellation.
        :type max_apparent_magnitude: List[float]
        """

        self._max_apparent_magnitude = max_apparent_magnitude

    @property
    def id(self):
        """Gets the id of this Constellation.

        identifier  # noqa: E501

        :return: The id of this Constellation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Constellation.

        identifier  # noqa: E501

        :param id: The id of this Constellation.
        :type id: str
        """

        self._id = id

    @property
    def ngc_name(self):
        """Gets the ngc_name of this Constellation.

        Name for NGC objects  # noqa: E501

        :return: The ngc_name of this Constellation.
        :rtype: List[str]
        """
        return self._ngc_name

    @ngc_name.setter
    def ngc_name(self, ngc_name):
        """Sets the ngc_name of this Constellation.

        Name for NGC objects  # noqa: E501

        :param ngc_name: The ngc_name of this Constellation.
        :type ngc_name: List[str]
        """

        self._ngc_name = ngc_name
