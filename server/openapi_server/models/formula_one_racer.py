# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class FormulaOneRacer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, parent=None, competition_title=None, art_patron=None, tv_show=None, sport_country=None, salary=None, birth_name=None, spouse=None, junior_team=None, shoe_number=None, active_years_end_year_mgr=None, wins=None, usopen_wins=None, bust_size=None, cloth_size=None, nfl_season=None, date_of_burial=None, olympic_games_silver=None, nationality=None, first_win=None, debut_team=None, hof=None, relative=None, draft_league=None, newspaper=None, podiums=None, military_branch=None, ethnicity=None, state_of_origin=None, season_manager=None, blood_type=None, laterality=None, continental_tournament=None, junior_years_end_year=None, ithf_date=None, last_win=None, olympic_games=None, hair_color=None, foot=None, hand=None, federation=None, circumcised=None, sport_specialty=None, penis_length=None, detractor=None, sex=None, former_team=None, sexual_orientation=None, partner=None, sport_discipline=None, number_of_run=None, lah_hof=None, current_team_manager=None, little_pool_record=None, active_years=None, final_lost=None, death_place=None, victory_percentage_as_mgr=None, club=None, education_place=None, qatar_classic=None, match_point=None, pro_period=None, nla_id=None, current_team=None, world_tournament_bronze=None, bronze_medal_single=None, national_team=None, imposed_danse_score=None, final_lost_single=None, known_for=None, big_pool_record=None, title_double=None, eye_colour=None, architectural_movement=None, bibsys_id=None, fibahof=None, junior_season=None, notable_idea=None, trainer=None, continental_tournament_silver=None, original_danse_competition=None, status_manager=None, national_tournament=None, hometown=None, dead_in_fight_place=None, victory=None, citizenship=None, british_open=None, label=None, bronze_medal_double=None, national_tournament_bronze=None, escalafon=None, championships=None, waist_size=None, general_council=None, australia_open_single=None, team_manager=None, birth_sign=None, age=None, college=None, education=None, movie=None, team_coached=None, approach=None, victory_as_mgr=None, copilote=None, start_wct=None, id=None, team_title=None, feat=None, fastest_lap=None, sentence=None, roland_garros_single=None, state_of_origin_team=None, nfl_team=None, world_tournament=None, allegiance=None, lccn_id=None, car_number=None, british_wins=None, gold_medal_single=None, podium=None, state_of_origin_point=None, player_season=None, regional_council=None, homage=None, national_championship=None, first_pro_match=None, id_number=None, active_years_start_year_mgr=None, wedding_parents_date=None, silver_medal_double=None, world=None, astrological_sign=None, coalition=None, defeat_as_mgr=None, death_year=None, tournament_of_champions=None, world_tournament_gold=None, pga_wins=None, rid_id=None, team_point=None, related_functions=None, reign=None, best_rank_single=None, second=None, radio=None, free_score_competition=None, publication=None, opponent=None, us_open_single=None, employer=None, cash_price=None, residence=None, usurper=None, other_occupation=None, contest=None, active_years_end_date_mgr=None, original_danse_score=None, army=None, active_year=None, races=None, dubber=None, non_professional_career=None, military_function=None, patent=None, piercing=None, student=None, influenced=None, start_reign=None, university=None, ideology=None, conviction_date=None, media=None, bnf_id=None, pseudonym=None, speciality=None, kind_of_criminal_action=None, isni_id=None, wimbledon_single=None, significant_project=None, youth_club=None, leadership=None, death_date=None, special_trial=None, victim=None, height_against=None, has_natural_bust=None, individualised_pnd=None, current_league=None, poles=None, wimbledon_mixed=None, end_reign=None, viaf_id=None, hair_colour=None, expedition=None, main_domain=None, nndb_id=None, discipline=None, consecration=None, scene=None, best_lap=None, world_open=None, european_championship=None, friend=None, world_champion_title_year=None, full_score=None, diploma=None, abbeychurch_blessing=None, selection_year=None, height=None, handedness=None, philosophical_school=None, parliamentary_group=None, mount=None, davis_cup=None, junior_years_start_year=None, announced_from=None, australia_open_mixed=None, gold_medal_double=None, activity=None, pole_position=None, killed_by=None, first_race=None, draft_position=None, political_function=None, honours=None, ncaa_team=None, measurements=None, coemperor=None, roland_garros_mixed=None, selibr_id=None, danse_competition=None, birth_year=None, sports_function=None, orcid_id=None, election_date=None, collaboration=None, national_team_year=None, spouse_name=None, roland_garros_double=None, derived_word=None, bpn_id=None, free_danse_score=None, ncbhof=None, supplemental_draft_round=None, project=None, title_date=None, blood_group=None, school=None, bronze_medal_mixed=None, silver_medal_single=None, imposed_danse_competition=None, shoot=None, reign_name=None, influenced_by=None, cousurper=None, race_wins=None, jutsu=None, weight=None, other_media=None, alma_mater=None, olympic_games_wins=None, world_tournament_silver=None, australia_open_double=None, hopman_cup=None, mood=None, iihf_hof=None, free_prog_score=None, description=None, heisman=None, nfl_code=None, particular_sign=None, us_open_mixed=None, league_manager=None, free_prog_competition=None, weapon=None, kind_of_criminal=None, state_of_origin_year=None, player_status=None, other_function=None, career_station=None, resting_place_position=None, continental_tournament_bronze=None, final_lost_double=None, complexion=None, start=None, tessitura=None, start_career=None, birth_date=None, national_tournament_silver=None, other_activity=None, linguistics_tradition=None, sibling=None, title_single=None, olympic_games_gold=None, arrest_date=None, artistic_function=None, achievement=None, death_age=None, selection_point=None, type=None, relation=None, height_attack=None, living_place=None, season=None, world_team_cup=None, catch=None, decoration=None, case=None, profession=None, retirement_date=None, wife=None, ncaa_season=None, old_team_coached=None, coach_season=None, active_years_start_date_mgr=None, tattoo=None, hip_size=None, seiyu=None, career_points=None, short_prog_score=None, shoe_size=None, signature=None, olympic_games_bronze=None, draft_team=None, final_lost_team=None, danse_score=None, probowl_pick=None, short_prog_competition=None, college_hof=None, birth_place=None, eye_color=None, networth=None, silver_medal_mixed=None, racket_catching=None, national_team_match_point=None, us_open_double=None, national_selection=None, agency=None, start_wqs=None, coach_club=None, horse_riding_discipline=None, board=None, asia_championship=None, dead_in_fight_date=None, espn_id=None, last_race=None, manager_season=None, wimbledon_double=None, full_competition=None, gold_medal_mixed=None, affair=None, body_discovered=None, buried_place=None, last_pro_match=None, backhand=None, created=None, end_career=None, other_sports_experience=None, note_on_resting_place=None, fed_cup=None, person_function=None, superbowl_win=None, pro_since=None, cause_of_death=None, creation_christian_bishop=None, bad_guy=None, gym_apparatus=None, temple_year=None, clothing_size=None, award=None, last_position=None, last_season=None, resting_date=None, masters_wins=None, continental_tournament_gold=None, orientation=None, grave=None, resting_place=None, abbeychurch_blessing_charge=None, mvp=None, handisport=None, best_rank_double=None, external_ornament=None, third=None, film_number=None, temple=None, national_tournament_gold=None, athletics_discipline=None, death_cause=None):  # noqa: E501
        """FormulaOneRacer - a model defined in OpenAPI

        :param parent: The parent of this FormulaOneRacer.  # noqa: E501
        :type parent: List[object]
        :param competition_title: The competition_title of this FormulaOneRacer.  # noqa: E501
        :type competition_title: List[object]
        :param art_patron: The art_patron of this FormulaOneRacer.  # noqa: E501
        :type art_patron: List[object]
        :param tv_show: The tv_show of this FormulaOneRacer.  # noqa: E501
        :type tv_show: List[object]
        :param sport_country: The sport_country of this FormulaOneRacer.  # noqa: E501
        :type sport_country: List[object]
        :param salary: The salary of this FormulaOneRacer.  # noqa: E501
        :type salary: List[float]
        :param birth_name: The birth_name of this FormulaOneRacer.  # noqa: E501
        :type birth_name: List[str]
        :param spouse: The spouse of this FormulaOneRacer.  # noqa: E501
        :type spouse: List[object]
        :param junior_team: The junior_team of this FormulaOneRacer.  # noqa: E501
        :type junior_team: List[object]
        :param shoe_number: The shoe_number of this FormulaOneRacer.  # noqa: E501
        :type shoe_number: List[int]
        :param active_years_end_year_mgr: The active_years_end_year_mgr of this FormulaOneRacer.  # noqa: E501
        :type active_years_end_year_mgr: List[str]
        :param wins: The wins of this FormulaOneRacer.  # noqa: E501
        :type wins: List[int]
        :param usopen_wins: The usopen_wins of this FormulaOneRacer.  # noqa: E501
        :type usopen_wins: List[object]
        :param bust_size: The bust_size of this FormulaOneRacer.  # noqa: E501
        :type bust_size: List[float]
        :param cloth_size: The cloth_size of this FormulaOneRacer.  # noqa: E501
        :type cloth_size: List[str]
        :param nfl_season: The nfl_season of this FormulaOneRacer.  # noqa: E501
        :type nfl_season: List[str]
        :param date_of_burial: The date_of_burial of this FormulaOneRacer.  # noqa: E501
        :type date_of_burial: List[str]
        :param olympic_games_silver: The olympic_games_silver of this FormulaOneRacer.  # noqa: E501
        :type olympic_games_silver: List[int]
        :param nationality: The nationality of this FormulaOneRacer.  # noqa: E501
        :type nationality: List[object]
        :param first_win: The first_win of this FormulaOneRacer.  # noqa: E501
        :type first_win: List[object]
        :param debut_team: The debut_team of this FormulaOneRacer.  # noqa: E501
        :type debut_team: List[object]
        :param hof: The hof of this FormulaOneRacer.  # noqa: E501
        :type hof: List[str]
        :param relative: The relative of this FormulaOneRacer.  # noqa: E501
        :type relative: List[object]
        :param draft_league: The draft_league of this FormulaOneRacer.  # noqa: E501
        :type draft_league: List[str]
        :param newspaper: The newspaper of this FormulaOneRacer.  # noqa: E501
        :type newspaper: List[object]
        :param podiums: The podiums of this FormulaOneRacer.  # noqa: E501
        :type podiums: List[int]
        :param military_branch: The military_branch of this FormulaOneRacer.  # noqa: E501
        :type military_branch: List[object]
        :param ethnicity: The ethnicity of this FormulaOneRacer.  # noqa: E501
        :type ethnicity: List[object]
        :param state_of_origin: The state_of_origin of this FormulaOneRacer.  # noqa: E501
        :type state_of_origin: List[object]
        :param season_manager: The season_manager of this FormulaOneRacer.  # noqa: E501
        :type season_manager: List[str]
        :param blood_type: The blood_type of this FormulaOneRacer.  # noqa: E501
        :type blood_type: List[object]
        :param laterality: The laterality of this FormulaOneRacer.  # noqa: E501
        :type laterality: List[str]
        :param continental_tournament: The continental_tournament of this FormulaOneRacer.  # noqa: E501
        :type continental_tournament: List[object]
        :param junior_years_end_year: The junior_years_end_year of this FormulaOneRacer.  # noqa: E501
        :type junior_years_end_year: List[str]
        :param ithf_date: The ithf_date of this FormulaOneRacer.  # noqa: E501
        :type ithf_date: List[str]
        :param last_win: The last_win of this FormulaOneRacer.  # noqa: E501
        :type last_win: List[object]
        :param olympic_games: The olympic_games of this FormulaOneRacer.  # noqa: E501
        :type olympic_games: List[object]
        :param hair_color: The hair_color of this FormulaOneRacer.  # noqa: E501
        :type hair_color: List[object]
        :param foot: The foot of this FormulaOneRacer.  # noqa: E501
        :type foot: List[str]
        :param hand: The hand of this FormulaOneRacer.  # noqa: E501
        :type hand: List[object]
        :param federation: The federation of this FormulaOneRacer.  # noqa: E501
        :type federation: List[object]
        :param circumcised: The circumcised of this FormulaOneRacer.  # noqa: E501
        :type circumcised: List[str]
        :param sport_specialty: The sport_specialty of this FormulaOneRacer.  # noqa: E501
        :type sport_specialty: List[object]
        :param penis_length: The penis_length of this FormulaOneRacer.  # noqa: E501
        :type penis_length: List[str]
        :param detractor: The detractor of this FormulaOneRacer.  # noqa: E501
        :type detractor: List[object]
        :param sex: The sex of this FormulaOneRacer.  # noqa: E501
        :type sex: List[str]
        :param former_team: The former_team of this FormulaOneRacer.  # noqa: E501
        :type former_team: List[object]
        :param sexual_orientation: The sexual_orientation of this FormulaOneRacer.  # noqa: E501
        :type sexual_orientation: List[object]
        :param partner: The partner of this FormulaOneRacer.  # noqa: E501
        :type partner: List[object]
        :param sport_discipline: The sport_discipline of this FormulaOneRacer.  # noqa: E501
        :type sport_discipline: List[object]
        :param number_of_run: The number_of_run of this FormulaOneRacer.  # noqa: E501
        :type number_of_run: List[int]
        :param lah_hof: The lah_hof of this FormulaOneRacer.  # noqa: E501
        :type lah_hof: List[str]
        :param current_team_manager: The current_team_manager of this FormulaOneRacer.  # noqa: E501
        :type current_team_manager: List[object]
        :param little_pool_record: The little_pool_record of this FormulaOneRacer.  # noqa: E501
        :type little_pool_record: List[str]
        :param active_years: The active_years of this FormulaOneRacer.  # noqa: E501
        :type active_years: List[object]
        :param final_lost: The final_lost of this FormulaOneRacer.  # noqa: E501
        :type final_lost: List[int]
        :param death_place: The death_place of this FormulaOneRacer.  # noqa: E501
        :type death_place: List[object]
        :param victory_percentage_as_mgr: The victory_percentage_as_mgr of this FormulaOneRacer.  # noqa: E501
        :type victory_percentage_as_mgr: List[float]
        :param club: The club of this FormulaOneRacer.  # noqa: E501
        :type club: List[object]
        :param education_place: The education_place of this FormulaOneRacer.  # noqa: E501
        :type education_place: List[object]
        :param qatar_classic: The qatar_classic of this FormulaOneRacer.  # noqa: E501
        :type qatar_classic: List[str]
        :param match_point: The match_point of this FormulaOneRacer.  # noqa: E501
        :type match_point: List[str]
        :param pro_period: The pro_period of this FormulaOneRacer.  # noqa: E501
        :type pro_period: List[str]
        :param nla_id: The nla_id of this FormulaOneRacer.  # noqa: E501
        :type nla_id: List[str]
        :param current_team: The current_team of this FormulaOneRacer.  # noqa: E501
        :type current_team: List[object]
        :param world_tournament_bronze: The world_tournament_bronze of this FormulaOneRacer.  # noqa: E501
        :type world_tournament_bronze: List[int]
        :param bronze_medal_single: The bronze_medal_single of this FormulaOneRacer.  # noqa: E501
        :type bronze_medal_single: List[str]
        :param national_team: The national_team of this FormulaOneRacer.  # noqa: E501
        :type national_team: List[object]
        :param imposed_danse_score: The imposed_danse_score of this FormulaOneRacer.  # noqa: E501
        :type imposed_danse_score: List[str]
        :param final_lost_single: The final_lost_single of this FormulaOneRacer.  # noqa: E501
        :type final_lost_single: List[str]
        :param known_for: The known_for of this FormulaOneRacer.  # noqa: E501
        :type known_for: List[object]
        :param big_pool_record: The big_pool_record of this FormulaOneRacer.  # noqa: E501
        :type big_pool_record: List[str]
        :param title_double: The title_double of this FormulaOneRacer.  # noqa: E501
        :type title_double: List[str]
        :param eye_colour: The eye_colour of this FormulaOneRacer.  # noqa: E501
        :type eye_colour: List[str]
        :param architectural_movement: The architectural_movement of this FormulaOneRacer.  # noqa: E501
        :type architectural_movement: List[str]
        :param bibsys_id: The bibsys_id of this FormulaOneRacer.  # noqa: E501
        :type bibsys_id: List[str]
        :param fibahof: The fibahof of this FormulaOneRacer.  # noqa: E501
        :type fibahof: List[str]
        :param junior_season: The junior_season of this FormulaOneRacer.  # noqa: E501
        :type junior_season: List[object]
        :param notable_idea: The notable_idea of this FormulaOneRacer.  # noqa: E501
        :type notable_idea: List[object]
        :param trainer: The trainer of this FormulaOneRacer.  # noqa: E501
        :type trainer: List[object]
        :param continental_tournament_silver: The continental_tournament_silver of this FormulaOneRacer.  # noqa: E501
        :type continental_tournament_silver: List[int]
        :param original_danse_competition: The original_danse_competition of this FormulaOneRacer.  # noqa: E501
        :type original_danse_competition: List[str]
        :param status_manager: The status_manager of this FormulaOneRacer.  # noqa: E501
        :type status_manager: List[str]
        :param national_tournament: The national_tournament of this FormulaOneRacer.  # noqa: E501
        :type national_tournament: List[object]
        :param hometown: The hometown of this FormulaOneRacer.  # noqa: E501
        :type hometown: List[object]
        :param dead_in_fight_place: The dead_in_fight_place of this FormulaOneRacer.  # noqa: E501
        :type dead_in_fight_place: List[str]
        :param victory: The victory of this FormulaOneRacer.  # noqa: E501
        :type victory: List[int]
        :param citizenship: The citizenship of this FormulaOneRacer.  # noqa: E501
        :type citizenship: List[object]
        :param british_open: The british_open of this FormulaOneRacer.  # noqa: E501
        :type british_open: List[str]
        :param label: The label of this FormulaOneRacer.  # noqa: E501
        :type label: List[str]
        :param bronze_medal_double: The bronze_medal_double of this FormulaOneRacer.  # noqa: E501
        :type bronze_medal_double: List[str]
        :param national_tournament_bronze: The national_tournament_bronze of this FormulaOneRacer.  # noqa: E501
        :type national_tournament_bronze: List[int]
        :param escalafon: The escalafon of this FormulaOneRacer.  # noqa: E501
        :type escalafon: List[str]
        :param championships: The championships of this FormulaOneRacer.  # noqa: E501
        :type championships: List[int]
        :param waist_size: The waist_size of this FormulaOneRacer.  # noqa: E501
        :type waist_size: List[float]
        :param general_council: The general_council of this FormulaOneRacer.  # noqa: E501
        :type general_council: List[object]
        :param australia_open_single: The australia_open_single of this FormulaOneRacer.  # noqa: E501
        :type australia_open_single: List[str]
        :param team_manager: The team_manager of this FormulaOneRacer.  # noqa: E501
        :type team_manager: List[object]
        :param birth_sign: The birth_sign of this FormulaOneRacer.  # noqa: E501
        :type birth_sign: List[object]
        :param age: The age of this FormulaOneRacer.  # noqa: E501
        :type age: List[int]
        :param college: The college of this FormulaOneRacer.  # noqa: E501
        :type college: List[object]
        :param education: The education of this FormulaOneRacer.  # noqa: E501
        :type education: List[object]
        :param movie: The movie of this FormulaOneRacer.  # noqa: E501
        :type movie: List[object]
        :param team_coached: The team_coached of this FormulaOneRacer.  # noqa: E501
        :type team_coached: List[object]
        :param approach: The approach of this FormulaOneRacer.  # noqa: E501
        :type approach: List[object]
        :param victory_as_mgr: The victory_as_mgr of this FormulaOneRacer.  # noqa: E501
        :type victory_as_mgr: List[int]
        :param copilote: The copilote of this FormulaOneRacer.  # noqa: E501
        :type copilote: List[object]
        :param start_wct: The start_wct of this FormulaOneRacer.  # noqa: E501
        :type start_wct: List[str]
        :param id: The id of this FormulaOneRacer.  # noqa: E501
        :type id: str
        :param team_title: The team_title of this FormulaOneRacer.  # noqa: E501
        :type team_title: List[str]
        :param feat: The feat of this FormulaOneRacer.  # noqa: E501
        :type feat: List[str]
        :param fastest_lap: The fastest_lap of this FormulaOneRacer.  # noqa: E501
        :type fastest_lap: List[int]
        :param sentence: The sentence of this FormulaOneRacer.  # noqa: E501
        :type sentence: List[str]
        :param roland_garros_single: The roland_garros_single of this FormulaOneRacer.  # noqa: E501
        :type roland_garros_single: List[str]
        :param state_of_origin_team: The state_of_origin_team of this FormulaOneRacer.  # noqa: E501
        :type state_of_origin_team: List[object]
        :param nfl_team: The nfl_team of this FormulaOneRacer.  # noqa: E501
        :type nfl_team: List[object]
        :param world_tournament: The world_tournament of this FormulaOneRacer.  # noqa: E501
        :type world_tournament: List[object]
        :param allegiance: The allegiance of this FormulaOneRacer.  # noqa: E501
        :type allegiance: List[str]
        :param lccn_id: The lccn_id of this FormulaOneRacer.  # noqa: E501
        :type lccn_id: List[str]
        :param car_number: The car_number of this FormulaOneRacer.  # noqa: E501
        :type car_number: List[int]
        :param british_wins: The british_wins of this FormulaOneRacer.  # noqa: E501
        :type british_wins: List[object]
        :param gold_medal_single: The gold_medal_single of this FormulaOneRacer.  # noqa: E501
        :type gold_medal_single: List[str]
        :param podium: The podium of this FormulaOneRacer.  # noqa: E501
        :type podium: List[int]
        :param state_of_origin_point: The state_of_origin_point of this FormulaOneRacer.  # noqa: E501
        :type state_of_origin_point: List[int]
        :param player_season: The player_season of this FormulaOneRacer.  # noqa: E501
        :type player_season: List[object]
        :param regional_council: The regional_council of this FormulaOneRacer.  # noqa: E501
        :type regional_council: List[object]
        :param homage: The homage of this FormulaOneRacer.  # noqa: E501
        :type homage: List[str]
        :param national_championship: The national_championship of this FormulaOneRacer.  # noqa: E501
        :type national_championship: List[str]
        :param first_pro_match: The first_pro_match of this FormulaOneRacer.  # noqa: E501
        :type first_pro_match: List[str]
        :param id_number: The id_number of this FormulaOneRacer.  # noqa: E501
        :type id_number: List[int]
        :param active_years_start_year_mgr: The active_years_start_year_mgr of this FormulaOneRacer.  # noqa: E501
        :type active_years_start_year_mgr: List[str]
        :param wedding_parents_date: The wedding_parents_date of this FormulaOneRacer.  # noqa: E501
        :type wedding_parents_date: List[str]
        :param silver_medal_double: The silver_medal_double of this FormulaOneRacer.  # noqa: E501
        :type silver_medal_double: List[str]
        :param world: The world of this FormulaOneRacer.  # noqa: E501
        :type world: List[object]
        :param astrological_sign: The astrological_sign of this FormulaOneRacer.  # noqa: E501
        :type astrological_sign: List[object]
        :param coalition: The coalition of this FormulaOneRacer.  # noqa: E501
        :type coalition: List[str]
        :param defeat_as_mgr: The defeat_as_mgr of this FormulaOneRacer.  # noqa: E501
        :type defeat_as_mgr: List[int]
        :param death_year: The death_year of this FormulaOneRacer.  # noqa: E501
        :type death_year: List[str]
        :param tournament_of_champions: The tournament_of_champions of this FormulaOneRacer.  # noqa: E501
        :type tournament_of_champions: List[str]
        :param world_tournament_gold: The world_tournament_gold of this FormulaOneRacer.  # noqa: E501
        :type world_tournament_gold: List[int]
        :param pga_wins: The pga_wins of this FormulaOneRacer.  # noqa: E501
        :type pga_wins: List[object]
        :param rid_id: The rid_id of this FormulaOneRacer.  # noqa: E501
        :type rid_id: List[str]
        :param team_point: The team_point of this FormulaOneRacer.  # noqa: E501
        :type team_point: List[int]
        :param related_functions: The related_functions of this FormulaOneRacer.  # noqa: E501
        :type related_functions: List[object]
        :param reign: The reign of this FormulaOneRacer.  # noqa: E501
        :type reign: List[str]
        :param best_rank_single: The best_rank_single of this FormulaOneRacer.  # noqa: E501
        :type best_rank_single: List[str]
        :param second: The second of this FormulaOneRacer.  # noqa: E501
        :type second: List[int]
        :param radio: The radio of this FormulaOneRacer.  # noqa: E501
        :type radio: List[object]
        :param free_score_competition: The free_score_competition of this FormulaOneRacer.  # noqa: E501
        :type free_score_competition: List[str]
        :param publication: The publication of this FormulaOneRacer.  # noqa: E501
        :type publication: List[str]
        :param opponent: The opponent of this FormulaOneRacer.  # noqa: E501
        :type opponent: List[object]
        :param us_open_single: The us_open_single of this FormulaOneRacer.  # noqa: E501
        :type us_open_single: List[str]
        :param employer: The employer of this FormulaOneRacer.  # noqa: E501
        :type employer: List[object]
        :param cash_price: The cash_price of this FormulaOneRacer.  # noqa: E501
        :type cash_price: List[str]
        :param residence: The residence of this FormulaOneRacer.  # noqa: E501
        :type residence: List[object]
        :param usurper: The usurper of this FormulaOneRacer.  # noqa: E501
        :type usurper: List[object]
        :param other_occupation: The other_occupation of this FormulaOneRacer.  # noqa: E501
        :type other_occupation: List[object]
        :param contest: The contest of this FormulaOneRacer.  # noqa: E501
        :type contest: List[object]
        :param active_years_end_date_mgr: The active_years_end_date_mgr of this FormulaOneRacer.  # noqa: E501
        :type active_years_end_date_mgr: List[str]
        :param original_danse_score: The original_danse_score of this FormulaOneRacer.  # noqa: E501
        :type original_danse_score: List[str]
        :param army: The army of this FormulaOneRacer.  # noqa: E501
        :type army: List[str]
        :param active_year: The active_year of this FormulaOneRacer.  # noqa: E501
        :type active_year: List[str]
        :param races: The races of this FormulaOneRacer.  # noqa: E501
        :type races: List[int]
        :param dubber: The dubber of this FormulaOneRacer.  # noqa: E501
        :type dubber: List[object]
        :param non_professional_career: The non_professional_career of this FormulaOneRacer.  # noqa: E501
        :type non_professional_career: List[str]
        :param military_function: The military_function of this FormulaOneRacer.  # noqa: E501
        :type military_function: List[str]
        :param patent: The patent of this FormulaOneRacer.  # noqa: E501
        :type patent: List[object]
        :param piercing: The piercing of this FormulaOneRacer.  # noqa: E501
        :type piercing: List[str]
        :param student: The student of this FormulaOneRacer.  # noqa: E501
        :type student: List[object]
        :param influenced: The influenced of this FormulaOneRacer.  # noqa: E501
        :type influenced: List[object]
        :param start_reign: The start_reign of this FormulaOneRacer.  # noqa: E501
        :type start_reign: List[object]
        :param university: The university of this FormulaOneRacer.  # noqa: E501
        :type university: List[object]
        :param ideology: The ideology of this FormulaOneRacer.  # noqa: E501
        :type ideology: List[object]
        :param conviction_date: The conviction_date of this FormulaOneRacer.  # noqa: E501
        :type conviction_date: List[str]
        :param media: The media of this FormulaOneRacer.  # noqa: E501
        :type media: List[object]
        :param bnf_id: The bnf_id of this FormulaOneRacer.  # noqa: E501
        :type bnf_id: List[str]
        :param pseudonym: The pseudonym of this FormulaOneRacer.  # noqa: E501
        :type pseudonym: List[str]
        :param speciality: The speciality of this FormulaOneRacer.  # noqa: E501
        :type speciality: List[str]
        :param kind_of_criminal_action: The kind_of_criminal_action of this FormulaOneRacer.  # noqa: E501
        :type kind_of_criminal_action: List[str]
        :param isni_id: The isni_id of this FormulaOneRacer.  # noqa: E501
        :type isni_id: List[str]
        :param wimbledon_single: The wimbledon_single of this FormulaOneRacer.  # noqa: E501
        :type wimbledon_single: List[str]
        :param significant_project: The significant_project of this FormulaOneRacer.  # noqa: E501
        :type significant_project: List[object]
        :param youth_club: The youth_club of this FormulaOneRacer.  # noqa: E501
        :type youth_club: List[object]
        :param leadership: The leadership of this FormulaOneRacer.  # noqa: E501
        :type leadership: List[str]
        :param death_date: The death_date of this FormulaOneRacer.  # noqa: E501
        :type death_date: List[str]
        :param special_trial: The special_trial of this FormulaOneRacer.  # noqa: E501
        :type special_trial: List[int]
        :param victim: The victim of this FormulaOneRacer.  # noqa: E501
        :type victim: List[str]
        :param height_against: The height_against of this FormulaOneRacer.  # noqa: E501
        :type height_against: List[str]
        :param has_natural_bust: The has_natural_bust of this FormulaOneRacer.  # noqa: E501
        :type has_natural_bust: List[str]
        :param individualised_pnd: The individualised_pnd of this FormulaOneRacer.  # noqa: E501
        :type individualised_pnd: List[int]
        :param current_league: The current_league of this FormulaOneRacer.  # noqa: E501
        :type current_league: List[object]
        :param poles: The poles of this FormulaOneRacer.  # noqa: E501
        :type poles: List[int]
        :param wimbledon_mixed: The wimbledon_mixed of this FormulaOneRacer.  # noqa: E501
        :type wimbledon_mixed: List[str]
        :param end_reign: The end_reign of this FormulaOneRacer.  # noqa: E501
        :type end_reign: List[object]
        :param viaf_id: The viaf_id of this FormulaOneRacer.  # noqa: E501
        :type viaf_id: List[str]
        :param hair_colour: The hair_colour of this FormulaOneRacer.  # noqa: E501
        :type hair_colour: List[str]
        :param expedition: The expedition of this FormulaOneRacer.  # noqa: E501
        :type expedition: List[str]
        :param main_domain: The main_domain of this FormulaOneRacer.  # noqa: E501
        :type main_domain: List[object]
        :param nndb_id: The nndb_id of this FormulaOneRacer.  # noqa: E501
        :type nndb_id: List[str]
        :param discipline: The discipline of this FormulaOneRacer.  # noqa: E501
        :type discipline: List[object]
        :param consecration: The consecration of this FormulaOneRacer.  # noqa: E501
        :type consecration: List[str]
        :param scene: The scene of this FormulaOneRacer.  # noqa: E501
        :type scene: List[str]
        :param best_lap: The best_lap of this FormulaOneRacer.  # noqa: E501
        :type best_lap: List[str]
        :param world_open: The world_open of this FormulaOneRacer.  # noqa: E501
        :type world_open: List[str]
        :param european_championship: The european_championship of this FormulaOneRacer.  # noqa: E501
        :type european_championship: List[str]
        :param friend: The friend of this FormulaOneRacer.  # noqa: E501
        :type friend: List[object]
        :param world_champion_title_year: The world_champion_title_year of this FormulaOneRacer.  # noqa: E501
        :type world_champion_title_year: List[str]
        :param full_score: The full_score of this FormulaOneRacer.  # noqa: E501
        :type full_score: List[str]
        :param diploma: The diploma of this FormulaOneRacer.  # noqa: E501
        :type diploma: List[object]
        :param abbeychurch_blessing: The abbeychurch_blessing of this FormulaOneRacer.  # noqa: E501
        :type abbeychurch_blessing: List[str]
        :param selection_year: The selection_year of this FormulaOneRacer.  # noqa: E501
        :type selection_year: List[str]
        :param height: The height of this FormulaOneRacer.  # noqa: E501
        :type height: List[object]
        :param handedness: The handedness of this FormulaOneRacer.  # noqa: E501
        :type handedness: List[object]
        :param philosophical_school: The philosophical_school of this FormulaOneRacer.  # noqa: E501
        :type philosophical_school: List[object]
        :param parliamentary_group: The parliamentary_group of this FormulaOneRacer.  # noqa: E501
        :type parliamentary_group: List[str]
        :param mount: The mount of this FormulaOneRacer.  # noqa: E501
        :type mount: List[str]
        :param davis_cup: The davis_cup of this FormulaOneRacer.  # noqa: E501
        :type davis_cup: List[str]
        :param junior_years_start_year: The junior_years_start_year of this FormulaOneRacer.  # noqa: E501
        :type junior_years_start_year: List[str]
        :param announced_from: The announced_from of this FormulaOneRacer.  # noqa: E501
        :type announced_from: List[object]
        :param australia_open_mixed: The australia_open_mixed of this FormulaOneRacer.  # noqa: E501
        :type australia_open_mixed: List[str]
        :param gold_medal_double: The gold_medal_double of this FormulaOneRacer.  # noqa: E501
        :type gold_medal_double: List[str]
        :param activity: The activity of this FormulaOneRacer.  # noqa: E501
        :type activity: List[object]
        :param pole_position: The pole_position of this FormulaOneRacer.  # noqa: E501
        :type pole_position: List[int]
        :param killed_by: The killed_by of this FormulaOneRacer.  # noqa: E501
        :type killed_by: List[str]
        :param first_race: The first_race of this FormulaOneRacer.  # noqa: E501
        :type first_race: List[object]
        :param draft_position: The draft_position of this FormulaOneRacer.  # noqa: E501
        :type draft_position: List[int]
        :param political_function: The political_function of this FormulaOneRacer.  # noqa: E501
        :type political_function: List[str]
        :param honours: The honours of this FormulaOneRacer.  # noqa: E501
        :type honours: List[object]
        :param ncaa_team: The ncaa_team of this FormulaOneRacer.  # noqa: E501
        :type ncaa_team: List[object]
        :param measurements: The measurements of this FormulaOneRacer.  # noqa: E501
        :type measurements: List[str]
        :param coemperor: The coemperor of this FormulaOneRacer.  # noqa: E501
        :type coemperor: List[object]
        :param roland_garros_mixed: The roland_garros_mixed of this FormulaOneRacer.  # noqa: E501
        :type roland_garros_mixed: List[str]
        :param selibr_id: The selibr_id of this FormulaOneRacer.  # noqa: E501
        :type selibr_id: List[str]
        :param danse_competition: The danse_competition of this FormulaOneRacer.  # noqa: E501
        :type danse_competition: List[str]
        :param birth_year: The birth_year of this FormulaOneRacer.  # noqa: E501
        :type birth_year: List[str]
        :param sports_function: The sports_function of this FormulaOneRacer.  # noqa: E501
        :type sports_function: List[str]
        :param orcid_id: The orcid_id of this FormulaOneRacer.  # noqa: E501
        :type orcid_id: List[str]
        :param election_date: The election_date of this FormulaOneRacer.  # noqa: E501
        :type election_date: List[str]
        :param collaboration: The collaboration of this FormulaOneRacer.  # noqa: E501
        :type collaboration: List[object]
        :param national_team_year: The national_team_year of this FormulaOneRacer.  # noqa: E501
        :type national_team_year: List[str]
        :param spouse_name: The spouse_name of this FormulaOneRacer.  # noqa: E501
        :type spouse_name: List[str]
        :param roland_garros_double: The roland_garros_double of this FormulaOneRacer.  # noqa: E501
        :type roland_garros_double: List[str]
        :param derived_word: The derived_word of this FormulaOneRacer.  # noqa: E501
        :type derived_word: List[str]
        :param bpn_id: The bpn_id of this FormulaOneRacer.  # noqa: E501
        :type bpn_id: List[str]
        :param free_danse_score: The free_danse_score of this FormulaOneRacer.  # noqa: E501
        :type free_danse_score: List[str]
        :param ncbhof: The ncbhof of this FormulaOneRacer.  # noqa: E501
        :type ncbhof: List[str]
        :param supplemental_draft_round: The supplemental_draft_round of this FormulaOneRacer.  # noqa: E501
        :type supplemental_draft_round: List[str]
        :param project: The project of this FormulaOneRacer.  # noqa: E501
        :type project: List[object]
        :param title_date: The title_date of this FormulaOneRacer.  # noqa: E501
        :type title_date: List[str]
        :param blood_group: The blood_group of this FormulaOneRacer.  # noqa: E501
        :type blood_group: List[str]
        :param school: The school of this FormulaOneRacer.  # noqa: E501
        :type school: List[object]
        :param bronze_medal_mixed: The bronze_medal_mixed of this FormulaOneRacer.  # noqa: E501
        :type bronze_medal_mixed: List[str]
        :param silver_medal_single: The silver_medal_single of this FormulaOneRacer.  # noqa: E501
        :type silver_medal_single: List[str]
        :param imposed_danse_competition: The imposed_danse_competition of this FormulaOneRacer.  # noqa: E501
        :type imposed_danse_competition: List[str]
        :param shoot: The shoot of this FormulaOneRacer.  # noqa: E501
        :type shoot: List[str]
        :param reign_name: The reign_name of this FormulaOneRacer.  # noqa: E501
        :type reign_name: List[str]
        :param influenced_by: The influenced_by of this FormulaOneRacer.  # noqa: E501
        :type influenced_by: List[object]
        :param cousurper: The cousurper of this FormulaOneRacer.  # noqa: E501
        :type cousurper: List[object]
        :param race_wins: The race_wins of this FormulaOneRacer.  # noqa: E501
        :type race_wins: List[int]
        :param jutsu: The jutsu of this FormulaOneRacer.  # noqa: E501
        :type jutsu: List[str]
        :param weight: The weight of this FormulaOneRacer.  # noqa: E501
        :type weight: List[object]
        :param other_media: The other_media of this FormulaOneRacer.  # noqa: E501
        :type other_media: List[object]
        :param alma_mater: The alma_mater of this FormulaOneRacer.  # noqa: E501
        :type alma_mater: List[object]
        :param olympic_games_wins: The olympic_games_wins of this FormulaOneRacer.  # noqa: E501
        :type olympic_games_wins: List[str]
        :param world_tournament_silver: The world_tournament_silver of this FormulaOneRacer.  # noqa: E501
        :type world_tournament_silver: List[int]
        :param australia_open_double: The australia_open_double of this FormulaOneRacer.  # noqa: E501
        :type australia_open_double: List[str]
        :param hopman_cup: The hopman_cup of this FormulaOneRacer.  # noqa: E501
        :type hopman_cup: List[str]
        :param mood: The mood of this FormulaOneRacer.  # noqa: E501
        :type mood: List[str]
        :param iihf_hof: The iihf_hof of this FormulaOneRacer.  # noqa: E501
        :type iihf_hof: List[str]
        :param free_prog_score: The free_prog_score of this FormulaOneRacer.  # noqa: E501
        :type free_prog_score: List[str]
        :param description: The description of this FormulaOneRacer.  # noqa: E501
        :type description: List[str]
        :param heisman: The heisman of this FormulaOneRacer.  # noqa: E501
        :type heisman: List[str]
        :param nfl_code: The nfl_code of this FormulaOneRacer.  # noqa: E501
        :type nfl_code: List[str]
        :param particular_sign: The particular_sign of this FormulaOneRacer.  # noqa: E501
        :type particular_sign: List[str]
        :param us_open_mixed: The us_open_mixed of this FormulaOneRacer.  # noqa: E501
        :type us_open_mixed: List[str]
        :param league_manager: The league_manager of this FormulaOneRacer.  # noqa: E501
        :type league_manager: List[object]
        :param free_prog_competition: The free_prog_competition of this FormulaOneRacer.  # noqa: E501
        :type free_prog_competition: List[str]
        :param weapon: The weapon of this FormulaOneRacer.  # noqa: E501
        :type weapon: List[object]
        :param kind_of_criminal: The kind_of_criminal of this FormulaOneRacer.  # noqa: E501
        :type kind_of_criminal: List[str]
        :param state_of_origin_year: The state_of_origin_year of this FormulaOneRacer.  # noqa: E501
        :type state_of_origin_year: List[str]
        :param player_status: The player_status of this FormulaOneRacer.  # noqa: E501
        :type player_status: List[str]
        :param other_function: The other_function of this FormulaOneRacer.  # noqa: E501
        :type other_function: List[object]
        :param career_station: The career_station of this FormulaOneRacer.  # noqa: E501
        :type career_station: List[object]
        :param resting_place_position: The resting_place_position of this FormulaOneRacer.  # noqa: E501
        :type resting_place_position: List[object]
        :param continental_tournament_bronze: The continental_tournament_bronze of this FormulaOneRacer.  # noqa: E501
        :type continental_tournament_bronze: List[int]
        :param final_lost_double: The final_lost_double of this FormulaOneRacer.  # noqa: E501
        :type final_lost_double: List[str]
        :param complexion: The complexion of this FormulaOneRacer.  # noqa: E501
        :type complexion: List[object]
        :param start: The start of this FormulaOneRacer.  # noqa: E501
        :type start: List[int]
        :param tessitura: The tessitura of this FormulaOneRacer.  # noqa: E501
        :type tessitura: List[str]
        :param start_career: The start_career of this FormulaOneRacer.  # noqa: E501
        :type start_career: List[str]
        :param birth_date: The birth_date of this FormulaOneRacer.  # noqa: E501
        :type birth_date: List[str]
        :param national_tournament_silver: The national_tournament_silver of this FormulaOneRacer.  # noqa: E501
        :type national_tournament_silver: List[int]
        :param other_activity: The other_activity of this FormulaOneRacer.  # noqa: E501
        :type other_activity: List[str]
        :param linguistics_tradition: The linguistics_tradition of this FormulaOneRacer.  # noqa: E501
        :type linguistics_tradition: List[object]
        :param sibling: The sibling of this FormulaOneRacer.  # noqa: E501
        :type sibling: List[object]
        :param title_single: The title_single of this FormulaOneRacer.  # noqa: E501
        :type title_single: List[str]
        :param olympic_games_gold: The olympic_games_gold of this FormulaOneRacer.  # noqa: E501
        :type olympic_games_gold: List[int]
        :param arrest_date: The arrest_date of this FormulaOneRacer.  # noqa: E501
        :type arrest_date: List[str]
        :param artistic_function: The artistic_function of this FormulaOneRacer.  # noqa: E501
        :type artistic_function: List[str]
        :param achievement: The achievement of this FormulaOneRacer.  # noqa: E501
        :type achievement: List[object]
        :param death_age: The death_age of this FormulaOneRacer.  # noqa: E501
        :type death_age: List[int]
        :param selection_point: The selection_point of this FormulaOneRacer.  # noqa: E501
        :type selection_point: List[int]
        :param type: The type of this FormulaOneRacer.  # noqa: E501
        :type type: List[str]
        :param relation: The relation of this FormulaOneRacer.  # noqa: E501
        :type relation: List[object]
        :param height_attack: The height_attack of this FormulaOneRacer.  # noqa: E501
        :type height_attack: List[str]
        :param living_place: The living_place of this FormulaOneRacer.  # noqa: E501
        :type living_place: List[object]
        :param season: The season of this FormulaOneRacer.  # noqa: E501
        :type season: List[object]
        :param world_team_cup: The world_team_cup of this FormulaOneRacer.  # noqa: E501
        :type world_team_cup: List[str]
        :param catch: The catch of this FormulaOneRacer.  # noqa: E501
        :type catch: List[str]
        :param decoration: The decoration of this FormulaOneRacer.  # noqa: E501
        :type decoration: List[object]
        :param case: The case of this FormulaOneRacer.  # noqa: E501
        :type case: List[str]
        :param profession: The profession of this FormulaOneRacer.  # noqa: E501
        :type profession: List[object]
        :param retirement_date: The retirement_date of this FormulaOneRacer.  # noqa: E501
        :type retirement_date: List[str]
        :param wife: The wife of this FormulaOneRacer.  # noqa: E501
        :type wife: List[object]
        :param ncaa_season: The ncaa_season of this FormulaOneRacer.  # noqa: E501
        :type ncaa_season: List[str]
        :param old_team_coached: The old_team_coached of this FormulaOneRacer.  # noqa: E501
        :type old_team_coached: List[object]
        :param coach_season: The coach_season of this FormulaOneRacer.  # noqa: E501
        :type coach_season: List[str]
        :param active_years_start_date_mgr: The active_years_start_date_mgr of this FormulaOneRacer.  # noqa: E501
        :type active_years_start_date_mgr: List[str]
        :param tattoo: The tattoo of this FormulaOneRacer.  # noqa: E501
        :type tattoo: List[str]
        :param hip_size: The hip_size of this FormulaOneRacer.  # noqa: E501
        :type hip_size: List[float]
        :param seiyu: The seiyu of this FormulaOneRacer.  # noqa: E501
        :type seiyu: List[object]
        :param career_points: The career_points of this FormulaOneRacer.  # noqa: E501
        :type career_points: List[int]
        :param short_prog_score: The short_prog_score of this FormulaOneRacer.  # noqa: E501
        :type short_prog_score: List[str]
        :param shoe_size: The shoe_size of this FormulaOneRacer.  # noqa: E501
        :type shoe_size: List[str]
        :param signature: The signature of this FormulaOneRacer.  # noqa: E501
        :type signature: List[str]
        :param olympic_games_bronze: The olympic_games_bronze of this FormulaOneRacer.  # noqa: E501
        :type olympic_games_bronze: List[int]
        :param draft_team: The draft_team of this FormulaOneRacer.  # noqa: E501
        :type draft_team: List[object]
        :param final_lost_team: The final_lost_team of this FormulaOneRacer.  # noqa: E501
        :type final_lost_team: List[str]
        :param danse_score: The danse_score of this FormulaOneRacer.  # noqa: E501
        :type danse_score: List[str]
        :param probowl_pick: The probowl_pick of this FormulaOneRacer.  # noqa: E501
        :type probowl_pick: List[str]
        :param short_prog_competition: The short_prog_competition of this FormulaOneRacer.  # noqa: E501
        :type short_prog_competition: List[str]
        :param college_hof: The college_hof of this FormulaOneRacer.  # noqa: E501
        :type college_hof: List[str]
        :param birth_place: The birth_place of this FormulaOneRacer.  # noqa: E501
        :type birth_place: List[object]
        :param eye_color: The eye_color of this FormulaOneRacer.  # noqa: E501
        :type eye_color: List[object]
        :param networth: The networth of this FormulaOneRacer.  # noqa: E501
        :type networth: List[float]
        :param silver_medal_mixed: The silver_medal_mixed of this FormulaOneRacer.  # noqa: E501
        :type silver_medal_mixed: List[str]
        :param racket_catching: The racket_catching of this FormulaOneRacer.  # noqa: E501
        :type racket_catching: List[str]
        :param national_team_match_point: The national_team_match_point of this FormulaOneRacer.  # noqa: E501
        :type national_team_match_point: List[str]
        :param us_open_double: The us_open_double of this FormulaOneRacer.  # noqa: E501
        :type us_open_double: List[str]
        :param national_selection: The national_selection of this FormulaOneRacer.  # noqa: E501
        :type national_selection: List[object]
        :param agency: The agency of this FormulaOneRacer.  # noqa: E501
        :type agency: List[object]
        :param start_wqs: The start_wqs of this FormulaOneRacer.  # noqa: E501
        :type start_wqs: List[str]
        :param coach_club: The coach_club of this FormulaOneRacer.  # noqa: E501
        :type coach_club: List[object]
        :param horse_riding_discipline: The horse_riding_discipline of this FormulaOneRacer.  # noqa: E501
        :type horse_riding_discipline: List[object]
        :param board: The board of this FormulaOneRacer.  # noqa: E501
        :type board: List[object]
        :param asia_championship: The asia_championship of this FormulaOneRacer.  # noqa: E501
        :type asia_championship: List[str]
        :param dead_in_fight_date: The dead_in_fight_date of this FormulaOneRacer.  # noqa: E501
        :type dead_in_fight_date: List[str]
        :param espn_id: The espn_id of this FormulaOneRacer.  # noqa: E501
        :type espn_id: List[int]
        :param last_race: The last_race of this FormulaOneRacer.  # noqa: E501
        :type last_race: List[object]
        :param manager_season: The manager_season of this FormulaOneRacer.  # noqa: E501
        :type manager_season: List[object]
        :param wimbledon_double: The wimbledon_double of this FormulaOneRacer.  # noqa: E501
        :type wimbledon_double: List[str]
        :param full_competition: The full_competition of this FormulaOneRacer.  # noqa: E501
        :type full_competition: List[str]
        :param gold_medal_mixed: The gold_medal_mixed of this FormulaOneRacer.  # noqa: E501
        :type gold_medal_mixed: List[str]
        :param affair: The affair of this FormulaOneRacer.  # noqa: E501
        :type affair: List[str]
        :param body_discovered: The body_discovered of this FormulaOneRacer.  # noqa: E501
        :type body_discovered: List[object]
        :param buried_place: The buried_place of this FormulaOneRacer.  # noqa: E501
        :type buried_place: List[object]
        :param last_pro_match: The last_pro_match of this FormulaOneRacer.  # noqa: E501
        :type last_pro_match: List[str]
        :param backhand: The backhand of this FormulaOneRacer.  # noqa: E501
        :type backhand: List[str]
        :param created: The created of this FormulaOneRacer.  # noqa: E501
        :type created: List[object]
        :param end_career: The end_career of this FormulaOneRacer.  # noqa: E501
        :type end_career: List[str]
        :param other_sports_experience: The other_sports_experience of this FormulaOneRacer.  # noqa: E501
        :type other_sports_experience: List[object]
        :param note_on_resting_place: The note_on_resting_place of this FormulaOneRacer.  # noqa: E501
        :type note_on_resting_place: List[str]
        :param fed_cup: The fed_cup of this FormulaOneRacer.  # noqa: E501
        :type fed_cup: List[str]
        :param person_function: The person_function of this FormulaOneRacer.  # noqa: E501
        :type person_function: List[object]
        :param superbowl_win: The superbowl_win of this FormulaOneRacer.  # noqa: E501
        :type superbowl_win: List[str]
        :param pro_since: The pro_since of this FormulaOneRacer.  # noqa: E501
        :type pro_since: List[str]
        :param cause_of_death: The cause_of_death of this FormulaOneRacer.  # noqa: E501
        :type cause_of_death: List[str]
        :param creation_christian_bishop: The creation_christian_bishop of this FormulaOneRacer.  # noqa: E501
        :type creation_christian_bishop: List[str]
        :param bad_guy: The bad_guy of this FormulaOneRacer.  # noqa: E501
        :type bad_guy: List[str]
        :param gym_apparatus: The gym_apparatus of this FormulaOneRacer.  # noqa: E501
        :type gym_apparatus: List[object]
        :param temple_year: The temple_year of this FormulaOneRacer.  # noqa: E501
        :type temple_year: List[str]
        :param clothing_size: The clothing_size of this FormulaOneRacer.  # noqa: E501
        :type clothing_size: List[str]
        :param award: The award of this FormulaOneRacer.  # noqa: E501
        :type award: List[object]
        :param last_position: The last_position of this FormulaOneRacer.  # noqa: E501
        :type last_position: List[int]
        :param last_season: The last_season of this FormulaOneRacer.  # noqa: E501
        :type last_season: List[str]
        :param resting_date: The resting_date of this FormulaOneRacer.  # noqa: E501
        :type resting_date: List[str]
        :param masters_wins: The masters_wins of this FormulaOneRacer.  # noqa: E501
        :type masters_wins: List[object]
        :param continental_tournament_gold: The continental_tournament_gold of this FormulaOneRacer.  # noqa: E501
        :type continental_tournament_gold: List[int]
        :param orientation: The orientation of this FormulaOneRacer.  # noqa: E501
        :type orientation: List[str]
        :param grave: The grave of this FormulaOneRacer.  # noqa: E501
        :type grave: List[str]
        :param resting_place: The resting_place of this FormulaOneRacer.  # noqa: E501
        :type resting_place: List[object]
        :param abbeychurch_blessing_charge: The abbeychurch_blessing_charge of this FormulaOneRacer.  # noqa: E501
        :type abbeychurch_blessing_charge: List[str]
        :param mvp: The mvp of this FormulaOneRacer.  # noqa: E501
        :type mvp: List[str]
        :param handisport: The handisport of this FormulaOneRacer.  # noqa: E501
        :type handisport: List[str]
        :param best_rank_double: The best_rank_double of this FormulaOneRacer.  # noqa: E501
        :type best_rank_double: List[str]
        :param external_ornament: The external_ornament of this FormulaOneRacer.  # noqa: E501
        :type external_ornament: List[str]
        :param third: The third of this FormulaOneRacer.  # noqa: E501
        :type third: List[int]
        :param film_number: The film_number of this FormulaOneRacer.  # noqa: E501
        :type film_number: List[int]
        :param temple: The temple of this FormulaOneRacer.  # noqa: E501
        :type temple: List[str]
        :param national_tournament_gold: The national_tournament_gold of this FormulaOneRacer.  # noqa: E501
        :type national_tournament_gold: List[int]
        :param athletics_discipline: The athletics_discipline of this FormulaOneRacer.  # noqa: E501
        :type athletics_discipline: List[object]
        :param death_cause: The death_cause of this FormulaOneRacer.  # noqa: E501
        :type death_cause: List[object]
        """


        self.openapi_types = {
            'parent': List[object],
            'competition_title': List[object],
            'art_patron': List[object],
            'tv_show': List[object],
            'sport_country': List[object],
            'salary': List[float],
            'birth_name': List[str],
            'spouse': List[object],
            'junior_team': List[object],
            'shoe_number': List[int],
            'active_years_end_year_mgr': List[str],
            'wins': List[int],
            'usopen_wins': List[object],
            'bust_size': List[float],
            'cloth_size': List[str],
            'nfl_season': List[str],
            'date_of_burial': List[str],
            'olympic_games_silver': List[int],
            'nationality': List[object],
            'first_win': List[object],
            'debut_team': List[object],
            'hof': List[str],
            'relative': List[object],
            'draft_league': List[str],
            'newspaper': List[object],
            'podiums': List[int],
            'military_branch': List[object],
            'ethnicity': List[object],
            'state_of_origin': List[object],
            'season_manager': List[str],
            'blood_type': List[object],
            'laterality': List[str],
            'continental_tournament': List[object],
            'junior_years_end_year': List[str],
            'ithf_date': List[str],
            'last_win': List[object],
            'olympic_games': List[object],
            'hair_color': List[object],
            'foot': List[str],
            'hand': List[object],
            'federation': List[object],
            'circumcised': List[str],
            'sport_specialty': List[object],
            'penis_length': List[str],
            'detractor': List[object],
            'sex': List[str],
            'former_team': List[object],
            'sexual_orientation': List[object],
            'partner': List[object],
            'sport_discipline': List[object],
            'number_of_run': List[int],
            'lah_hof': List[str],
            'current_team_manager': List[object],
            'little_pool_record': List[str],
            'active_years': List[object],
            'final_lost': List[int],
            'death_place': List[object],
            'victory_percentage_as_mgr': List[float],
            'club': List[object],
            'education_place': List[object],
            'qatar_classic': List[str],
            'match_point': List[str],
            'pro_period': List[str],
            'nla_id': List[str],
            'current_team': List[object],
            'world_tournament_bronze': List[int],
            'bronze_medal_single': List[str],
            'national_team': List[object],
            'imposed_danse_score': List[str],
            'final_lost_single': List[str],
            'known_for': List[object],
            'big_pool_record': List[str],
            'title_double': List[str],
            'eye_colour': List[str],
            'architectural_movement': List[str],
            'bibsys_id': List[str],
            'fibahof': List[str],
            'junior_season': List[object],
            'notable_idea': List[object],
            'trainer': List[object],
            'continental_tournament_silver': List[int],
            'original_danse_competition': List[str],
            'status_manager': List[str],
            'national_tournament': List[object],
            'hometown': List[object],
            'dead_in_fight_place': List[str],
            'victory': List[int],
            'citizenship': List[object],
            'british_open': List[str],
            'label': List[str],
            'bronze_medal_double': List[str],
            'national_tournament_bronze': List[int],
            'escalafon': List[str],
            'championships': List[int],
            'waist_size': List[float],
            'general_council': List[object],
            'australia_open_single': List[str],
            'team_manager': List[object],
            'birth_sign': List[object],
            'age': List[int],
            'college': List[object],
            'education': List[object],
            'movie': List[object],
            'team_coached': List[object],
            'approach': List[object],
            'victory_as_mgr': List[int],
            'copilote': List[object],
            'start_wct': List[str],
            'id': str,
            'team_title': List[str],
            'feat': List[str],
            'fastest_lap': List[int],
            'sentence': List[str],
            'roland_garros_single': List[str],
            'state_of_origin_team': List[object],
            'nfl_team': List[object],
            'world_tournament': List[object],
            'allegiance': List[str],
            'lccn_id': List[str],
            'car_number': List[int],
            'british_wins': List[object],
            'gold_medal_single': List[str],
            'podium': List[int],
            'state_of_origin_point': List[int],
            'player_season': List[object],
            'regional_council': List[object],
            'homage': List[str],
            'national_championship': List[str],
            'first_pro_match': List[str],
            'id_number': List[int],
            'active_years_start_year_mgr': List[str],
            'wedding_parents_date': List[str],
            'silver_medal_double': List[str],
            'world': List[object],
            'astrological_sign': List[object],
            'coalition': List[str],
            'defeat_as_mgr': List[int],
            'death_year': List[str],
            'tournament_of_champions': List[str],
            'world_tournament_gold': List[int],
            'pga_wins': List[object],
            'rid_id': List[str],
            'team_point': List[int],
            'related_functions': List[object],
            'reign': List[str],
            'best_rank_single': List[str],
            'second': List[int],
            'radio': List[object],
            'free_score_competition': List[str],
            'publication': List[str],
            'opponent': List[object],
            'us_open_single': List[str],
            'employer': List[object],
            'cash_price': List[str],
            'residence': List[object],
            'usurper': List[object],
            'other_occupation': List[object],
            'contest': List[object],
            'active_years_end_date_mgr': List[str],
            'original_danse_score': List[str],
            'army': List[str],
            'active_year': List[str],
            'races': List[int],
            'dubber': List[object],
            'non_professional_career': List[str],
            'military_function': List[str],
            'patent': List[object],
            'piercing': List[str],
            'student': List[object],
            'influenced': List[object],
            'start_reign': List[object],
            'university': List[object],
            'ideology': List[object],
            'conviction_date': List[str],
            'media': List[object],
            'bnf_id': List[str],
            'pseudonym': List[str],
            'speciality': List[str],
            'kind_of_criminal_action': List[str],
            'isni_id': List[str],
            'wimbledon_single': List[str],
            'significant_project': List[object],
            'youth_club': List[object],
            'leadership': List[str],
            'death_date': List[str],
            'special_trial': List[int],
            'victim': List[str],
            'height_against': List[str],
            'has_natural_bust': List[str],
            'individualised_pnd': List[int],
            'current_league': List[object],
            'poles': List[int],
            'wimbledon_mixed': List[str],
            'end_reign': List[object],
            'viaf_id': List[str],
            'hair_colour': List[str],
            'expedition': List[str],
            'main_domain': List[object],
            'nndb_id': List[str],
            'discipline': List[object],
            'consecration': List[str],
            'scene': List[str],
            'best_lap': List[str],
            'world_open': List[str],
            'european_championship': List[str],
            'friend': List[object],
            'world_champion_title_year': List[str],
            'full_score': List[str],
            'diploma': List[object],
            'abbeychurch_blessing': List[str],
            'selection_year': List[str],
            'height': List[object],
            'handedness': List[object],
            'philosophical_school': List[object],
            'parliamentary_group': List[str],
            'mount': List[str],
            'davis_cup': List[str],
            'junior_years_start_year': List[str],
            'announced_from': List[object],
            'australia_open_mixed': List[str],
            'gold_medal_double': List[str],
            'activity': List[object],
            'pole_position': List[int],
            'killed_by': List[str],
            'first_race': List[object],
            'draft_position': List[int],
            'political_function': List[str],
            'honours': List[object],
            'ncaa_team': List[object],
            'measurements': List[str],
            'coemperor': List[object],
            'roland_garros_mixed': List[str],
            'selibr_id': List[str],
            'danse_competition': List[str],
            'birth_year': List[str],
            'sports_function': List[str],
            'orcid_id': List[str],
            'election_date': List[str],
            'collaboration': List[object],
            'national_team_year': List[str],
            'spouse_name': List[str],
            'roland_garros_double': List[str],
            'derived_word': List[str],
            'bpn_id': List[str],
            'free_danse_score': List[str],
            'ncbhof': List[str],
            'supplemental_draft_round': List[str],
            'project': List[object],
            'title_date': List[str],
            'blood_group': List[str],
            'school': List[object],
            'bronze_medal_mixed': List[str],
            'silver_medal_single': List[str],
            'imposed_danse_competition': List[str],
            'shoot': List[str],
            'reign_name': List[str],
            'influenced_by': List[object],
            'cousurper': List[object],
            'race_wins': List[int],
            'jutsu': List[str],
            'weight': List[object],
            'other_media': List[object],
            'alma_mater': List[object],
            'olympic_games_wins': List[str],
            'world_tournament_silver': List[int],
            'australia_open_double': List[str],
            'hopman_cup': List[str],
            'mood': List[str],
            'iihf_hof': List[str],
            'free_prog_score': List[str],
            'description': List[str],
            'heisman': List[str],
            'nfl_code': List[str],
            'particular_sign': List[str],
            'us_open_mixed': List[str],
            'league_manager': List[object],
            'free_prog_competition': List[str],
            'weapon': List[object],
            'kind_of_criminal': List[str],
            'state_of_origin_year': List[str],
            'player_status': List[str],
            'other_function': List[object],
            'career_station': List[object],
            'resting_place_position': List[object],
            'continental_tournament_bronze': List[int],
            'final_lost_double': List[str],
            'complexion': List[object],
            'start': List[int],
            'tessitura': List[str],
            'start_career': List[str],
            'birth_date': List[str],
            'national_tournament_silver': List[int],
            'other_activity': List[str],
            'linguistics_tradition': List[object],
            'sibling': List[object],
            'title_single': List[str],
            'olympic_games_gold': List[int],
            'arrest_date': List[str],
            'artistic_function': List[str],
            'achievement': List[object],
            'death_age': List[int],
            'selection_point': List[int],
            'type': List[str],
            'relation': List[object],
            'height_attack': List[str],
            'living_place': List[object],
            'season': List[object],
            'world_team_cup': List[str],
            'catch': List[str],
            'decoration': List[object],
            'case': List[str],
            'profession': List[object],
            'retirement_date': List[str],
            'wife': List[object],
            'ncaa_season': List[str],
            'old_team_coached': List[object],
            'coach_season': List[str],
            'active_years_start_date_mgr': List[str],
            'tattoo': List[str],
            'hip_size': List[float],
            'seiyu': List[object],
            'career_points': List[int],
            'short_prog_score': List[str],
            'shoe_size': List[str],
            'signature': List[str],
            'olympic_games_bronze': List[int],
            'draft_team': List[object],
            'final_lost_team': List[str],
            'danse_score': List[str],
            'probowl_pick': List[str],
            'short_prog_competition': List[str],
            'college_hof': List[str],
            'birth_place': List[object],
            'eye_color': List[object],
            'networth': List[float],
            'silver_medal_mixed': List[str],
            'racket_catching': List[str],
            'national_team_match_point': List[str],
            'us_open_double': List[str],
            'national_selection': List[object],
            'agency': List[object],
            'start_wqs': List[str],
            'coach_club': List[object],
            'horse_riding_discipline': List[object],
            'board': List[object],
            'asia_championship': List[str],
            'dead_in_fight_date': List[str],
            'espn_id': List[int],
            'last_race': List[object],
            'manager_season': List[object],
            'wimbledon_double': List[str],
            'full_competition': List[str],
            'gold_medal_mixed': List[str],
            'affair': List[str],
            'body_discovered': List[object],
            'buried_place': List[object],
            'last_pro_match': List[str],
            'backhand': List[str],
            'created': List[object],
            'end_career': List[str],
            'other_sports_experience': List[object],
            'note_on_resting_place': List[str],
            'fed_cup': List[str],
            'person_function': List[object],
            'superbowl_win': List[str],
            'pro_since': List[str],
            'cause_of_death': List[str],
            'creation_christian_bishop': List[str],
            'bad_guy': List[str],
            'gym_apparatus': List[object],
            'temple_year': List[str],
            'clothing_size': List[str],
            'award': List[object],
            'last_position': List[int],
            'last_season': List[str],
            'resting_date': List[str],
            'masters_wins': List[object],
            'continental_tournament_gold': List[int],
            'orientation': List[str],
            'grave': List[str],
            'resting_place': List[object],
            'abbeychurch_blessing_charge': List[str],
            'mvp': List[str],
            'handisport': List[str],
            'best_rank_double': List[str],
            'external_ornament': List[str],
            'third': List[int],
            'film_number': List[int],
            'temple': List[str],
            'national_tournament_gold': List[int],
            'athletics_discipline': List[object],
            'death_cause': List[object]
        }

        self.attribute_map = {
            'parent': 'parent',
            'competition_title': 'competitionTitle',
            'art_patron': 'artPatron',
            'tv_show': 'tvShow',
            'sport_country': 'sportCountry',
            'salary': 'salary',
            'birth_name': 'birthName',
            'spouse': 'spouse',
            'junior_team': 'juniorTeam',
            'shoe_number': 'shoeNumber',
            'active_years_end_year_mgr': 'activeYearsEndYearMgr',
            'wins': 'wins',
            'usopen_wins': 'usopenWins',
            'bust_size': 'bustSize',
            'cloth_size': 'clothSize',
            'nfl_season': 'nflSeason',
            'date_of_burial': 'dateOfBurial',
            'olympic_games_silver': 'olympicGamesSilver',
            'nationality': 'nationality',
            'first_win': 'firstWin',
            'debut_team': 'debutTeam',
            'hof': 'hof',
            'relative': 'relative',
            'draft_league': 'draftLeague',
            'newspaper': 'newspaper',
            'podiums': 'podiums',
            'military_branch': 'militaryBranch',
            'ethnicity': 'ethnicity',
            'state_of_origin': 'stateOfOrigin',
            'season_manager': 'seasonManager',
            'blood_type': 'bloodType',
            'laterality': 'laterality',
            'continental_tournament': 'continentalTournament',
            'junior_years_end_year': 'juniorYearsEndYear',
            'ithf_date': 'ithfDate',
            'last_win': 'lastWin',
            'olympic_games': 'olympicGames',
            'hair_color': 'hairColor',
            'foot': 'foot',
            'hand': 'hand',
            'federation': 'federation',
            'circumcised': 'circumcised',
            'sport_specialty': 'sportSpecialty',
            'penis_length': 'penisLength',
            'detractor': 'detractor',
            'sex': 'sex',
            'former_team': 'formerTeam',
            'sexual_orientation': 'sexualOrientation',
            'partner': 'partner',
            'sport_discipline': 'sportDiscipline',
            'number_of_run': 'numberOfRun',
            'lah_hof': 'lahHof',
            'current_team_manager': 'currentTeamManager',
            'little_pool_record': 'littlePoolRecord',
            'active_years': 'activeYears',
            'final_lost': 'finalLost',
            'death_place': 'deathPlace',
            'victory_percentage_as_mgr': 'victoryPercentageAsMgr',
            'club': 'club',
            'education_place': 'educationPlace',
            'qatar_classic': 'qatarClassic',
            'match_point': 'matchPoint',
            'pro_period': 'proPeriod',
            'nla_id': 'nlaId',
            'current_team': 'currentTeam',
            'world_tournament_bronze': 'worldTournamentBronze',
            'bronze_medal_single': 'bronzeMedalSingle',
            'national_team': 'nationalTeam',
            'imposed_danse_score': 'imposedDanseScore',
            'final_lost_single': 'finalLostSingle',
            'known_for': 'knownFor',
            'big_pool_record': 'bigPoolRecord',
            'title_double': 'titleDouble',
            'eye_colour': 'eyeColour',
            'architectural_movement': 'architecturalMovement',
            'bibsys_id': 'bibsysId',
            'fibahof': 'fibahof',
            'junior_season': 'juniorSeason',
            'notable_idea': 'notableIdea',
            'trainer': 'trainer',
            'continental_tournament_silver': 'continentalTournamentSilver',
            'original_danse_competition': 'originalDanseCompetition',
            'status_manager': 'statusManager',
            'national_tournament': 'nationalTournament',
            'hometown': 'hometown',
            'dead_in_fight_place': 'deadInFightPlace',
            'victory': 'victory',
            'citizenship': 'citizenship',
            'british_open': 'britishOpen',
            'label': 'label',
            'bronze_medal_double': 'bronzeMedalDouble',
            'national_tournament_bronze': 'nationalTournamentBronze',
            'escalafon': 'escalafon',
            'championships': 'championships',
            'waist_size': 'waistSize',
            'general_council': 'generalCouncil',
            'australia_open_single': 'australiaOpenSingle',
            'team_manager': 'teamManager',
            'birth_sign': 'birthSign',
            'age': 'age',
            'college': 'college',
            'education': 'education',
            'movie': 'movie',
            'team_coached': 'teamCoached',
            'approach': 'approach',
            'victory_as_mgr': 'victoryAsMgr',
            'copilote': 'copilote',
            'start_wct': 'startWct',
            'id': 'id',
            'team_title': 'teamTitle',
            'feat': 'feat',
            'fastest_lap': 'fastestLap',
            'sentence': 'sentence',
            'roland_garros_single': 'rolandGarrosSingle',
            'state_of_origin_team': 'stateOfOriginTeam',
            'nfl_team': 'nflTeam',
            'world_tournament': 'worldTournament',
            'allegiance': 'allegiance',
            'lccn_id': 'lccnId',
            'car_number': 'carNumber',
            'british_wins': 'britishWins',
            'gold_medal_single': 'goldMedalSingle',
            'podium': 'podium',
            'state_of_origin_point': 'stateOfOriginPoint',
            'player_season': 'playerSeason',
            'regional_council': 'regionalCouncil',
            'homage': 'homage',
            'national_championship': 'nationalChampionship',
            'first_pro_match': 'firstProMatch',
            'id_number': 'idNumber',
            'active_years_start_year_mgr': 'activeYearsStartYearMgr',
            'wedding_parents_date': 'weddingParentsDate',
            'silver_medal_double': 'silverMedalDouble',
            'world': 'world',
            'astrological_sign': 'astrologicalSign',
            'coalition': 'coalition',
            'defeat_as_mgr': 'defeatAsMgr',
            'death_year': 'deathYear',
            'tournament_of_champions': 'tournamentOfChampions',
            'world_tournament_gold': 'worldTournamentGold',
            'pga_wins': 'pgaWins',
            'rid_id': 'ridId',
            'team_point': 'teamPoint',
            'related_functions': 'relatedFunctions',
            'reign': 'reign',
            'best_rank_single': 'bestRankSingle',
            'second': 'second',
            'radio': 'radio',
            'free_score_competition': 'freeScoreCompetition',
            'publication': 'publication',
            'opponent': 'opponent',
            'us_open_single': 'usOpenSingle',
            'employer': 'employer',
            'cash_price': 'cashPrice',
            'residence': 'residence',
            'usurper': 'usurper',
            'other_occupation': 'otherOccupation',
            'contest': 'contest',
            'active_years_end_date_mgr': 'activeYearsEndDateMgr',
            'original_danse_score': 'originalDanseScore',
            'army': 'army',
            'active_year': 'activeYear',
            'races': 'races',
            'dubber': 'dubber',
            'non_professional_career': 'nonProfessionalCareer',
            'military_function': 'militaryFunction',
            'patent': 'patent',
            'piercing': 'piercing',
            'student': 'student',
            'influenced': 'influenced',
            'start_reign': 'startReign',
            'university': 'university',
            'ideology': 'ideology',
            'conviction_date': 'convictionDate',
            'media': 'media',
            'bnf_id': 'bnfId',
            'pseudonym': 'pseudonym',
            'speciality': 'speciality',
            'kind_of_criminal_action': 'kindOfCriminalAction',
            'isni_id': 'isniId',
            'wimbledon_single': 'wimbledonSingle',
            'significant_project': 'significantProject',
            'youth_club': 'youthClub',
            'leadership': 'leadership',
            'death_date': 'deathDate',
            'special_trial': 'specialTrial',
            'victim': 'victim',
            'height_against': 'heightAgainst',
            'has_natural_bust': 'hasNaturalBust',
            'individualised_pnd': 'individualisedPnd',
            'current_league': 'currentLeague',
            'poles': 'poles',
            'wimbledon_mixed': 'wimbledonMixed',
            'end_reign': 'endReign',
            'viaf_id': 'viafId',
            'hair_colour': 'hairColour',
            'expedition': 'expedition',
            'main_domain': 'mainDomain',
            'nndb_id': 'nndbId',
            'discipline': 'discipline',
            'consecration': 'consecration',
            'scene': 'scene',
            'best_lap': 'bestLap',
            'world_open': 'worldOpen',
            'european_championship': 'europeanChampionship',
            'friend': 'friend',
            'world_champion_title_year': 'worldChampionTitleYear',
            'full_score': 'fullScore',
            'diploma': 'diploma',
            'abbeychurch_blessing': 'abbeychurchBlessing',
            'selection_year': 'selectionYear',
            'height': 'height',
            'handedness': 'handedness',
            'philosophical_school': 'philosophicalSchool',
            'parliamentary_group': 'parliamentaryGroup',
            'mount': 'mount',
            'davis_cup': 'davisCup',
            'junior_years_start_year': 'juniorYearsStartYear',
            'announced_from': 'announcedFrom',
            'australia_open_mixed': 'australiaOpenMixed',
            'gold_medal_double': 'goldMedalDouble',
            'activity': 'activity',
            'pole_position': 'polePosition',
            'killed_by': 'killedBy',
            'first_race': 'firstRace',
            'draft_position': 'draftPosition',
            'political_function': 'politicalFunction',
            'honours': 'honours',
            'ncaa_team': 'ncaaTeam',
            'measurements': 'measurements',
            'coemperor': 'coemperor',
            'roland_garros_mixed': 'rolandGarrosMixed',
            'selibr_id': 'selibrId',
            'danse_competition': 'danseCompetition',
            'birth_year': 'birthYear',
            'sports_function': 'sportsFunction',
            'orcid_id': 'orcidId',
            'election_date': 'electionDate',
            'collaboration': 'collaboration',
            'national_team_year': 'nationalTeamYear',
            'spouse_name': 'spouseName',
            'roland_garros_double': 'rolandGarrosDouble',
            'derived_word': 'derivedWord',
            'bpn_id': 'bpnId',
            'free_danse_score': 'freeDanseScore',
            'ncbhof': 'ncbhof',
            'supplemental_draft_round': 'supplementalDraftRound',
            'project': 'project',
            'title_date': 'titleDate',
            'blood_group': 'bloodGroup',
            'school': 'school',
            'bronze_medal_mixed': 'bronzeMedalMixed',
            'silver_medal_single': 'silverMedalSingle',
            'imposed_danse_competition': 'imposedDanseCompetition',
            'shoot': 'shoot',
            'reign_name': 'reignName',
            'influenced_by': 'influencedBy',
            'cousurper': 'cousurper',
            'race_wins': 'raceWins',
            'jutsu': 'jutsu',
            'weight': 'weight',
            'other_media': 'otherMedia',
            'alma_mater': 'almaMater',
            'olympic_games_wins': 'olympicGamesWins',
            'world_tournament_silver': 'worldTournamentSilver',
            'australia_open_double': 'australiaOpenDouble',
            'hopman_cup': 'hopmanCup',
            'mood': 'mood',
            'iihf_hof': 'iihfHof',
            'free_prog_score': 'freeProgScore',
            'description': 'description',
            'heisman': 'heisman',
            'nfl_code': 'nflCode',
            'particular_sign': 'particularSign',
            'us_open_mixed': 'usOpenMixed',
            'league_manager': 'leagueManager',
            'free_prog_competition': 'freeProgCompetition',
            'weapon': 'weapon',
            'kind_of_criminal': 'kindOfCriminal',
            'state_of_origin_year': 'stateOfOriginYear',
            'player_status': 'playerStatus',
            'other_function': 'otherFunction',
            'career_station': 'careerStation',
            'resting_place_position': 'restingPlacePosition',
            'continental_tournament_bronze': 'continentalTournamentBronze',
            'final_lost_double': 'finalLostDouble',
            'complexion': 'complexion',
            'start': 'start',
            'tessitura': 'tessitura',
            'start_career': 'startCareer',
            'birth_date': 'birthDate',
            'national_tournament_silver': 'nationalTournamentSilver',
            'other_activity': 'otherActivity',
            'linguistics_tradition': 'linguisticsTradition',
            'sibling': 'sibling',
            'title_single': 'titleSingle',
            'olympic_games_gold': 'olympicGamesGold',
            'arrest_date': 'arrestDate',
            'artistic_function': 'artisticFunction',
            'achievement': 'achievement',
            'death_age': 'deathAge',
            'selection_point': 'selectionPoint',
            'type': 'type',
            'relation': 'relation',
            'height_attack': 'heightAttack',
            'living_place': 'livingPlace',
            'season': 'season',
            'world_team_cup': 'worldTeamCup',
            'catch': 'catch',
            'decoration': 'decoration',
            'case': 'case',
            'profession': 'profession',
            'retirement_date': 'retirementDate',
            'wife': 'wife',
            'ncaa_season': 'ncaaSeason',
            'old_team_coached': 'oldTeamCoached',
            'coach_season': 'coachSeason',
            'active_years_start_date_mgr': 'activeYearsStartDateMgr',
            'tattoo': 'tattoo',
            'hip_size': 'hipSize',
            'seiyu': 'seiyu',
            'career_points': 'careerPoints',
            'short_prog_score': 'shortProgScore',
            'shoe_size': 'shoeSize',
            'signature': 'signature',
            'olympic_games_bronze': 'olympicGamesBronze',
            'draft_team': 'draftTeam',
            'final_lost_team': 'finalLostTeam',
            'danse_score': 'danseScore',
            'probowl_pick': 'probowlPick',
            'short_prog_competition': 'shortProgCompetition',
            'college_hof': 'collegeHof',
            'birth_place': 'birthPlace',
            'eye_color': 'eyeColor',
            'networth': 'networth',
            'silver_medal_mixed': 'silverMedalMixed',
            'racket_catching': 'racketCatching',
            'national_team_match_point': 'nationalTeamMatchPoint',
            'us_open_double': 'usOpenDouble',
            'national_selection': 'nationalSelection',
            'agency': 'agency',
            'start_wqs': 'startWqs',
            'coach_club': 'coachClub',
            'horse_riding_discipline': 'horseRidingDiscipline',
            'board': 'board',
            'asia_championship': 'asiaChampionship',
            'dead_in_fight_date': 'deadInFightDate',
            'espn_id': 'espnId',
            'last_race': 'lastRace',
            'manager_season': 'managerSeason',
            'wimbledon_double': 'wimbledonDouble',
            'full_competition': 'fullCompetition',
            'gold_medal_mixed': 'goldMedalMixed',
            'affair': 'affair',
            'body_discovered': 'bodyDiscovered',
            'buried_place': 'buriedPlace',
            'last_pro_match': 'lastProMatch',
            'backhand': 'backhand',
            'created': 'created',
            'end_career': 'endCareer',
            'other_sports_experience': 'otherSportsExperience',
            'note_on_resting_place': 'noteOnRestingPlace',
            'fed_cup': 'fedCup',
            'person_function': 'personFunction',
            'superbowl_win': 'superbowlWin',
            'pro_since': 'proSince',
            'cause_of_death': 'causeOfDeath',
            'creation_christian_bishop': 'creationChristianBishop',
            'bad_guy': 'badGuy',
            'gym_apparatus': 'gymApparatus',
            'temple_year': 'templeYear',
            'clothing_size': 'clothingSize',
            'award': 'award',
            'last_position': 'lastPosition',
            'last_season': 'lastSeason',
            'resting_date': 'restingDate',
            'masters_wins': 'mastersWins',
            'continental_tournament_gold': 'continentalTournamentGold',
            'orientation': 'orientation',
            'grave': 'grave',
            'resting_place': 'restingPlace',
            'abbeychurch_blessing_charge': 'abbeychurchBlessingCharge',
            'mvp': 'mvp',
            'handisport': 'handisport',
            'best_rank_double': 'bestRankDouble',
            'external_ornament': 'externalOrnament',
            'third': 'third',
            'film_number': 'filmNumber',
            'temple': 'temple',
            'national_tournament_gold': 'nationalTournamentGold',
            'athletics_discipline': 'athleticsDiscipline',
            'death_cause': 'deathCause'
        }

        self._parent = parent
        self._competition_title = competition_title
        self._art_patron = art_patron
        self._tv_show = tv_show
        self._sport_country = sport_country
        self._salary = salary
        self._birth_name = birth_name
        self._spouse = spouse
        self._junior_team = junior_team
        self._shoe_number = shoe_number
        self._active_years_end_year_mgr = active_years_end_year_mgr
        self._wins = wins
        self._usopen_wins = usopen_wins
        self._bust_size = bust_size
        self._cloth_size = cloth_size
        self._nfl_season = nfl_season
        self._date_of_burial = date_of_burial
        self._olympic_games_silver = olympic_games_silver
        self._nationality = nationality
        self._first_win = first_win
        self._debut_team = debut_team
        self._hof = hof
        self._relative = relative
        self._draft_league = draft_league
        self._newspaper = newspaper
        self._podiums = podiums
        self._military_branch = military_branch
        self._ethnicity = ethnicity
        self._state_of_origin = state_of_origin
        self._season_manager = season_manager
        self._blood_type = blood_type
        self._laterality = laterality
        self._continental_tournament = continental_tournament
        self._junior_years_end_year = junior_years_end_year
        self._ithf_date = ithf_date
        self._last_win = last_win
        self._olympic_games = olympic_games
        self._hair_color = hair_color
        self._foot = foot
        self._hand = hand
        self._federation = federation
        self._circumcised = circumcised
        self._sport_specialty = sport_specialty
        self._penis_length = penis_length
        self._detractor = detractor
        self._sex = sex
        self._former_team = former_team
        self._sexual_orientation = sexual_orientation
        self._partner = partner
        self._sport_discipline = sport_discipline
        self._number_of_run = number_of_run
        self._lah_hof = lah_hof
        self._current_team_manager = current_team_manager
        self._little_pool_record = little_pool_record
        self._active_years = active_years
        self._final_lost = final_lost
        self._death_place = death_place
        self._victory_percentage_as_mgr = victory_percentage_as_mgr
        self._club = club
        self._education_place = education_place
        self._qatar_classic = qatar_classic
        self._match_point = match_point
        self._pro_period = pro_period
        self._nla_id = nla_id
        self._current_team = current_team
        self._world_tournament_bronze = world_tournament_bronze
        self._bronze_medal_single = bronze_medal_single
        self._national_team = national_team
        self._imposed_danse_score = imposed_danse_score
        self._final_lost_single = final_lost_single
        self._known_for = known_for
        self._big_pool_record = big_pool_record
        self._title_double = title_double
        self._eye_colour = eye_colour
        self._architectural_movement = architectural_movement
        self._bibsys_id = bibsys_id
        self._fibahof = fibahof
        self._junior_season = junior_season
        self._notable_idea = notable_idea
        self._trainer = trainer
        self._continental_tournament_silver = continental_tournament_silver
        self._original_danse_competition = original_danse_competition
        self._status_manager = status_manager
        self._national_tournament = national_tournament
        self._hometown = hometown
        self._dead_in_fight_place = dead_in_fight_place
        self._victory = victory
        self._citizenship = citizenship
        self._british_open = british_open
        self._label = label
        self._bronze_medal_double = bronze_medal_double
        self._national_tournament_bronze = national_tournament_bronze
        self._escalafon = escalafon
        self._championships = championships
        self._waist_size = waist_size
        self._general_council = general_council
        self._australia_open_single = australia_open_single
        self._team_manager = team_manager
        self._birth_sign = birth_sign
        self._age = age
        self._college = college
        self._education = education
        self._movie = movie
        self._team_coached = team_coached
        self._approach = approach
        self._victory_as_mgr = victory_as_mgr
        self._copilote = copilote
        self._start_wct = start_wct
        self._id = id
        self._team_title = team_title
        self._feat = feat
        self._fastest_lap = fastest_lap
        self._sentence = sentence
        self._roland_garros_single = roland_garros_single
        self._state_of_origin_team = state_of_origin_team
        self._nfl_team = nfl_team
        self._world_tournament = world_tournament
        self._allegiance = allegiance
        self._lccn_id = lccn_id
        self._car_number = car_number
        self._british_wins = british_wins
        self._gold_medal_single = gold_medal_single
        self._podium = podium
        self._state_of_origin_point = state_of_origin_point
        self._player_season = player_season
        self._regional_council = regional_council
        self._homage = homage
        self._national_championship = national_championship
        self._first_pro_match = first_pro_match
        self._id_number = id_number
        self._active_years_start_year_mgr = active_years_start_year_mgr
        self._wedding_parents_date = wedding_parents_date
        self._silver_medal_double = silver_medal_double
        self._world = world
        self._astrological_sign = astrological_sign
        self._coalition = coalition
        self._defeat_as_mgr = defeat_as_mgr
        self._death_year = death_year
        self._tournament_of_champions = tournament_of_champions
        self._world_tournament_gold = world_tournament_gold
        self._pga_wins = pga_wins
        self._rid_id = rid_id
        self._team_point = team_point
        self._related_functions = related_functions
        self._reign = reign
        self._best_rank_single = best_rank_single
        self._second = second
        self._radio = radio
        self._free_score_competition = free_score_competition
        self._publication = publication
        self._opponent = opponent
        self._us_open_single = us_open_single
        self._employer = employer
        self._cash_price = cash_price
        self._residence = residence
        self._usurper = usurper
        self._other_occupation = other_occupation
        self._contest = contest
        self._active_years_end_date_mgr = active_years_end_date_mgr
        self._original_danse_score = original_danse_score
        self._army = army
        self._active_year = active_year
        self._races = races
        self._dubber = dubber
        self._non_professional_career = non_professional_career
        self._military_function = military_function
        self._patent = patent
        self._piercing = piercing
        self._student = student
        self._influenced = influenced
        self._start_reign = start_reign
        self._university = university
        self._ideology = ideology
        self._conviction_date = conviction_date
        self._media = media
        self._bnf_id = bnf_id
        self._pseudonym = pseudonym
        self._speciality = speciality
        self._kind_of_criminal_action = kind_of_criminal_action
        self._isni_id = isni_id
        self._wimbledon_single = wimbledon_single
        self._significant_project = significant_project
        self._youth_club = youth_club
        self._leadership = leadership
        self._death_date = death_date
        self._special_trial = special_trial
        self._victim = victim
        self._height_against = height_against
        self._has_natural_bust = has_natural_bust
        self._individualised_pnd = individualised_pnd
        self._current_league = current_league
        self._poles = poles
        self._wimbledon_mixed = wimbledon_mixed
        self._end_reign = end_reign
        self._viaf_id = viaf_id
        self._hair_colour = hair_colour
        self._expedition = expedition
        self._main_domain = main_domain
        self._nndb_id = nndb_id
        self._discipline = discipline
        self._consecration = consecration
        self._scene = scene
        self._best_lap = best_lap
        self._world_open = world_open
        self._european_championship = european_championship
        self._friend = friend
        self._world_champion_title_year = world_champion_title_year
        self._full_score = full_score
        self._diploma = diploma
        self._abbeychurch_blessing = abbeychurch_blessing
        self._selection_year = selection_year
        self._height = height
        self._handedness = handedness
        self._philosophical_school = philosophical_school
        self._parliamentary_group = parliamentary_group
        self._mount = mount
        self._davis_cup = davis_cup
        self._junior_years_start_year = junior_years_start_year
        self._announced_from = announced_from
        self._australia_open_mixed = australia_open_mixed
        self._gold_medal_double = gold_medal_double
        self._activity = activity
        self._pole_position = pole_position
        self._killed_by = killed_by
        self._first_race = first_race
        self._draft_position = draft_position
        self._political_function = political_function
        self._honours = honours
        self._ncaa_team = ncaa_team
        self._measurements = measurements
        self._coemperor = coemperor
        self._roland_garros_mixed = roland_garros_mixed
        self._selibr_id = selibr_id
        self._danse_competition = danse_competition
        self._birth_year = birth_year
        self._sports_function = sports_function
        self._orcid_id = orcid_id
        self._election_date = election_date
        self._collaboration = collaboration
        self._national_team_year = national_team_year
        self._spouse_name = spouse_name
        self._roland_garros_double = roland_garros_double
        self._derived_word = derived_word
        self._bpn_id = bpn_id
        self._free_danse_score = free_danse_score
        self._ncbhof = ncbhof
        self._supplemental_draft_round = supplemental_draft_round
        self._project = project
        self._title_date = title_date
        self._blood_group = blood_group
        self._school = school
        self._bronze_medal_mixed = bronze_medal_mixed
        self._silver_medal_single = silver_medal_single
        self._imposed_danse_competition = imposed_danse_competition
        self._shoot = shoot
        self._reign_name = reign_name
        self._influenced_by = influenced_by
        self._cousurper = cousurper
        self._race_wins = race_wins
        self._jutsu = jutsu
        self._weight = weight
        self._other_media = other_media
        self._alma_mater = alma_mater
        self._olympic_games_wins = olympic_games_wins
        self._world_tournament_silver = world_tournament_silver
        self._australia_open_double = australia_open_double
        self._hopman_cup = hopman_cup
        self._mood = mood
        self._iihf_hof = iihf_hof
        self._free_prog_score = free_prog_score
        self._description = description
        self._heisman = heisman
        self._nfl_code = nfl_code
        self._particular_sign = particular_sign
        self._us_open_mixed = us_open_mixed
        self._league_manager = league_manager
        self._free_prog_competition = free_prog_competition
        self._weapon = weapon
        self._kind_of_criminal = kind_of_criminal
        self._state_of_origin_year = state_of_origin_year
        self._player_status = player_status
        self._other_function = other_function
        self._career_station = career_station
        self._resting_place_position = resting_place_position
        self._continental_tournament_bronze = continental_tournament_bronze
        self._final_lost_double = final_lost_double
        self._complexion = complexion
        self._start = start
        self._tessitura = tessitura
        self._start_career = start_career
        self._birth_date = birth_date
        self._national_tournament_silver = national_tournament_silver
        self._other_activity = other_activity
        self._linguistics_tradition = linguistics_tradition
        self._sibling = sibling
        self._title_single = title_single
        self._olympic_games_gold = olympic_games_gold
        self._arrest_date = arrest_date
        self._artistic_function = artistic_function
        self._achievement = achievement
        self._death_age = death_age
        self._selection_point = selection_point
        self._type = type
        self._relation = relation
        self._height_attack = height_attack
        self._living_place = living_place
        self._season = season
        self._world_team_cup = world_team_cup
        self._catch = catch
        self._decoration = decoration
        self._case = case
        self._profession = profession
        self._retirement_date = retirement_date
        self._wife = wife
        self._ncaa_season = ncaa_season
        self._old_team_coached = old_team_coached
        self._coach_season = coach_season
        self._active_years_start_date_mgr = active_years_start_date_mgr
        self._tattoo = tattoo
        self._hip_size = hip_size
        self._seiyu = seiyu
        self._career_points = career_points
        self._short_prog_score = short_prog_score
        self._shoe_size = shoe_size
        self._signature = signature
        self._olympic_games_bronze = olympic_games_bronze
        self._draft_team = draft_team
        self._final_lost_team = final_lost_team
        self._danse_score = danse_score
        self._probowl_pick = probowl_pick
        self._short_prog_competition = short_prog_competition
        self._college_hof = college_hof
        self._birth_place = birth_place
        self._eye_color = eye_color
        self._networth = networth
        self._silver_medal_mixed = silver_medal_mixed
        self._racket_catching = racket_catching
        self._national_team_match_point = national_team_match_point
        self._us_open_double = us_open_double
        self._national_selection = national_selection
        self._agency = agency
        self._start_wqs = start_wqs
        self._coach_club = coach_club
        self._horse_riding_discipline = horse_riding_discipline
        self._board = board
        self._asia_championship = asia_championship
        self._dead_in_fight_date = dead_in_fight_date
        self._espn_id = espn_id
        self._last_race = last_race
        self._manager_season = manager_season
        self._wimbledon_double = wimbledon_double
        self._full_competition = full_competition
        self._gold_medal_mixed = gold_medal_mixed
        self._affair = affair
        self._body_discovered = body_discovered
        self._buried_place = buried_place
        self._last_pro_match = last_pro_match
        self._backhand = backhand
        self._created = created
        self._end_career = end_career
        self._other_sports_experience = other_sports_experience
        self._note_on_resting_place = note_on_resting_place
        self._fed_cup = fed_cup
        self._person_function = person_function
        self._superbowl_win = superbowl_win
        self._pro_since = pro_since
        self._cause_of_death = cause_of_death
        self._creation_christian_bishop = creation_christian_bishop
        self._bad_guy = bad_guy
        self._gym_apparatus = gym_apparatus
        self._temple_year = temple_year
        self._clothing_size = clothing_size
        self._award = award
        self._last_position = last_position
        self._last_season = last_season
        self._resting_date = resting_date
        self._masters_wins = masters_wins
        self._continental_tournament_gold = continental_tournament_gold
        self._orientation = orientation
        self._grave = grave
        self._resting_place = resting_place
        self._abbeychurch_blessing_charge = abbeychurch_blessing_charge
        self._mvp = mvp
        self._handisport = handisport
        self._best_rank_double = best_rank_double
        self._external_ornament = external_ornament
        self._third = third
        self._film_number = film_number
        self._temple = temple
        self._national_tournament_gold = national_tournament_gold
        self._athletics_discipline = athletics_discipline
        self._death_cause = death_cause

    @classmethod
    def from_dict(cls, dikt) -> 'FormulaOneRacer':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FormulaOneRacer of this FormulaOneRacer.  # noqa: E501
        :rtype: FormulaOneRacer
        """
        return util.deserialize_model(dikt, cls)

    @property
    def parent(self):
        """Gets the parent of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The parent of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param parent: The parent of this FormulaOneRacer.
        :type parent: List[object]
        """

        self._parent = parent

    @property
    def competition_title(self):
        """Gets the competition_title of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The competition_title of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._competition_title

    @competition_title.setter
    def competition_title(self, competition_title):
        """Sets the competition_title of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param competition_title: The competition_title of this FormulaOneRacer.
        :type competition_title: List[object]
        """

        self._competition_title = competition_title

    @property
    def art_patron(self):
        """Gets the art_patron of this FormulaOneRacer.

        An influential, wealthy person who supported an artist, craftsman, a scholar or a noble.. See also  # noqa: E501

        :return: The art_patron of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._art_patron

    @art_patron.setter
    def art_patron(self, art_patron):
        """Sets the art_patron of this FormulaOneRacer.

        An influential, wealthy person who supported an artist, craftsman, a scholar or a noble.. See also  # noqa: E501

        :param art_patron: The art_patron of this FormulaOneRacer.
        :type art_patron: List[object]
        """

        self._art_patron = art_patron

    @property
    def tv_show(self):
        """Gets the tv_show of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The tv_show of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._tv_show

    @tv_show.setter
    def tv_show(self, tv_show):
        """Sets the tv_show of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param tv_show: The tv_show of this FormulaOneRacer.
        :type tv_show: List[object]
        """

        self._tv_show = tv_show

    @property
    def sport_country(self):
        """Gets the sport_country of this FormulaOneRacer.

        The country, for which the athlete is participating in championships  # noqa: E501

        :return: The sport_country of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._sport_country

    @sport_country.setter
    def sport_country(self, sport_country):
        """Sets the sport_country of this FormulaOneRacer.

        The country, for which the athlete is participating in championships  # noqa: E501

        :param sport_country: The sport_country of this FormulaOneRacer.
        :type sport_country: List[object]
        """

        self._sport_country = sport_country

    @property
    def salary(self):
        """Gets the salary of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The salary of this FormulaOneRacer.
        :rtype: List[float]
        """
        return self._salary

    @salary.setter
    def salary(self, salary):
        """Sets the salary of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param salary: The salary of this FormulaOneRacer.
        :type salary: List[float]
        """

        self._salary = salary

    @property
    def birth_name(self):
        """Gets the birth_name of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The birth_name of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._birth_name

    @birth_name.setter
    def birth_name(self, birth_name):
        """Sets the birth_name of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param birth_name: The birth_name of this FormulaOneRacer.
        :type birth_name: List[str]
        """

        self._birth_name = birth_name

    @property
    def spouse(self):
        """Gets the spouse of this FormulaOneRacer.

        the person they are married to  # noqa: E501

        :return: The spouse of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._spouse

    @spouse.setter
    def spouse(self, spouse):
        """Sets the spouse of this FormulaOneRacer.

        the person they are married to  # noqa: E501

        :param spouse: The spouse of this FormulaOneRacer.
        :type spouse: List[object]
        """

        self._spouse = spouse

    @property
    def junior_team(self):
        """Gets the junior_team of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The junior_team of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._junior_team

    @junior_team.setter
    def junior_team(self, junior_team):
        """Sets the junior_team of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param junior_team: The junior_team of this FormulaOneRacer.
        :type junior_team: List[object]
        """

        self._junior_team = junior_team

    @property
    def shoe_number(self):
        """Gets the shoe_number of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The shoe_number of this FormulaOneRacer.
        :rtype: List[int]
        """
        return self._shoe_number

    @shoe_number.setter
    def shoe_number(self, shoe_number):
        """Sets the shoe_number of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param shoe_number: The shoe_number of this FormulaOneRacer.
        :type shoe_number: List[int]
        """

        self._shoe_number = shoe_number

    @property
    def active_years_end_year_mgr(self):
        """Gets the active_years_end_year_mgr of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The active_years_end_year_mgr of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._active_years_end_year_mgr

    @active_years_end_year_mgr.setter
    def active_years_end_year_mgr(self, active_years_end_year_mgr):
        """Sets the active_years_end_year_mgr of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param active_years_end_year_mgr: The active_years_end_year_mgr of this FormulaOneRacer.
        :type active_years_end_year_mgr: List[str]
        """

        self._active_years_end_year_mgr = active_years_end_year_mgr

    @property
    def wins(self):
        """Gets the wins of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The wins of this FormulaOneRacer.
        :rtype: List[int]
        """
        return self._wins

    @wins.setter
    def wins(self, wins):
        """Sets the wins of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param wins: The wins of this FormulaOneRacer.
        :type wins: List[int]
        """

        self._wins = wins

    @property
    def usopen_wins(self):
        """Gets the usopen_wins of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The usopen_wins of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._usopen_wins

    @usopen_wins.setter
    def usopen_wins(self, usopen_wins):
        """Sets the usopen_wins of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param usopen_wins: The usopen_wins of this FormulaOneRacer.
        :type usopen_wins: List[object]
        """

        self._usopen_wins = usopen_wins

    @property
    def bust_size(self):
        """Gets the bust_size of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The bust_size of this FormulaOneRacer.
        :rtype: List[float]
        """
        return self._bust_size

    @bust_size.setter
    def bust_size(self, bust_size):
        """Sets the bust_size of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param bust_size: The bust_size of this FormulaOneRacer.
        :type bust_size: List[float]
        """

        self._bust_size = bust_size

    @property
    def cloth_size(self):
        """Gets the cloth_size of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The cloth_size of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._cloth_size

    @cloth_size.setter
    def cloth_size(self, cloth_size):
        """Sets the cloth_size of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param cloth_size: The cloth_size of this FormulaOneRacer.
        :type cloth_size: List[str]
        """

        self._cloth_size = cloth_size

    @property
    def nfl_season(self):
        """Gets the nfl_season of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The nfl_season of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._nfl_season

    @nfl_season.setter
    def nfl_season(self, nfl_season):
        """Sets the nfl_season of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param nfl_season: The nfl_season of this FormulaOneRacer.
        :type nfl_season: List[str]
        """

        self._nfl_season = nfl_season

    @property
    def date_of_burial(self):
        """Gets the date_of_burial of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The date_of_burial of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._date_of_burial

    @date_of_burial.setter
    def date_of_burial(self, date_of_burial):
        """Sets the date_of_burial of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param date_of_burial: The date_of_burial of this FormulaOneRacer.
        :type date_of_burial: List[str]
        """

        self._date_of_burial = date_of_burial

    @property
    def olympic_games_silver(self):
        """Gets the olympic_games_silver of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The olympic_games_silver of this FormulaOneRacer.
        :rtype: List[int]
        """
        return self._olympic_games_silver

    @olympic_games_silver.setter
    def olympic_games_silver(self, olympic_games_silver):
        """Sets the olympic_games_silver of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param olympic_games_silver: The olympic_games_silver of this FormulaOneRacer.
        :type olympic_games_silver: List[int]
        """

        self._olympic_games_silver = olympic_games_silver

    @property
    def nationality(self):
        """Gets the nationality of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The nationality of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality):
        """Sets the nationality of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param nationality: The nationality of this FormulaOneRacer.
        :type nationality: List[object]
        """

        self._nationality = nationality

    @property
    def first_win(self):
        """Gets the first_win of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The first_win of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._first_win

    @first_win.setter
    def first_win(self, first_win):
        """Sets the first_win of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param first_win: The first_win of this FormulaOneRacer.
        :type first_win: List[object]
        """

        self._first_win = first_win

    @property
    def debut_team(self):
        """Gets the debut_team of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The debut_team of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._debut_team

    @debut_team.setter
    def debut_team(self, debut_team):
        """Sets the debut_team of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param debut_team: The debut_team of this FormulaOneRacer.
        :type debut_team: List[object]
        """

        self._debut_team = debut_team

    @property
    def hof(self):
        """Gets the hof of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The hof of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._hof

    @hof.setter
    def hof(self, hof):
        """Sets the hof of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param hof: The hof of this FormulaOneRacer.
        :type hof: List[str]
        """

        self._hof = hof

    @property
    def relative(self):
        """Gets the relative of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The relative of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._relative

    @relative.setter
    def relative(self, relative):
        """Sets the relative of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param relative: The relative of this FormulaOneRacer.
        :type relative: List[object]
        """

        self._relative = relative

    @property
    def draft_league(self):
        """Gets the draft_league of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The draft_league of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._draft_league

    @draft_league.setter
    def draft_league(self, draft_league):
        """Sets the draft_league of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param draft_league: The draft_league of this FormulaOneRacer.
        :type draft_league: List[str]
        """

        self._draft_league = draft_league

    @property
    def newspaper(self):
        """Gets the newspaper of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The newspaper of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._newspaper

    @newspaper.setter
    def newspaper(self, newspaper):
        """Sets the newspaper of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param newspaper: The newspaper of this FormulaOneRacer.
        :type newspaper: List[object]
        """

        self._newspaper = newspaper

    @property
    def podiums(self):
        """Gets the podiums of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The podiums of this FormulaOneRacer.
        :rtype: List[int]
        """
        return self._podiums

    @podiums.setter
    def podiums(self, podiums):
        """Sets the podiums of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param podiums: The podiums of this FormulaOneRacer.
        :type podiums: List[int]
        """

        self._podiums = podiums

    @property
    def military_branch(self):
        """Gets the military_branch of this FormulaOneRacer.

        The service branch (Army, Navy, etc.) a person is part of.  # noqa: E501

        :return: The military_branch of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._military_branch

    @military_branch.setter
    def military_branch(self, military_branch):
        """Sets the military_branch of this FormulaOneRacer.

        The service branch (Army, Navy, etc.) a person is part of.  # noqa: E501

        :param military_branch: The military_branch of this FormulaOneRacer.
        :type military_branch: List[object]
        """

        self._military_branch = military_branch

    @property
    def ethnicity(self):
        """Gets the ethnicity of this FormulaOneRacer.

        Μία ορισμένη κοινωνική κατηγορία ανθρώπων που έχουν κοινή καταγωγή ή εμπειρίες.  # noqa: E501

        :return: The ethnicity of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._ethnicity

    @ethnicity.setter
    def ethnicity(self, ethnicity):
        """Sets the ethnicity of this FormulaOneRacer.

        Μία ορισμένη κοινωνική κατηγορία ανθρώπων που έχουν κοινή καταγωγή ή εμπειρίες.  # noqa: E501

        :param ethnicity: The ethnicity of this FormulaOneRacer.
        :type ethnicity: List[object]
        """

        self._ethnicity = ethnicity

    @property
    def state_of_origin(self):
        """Gets the state_of_origin of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The state_of_origin of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._state_of_origin

    @state_of_origin.setter
    def state_of_origin(self, state_of_origin):
        """Sets the state_of_origin of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param state_of_origin: The state_of_origin of this FormulaOneRacer.
        :type state_of_origin: List[object]
        """

        self._state_of_origin = state_of_origin

    @property
    def season_manager(self):
        """Gets the season_manager of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The season_manager of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._season_manager

    @season_manager.setter
    def season_manager(self, season_manager):
        """Sets the season_manager of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param season_manager: The season_manager of this FormulaOneRacer.
        :type season_manager: List[str]
        """

        self._season_manager = season_manager

    @property
    def blood_type(self):
        """Gets the blood_type of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The blood_type of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._blood_type

    @blood_type.setter
    def blood_type(self, blood_type):
        """Sets the blood_type of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param blood_type: The blood_type of this FormulaOneRacer.
        :type blood_type: List[object]
        """

        self._blood_type = blood_type

    @property
    def laterality(self):
        """Gets the laterality of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The laterality of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._laterality

    @laterality.setter
    def laterality(self, laterality):
        """Sets the laterality of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param laterality: The laterality of this FormulaOneRacer.
        :type laterality: List[str]
        """

        self._laterality = laterality

    @property
    def continental_tournament(self):
        """Gets the continental_tournament of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The continental_tournament of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._continental_tournament

    @continental_tournament.setter
    def continental_tournament(self, continental_tournament):
        """Sets the continental_tournament of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param continental_tournament: The continental_tournament of this FormulaOneRacer.
        :type continental_tournament: List[object]
        """

        self._continental_tournament = continental_tournament

    @property
    def junior_years_end_year(self):
        """Gets the junior_years_end_year of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The junior_years_end_year of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._junior_years_end_year

    @junior_years_end_year.setter
    def junior_years_end_year(self, junior_years_end_year):
        """Sets the junior_years_end_year of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param junior_years_end_year: The junior_years_end_year of this FormulaOneRacer.
        :type junior_years_end_year: List[str]
        """

        self._junior_years_end_year = junior_years_end_year

    @property
    def ithf_date(self):
        """Gets the ithf_date of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The ithf_date of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._ithf_date

    @ithf_date.setter
    def ithf_date(self, ithf_date):
        """Sets the ithf_date of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param ithf_date: The ithf_date of this FormulaOneRacer.
        :type ithf_date: List[str]
        """

        self._ithf_date = ithf_date

    @property
    def last_win(self):
        """Gets the last_win of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The last_win of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._last_win

    @last_win.setter
    def last_win(self, last_win):
        """Sets the last_win of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param last_win: The last_win of this FormulaOneRacer.
        :type last_win: List[object]
        """

        self._last_win = last_win

    @property
    def olympic_games(self):
        """Gets the olympic_games of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The olympic_games of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._olympic_games

    @olympic_games.setter
    def olympic_games(self, olympic_games):
        """Sets the olympic_games of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param olympic_games: The olympic_games of this FormulaOneRacer.
        :type olympic_games: List[object]
        """

        self._olympic_games = olympic_games

    @property
    def hair_color(self):
        """Gets the hair_color of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The hair_color of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._hair_color

    @hair_color.setter
    def hair_color(self, hair_color):
        """Sets the hair_color of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param hair_color: The hair_color of this FormulaOneRacer.
        :type hair_color: List[object]
        """

        self._hair_color = hair_color

    @property
    def foot(self):
        """Gets the foot of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The foot of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._foot

    @foot.setter
    def foot(self, foot):
        """Sets the foot of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param foot: The foot of this FormulaOneRacer.
        :type foot: List[str]
        """

        self._foot = foot

    @property
    def hand(self):
        """Gets the hand of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The hand of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._hand

    @hand.setter
    def hand(self, hand):
        """Sets the hand of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param hand: The hand of this FormulaOneRacer.
        :type hand: List[object]
        """

        self._hand = hand

    @property
    def federation(self):
        """Gets the federation of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The federation of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._federation

    @federation.setter
    def federation(self, federation):
        """Sets the federation of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param federation: The federation of this FormulaOneRacer.
        :type federation: List[object]
        """

        self._federation = federation

    @property
    def circumcised(self):
        """Gets the circumcised of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The circumcised of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._circumcised

    @circumcised.setter
    def circumcised(self, circumcised):
        """Sets the circumcised of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param circumcised: The circumcised of this FormulaOneRacer.
        :type circumcised: List[str]
        """

        self._circumcised = circumcised

    @property
    def sport_specialty(self):
        """Gets the sport_specialty of this FormulaOneRacer.

        the sport specialty the athlete practices, e.g. 'Ring' for a men's artistic gymnastics athlete  # noqa: E501

        :return: The sport_specialty of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._sport_specialty

    @sport_specialty.setter
    def sport_specialty(self, sport_specialty):
        """Sets the sport_specialty of this FormulaOneRacer.

        the sport specialty the athlete practices, e.g. 'Ring' for a men's artistic gymnastics athlete  # noqa: E501

        :param sport_specialty: The sport_specialty of this FormulaOneRacer.
        :type sport_specialty: List[object]
        """

        self._sport_specialty = sport_specialty

    @property
    def penis_length(self):
        """Gets the penis_length of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The penis_length of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._penis_length

    @penis_length.setter
    def penis_length(self, penis_length):
        """Sets the penis_length of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param penis_length: The penis_length of this FormulaOneRacer.
        :type penis_length: List[str]
        """

        self._penis_length = penis_length

    @property
    def detractor(self):
        """Gets the detractor of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The detractor of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._detractor

    @detractor.setter
    def detractor(self, detractor):
        """Sets the detractor of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param detractor: The detractor of this FormulaOneRacer.
        :type detractor: List[object]
        """

        self._detractor = detractor

    @property
    def sex(self):
        """Gets the sex of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The sex of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._sex

    @sex.setter
    def sex(self, sex):
        """Sets the sex of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param sex: The sex of this FormulaOneRacer.
        :type sex: List[str]
        """

        self._sex = sex

    @property
    def former_team(self):
        """Gets the former_team of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The former_team of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._former_team

    @former_team.setter
    def former_team(self, former_team):
        """Sets the former_team of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param former_team: The former_team of this FormulaOneRacer.
        :type former_team: List[object]
        """

        self._former_team = former_team

    @property
    def sexual_orientation(self):
        """Gets the sexual_orientation of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The sexual_orientation of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._sexual_orientation

    @sexual_orientation.setter
    def sexual_orientation(self, sexual_orientation):
        """Sets the sexual_orientation of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param sexual_orientation: The sexual_orientation of this FormulaOneRacer.
        :type sexual_orientation: List[object]
        """

        self._sexual_orientation = sexual_orientation

    @property
    def partner(self):
        """Gets the partner of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The partner of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._partner

    @partner.setter
    def partner(self, partner):
        """Sets the partner of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param partner: The partner of this FormulaOneRacer.
        :type partner: List[object]
        """

        self._partner = partner

    @property
    def sport_discipline(self):
        """Gets the sport_discipline of this FormulaOneRacer.

        the sport discipline the athlete practices, e.g. Diving, or that a board member of a sporting club is focussing at  # noqa: E501

        :return: The sport_discipline of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._sport_discipline

    @sport_discipline.setter
    def sport_discipline(self, sport_discipline):
        """Sets the sport_discipline of this FormulaOneRacer.

        the sport discipline the athlete practices, e.g. Diving, or that a board member of a sporting club is focussing at  # noqa: E501

        :param sport_discipline: The sport_discipline of this FormulaOneRacer.
        :type sport_discipline: List[object]
        """

        self._sport_discipline = sport_discipline

    @property
    def number_of_run(self):
        """Gets the number_of_run of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The number_of_run of this FormulaOneRacer.
        :rtype: List[int]
        """
        return self._number_of_run

    @number_of_run.setter
    def number_of_run(self, number_of_run):
        """Sets the number_of_run of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param number_of_run: The number_of_run of this FormulaOneRacer.
        :type number_of_run: List[int]
        """

        self._number_of_run = number_of_run

    @property
    def lah_hof(self):
        """Gets the lah_hof of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The lah_hof of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._lah_hof

    @lah_hof.setter
    def lah_hof(self, lah_hof):
        """Sets the lah_hof of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param lah_hof: The lah_hof of this FormulaOneRacer.
        :type lah_hof: List[str]
        """

        self._lah_hof = lah_hof

    @property
    def current_team_manager(self):
        """Gets the current_team_manager of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The current_team_manager of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._current_team_manager

    @current_team_manager.setter
    def current_team_manager(self, current_team_manager):
        """Sets the current_team_manager of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param current_team_manager: The current_team_manager of this FormulaOneRacer.
        :type current_team_manager: List[object]
        """

        self._current_team_manager = current_team_manager

    @property
    def little_pool_record(self):
        """Gets the little_pool_record of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The little_pool_record of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._little_pool_record

    @little_pool_record.setter
    def little_pool_record(self, little_pool_record):
        """Sets the little_pool_record of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param little_pool_record: The little_pool_record of this FormulaOneRacer.
        :type little_pool_record: List[str]
        """

        self._little_pool_record = little_pool_record

    @property
    def active_years(self):
        """Gets the active_years of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The active_years of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._active_years

    @active_years.setter
    def active_years(self, active_years):
        """Sets the active_years of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param active_years: The active_years of this FormulaOneRacer.
        :type active_years: List[object]
        """

        self._active_years = active_years

    @property
    def final_lost(self):
        """Gets the final_lost of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The final_lost of this FormulaOneRacer.
        :rtype: List[int]
        """
        return self._final_lost

    @final_lost.setter
    def final_lost(self, final_lost):
        """Sets the final_lost of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param final_lost: The final_lost of this FormulaOneRacer.
        :type final_lost: List[int]
        """

        self._final_lost = final_lost

    @property
    def death_place(self):
        """Gets the death_place of this FormulaOneRacer.

        the place where they died  # noqa: E501

        :return: The death_place of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._death_place

    @death_place.setter
    def death_place(self, death_place):
        """Sets the death_place of this FormulaOneRacer.

        the place where they died  # noqa: E501

        :param death_place: The death_place of this FormulaOneRacer.
        :type death_place: List[object]
        """

        self._death_place = death_place

    @property
    def victory_percentage_as_mgr(self):
        """Gets the victory_percentage_as_mgr of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The victory_percentage_as_mgr of this FormulaOneRacer.
        :rtype: List[float]
        """
        return self._victory_percentage_as_mgr

    @victory_percentage_as_mgr.setter
    def victory_percentage_as_mgr(self, victory_percentage_as_mgr):
        """Sets the victory_percentage_as_mgr of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param victory_percentage_as_mgr: The victory_percentage_as_mgr of this FormulaOneRacer.
        :type victory_percentage_as_mgr: List[float]
        """

        self._victory_percentage_as_mgr = victory_percentage_as_mgr

    @property
    def club(self):
        """Gets the club of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The club of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._club

    @club.setter
    def club(self, club):
        """Sets the club of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param club: The club of this FormulaOneRacer.
        :type club: List[object]
        """

        self._club = club

    @property
    def education_place(self):
        """Gets the education_place of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The education_place of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._education_place

    @education_place.setter
    def education_place(self, education_place):
        """Sets the education_place of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param education_place: The education_place of this FormulaOneRacer.
        :type education_place: List[object]
        """

        self._education_place = education_place

    @property
    def qatar_classic(self):
        """Gets the qatar_classic of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The qatar_classic of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._qatar_classic

    @qatar_classic.setter
    def qatar_classic(self, qatar_classic):
        """Sets the qatar_classic of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param qatar_classic: The qatar_classic of this FormulaOneRacer.
        :type qatar_classic: List[str]
        """

        self._qatar_classic = qatar_classic

    @property
    def match_point(self):
        """Gets the match_point of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The match_point of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._match_point

    @match_point.setter
    def match_point(self, match_point):
        """Sets the match_point of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param match_point: The match_point of this FormulaOneRacer.
        :type match_point: List[str]
        """

        self._match_point = match_point

    @property
    def pro_period(self):
        """Gets the pro_period of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The pro_period of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._pro_period

    @pro_period.setter
    def pro_period(self, pro_period):
        """Sets the pro_period of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param pro_period: The pro_period of this FormulaOneRacer.
        :type pro_period: List[str]
        """

        self._pro_period = pro_period

    @property
    def nla_id(self):
        """Gets the nla_id of this FormulaOneRacer.

        NLA Trove’s People and Organisation view allows the discovery of biographical and other contextual information about people and organisations. Search also available via VIAF.  # noqa: E501

        :return: The nla_id of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._nla_id

    @nla_id.setter
    def nla_id(self, nla_id):
        """Sets the nla_id of this FormulaOneRacer.

        NLA Trove’s People and Organisation view allows the discovery of biographical and other contextual information about people and organisations. Search also available via VIAF.  # noqa: E501

        :param nla_id: The nla_id of this FormulaOneRacer.
        :type nla_id: List[str]
        """

        self._nla_id = nla_id

    @property
    def current_team(self):
        """Gets the current_team of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The current_team of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._current_team

    @current_team.setter
    def current_team(self, current_team):
        """Sets the current_team of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param current_team: The current_team of this FormulaOneRacer.
        :type current_team: List[object]
        """

        self._current_team = current_team

    @property
    def world_tournament_bronze(self):
        """Gets the world_tournament_bronze of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The world_tournament_bronze of this FormulaOneRacer.
        :rtype: List[int]
        """
        return self._world_tournament_bronze

    @world_tournament_bronze.setter
    def world_tournament_bronze(self, world_tournament_bronze):
        """Sets the world_tournament_bronze of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param world_tournament_bronze: The world_tournament_bronze of this FormulaOneRacer.
        :type world_tournament_bronze: List[int]
        """

        self._world_tournament_bronze = world_tournament_bronze

    @property
    def bronze_medal_single(self):
        """Gets the bronze_medal_single of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The bronze_medal_single of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._bronze_medal_single

    @bronze_medal_single.setter
    def bronze_medal_single(self, bronze_medal_single):
        """Sets the bronze_medal_single of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param bronze_medal_single: The bronze_medal_single of this FormulaOneRacer.
        :type bronze_medal_single: List[str]
        """

        self._bronze_medal_single = bronze_medal_single

    @property
    def national_team(self):
        """Gets the national_team of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The national_team of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._national_team

    @national_team.setter
    def national_team(self, national_team):
        """Sets the national_team of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param national_team: The national_team of this FormulaOneRacer.
        :type national_team: List[object]
        """

        self._national_team = national_team

    @property
    def imposed_danse_score(self):
        """Gets the imposed_danse_score of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The imposed_danse_score of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._imposed_danse_score

    @imposed_danse_score.setter
    def imposed_danse_score(self, imposed_danse_score):
        """Sets the imposed_danse_score of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param imposed_danse_score: The imposed_danse_score of this FormulaOneRacer.
        :type imposed_danse_score: List[str]
        """

        self._imposed_danse_score = imposed_danse_score

    @property
    def final_lost_single(self):
        """Gets the final_lost_single of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The final_lost_single of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._final_lost_single

    @final_lost_single.setter
    def final_lost_single(self, final_lost_single):
        """Sets the final_lost_single of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param final_lost_single: The final_lost_single of this FormulaOneRacer.
        :type final_lost_single: List[str]
        """

        self._final_lost_single = final_lost_single

    @property
    def known_for(self):
        """Gets the known_for of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The known_for of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._known_for

    @known_for.setter
    def known_for(self, known_for):
        """Sets the known_for of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param known_for: The known_for of this FormulaOneRacer.
        :type known_for: List[object]
        """

        self._known_for = known_for

    @property
    def big_pool_record(self):
        """Gets the big_pool_record of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The big_pool_record of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._big_pool_record

    @big_pool_record.setter
    def big_pool_record(self, big_pool_record):
        """Sets the big_pool_record of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param big_pool_record: The big_pool_record of this FormulaOneRacer.
        :type big_pool_record: List[str]
        """

        self._big_pool_record = big_pool_record

    @property
    def title_double(self):
        """Gets the title_double of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The title_double of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._title_double

    @title_double.setter
    def title_double(self, title_double):
        """Sets the title_double of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param title_double: The title_double of this FormulaOneRacer.
        :type title_double: List[str]
        """

        self._title_double = title_double

    @property
    def eye_colour(self):
        """Gets the eye_colour of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The eye_colour of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._eye_colour

    @eye_colour.setter
    def eye_colour(self, eye_colour):
        """Sets the eye_colour of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param eye_colour: The eye_colour of this FormulaOneRacer.
        :type eye_colour: List[str]
        """

        self._eye_colour = eye_colour

    @property
    def architectural_movement(self):
        """Gets the architectural_movement of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The architectural_movement of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._architectural_movement

    @architectural_movement.setter
    def architectural_movement(self, architectural_movement):
        """Sets the architectural_movement of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param architectural_movement: The architectural_movement of this FormulaOneRacer.
        :type architectural_movement: List[str]
        """

        self._architectural_movement = architectural_movement

    @property
    def bibsys_id(self):
        """Gets the bibsys_id of this FormulaOneRacer.

        BIBSYS is a supplier of library and information systems for all Norwegian university Libraries, the National Library of Norway, college libraries, and a number of research libraries and institutions.  # noqa: E501

        :return: The bibsys_id of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._bibsys_id

    @bibsys_id.setter
    def bibsys_id(self, bibsys_id):
        """Sets the bibsys_id of this FormulaOneRacer.

        BIBSYS is a supplier of library and information systems for all Norwegian university Libraries, the National Library of Norway, college libraries, and a number of research libraries and institutions.  # noqa: E501

        :param bibsys_id: The bibsys_id of this FormulaOneRacer.
        :type bibsys_id: List[str]
        """

        self._bibsys_id = bibsys_id

    @property
    def fibahof(self):
        """Gets the fibahof of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The fibahof of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._fibahof

    @fibahof.setter
    def fibahof(self, fibahof):
        """Sets the fibahof of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param fibahof: The fibahof of this FormulaOneRacer.
        :type fibahof: List[str]
        """

        self._fibahof = fibahof

    @property
    def junior_season(self):
        """Gets the junior_season of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The junior_season of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._junior_season

    @junior_season.setter
    def junior_season(self, junior_season):
        """Sets the junior_season of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param junior_season: The junior_season of this FormulaOneRacer.
        :type junior_season: List[object]
        """

        self._junior_season = junior_season

    @property
    def notable_idea(self):
        """Gets the notable_idea of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The notable_idea of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._notable_idea

    @notable_idea.setter
    def notable_idea(self, notable_idea):
        """Sets the notable_idea of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param notable_idea: The notable_idea of this FormulaOneRacer.
        :type notable_idea: List[object]
        """

        self._notable_idea = notable_idea

    @property
    def trainer(self):
        """Gets the trainer of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The trainer of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._trainer

    @trainer.setter
    def trainer(self, trainer):
        """Sets the trainer of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param trainer: The trainer of this FormulaOneRacer.
        :type trainer: List[object]
        """

        self._trainer = trainer

    @property
    def continental_tournament_silver(self):
        """Gets the continental_tournament_silver of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The continental_tournament_silver of this FormulaOneRacer.
        :rtype: List[int]
        """
        return self._continental_tournament_silver

    @continental_tournament_silver.setter
    def continental_tournament_silver(self, continental_tournament_silver):
        """Sets the continental_tournament_silver of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param continental_tournament_silver: The continental_tournament_silver of this FormulaOneRacer.
        :type continental_tournament_silver: List[int]
        """

        self._continental_tournament_silver = continental_tournament_silver

    @property
    def original_danse_competition(self):
        """Gets the original_danse_competition of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The original_danse_competition of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._original_danse_competition

    @original_danse_competition.setter
    def original_danse_competition(self, original_danse_competition):
        """Sets the original_danse_competition of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param original_danse_competition: The original_danse_competition of this FormulaOneRacer.
        :type original_danse_competition: List[str]
        """

        self._original_danse_competition = original_danse_competition

    @property
    def status_manager(self):
        """Gets the status_manager of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The status_manager of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._status_manager

    @status_manager.setter
    def status_manager(self, status_manager):
        """Sets the status_manager of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param status_manager: The status_manager of this FormulaOneRacer.
        :type status_manager: List[str]
        """

        self._status_manager = status_manager

    @property
    def national_tournament(self):
        """Gets the national_tournament of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The national_tournament of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._national_tournament

    @national_tournament.setter
    def national_tournament(self, national_tournament):
        """Sets the national_tournament of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param national_tournament: The national_tournament of this FormulaOneRacer.
        :type national_tournament: List[object]
        """

        self._national_tournament = national_tournament

    @property
    def hometown(self):
        """Gets the hometown of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The hometown of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._hometown

    @hometown.setter
    def hometown(self, hometown):
        """Sets the hometown of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param hometown: The hometown of this FormulaOneRacer.
        :type hometown: List[object]
        """

        self._hometown = hometown

    @property
    def dead_in_fight_place(self):
        """Gets the dead_in_fight_place of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The dead_in_fight_place of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._dead_in_fight_place

    @dead_in_fight_place.setter
    def dead_in_fight_place(self, dead_in_fight_place):
        """Sets the dead_in_fight_place of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param dead_in_fight_place: The dead_in_fight_place of this FormulaOneRacer.
        :type dead_in_fight_place: List[str]
        """

        self._dead_in_fight_place = dead_in_fight_place

    @property
    def victory(self):
        """Gets the victory of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The victory of this FormulaOneRacer.
        :rtype: List[int]
        """
        return self._victory

    @victory.setter
    def victory(self, victory):
        """Sets the victory of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param victory: The victory of this FormulaOneRacer.
        :type victory: List[int]
        """

        self._victory = victory

    @property
    def citizenship(self):
        """Gets the citizenship of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The citizenship of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._citizenship

    @citizenship.setter
    def citizenship(self, citizenship):
        """Sets the citizenship of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param citizenship: The citizenship of this FormulaOneRacer.
        :type citizenship: List[object]
        """

        self._citizenship = citizenship

    @property
    def british_open(self):
        """Gets the british_open of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The british_open of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._british_open

    @british_open.setter
    def british_open(self, british_open):
        """Sets the british_open of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param british_open: The british_open of this FormulaOneRacer.
        :type british_open: List[str]
        """

        self._british_open = british_open

    @property
    def label(self):
        """Gets the label of this FormulaOneRacer.

        short description of the resource  # noqa: E501

        :return: The label of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this FormulaOneRacer.

        short description of the resource  # noqa: E501

        :param label: The label of this FormulaOneRacer.
        :type label: List[str]
        """

        self._label = label

    @property
    def bronze_medal_double(self):
        """Gets the bronze_medal_double of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The bronze_medal_double of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._bronze_medal_double

    @bronze_medal_double.setter
    def bronze_medal_double(self, bronze_medal_double):
        """Sets the bronze_medal_double of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param bronze_medal_double: The bronze_medal_double of this FormulaOneRacer.
        :type bronze_medal_double: List[str]
        """

        self._bronze_medal_double = bronze_medal_double

    @property
    def national_tournament_bronze(self):
        """Gets the national_tournament_bronze of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The national_tournament_bronze of this FormulaOneRacer.
        :rtype: List[int]
        """
        return self._national_tournament_bronze

    @national_tournament_bronze.setter
    def national_tournament_bronze(self, national_tournament_bronze):
        """Sets the national_tournament_bronze of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param national_tournament_bronze: The national_tournament_bronze of this FormulaOneRacer.
        :type national_tournament_bronze: List[int]
        """

        self._national_tournament_bronze = national_tournament_bronze

    @property
    def escalafon(self):
        """Gets the escalafon of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The escalafon of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._escalafon

    @escalafon.setter
    def escalafon(self, escalafon):
        """Sets the escalafon of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param escalafon: The escalafon of this FormulaOneRacer.
        :type escalafon: List[str]
        """

        self._escalafon = escalafon

    @property
    def championships(self):
        """Gets the championships of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The championships of this FormulaOneRacer.
        :rtype: List[int]
        """
        return self._championships

    @championships.setter
    def championships(self, championships):
        """Sets the championships of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param championships: The championships of this FormulaOneRacer.
        :type championships: List[int]
        """

        self._championships = championships

    @property
    def waist_size(self):
        """Gets the waist_size of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The waist_size of this FormulaOneRacer.
        :rtype: List[float]
        """
        return self._waist_size

    @waist_size.setter
    def waist_size(self, waist_size):
        """Sets the waist_size of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param waist_size: The waist_size of this FormulaOneRacer.
        :type waist_size: List[float]
        """

        self._waist_size = waist_size

    @property
    def general_council(self):
        """Gets the general_council of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The general_council of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._general_council

    @general_council.setter
    def general_council(self, general_council):
        """Sets the general_council of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param general_council: The general_council of this FormulaOneRacer.
        :type general_council: List[object]
        """

        self._general_council = general_council

    @property
    def australia_open_single(self):
        """Gets the australia_open_single of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The australia_open_single of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._australia_open_single

    @australia_open_single.setter
    def australia_open_single(self, australia_open_single):
        """Sets the australia_open_single of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param australia_open_single: The australia_open_single of this FormulaOneRacer.
        :type australia_open_single: List[str]
        """

        self._australia_open_single = australia_open_single

    @property
    def team_manager(self):
        """Gets the team_manager of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The team_manager of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._team_manager

    @team_manager.setter
    def team_manager(self, team_manager):
        """Sets the team_manager of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param team_manager: The team_manager of this FormulaOneRacer.
        :type team_manager: List[object]
        """

        self._team_manager = team_manager

    @property
    def birth_sign(self):
        """Gets the birth_sign of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The birth_sign of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._birth_sign

    @birth_sign.setter
    def birth_sign(self, birth_sign):
        """Sets the birth_sign of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param birth_sign: The birth_sign of this FormulaOneRacer.
        :type birth_sign: List[object]
        """

        self._birth_sign = birth_sign

    @property
    def age(self):
        """Gets the age of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The age of this FormulaOneRacer.
        :rtype: List[int]
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param age: The age of this FormulaOneRacer.
        :type age: List[int]
        """

        self._age = age

    @property
    def college(self):
        """Gets the college of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The college of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._college

    @college.setter
    def college(self, college):
        """Sets the college of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param college: The college of this FormulaOneRacer.
        :type college: List[object]
        """

        self._college = college

    @property
    def education(self):
        """Gets the education of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The education of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._education

    @education.setter
    def education(self, education):
        """Sets the education of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param education: The education of this FormulaOneRacer.
        :type education: List[object]
        """

        self._education = education

    @property
    def movie(self):
        """Gets the movie of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The movie of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._movie

    @movie.setter
    def movie(self, movie):
        """Sets the movie of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param movie: The movie of this FormulaOneRacer.
        :type movie: List[object]
        """

        self._movie = movie

    @property
    def team_coached(self):
        """Gets the team_coached of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The team_coached of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._team_coached

    @team_coached.setter
    def team_coached(self, team_coached):
        """Sets the team_coached of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param team_coached: The team_coached of this FormulaOneRacer.
        :type team_coached: List[object]
        """

        self._team_coached = team_coached

    @property
    def approach(self):
        """Gets the approach of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The approach of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._approach

    @approach.setter
    def approach(self, approach):
        """Sets the approach of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param approach: The approach of this FormulaOneRacer.
        :type approach: List[object]
        """

        self._approach = approach

    @property
    def victory_as_mgr(self):
        """Gets the victory_as_mgr of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The victory_as_mgr of this FormulaOneRacer.
        :rtype: List[int]
        """
        return self._victory_as_mgr

    @victory_as_mgr.setter
    def victory_as_mgr(self, victory_as_mgr):
        """Sets the victory_as_mgr of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param victory_as_mgr: The victory_as_mgr of this FormulaOneRacer.
        :type victory_as_mgr: List[int]
        """

        self._victory_as_mgr = victory_as_mgr

    @property
    def copilote(self):
        """Gets the copilote of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The copilote of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._copilote

    @copilote.setter
    def copilote(self, copilote):
        """Sets the copilote of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param copilote: The copilote of this FormulaOneRacer.
        :type copilote: List[object]
        """

        self._copilote = copilote

    @property
    def start_wct(self):
        """Gets the start_wct of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The start_wct of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._start_wct

    @start_wct.setter
    def start_wct(self, start_wct):
        """Sets the start_wct of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param start_wct: The start_wct of this FormulaOneRacer.
        :type start_wct: List[str]
        """

        self._start_wct = start_wct

    @property
    def id(self):
        """Gets the id of this FormulaOneRacer.

        identifier  # noqa: E501

        :return: The id of this FormulaOneRacer.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FormulaOneRacer.

        identifier  # noqa: E501

        :param id: The id of this FormulaOneRacer.
        :type id: str
        """

        self._id = id

    @property
    def team_title(self):
        """Gets the team_title of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The team_title of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._team_title

    @team_title.setter
    def team_title(self, team_title):
        """Sets the team_title of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param team_title: The team_title of this FormulaOneRacer.
        :type team_title: List[str]
        """

        self._team_title = team_title

    @property
    def feat(self):
        """Gets the feat of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The feat of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._feat

    @feat.setter
    def feat(self, feat):
        """Sets the feat of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param feat: The feat of this FormulaOneRacer.
        :type feat: List[str]
        """

        self._feat = feat

    @property
    def fastest_lap(self):
        """Gets the fastest_lap of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The fastest_lap of this FormulaOneRacer.
        :rtype: List[int]
        """
        return self._fastest_lap

    @fastest_lap.setter
    def fastest_lap(self, fastest_lap):
        """Sets the fastest_lap of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param fastest_lap: The fastest_lap of this FormulaOneRacer.
        :type fastest_lap: List[int]
        """

        self._fastest_lap = fastest_lap

    @property
    def sentence(self):
        """Gets the sentence of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The sentence of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._sentence

    @sentence.setter
    def sentence(self, sentence):
        """Sets the sentence of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param sentence: The sentence of this FormulaOneRacer.
        :type sentence: List[str]
        """

        self._sentence = sentence

    @property
    def roland_garros_single(self):
        """Gets the roland_garros_single of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The roland_garros_single of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._roland_garros_single

    @roland_garros_single.setter
    def roland_garros_single(self, roland_garros_single):
        """Sets the roland_garros_single of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param roland_garros_single: The roland_garros_single of this FormulaOneRacer.
        :type roland_garros_single: List[str]
        """

        self._roland_garros_single = roland_garros_single

    @property
    def state_of_origin_team(self):
        """Gets the state_of_origin_team of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The state_of_origin_team of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._state_of_origin_team

    @state_of_origin_team.setter
    def state_of_origin_team(self, state_of_origin_team):
        """Sets the state_of_origin_team of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param state_of_origin_team: The state_of_origin_team of this FormulaOneRacer.
        :type state_of_origin_team: List[object]
        """

        self._state_of_origin_team = state_of_origin_team

    @property
    def nfl_team(self):
        """Gets the nfl_team of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The nfl_team of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._nfl_team

    @nfl_team.setter
    def nfl_team(self, nfl_team):
        """Sets the nfl_team of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param nfl_team: The nfl_team of this FormulaOneRacer.
        :type nfl_team: List[object]
        """

        self._nfl_team = nfl_team

    @property
    def world_tournament(self):
        """Gets the world_tournament of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The world_tournament of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._world_tournament

    @world_tournament.setter
    def world_tournament(self, world_tournament):
        """Sets the world_tournament of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param world_tournament: The world_tournament of this FormulaOneRacer.
        :type world_tournament: List[object]
        """

        self._world_tournament = world_tournament

    @property
    def allegiance(self):
        """Gets the allegiance of this FormulaOneRacer.

        The country or other power the person served. Multiple countries may be indicated together with the corresponding dates. This field should not be used to indicate a particular service branch, which is better indicated by the branch field.  # noqa: E501

        :return: The allegiance of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._allegiance

    @allegiance.setter
    def allegiance(self, allegiance):
        """Sets the allegiance of this FormulaOneRacer.

        The country or other power the person served. Multiple countries may be indicated together with the corresponding dates. This field should not be used to indicate a particular service branch, which is better indicated by the branch field.  # noqa: E501

        :param allegiance: The allegiance of this FormulaOneRacer.
        :type allegiance: List[str]
        """

        self._allegiance = allegiance

    @property
    def lccn_id(self):
        """Gets the lccn_id of this FormulaOneRacer.

        Library of Congress Control Number  # noqa: E501

        :return: The lccn_id of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._lccn_id

    @lccn_id.setter
    def lccn_id(self, lccn_id):
        """Sets the lccn_id of this FormulaOneRacer.

        Library of Congress Control Number  # noqa: E501

        :param lccn_id: The lccn_id of this FormulaOneRacer.
        :type lccn_id: List[str]
        """

        self._lccn_id = lccn_id

    @property
    def car_number(self):
        """Gets the car_number of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The car_number of this FormulaOneRacer.
        :rtype: List[int]
        """
        return self._car_number

    @car_number.setter
    def car_number(self, car_number):
        """Sets the car_number of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param car_number: The car_number of this FormulaOneRacer.
        :type car_number: List[int]
        """

        self._car_number = car_number

    @property
    def british_wins(self):
        """Gets the british_wins of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The british_wins of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._british_wins

    @british_wins.setter
    def british_wins(self, british_wins):
        """Sets the british_wins of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param british_wins: The british_wins of this FormulaOneRacer.
        :type british_wins: List[object]
        """

        self._british_wins = british_wins

    @property
    def gold_medal_single(self):
        """Gets the gold_medal_single of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The gold_medal_single of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._gold_medal_single

    @gold_medal_single.setter
    def gold_medal_single(self, gold_medal_single):
        """Sets the gold_medal_single of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param gold_medal_single: The gold_medal_single of this FormulaOneRacer.
        :type gold_medal_single: List[str]
        """

        self._gold_medal_single = gold_medal_single

    @property
    def podium(self):
        """Gets the podium of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The podium of this FormulaOneRacer.
        :rtype: List[int]
        """
        return self._podium

    @podium.setter
    def podium(self, podium):
        """Sets the podium of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param podium: The podium of this FormulaOneRacer.
        :type podium: List[int]
        """

        self._podium = podium

    @property
    def state_of_origin_point(self):
        """Gets the state_of_origin_point of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The state_of_origin_point of this FormulaOneRacer.
        :rtype: List[int]
        """
        return self._state_of_origin_point

    @state_of_origin_point.setter
    def state_of_origin_point(self, state_of_origin_point):
        """Sets the state_of_origin_point of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param state_of_origin_point: The state_of_origin_point of this FormulaOneRacer.
        :type state_of_origin_point: List[int]
        """

        self._state_of_origin_point = state_of_origin_point

    @property
    def player_season(self):
        """Gets the player_season of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The player_season of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._player_season

    @player_season.setter
    def player_season(self, player_season):
        """Sets the player_season of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param player_season: The player_season of this FormulaOneRacer.
        :type player_season: List[object]
        """

        self._player_season = player_season

    @property
    def regional_council(self):
        """Gets the regional_council of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The regional_council of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._regional_council

    @regional_council.setter
    def regional_council(self, regional_council):
        """Sets the regional_council of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param regional_council: The regional_council of this FormulaOneRacer.
        :type regional_council: List[object]
        """

        self._regional_council = regional_council

    @property
    def homage(self):
        """Gets the homage of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The homage of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._homage

    @homage.setter
    def homage(self, homage):
        """Sets the homage of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param homage: The homage of this FormulaOneRacer.
        :type homage: List[str]
        """

        self._homage = homage

    @property
    def national_championship(self):
        """Gets the national_championship of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The national_championship of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._national_championship

    @national_championship.setter
    def national_championship(self, national_championship):
        """Sets the national_championship of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param national_championship: The national_championship of this FormulaOneRacer.
        :type national_championship: List[str]
        """

        self._national_championship = national_championship

    @property
    def first_pro_match(self):
        """Gets the first_pro_match of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The first_pro_match of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._first_pro_match

    @first_pro_match.setter
    def first_pro_match(self, first_pro_match):
        """Sets the first_pro_match of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param first_pro_match: The first_pro_match of this FormulaOneRacer.
        :type first_pro_match: List[str]
        """

        self._first_pro_match = first_pro_match

    @property
    def id_number(self):
        """Gets the id_number of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The id_number of this FormulaOneRacer.
        :rtype: List[int]
        """
        return self._id_number

    @id_number.setter
    def id_number(self, id_number):
        """Sets the id_number of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param id_number: The id_number of this FormulaOneRacer.
        :type id_number: List[int]
        """

        self._id_number = id_number

    @property
    def active_years_start_year_mgr(self):
        """Gets the active_years_start_year_mgr of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The active_years_start_year_mgr of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._active_years_start_year_mgr

    @active_years_start_year_mgr.setter
    def active_years_start_year_mgr(self, active_years_start_year_mgr):
        """Sets the active_years_start_year_mgr of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param active_years_start_year_mgr: The active_years_start_year_mgr of this FormulaOneRacer.
        :type active_years_start_year_mgr: List[str]
        """

        self._active_years_start_year_mgr = active_years_start_year_mgr

    @property
    def wedding_parents_date(self):
        """Gets the wedding_parents_date of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The wedding_parents_date of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._wedding_parents_date

    @wedding_parents_date.setter
    def wedding_parents_date(self, wedding_parents_date):
        """Sets the wedding_parents_date of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param wedding_parents_date: The wedding_parents_date of this FormulaOneRacer.
        :type wedding_parents_date: List[str]
        """

        self._wedding_parents_date = wedding_parents_date

    @property
    def silver_medal_double(self):
        """Gets the silver_medal_double of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The silver_medal_double of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._silver_medal_double

    @silver_medal_double.setter
    def silver_medal_double(self, silver_medal_double):
        """Sets the silver_medal_double of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param silver_medal_double: The silver_medal_double of this FormulaOneRacer.
        :type silver_medal_double: List[str]
        """

        self._silver_medal_double = silver_medal_double

    @property
    def world(self):
        """Gets the world of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The world of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._world

    @world.setter
    def world(self, world):
        """Sets the world of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param world: The world of this FormulaOneRacer.
        :type world: List[object]
        """

        self._world = world

    @property
    def astrological_sign(self):
        """Gets the astrological_sign of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The astrological_sign of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._astrological_sign

    @astrological_sign.setter
    def astrological_sign(self, astrological_sign):
        """Sets the astrological_sign of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param astrological_sign: The astrological_sign of this FormulaOneRacer.
        :type astrological_sign: List[object]
        """

        self._astrological_sign = astrological_sign

    @property
    def coalition(self):
        """Gets the coalition of this FormulaOneRacer.

        Παλαιότερα ο συνασπισμός χρησιμοποιούνταν ως στρατιωτικός όρος που υποδήλωνε την όμορη παράταξη πολεμιστών κατά την οποία ο κάθε στρατιώτης προφύλασσε τον διπλανό του με την ασπίδα του.  # noqa: E501

        :return: The coalition of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._coalition

    @coalition.setter
    def coalition(self, coalition):
        """Sets the coalition of this FormulaOneRacer.

        Παλαιότερα ο συνασπισμός χρησιμοποιούνταν ως στρατιωτικός όρος που υποδήλωνε την όμορη παράταξη πολεμιστών κατά την οποία ο κάθε στρατιώτης προφύλασσε τον διπλανό του με την ασπίδα του.  # noqa: E501

        :param coalition: The coalition of this FormulaOneRacer.
        :type coalition: List[str]
        """

        self._coalition = coalition

    @property
    def defeat_as_mgr(self):
        """Gets the defeat_as_mgr of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The defeat_as_mgr of this FormulaOneRacer.
        :rtype: List[int]
        """
        return self._defeat_as_mgr

    @defeat_as_mgr.setter
    def defeat_as_mgr(self, defeat_as_mgr):
        """Sets the defeat_as_mgr of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param defeat_as_mgr: The defeat_as_mgr of this FormulaOneRacer.
        :type defeat_as_mgr: List[int]
        """

        self._defeat_as_mgr = defeat_as_mgr

    @property
    def death_year(self):
        """Gets the death_year of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The death_year of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._death_year

    @death_year.setter
    def death_year(self, death_year):
        """Sets the death_year of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param death_year: The death_year of this FormulaOneRacer.
        :type death_year: List[str]
        """

        self._death_year = death_year

    @property
    def tournament_of_champions(self):
        """Gets the tournament_of_champions of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The tournament_of_champions of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._tournament_of_champions

    @tournament_of_champions.setter
    def tournament_of_champions(self, tournament_of_champions):
        """Sets the tournament_of_champions of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param tournament_of_champions: The tournament_of_champions of this FormulaOneRacer.
        :type tournament_of_champions: List[str]
        """

        self._tournament_of_champions = tournament_of_champions

    @property
    def world_tournament_gold(self):
        """Gets the world_tournament_gold of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The world_tournament_gold of this FormulaOneRacer.
        :rtype: List[int]
        """
        return self._world_tournament_gold

    @world_tournament_gold.setter
    def world_tournament_gold(self, world_tournament_gold):
        """Sets the world_tournament_gold of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param world_tournament_gold: The world_tournament_gold of this FormulaOneRacer.
        :type world_tournament_gold: List[int]
        """

        self._world_tournament_gold = world_tournament_gold

    @property
    def pga_wins(self):
        """Gets the pga_wins of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The pga_wins of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._pga_wins

    @pga_wins.setter
    def pga_wins(self, pga_wins):
        """Sets the pga_wins of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param pga_wins: The pga_wins of this FormulaOneRacer.
        :type pga_wins: List[object]
        """

        self._pga_wins = pga_wins

    @property
    def rid_id(self):
        """Gets the rid_id of this FormulaOneRacer.

        An identifying system for scientific authors. The system was introduced in January 2008 by Thomson Reuters. The combined use of the Digital Object Identifier with the ResearcherID allows for a unique association of authors and scientific articles.  # noqa: E501

        :return: The rid_id of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._rid_id

    @rid_id.setter
    def rid_id(self, rid_id):
        """Sets the rid_id of this FormulaOneRacer.

        An identifying system for scientific authors. The system was introduced in January 2008 by Thomson Reuters. The combined use of the Digital Object Identifier with the ResearcherID allows for a unique association of authors and scientific articles.  # noqa: E501

        :param rid_id: The rid_id of this FormulaOneRacer.
        :type rid_id: List[str]
        """

        self._rid_id = rid_id

    @property
    def team_point(self):
        """Gets the team_point of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The team_point of this FormulaOneRacer.
        :rtype: List[int]
        """
        return self._team_point

    @team_point.setter
    def team_point(self, team_point):
        """Sets the team_point of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param team_point: The team_point of this FormulaOneRacer.
        :type team_point: List[int]
        """

        self._team_point = team_point

    @property
    def related_functions(self):
        """Gets the related_functions of this FormulaOneRacer.

        This property is to accommodate the list field that contains a list of related personFunctions a person holds or has held  # noqa: E501

        :return: The related_functions of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._related_functions

    @related_functions.setter
    def related_functions(self, related_functions):
        """Sets the related_functions of this FormulaOneRacer.

        This property is to accommodate the list field that contains a list of related personFunctions a person holds or has held  # noqa: E501

        :param related_functions: The related_functions of this FormulaOneRacer.
        :type related_functions: List[object]
        """

        self._related_functions = related_functions

    @property
    def reign(self):
        """Gets the reign of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The reign of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._reign

    @reign.setter
    def reign(self, reign):
        """Sets the reign of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param reign: The reign of this FormulaOneRacer.
        :type reign: List[str]
        """

        self._reign = reign

    @property
    def best_rank_single(self):
        """Gets the best_rank_single of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The best_rank_single of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._best_rank_single

    @best_rank_single.setter
    def best_rank_single(self, best_rank_single):
        """Sets the best_rank_single of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param best_rank_single: The best_rank_single of this FormulaOneRacer.
        :type best_rank_single: List[str]
        """

        self._best_rank_single = best_rank_single

    @property
    def second(self):
        """Gets the second of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The second of this FormulaOneRacer.
        :rtype: List[int]
        """
        return self._second

    @second.setter
    def second(self, second):
        """Sets the second of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param second: The second of this FormulaOneRacer.
        :type second: List[int]
        """

        self._second = second

    @property
    def radio(self):
        """Gets the radio of this FormulaOneRacer.

        To ραδιόφωνο είναι η συσκευή που λειτουργεί ως \"ραδιοδέκτης - μετατροπέας\" όπου λαμβάνοντας τις ραδιοφωνικές εκπομπές των ραδιοφωνικών σταθμών τις μετατρέπει σε ήχο.  # noqa: E501

        :return: The radio of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._radio

    @radio.setter
    def radio(self, radio):
        """Sets the radio of this FormulaOneRacer.

        To ραδιόφωνο είναι η συσκευή που λειτουργεί ως \"ραδιοδέκτης - μετατροπέας\" όπου λαμβάνοντας τις ραδιοφωνικές εκπομπές των ραδιοφωνικών σταθμών τις μετατρέπει σε ήχο.  # noqa: E501

        :param radio: The radio of this FormulaOneRacer.
        :type radio: List[object]
        """

        self._radio = radio

    @property
    def free_score_competition(self):
        """Gets the free_score_competition of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The free_score_competition of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._free_score_competition

    @free_score_competition.setter
    def free_score_competition(self, free_score_competition):
        """Sets the free_score_competition of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param free_score_competition: The free_score_competition of this FormulaOneRacer.
        :type free_score_competition: List[str]
        """

        self._free_score_competition = free_score_competition

    @property
    def publication(self):
        """Gets the publication of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The publication of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._publication

    @publication.setter
    def publication(self, publication):
        """Sets the publication of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param publication: The publication of this FormulaOneRacer.
        :type publication: List[str]
        """

        self._publication = publication

    @property
    def opponent(self):
        """Gets the opponent of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The opponent of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._opponent

    @opponent.setter
    def opponent(self, opponent):
        """Sets the opponent of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param opponent: The opponent of this FormulaOneRacer.
        :type opponent: List[object]
        """

        self._opponent = opponent

    @property
    def us_open_single(self):
        """Gets the us_open_single of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The us_open_single of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._us_open_single

    @us_open_single.setter
    def us_open_single(self, us_open_single):
        """Sets the us_open_single of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param us_open_single: The us_open_single of this FormulaOneRacer.
        :type us_open_single: List[str]
        """

        self._us_open_single = us_open_single

    @property
    def employer(self):
        """Gets the employer of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The employer of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._employer

    @employer.setter
    def employer(self, employer):
        """Sets the employer of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param employer: The employer of this FormulaOneRacer.
        :type employer: List[object]
        """

        self._employer = employer

    @property
    def cash_price(self):
        """Gets the cash_price of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The cash_price of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._cash_price

    @cash_price.setter
    def cash_price(self, cash_price):
        """Sets the cash_price of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param cash_price: The cash_price of this FormulaOneRacer.
        :type cash_price: List[str]
        """

        self._cash_price = cash_price

    @property
    def residence(self):
        """Gets the residence of this FormulaOneRacer.

        Place of residence of a person.  # noqa: E501

        :return: The residence of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._residence

    @residence.setter
    def residence(self, residence):
        """Sets the residence of this FormulaOneRacer.

        Place of residence of a person.  # noqa: E501

        :param residence: The residence of this FormulaOneRacer.
        :type residence: List[object]
        """

        self._residence = residence

    @property
    def usurper(self):
        """Gets the usurper of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The usurper of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._usurper

    @usurper.setter
    def usurper(self, usurper):
        """Sets the usurper of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param usurper: The usurper of this FormulaOneRacer.
        :type usurper: List[object]
        """

        self._usurper = usurper

    @property
    def other_occupation(self):
        """Gets the other_occupation of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The other_occupation of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._other_occupation

    @other_occupation.setter
    def other_occupation(self, other_occupation):
        """Sets the other_occupation of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param other_occupation: The other_occupation of this FormulaOneRacer.
        :type other_occupation: List[object]
        """

        self._other_occupation = other_occupation

    @property
    def contest(self):
        """Gets the contest of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The contest of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._contest

    @contest.setter
    def contest(self, contest):
        """Sets the contest of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param contest: The contest of this FormulaOneRacer.
        :type contest: List[object]
        """

        self._contest = contest

    @property
    def active_years_end_date_mgr(self):
        """Gets the active_years_end_date_mgr of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The active_years_end_date_mgr of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._active_years_end_date_mgr

    @active_years_end_date_mgr.setter
    def active_years_end_date_mgr(self, active_years_end_date_mgr):
        """Sets the active_years_end_date_mgr of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param active_years_end_date_mgr: The active_years_end_date_mgr of this FormulaOneRacer.
        :type active_years_end_date_mgr: List[str]
        """

        self._active_years_end_date_mgr = active_years_end_date_mgr

    @property
    def original_danse_score(self):
        """Gets the original_danse_score of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The original_danse_score of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._original_danse_score

    @original_danse_score.setter
    def original_danse_score(self, original_danse_score):
        """Sets the original_danse_score of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param original_danse_score: The original_danse_score of this FormulaOneRacer.
        :type original_danse_score: List[str]
        """

        self._original_danse_score = original_danse_score

    @property
    def army(self):
        """Gets the army of this FormulaOneRacer.

        Ένας στρατός αποτελεί τις επίγειες ένοπλες δυνάμεις ενός έθνους  # noqa: E501

        :return: The army of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._army

    @army.setter
    def army(self, army):
        """Sets the army of this FormulaOneRacer.

        Ένας στρατός αποτελεί τις επίγειες ένοπλες δυνάμεις ενός έθνους  # noqa: E501

        :param army: The army of this FormulaOneRacer.
        :type army: List[str]
        """

        self._army = army

    @property
    def active_year(self):
        """Gets the active_year of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The active_year of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._active_year

    @active_year.setter
    def active_year(self, active_year):
        """Sets the active_year of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param active_year: The active_year of this FormulaOneRacer.
        :type active_year: List[str]
        """

        self._active_year = active_year

    @property
    def races(self):
        """Gets the races of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The races of this FormulaOneRacer.
        :rtype: List[int]
        """
        return self._races

    @races.setter
    def races(self, races):
        """Sets the races of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param races: The races of this FormulaOneRacer.
        :type races: List[int]
        """

        self._races = races

    @property
    def dubber(self):
        """Gets the dubber of this FormulaOneRacer.

        the person who dubs another person e.g. an actor or a fictional character in movies  # noqa: E501

        :return: The dubber of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._dubber

    @dubber.setter
    def dubber(self, dubber):
        """Sets the dubber of this FormulaOneRacer.

        the person who dubs another person e.g. an actor or a fictional character in movies  # noqa: E501

        :param dubber: The dubber of this FormulaOneRacer.
        :type dubber: List[object]
        """

        self._dubber = dubber

    @property
    def non_professional_career(self):
        """Gets the non_professional_career of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The non_professional_career of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._non_professional_career

    @non_professional_career.setter
    def non_professional_career(self, non_professional_career):
        """Sets the non_professional_career of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param non_professional_career: The non_professional_career of this FormulaOneRacer.
        :type non_professional_career: List[str]
        """

        self._non_professional_career = non_professional_career

    @property
    def military_function(self):
        """Gets the military_function of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The military_function of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._military_function

    @military_function.setter
    def military_function(self, military_function):
        """Sets the military_function of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param military_function: The military_function of this FormulaOneRacer.
        :type military_function: List[str]
        """

        self._military_function = military_function

    @property
    def patent(self):
        """Gets the patent of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The patent of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._patent

    @patent.setter
    def patent(self, patent):
        """Sets the patent of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param patent: The patent of this FormulaOneRacer.
        :type patent: List[object]
        """

        self._patent = patent

    @property
    def piercing(self):
        """Gets the piercing of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The piercing of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._piercing

    @piercing.setter
    def piercing(self, piercing):
        """Sets the piercing of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param piercing: The piercing of this FormulaOneRacer.
        :type piercing: List[str]
        """

        self._piercing = piercing

    @property
    def student(self):
        """Gets the student of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The student of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._student

    @student.setter
    def student(self, student):
        """Sets the student of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param student: The student of this FormulaOneRacer.
        :type student: List[object]
        """

        self._student = student

    @property
    def influenced(self):
        """Gets the influenced of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The influenced of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._influenced

    @influenced.setter
    def influenced(self, influenced):
        """Sets the influenced of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param influenced: The influenced of this FormulaOneRacer.
        :type influenced: List[object]
        """

        self._influenced = influenced

    @property
    def start_reign(self):
        """Gets the start_reign of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The start_reign of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._start_reign

    @start_reign.setter
    def start_reign(self, start_reign):
        """Sets the start_reign of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param start_reign: The start_reign of this FormulaOneRacer.
        :type start_reign: List[object]
        """

        self._start_reign = start_reign

    @property
    def university(self):
        """Gets the university of this FormulaOneRacer.

        university a person goes or went to.  # noqa: E501

        :return: The university of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._university

    @university.setter
    def university(self, university):
        """Sets the university of this FormulaOneRacer.

        university a person goes or went to.  # noqa: E501

        :param university: The university of this FormulaOneRacer.
        :type university: List[object]
        """

        self._university = university

    @property
    def ideology(self):
        """Gets the ideology of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The ideology of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._ideology

    @ideology.setter
    def ideology(self, ideology):
        """Sets the ideology of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param ideology: The ideology of this FormulaOneRacer.
        :type ideology: List[object]
        """

        self._ideology = ideology

    @property
    def conviction_date(self):
        """Gets the conviction_date of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The conviction_date of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._conviction_date

    @conviction_date.setter
    def conviction_date(self, conviction_date):
        """Sets the conviction_date of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param conviction_date: The conviction_date of this FormulaOneRacer.
        :type conviction_date: List[str]
        """

        self._conviction_date = conviction_date

    @property
    def media(self):
        """Gets the media of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The media of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param media: The media of this FormulaOneRacer.
        :type media: List[object]
        """

        self._media = media

    @property
    def bnf_id(self):
        """Gets the bnf_id of this FormulaOneRacer.

        Authority data of people listed in the general catalogue of the National Library of France  # noqa: E501

        :return: The bnf_id of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._bnf_id

    @bnf_id.setter
    def bnf_id(self, bnf_id):
        """Sets the bnf_id of this FormulaOneRacer.

        Authority data of people listed in the general catalogue of the National Library of France  # noqa: E501

        :param bnf_id: The bnf_id of this FormulaOneRacer.
        :type bnf_id: List[str]
        """

        self._bnf_id = bnf_id

    @property
    def pseudonym(self):
        """Gets the pseudonym of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The pseudonym of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._pseudonym

    @pseudonym.setter
    def pseudonym(self, pseudonym):
        """Sets the pseudonym of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param pseudonym: The pseudonym of this FormulaOneRacer.
        :type pseudonym: List[str]
        """

        self._pseudonym = pseudonym

    @property
    def speciality(self):
        """Gets the speciality of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The speciality of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._speciality

    @speciality.setter
    def speciality(self, speciality):
        """Sets the speciality of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param speciality: The speciality of this FormulaOneRacer.
        :type speciality: List[str]
        """

        self._speciality = speciality

    @property
    def kind_of_criminal_action(self):
        """Gets the kind_of_criminal_action of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The kind_of_criminal_action of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._kind_of_criminal_action

    @kind_of_criminal_action.setter
    def kind_of_criminal_action(self, kind_of_criminal_action):
        """Sets the kind_of_criminal_action of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param kind_of_criminal_action: The kind_of_criminal_action of this FormulaOneRacer.
        :type kind_of_criminal_action: List[str]
        """

        self._kind_of_criminal_action = kind_of_criminal_action

    @property
    def isni_id(self):
        """Gets the isni_id of this FormulaOneRacer.

        ISNI is a method for uniquely identifying the public identities of contributors to media content such as books, TV programmes, and newspaper articles.  # noqa: E501

        :return: The isni_id of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._isni_id

    @isni_id.setter
    def isni_id(self, isni_id):
        """Sets the isni_id of this FormulaOneRacer.

        ISNI is a method for uniquely identifying the public identities of contributors to media content such as books, TV programmes, and newspaper articles.  # noqa: E501

        :param isni_id: The isni_id of this FormulaOneRacer.
        :type isni_id: List[str]
        """

        self._isni_id = isni_id

    @property
    def wimbledon_single(self):
        """Gets the wimbledon_single of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The wimbledon_single of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._wimbledon_single

    @wimbledon_single.setter
    def wimbledon_single(self, wimbledon_single):
        """Sets the wimbledon_single of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param wimbledon_single: The wimbledon_single of this FormulaOneRacer.
        :type wimbledon_single: List[str]
        """

        self._wimbledon_single = wimbledon_single

    @property
    def significant_project(self):
        """Gets the significant_project of this FormulaOneRacer.

        A siginificant artifact constructed by the person.  # noqa: E501

        :return: The significant_project of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._significant_project

    @significant_project.setter
    def significant_project(self, significant_project):
        """Sets the significant_project of this FormulaOneRacer.

        A siginificant artifact constructed by the person.  # noqa: E501

        :param significant_project: The significant_project of this FormulaOneRacer.
        :type significant_project: List[object]
        """

        self._significant_project = significant_project

    @property
    def youth_club(self):
        """Gets the youth_club of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The youth_club of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._youth_club

    @youth_club.setter
    def youth_club(self, youth_club):
        """Sets the youth_club of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param youth_club: The youth_club of this FormulaOneRacer.
        :type youth_club: List[object]
        """

        self._youth_club = youth_club

    @property
    def leadership(self):
        """Gets the leadership of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The leadership of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._leadership

    @leadership.setter
    def leadership(self, leadership):
        """Sets the leadership of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param leadership: The leadership of this FormulaOneRacer.
        :type leadership: List[str]
        """

        self._leadership = leadership

    @property
    def death_date(self):
        """Gets the death_date of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The death_date of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._death_date

    @death_date.setter
    def death_date(self, death_date):
        """Sets the death_date of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param death_date: The death_date of this FormulaOneRacer.
        :type death_date: List[str]
        """

        self._death_date = death_date

    @property
    def special_trial(self):
        """Gets the special_trial of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The special_trial of this FormulaOneRacer.
        :rtype: List[int]
        """
        return self._special_trial

    @special_trial.setter
    def special_trial(self, special_trial):
        """Sets the special_trial of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param special_trial: The special_trial of this FormulaOneRacer.
        :type special_trial: List[int]
        """

        self._special_trial = special_trial

    @property
    def victim(self):
        """Gets the victim of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The victim of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._victim

    @victim.setter
    def victim(self, victim):
        """Sets the victim of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param victim: The victim of this FormulaOneRacer.
        :type victim: List[str]
        """

        self._victim = victim

    @property
    def height_against(self):
        """Gets the height_against of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The height_against of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._height_against

    @height_against.setter
    def height_against(self, height_against):
        """Sets the height_against of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param height_against: The height_against of this FormulaOneRacer.
        :type height_against: List[str]
        """

        self._height_against = height_against

    @property
    def has_natural_bust(self):
        """Gets the has_natural_bust of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The has_natural_bust of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._has_natural_bust

    @has_natural_bust.setter
    def has_natural_bust(self, has_natural_bust):
        """Sets the has_natural_bust of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param has_natural_bust: The has_natural_bust of this FormulaOneRacer.
        :type has_natural_bust: List[str]
        """

        self._has_natural_bust = has_natural_bust

    @property
    def individualised_pnd(self):
        """Gets the individualised_pnd of this FormulaOneRacer.

        PND (Personennamendatei) data about a person. PND is published by the German National Library. For each person there is a record with her/his name, birth and occupation connected with a unique identifier, the PND number.  # noqa: E501

        :return: The individualised_pnd of this FormulaOneRacer.
        :rtype: List[int]
        """
        return self._individualised_pnd

    @individualised_pnd.setter
    def individualised_pnd(self, individualised_pnd):
        """Sets the individualised_pnd of this FormulaOneRacer.

        PND (Personennamendatei) data about a person. PND is published by the German National Library. For each person there is a record with her/his name, birth and occupation connected with a unique identifier, the PND number.  # noqa: E501

        :param individualised_pnd: The individualised_pnd of this FormulaOneRacer.
        :type individualised_pnd: List[int]
        """

        self._individualised_pnd = individualised_pnd

    @property
    def current_league(self):
        """Gets the current_league of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The current_league of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._current_league

    @current_league.setter
    def current_league(self, current_league):
        """Sets the current_league of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param current_league: The current_league of this FormulaOneRacer.
        :type current_league: List[object]
        """

        self._current_league = current_league

    @property
    def poles(self):
        """Gets the poles of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The poles of this FormulaOneRacer.
        :rtype: List[int]
        """
        return self._poles

    @poles.setter
    def poles(self, poles):
        """Sets the poles of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param poles: The poles of this FormulaOneRacer.
        :type poles: List[int]
        """

        self._poles = poles

    @property
    def wimbledon_mixed(self):
        """Gets the wimbledon_mixed of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The wimbledon_mixed of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._wimbledon_mixed

    @wimbledon_mixed.setter
    def wimbledon_mixed(self, wimbledon_mixed):
        """Sets the wimbledon_mixed of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param wimbledon_mixed: The wimbledon_mixed of this FormulaOneRacer.
        :type wimbledon_mixed: List[str]
        """

        self._wimbledon_mixed = wimbledon_mixed

    @property
    def end_reign(self):
        """Gets the end_reign of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The end_reign of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._end_reign

    @end_reign.setter
    def end_reign(self, end_reign):
        """Sets the end_reign of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param end_reign: The end_reign of this FormulaOneRacer.
        :type end_reign: List[object]
        """

        self._end_reign = end_reign

    @property
    def viaf_id(self):
        """Gets the viaf_id of this FormulaOneRacer.

        International authority data from the Online Computer Library Center (OCLC)  # noqa: E501

        :return: The viaf_id of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._viaf_id

    @viaf_id.setter
    def viaf_id(self, viaf_id):
        """Sets the viaf_id of this FormulaOneRacer.

        International authority data from the Online Computer Library Center (OCLC)  # noqa: E501

        :param viaf_id: The viaf_id of this FormulaOneRacer.
        :type viaf_id: List[str]
        """

        self._viaf_id = viaf_id

    @property
    def hair_colour(self):
        """Gets the hair_colour of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The hair_colour of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._hair_colour

    @hair_colour.setter
    def hair_colour(self, hair_colour):
        """Sets the hair_colour of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param hair_colour: The hair_colour of this FormulaOneRacer.
        :type hair_colour: List[str]
        """

        self._hair_colour = hair_colour

    @property
    def expedition(self):
        """Gets the expedition of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The expedition of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._expedition

    @expedition.setter
    def expedition(self, expedition):
        """Sets the expedition of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param expedition: The expedition of this FormulaOneRacer.
        :type expedition: List[str]
        """

        self._expedition = expedition

    @property
    def main_domain(self):
        """Gets the main_domain of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The main_domain of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._main_domain

    @main_domain.setter
    def main_domain(self, main_domain):
        """Sets the main_domain of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param main_domain: The main_domain of this FormulaOneRacer.
        :type main_domain: List[object]
        """

        self._main_domain = main_domain

    @property
    def nndb_id(self):
        """Gets the nndb_id of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The nndb_id of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._nndb_id

    @nndb_id.setter
    def nndb_id(self, nndb_id):
        """Sets the nndb_id of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param nndb_id: The nndb_id of this FormulaOneRacer.
        :type nndb_id: List[str]
        """

        self._nndb_id = nndb_id

    @property
    def discipline(self):
        """Gets the discipline of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The discipline of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._discipline

    @discipline.setter
    def discipline(self, discipline):
        """Sets the discipline of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param discipline: The discipline of this FormulaOneRacer.
        :type discipline: List[object]
        """

        self._discipline = discipline

    @property
    def consecration(self):
        """Gets the consecration of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The consecration of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._consecration

    @consecration.setter
    def consecration(self, consecration):
        """Sets the consecration of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param consecration: The consecration of this FormulaOneRacer.
        :type consecration: List[str]
        """

        self._consecration = consecration

    @property
    def scene(self):
        """Gets the scene of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The scene of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._scene

    @scene.setter
    def scene(self, scene):
        """Sets the scene of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param scene: The scene of this FormulaOneRacer.
        :type scene: List[str]
        """

        self._scene = scene

    @property
    def best_lap(self):
        """Gets the best_lap of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The best_lap of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._best_lap

    @best_lap.setter
    def best_lap(self, best_lap):
        """Sets the best_lap of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param best_lap: The best_lap of this FormulaOneRacer.
        :type best_lap: List[str]
        """

        self._best_lap = best_lap

    @property
    def world_open(self):
        """Gets the world_open of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The world_open of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._world_open

    @world_open.setter
    def world_open(self, world_open):
        """Sets the world_open of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param world_open: The world_open of this FormulaOneRacer.
        :type world_open: List[str]
        """

        self._world_open = world_open

    @property
    def european_championship(self):
        """Gets the european_championship of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The european_championship of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._european_championship

    @european_championship.setter
    def european_championship(self, european_championship):
        """Sets the european_championship of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param european_championship: The european_championship of this FormulaOneRacer.
        :type european_championship: List[str]
        """

        self._european_championship = european_championship

    @property
    def friend(self):
        """Gets the friend of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The friend of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._friend

    @friend.setter
    def friend(self, friend):
        """Sets the friend of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param friend: The friend of this FormulaOneRacer.
        :type friend: List[object]
        """

        self._friend = friend

    @property
    def world_champion_title_year(self):
        """Gets the world_champion_title_year of this FormulaOneRacer.

        can be one or several years  # noqa: E501

        :return: The world_champion_title_year of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._world_champion_title_year

    @world_champion_title_year.setter
    def world_champion_title_year(self, world_champion_title_year):
        """Sets the world_champion_title_year of this FormulaOneRacer.

        can be one or several years  # noqa: E501

        :param world_champion_title_year: The world_champion_title_year of this FormulaOneRacer.
        :type world_champion_title_year: List[str]
        """

        self._world_champion_title_year = world_champion_title_year

    @property
    def full_score(self):
        """Gets the full_score of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The full_score of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._full_score

    @full_score.setter
    def full_score(self, full_score):
        """Sets the full_score of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param full_score: The full_score of this FormulaOneRacer.
        :type full_score: List[str]
        """

        self._full_score = full_score

    @property
    def diploma(self):
        """Gets the diploma of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The diploma of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._diploma

    @diploma.setter
    def diploma(self, diploma):
        """Sets the diploma of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param diploma: The diploma of this FormulaOneRacer.
        :type diploma: List[object]
        """

        self._diploma = diploma

    @property
    def abbeychurch_blessing(self):
        """Gets the abbeychurch_blessing of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The abbeychurch_blessing of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._abbeychurch_blessing

    @abbeychurch_blessing.setter
    def abbeychurch_blessing(self, abbeychurch_blessing):
        """Sets the abbeychurch_blessing of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param abbeychurch_blessing: The abbeychurch_blessing of this FormulaOneRacer.
        :type abbeychurch_blessing: List[str]
        """

        self._abbeychurch_blessing = abbeychurch_blessing

    @property
    def selection_year(self):
        """Gets the selection_year of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The selection_year of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._selection_year

    @selection_year.setter
    def selection_year(self, selection_year):
        """Sets the selection_year of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param selection_year: The selection_year of this FormulaOneRacer.
        :type selection_year: List[str]
        """

        self._selection_year = selection_year

    @property
    def height(self):
        """Gets the height of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The height of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param height: The height of this FormulaOneRacer.
        :type height: List[object]
        """

        self._height = height

    @property
    def handedness(self):
        """Gets the handedness of this FormulaOneRacer.

        an attribute of humans defined by their unequal distribution of fine motor skill between the left and right hands.  # noqa: E501

        :return: The handedness of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._handedness

    @handedness.setter
    def handedness(self, handedness):
        """Sets the handedness of this FormulaOneRacer.

        an attribute of humans defined by their unequal distribution of fine motor skill between the left and right hands.  # noqa: E501

        :param handedness: The handedness of this FormulaOneRacer.
        :type handedness: List[object]
        """

        self._handedness = handedness

    @property
    def philosophical_school(self):
        """Gets the philosophical_school of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The philosophical_school of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._philosophical_school

    @philosophical_school.setter
    def philosophical_school(self, philosophical_school):
        """Sets the philosophical_school of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param philosophical_school: The philosophical_school of this FormulaOneRacer.
        :type philosophical_school: List[object]
        """

        self._philosophical_school = philosophical_school

    @property
    def parliamentary_group(self):
        """Gets the parliamentary_group of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The parliamentary_group of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._parliamentary_group

    @parliamentary_group.setter
    def parliamentary_group(self, parliamentary_group):
        """Sets the parliamentary_group of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param parliamentary_group: The parliamentary_group of this FormulaOneRacer.
        :type parliamentary_group: List[str]
        """

        self._parliamentary_group = parliamentary_group

    @property
    def mount(self):
        """Gets the mount of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The mount of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._mount

    @mount.setter
    def mount(self, mount):
        """Sets the mount of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param mount: The mount of this FormulaOneRacer.
        :type mount: List[str]
        """

        self._mount = mount

    @property
    def davis_cup(self):
        """Gets the davis_cup of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The davis_cup of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._davis_cup

    @davis_cup.setter
    def davis_cup(self, davis_cup):
        """Sets the davis_cup of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param davis_cup: The davis_cup of this FormulaOneRacer.
        :type davis_cup: List[str]
        """

        self._davis_cup = davis_cup

    @property
    def junior_years_start_year(self):
        """Gets the junior_years_start_year of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The junior_years_start_year of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._junior_years_start_year

    @junior_years_start_year.setter
    def junior_years_start_year(self, junior_years_start_year):
        """Sets the junior_years_start_year of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param junior_years_start_year: The junior_years_start_year of this FormulaOneRacer.
        :type junior_years_start_year: List[str]
        """

        self._junior_years_start_year = junior_years_start_year

    @property
    def announced_from(self):
        """Gets the announced_from of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The announced_from of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._announced_from

    @announced_from.setter
    def announced_from(self, announced_from):
        """Sets the announced_from of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param announced_from: The announced_from of this FormulaOneRacer.
        :type announced_from: List[object]
        """

        self._announced_from = announced_from

    @property
    def australia_open_mixed(self):
        """Gets the australia_open_mixed of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The australia_open_mixed of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._australia_open_mixed

    @australia_open_mixed.setter
    def australia_open_mixed(self, australia_open_mixed):
        """Sets the australia_open_mixed of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param australia_open_mixed: The australia_open_mixed of this FormulaOneRacer.
        :type australia_open_mixed: List[str]
        """

        self._australia_open_mixed = australia_open_mixed

    @property
    def gold_medal_double(self):
        """Gets the gold_medal_double of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The gold_medal_double of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._gold_medal_double

    @gold_medal_double.setter
    def gold_medal_double(self, gold_medal_double):
        """Sets the gold_medal_double of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param gold_medal_double: The gold_medal_double of this FormulaOneRacer.
        :type gold_medal_double: List[str]
        """

        self._gold_medal_double = gold_medal_double

    @property
    def activity(self):
        """Gets the activity of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The activity of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._activity

    @activity.setter
    def activity(self, activity):
        """Sets the activity of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param activity: The activity of this FormulaOneRacer.
        :type activity: List[object]
        """

        self._activity = activity

    @property
    def pole_position(self):
        """Gets the pole_position of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The pole_position of this FormulaOneRacer.
        :rtype: List[int]
        """
        return self._pole_position

    @pole_position.setter
    def pole_position(self, pole_position):
        """Sets the pole_position of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param pole_position: The pole_position of this FormulaOneRacer.
        :type pole_position: List[int]
        """

        self._pole_position = pole_position

    @property
    def killed_by(self):
        """Gets the killed_by of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The killed_by of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._killed_by

    @killed_by.setter
    def killed_by(self, killed_by):
        """Sets the killed_by of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param killed_by: The killed_by of this FormulaOneRacer.
        :type killed_by: List[str]
        """

        self._killed_by = killed_by

    @property
    def first_race(self):
        """Gets the first_race of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The first_race of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._first_race

    @first_race.setter
    def first_race(self, first_race):
        """Sets the first_race of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param first_race: The first_race of this FormulaOneRacer.
        :type first_race: List[object]
        """

        self._first_race = first_race

    @property
    def draft_position(self):
        """Gets the draft_position of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The draft_position of this FormulaOneRacer.
        :rtype: List[int]
        """
        return self._draft_position

    @draft_position.setter
    def draft_position(self, draft_position):
        """Sets the draft_position of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param draft_position: The draft_position of this FormulaOneRacer.
        :type draft_position: List[int]
        """

        self._draft_position = draft_position

    @property
    def political_function(self):
        """Gets the political_function of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The political_function of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._political_function

    @political_function.setter
    def political_function(self, political_function):
        """Sets the political_function of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param political_function: The political_function of this FormulaOneRacer.
        :type political_function: List[str]
        """

        self._political_function = political_function

    @property
    def honours(self):
        """Gets the honours of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The honours of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._honours

    @honours.setter
    def honours(self, honours):
        """Sets the honours of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param honours: The honours of this FormulaOneRacer.
        :type honours: List[object]
        """

        self._honours = honours

    @property
    def ncaa_team(self):
        """Gets the ncaa_team of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The ncaa_team of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._ncaa_team

    @ncaa_team.setter
    def ncaa_team(self, ncaa_team):
        """Sets the ncaa_team of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param ncaa_team: The ncaa_team of this FormulaOneRacer.
        :type ncaa_team: List[object]
        """

        self._ncaa_team = ncaa_team

    @property
    def measurements(self):
        """Gets the measurements of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The measurements of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._measurements

    @measurements.setter
    def measurements(self, measurements):
        """Sets the measurements of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param measurements: The measurements of this FormulaOneRacer.
        :type measurements: List[str]
        """

        self._measurements = measurements

    @property
    def coemperor(self):
        """Gets the coemperor of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The coemperor of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._coemperor

    @coemperor.setter
    def coemperor(self, coemperor):
        """Sets the coemperor of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param coemperor: The coemperor of this FormulaOneRacer.
        :type coemperor: List[object]
        """

        self._coemperor = coemperor

    @property
    def roland_garros_mixed(self):
        """Gets the roland_garros_mixed of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The roland_garros_mixed of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._roland_garros_mixed

    @roland_garros_mixed.setter
    def roland_garros_mixed(self, roland_garros_mixed):
        """Sets the roland_garros_mixed of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param roland_garros_mixed: The roland_garros_mixed of this FormulaOneRacer.
        :type roland_garros_mixed: List[str]
        """

        self._roland_garros_mixed = roland_garros_mixed

    @property
    def selibr_id(self):
        """Gets the selibr_id of this FormulaOneRacer.

        Authority data from the National Library of Sweden  # noqa: E501

        :return: The selibr_id of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._selibr_id

    @selibr_id.setter
    def selibr_id(self, selibr_id):
        """Sets the selibr_id of this FormulaOneRacer.

        Authority data from the National Library of Sweden  # noqa: E501

        :param selibr_id: The selibr_id of this FormulaOneRacer.
        :type selibr_id: List[str]
        """

        self._selibr_id = selibr_id

    @property
    def danse_competition(self):
        """Gets the danse_competition of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The danse_competition of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._danse_competition

    @danse_competition.setter
    def danse_competition(self, danse_competition):
        """Sets the danse_competition of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param danse_competition: The danse_competition of this FormulaOneRacer.
        :type danse_competition: List[str]
        """

        self._danse_competition = danse_competition

    @property
    def birth_year(self):
        """Gets the birth_year of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The birth_year of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._birth_year

    @birth_year.setter
    def birth_year(self, birth_year):
        """Sets the birth_year of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param birth_year: The birth_year of this FormulaOneRacer.
        :type birth_year: List[str]
        """

        self._birth_year = birth_year

    @property
    def sports_function(self):
        """Gets the sports_function of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The sports_function of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._sports_function

    @sports_function.setter
    def sports_function(self, sports_function):
        """Sets the sports_function of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param sports_function: The sports_function of this FormulaOneRacer.
        :type sports_function: List[str]
        """

        self._sports_function = sports_function

    @property
    def orcid_id(self):
        """Gets the orcid_id of this FormulaOneRacer.

        Authority data on researchers, academics, etc. The ID range has been defined as a subset of the forthcoming ISNI range.  # noqa: E501

        :return: The orcid_id of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._orcid_id

    @orcid_id.setter
    def orcid_id(self, orcid_id):
        """Sets the orcid_id of this FormulaOneRacer.

        Authority data on researchers, academics, etc. The ID range has been defined as a subset of the forthcoming ISNI range.  # noqa: E501

        :param orcid_id: The orcid_id of this FormulaOneRacer.
        :type orcid_id: List[str]
        """

        self._orcid_id = orcid_id

    @property
    def election_date(self):
        """Gets the election_date of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The election_date of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._election_date

    @election_date.setter
    def election_date(self, election_date):
        """Sets the election_date of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param election_date: The election_date of this FormulaOneRacer.
        :type election_date: List[str]
        """

        self._election_date = election_date

    @property
    def collaboration(self):
        """Gets the collaboration of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The collaboration of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._collaboration

    @collaboration.setter
    def collaboration(self, collaboration):
        """Sets the collaboration of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param collaboration: The collaboration of this FormulaOneRacer.
        :type collaboration: List[object]
        """

        self._collaboration = collaboration

    @property
    def national_team_year(self):
        """Gets the national_team_year of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The national_team_year of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._national_team_year

    @national_team_year.setter
    def national_team_year(self, national_team_year):
        """Sets the national_team_year of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param national_team_year: The national_team_year of this FormulaOneRacer.
        :type national_team_year: List[str]
        """

        self._national_team_year = national_team_year

    @property
    def spouse_name(self):
        """Gets the spouse_name of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The spouse_name of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._spouse_name

    @spouse_name.setter
    def spouse_name(self, spouse_name):
        """Sets the spouse_name of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param spouse_name: The spouse_name of this FormulaOneRacer.
        :type spouse_name: List[str]
        """

        self._spouse_name = spouse_name

    @property
    def roland_garros_double(self):
        """Gets the roland_garros_double of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The roland_garros_double of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._roland_garros_double

    @roland_garros_double.setter
    def roland_garros_double(self, roland_garros_double):
        """Sets the roland_garros_double of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param roland_garros_double: The roland_garros_double of this FormulaOneRacer.
        :type roland_garros_double: List[str]
        """

        self._roland_garros_double = roland_garros_double

    @property
    def derived_word(self):
        """Gets the derived_word of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The derived_word of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._derived_word

    @derived_word.setter
    def derived_word(self, derived_word):
        """Sets the derived_word of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param derived_word: The derived_word of this FormulaOneRacer.
        :type derived_word: List[str]
        """

        self._derived_word = derived_word

    @property
    def bpn_id(self):
        """Gets the bpn_id of this FormulaOneRacer.

        Dutch project with material for 40,000 digitized biographies, including former colonies of the Netherlands.  # noqa: E501

        :return: The bpn_id of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._bpn_id

    @bpn_id.setter
    def bpn_id(self, bpn_id):
        """Sets the bpn_id of this FormulaOneRacer.

        Dutch project with material for 40,000 digitized biographies, including former colonies of the Netherlands.  # noqa: E501

        :param bpn_id: The bpn_id of this FormulaOneRacer.
        :type bpn_id: List[str]
        """

        self._bpn_id = bpn_id

    @property
    def free_danse_score(self):
        """Gets the free_danse_score of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The free_danse_score of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._free_danse_score

    @free_danse_score.setter
    def free_danse_score(self, free_danse_score):
        """Sets the free_danse_score of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param free_danse_score: The free_danse_score of this FormulaOneRacer.
        :type free_danse_score: List[str]
        """

        self._free_danse_score = free_danse_score

    @property
    def ncbhof(self):
        """Gets the ncbhof of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The ncbhof of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._ncbhof

    @ncbhof.setter
    def ncbhof(self, ncbhof):
        """Sets the ncbhof of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param ncbhof: The ncbhof of this FormulaOneRacer.
        :type ncbhof: List[str]
        """

        self._ncbhof = ncbhof

    @property
    def supplemental_draft_round(self):
        """Gets the supplemental_draft_round of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The supplemental_draft_round of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._supplemental_draft_round

    @supplemental_draft_round.setter
    def supplemental_draft_round(self, supplemental_draft_round):
        """Sets the supplemental_draft_round of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param supplemental_draft_round: The supplemental_draft_round of this FormulaOneRacer.
        :type supplemental_draft_round: List[str]
        """

        self._supplemental_draft_round = supplemental_draft_round

    @property
    def project(self):
        """Gets the project of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The project of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param project: The project of this FormulaOneRacer.
        :type project: List[object]
        """

        self._project = project

    @property
    def title_date(self):
        """Gets the title_date of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The title_date of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._title_date

    @title_date.setter
    def title_date(self, title_date):
        """Sets the title_date of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param title_date: The title_date of this FormulaOneRacer.
        :type title_date: List[str]
        """

        self._title_date = title_date

    @property
    def blood_group(self):
        """Gets the blood_group of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The blood_group of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._blood_group

    @blood_group.setter
    def blood_group(self, blood_group):
        """Sets the blood_group of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param blood_group: The blood_group of this FormulaOneRacer.
        :type blood_group: List[str]
        """

        self._blood_group = blood_group

    @property
    def school(self):
        """Gets the school of this FormulaOneRacer.

        school a person goes or went to  # noqa: E501

        :return: The school of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._school

    @school.setter
    def school(self, school):
        """Sets the school of this FormulaOneRacer.

        school a person goes or went to  # noqa: E501

        :param school: The school of this FormulaOneRacer.
        :type school: List[object]
        """

        self._school = school

    @property
    def bronze_medal_mixed(self):
        """Gets the bronze_medal_mixed of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The bronze_medal_mixed of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._bronze_medal_mixed

    @bronze_medal_mixed.setter
    def bronze_medal_mixed(self, bronze_medal_mixed):
        """Sets the bronze_medal_mixed of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param bronze_medal_mixed: The bronze_medal_mixed of this FormulaOneRacer.
        :type bronze_medal_mixed: List[str]
        """

        self._bronze_medal_mixed = bronze_medal_mixed

    @property
    def silver_medal_single(self):
        """Gets the silver_medal_single of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The silver_medal_single of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._silver_medal_single

    @silver_medal_single.setter
    def silver_medal_single(self, silver_medal_single):
        """Sets the silver_medal_single of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param silver_medal_single: The silver_medal_single of this FormulaOneRacer.
        :type silver_medal_single: List[str]
        """

        self._silver_medal_single = silver_medal_single

    @property
    def imposed_danse_competition(self):
        """Gets the imposed_danse_competition of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The imposed_danse_competition of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._imposed_danse_competition

    @imposed_danse_competition.setter
    def imposed_danse_competition(self, imposed_danse_competition):
        """Sets the imposed_danse_competition of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param imposed_danse_competition: The imposed_danse_competition of this FormulaOneRacer.
        :type imposed_danse_competition: List[str]
        """

        self._imposed_danse_competition = imposed_danse_competition

    @property
    def shoot(self):
        """Gets the shoot of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The shoot of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._shoot

    @shoot.setter
    def shoot(self, shoot):
        """Sets the shoot of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param shoot: The shoot of this FormulaOneRacer.
        :type shoot: List[str]
        """

        self._shoot = shoot

    @property
    def reign_name(self):
        """Gets the reign_name of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The reign_name of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._reign_name

    @reign_name.setter
    def reign_name(self, reign_name):
        """Sets the reign_name of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param reign_name: The reign_name of this FormulaOneRacer.
        :type reign_name: List[str]
        """

        self._reign_name = reign_name

    @property
    def influenced_by(self):
        """Gets the influenced_by of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The influenced_by of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._influenced_by

    @influenced_by.setter
    def influenced_by(self, influenced_by):
        """Sets the influenced_by of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param influenced_by: The influenced_by of this FormulaOneRacer.
        :type influenced_by: List[object]
        """

        self._influenced_by = influenced_by

    @property
    def cousurper(self):
        """Gets the cousurper of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The cousurper of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._cousurper

    @cousurper.setter
    def cousurper(self, cousurper):
        """Sets the cousurper of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param cousurper: The cousurper of this FormulaOneRacer.
        :type cousurper: List[object]
        """

        self._cousurper = cousurper

    @property
    def race_wins(self):
        """Gets the race_wins of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The race_wins of this FormulaOneRacer.
        :rtype: List[int]
        """
        return self._race_wins

    @race_wins.setter
    def race_wins(self, race_wins):
        """Sets the race_wins of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param race_wins: The race_wins of this FormulaOneRacer.
        :type race_wins: List[int]
        """

        self._race_wins = race_wins

    @property
    def jutsu(self):
        """Gets the jutsu of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The jutsu of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._jutsu

    @jutsu.setter
    def jutsu(self, jutsu):
        """Sets the jutsu of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param jutsu: The jutsu of this FormulaOneRacer.
        :type jutsu: List[str]
        """

        self._jutsu = jutsu

    @property
    def weight(self):
        """Gets the weight of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The weight of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param weight: The weight of this FormulaOneRacer.
        :type weight: List[object]
        """

        self._weight = weight

    @property
    def other_media(self):
        """Gets the other_media of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The other_media of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._other_media

    @other_media.setter
    def other_media(self, other_media):
        """Sets the other_media of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param other_media: The other_media of this FormulaOneRacer.
        :type other_media: List[object]
        """

        self._other_media = other_media

    @property
    def alma_mater(self):
        """Gets the alma_mater of this FormulaOneRacer.

        schools that they attended  # noqa: E501

        :return: The alma_mater of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._alma_mater

    @alma_mater.setter
    def alma_mater(self, alma_mater):
        """Sets the alma_mater of this FormulaOneRacer.

        schools that they attended  # noqa: E501

        :param alma_mater: The alma_mater of this FormulaOneRacer.
        :type alma_mater: List[object]
        """

        self._alma_mater = alma_mater

    @property
    def olympic_games_wins(self):
        """Gets the olympic_games_wins of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The olympic_games_wins of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._olympic_games_wins

    @olympic_games_wins.setter
    def olympic_games_wins(self, olympic_games_wins):
        """Sets the olympic_games_wins of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param olympic_games_wins: The olympic_games_wins of this FormulaOneRacer.
        :type olympic_games_wins: List[str]
        """

        self._olympic_games_wins = olympic_games_wins

    @property
    def world_tournament_silver(self):
        """Gets the world_tournament_silver of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The world_tournament_silver of this FormulaOneRacer.
        :rtype: List[int]
        """
        return self._world_tournament_silver

    @world_tournament_silver.setter
    def world_tournament_silver(self, world_tournament_silver):
        """Sets the world_tournament_silver of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param world_tournament_silver: The world_tournament_silver of this FormulaOneRacer.
        :type world_tournament_silver: List[int]
        """

        self._world_tournament_silver = world_tournament_silver

    @property
    def australia_open_double(self):
        """Gets the australia_open_double of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The australia_open_double of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._australia_open_double

    @australia_open_double.setter
    def australia_open_double(self, australia_open_double):
        """Sets the australia_open_double of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param australia_open_double: The australia_open_double of this FormulaOneRacer.
        :type australia_open_double: List[str]
        """

        self._australia_open_double = australia_open_double

    @property
    def hopman_cup(self):
        """Gets the hopman_cup of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The hopman_cup of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._hopman_cup

    @hopman_cup.setter
    def hopman_cup(self, hopman_cup):
        """Sets the hopman_cup of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param hopman_cup: The hopman_cup of this FormulaOneRacer.
        :type hopman_cup: List[str]
        """

        self._hopman_cup = hopman_cup

    @property
    def mood(self):
        """Gets the mood of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The mood of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._mood

    @mood.setter
    def mood(self, mood):
        """Sets the mood of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param mood: The mood of this FormulaOneRacer.
        :type mood: List[str]
        """

        self._mood = mood

    @property
    def iihf_hof(self):
        """Gets the iihf_hof of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The iihf_hof of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._iihf_hof

    @iihf_hof.setter
    def iihf_hof(self, iihf_hof):
        """Sets the iihf_hof of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param iihf_hof: The iihf_hof of this FormulaOneRacer.
        :type iihf_hof: List[str]
        """

        self._iihf_hof = iihf_hof

    @property
    def free_prog_score(self):
        """Gets the free_prog_score of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The free_prog_score of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._free_prog_score

    @free_prog_score.setter
    def free_prog_score(self, free_prog_score):
        """Sets the free_prog_score of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param free_prog_score: The free_prog_score of this FormulaOneRacer.
        :type free_prog_score: List[str]
        """

        self._free_prog_score = free_prog_score

    @property
    def description(self):
        """Gets the description of this FormulaOneRacer.

        small description  # noqa: E501

        :return: The description of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FormulaOneRacer.

        small description  # noqa: E501

        :param description: The description of this FormulaOneRacer.
        :type description: List[str]
        """

        self._description = description

    @property
    def heisman(self):
        """Gets the heisman of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The heisman of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._heisman

    @heisman.setter
    def heisman(self, heisman):
        """Sets the heisman of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param heisman: The heisman of this FormulaOneRacer.
        :type heisman: List[str]
        """

        self._heisman = heisman

    @property
    def nfl_code(self):
        """Gets the nfl_code of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The nfl_code of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._nfl_code

    @nfl_code.setter
    def nfl_code(self, nfl_code):
        """Sets the nfl_code of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param nfl_code: The nfl_code of this FormulaOneRacer.
        :type nfl_code: List[str]
        """

        self._nfl_code = nfl_code

    @property
    def particular_sign(self):
        """Gets the particular_sign of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The particular_sign of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._particular_sign

    @particular_sign.setter
    def particular_sign(self, particular_sign):
        """Sets the particular_sign of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param particular_sign: The particular_sign of this FormulaOneRacer.
        :type particular_sign: List[str]
        """

        self._particular_sign = particular_sign

    @property
    def us_open_mixed(self):
        """Gets the us_open_mixed of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The us_open_mixed of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._us_open_mixed

    @us_open_mixed.setter
    def us_open_mixed(self, us_open_mixed):
        """Sets the us_open_mixed of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param us_open_mixed: The us_open_mixed of this FormulaOneRacer.
        :type us_open_mixed: List[str]
        """

        self._us_open_mixed = us_open_mixed

    @property
    def league_manager(self):
        """Gets the league_manager of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The league_manager of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._league_manager

    @league_manager.setter
    def league_manager(self, league_manager):
        """Sets the league_manager of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param league_manager: The league_manager of this FormulaOneRacer.
        :type league_manager: List[object]
        """

        self._league_manager = league_manager

    @property
    def free_prog_competition(self):
        """Gets the free_prog_competition of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The free_prog_competition of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._free_prog_competition

    @free_prog_competition.setter
    def free_prog_competition(self, free_prog_competition):
        """Sets the free_prog_competition of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param free_prog_competition: The free_prog_competition of this FormulaOneRacer.
        :type free_prog_competition: List[str]
        """

        self._free_prog_competition = free_prog_competition

    @property
    def weapon(self):
        """Gets the weapon of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The weapon of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._weapon

    @weapon.setter
    def weapon(self, weapon):
        """Sets the weapon of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param weapon: The weapon of this FormulaOneRacer.
        :type weapon: List[object]
        """

        self._weapon = weapon

    @property
    def kind_of_criminal(self):
        """Gets the kind_of_criminal of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The kind_of_criminal of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._kind_of_criminal

    @kind_of_criminal.setter
    def kind_of_criminal(self, kind_of_criminal):
        """Sets the kind_of_criminal of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param kind_of_criminal: The kind_of_criminal of this FormulaOneRacer.
        :type kind_of_criminal: List[str]
        """

        self._kind_of_criminal = kind_of_criminal

    @property
    def state_of_origin_year(self):
        """Gets the state_of_origin_year of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The state_of_origin_year of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._state_of_origin_year

    @state_of_origin_year.setter
    def state_of_origin_year(self, state_of_origin_year):
        """Sets the state_of_origin_year of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param state_of_origin_year: The state_of_origin_year of this FormulaOneRacer.
        :type state_of_origin_year: List[str]
        """

        self._state_of_origin_year = state_of_origin_year

    @property
    def player_status(self):
        """Gets the player_status of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The player_status of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._player_status

    @player_status.setter
    def player_status(self, player_status):
        """Sets the player_status of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param player_status: The player_status of this FormulaOneRacer.
        :type player_status: List[str]
        """

        self._player_status = player_status

    @property
    def other_function(self):
        """Gets the other_function of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The other_function of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._other_function

    @other_function.setter
    def other_function(self, other_function):
        """Sets the other_function of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param other_function: The other_function of this FormulaOneRacer.
        :type other_function: List[object]
        """

        self._other_function = other_function

    @property
    def career_station(self):
        """Gets the career_station of this FormulaOneRacer.

        this property links to a step in the career of a person, e.g. a soccer player, holding information on the time span, matches and goals he or she achieved at a club.  # noqa: E501

        :return: The career_station of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._career_station

    @career_station.setter
    def career_station(self, career_station):
        """Sets the career_station of this FormulaOneRacer.

        this property links to a step in the career of a person, e.g. a soccer player, holding information on the time span, matches and goals he or she achieved at a club.  # noqa: E501

        :param career_station: The career_station of this FormulaOneRacer.
        :type career_station: List[object]
        """

        self._career_station = career_station

    @property
    def resting_place_position(self):
        """Gets the resting_place_position of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The resting_place_position of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._resting_place_position

    @resting_place_position.setter
    def resting_place_position(self, resting_place_position):
        """Sets the resting_place_position of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param resting_place_position: The resting_place_position of this FormulaOneRacer.
        :type resting_place_position: List[object]
        """

        self._resting_place_position = resting_place_position

    @property
    def continental_tournament_bronze(self):
        """Gets the continental_tournament_bronze of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The continental_tournament_bronze of this FormulaOneRacer.
        :rtype: List[int]
        """
        return self._continental_tournament_bronze

    @continental_tournament_bronze.setter
    def continental_tournament_bronze(self, continental_tournament_bronze):
        """Sets the continental_tournament_bronze of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param continental_tournament_bronze: The continental_tournament_bronze of this FormulaOneRacer.
        :type continental_tournament_bronze: List[int]
        """

        self._continental_tournament_bronze = continental_tournament_bronze

    @property
    def final_lost_double(self):
        """Gets the final_lost_double of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The final_lost_double of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._final_lost_double

    @final_lost_double.setter
    def final_lost_double(self, final_lost_double):
        """Sets the final_lost_double of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param final_lost_double: The final_lost_double of this FormulaOneRacer.
        :type final_lost_double: List[str]
        """

        self._final_lost_double = final_lost_double

    @property
    def complexion(self):
        """Gets the complexion of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The complexion of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._complexion

    @complexion.setter
    def complexion(self, complexion):
        """Sets the complexion of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param complexion: The complexion of this FormulaOneRacer.
        :type complexion: List[object]
        """

        self._complexion = complexion

    @property
    def start(self):
        """Gets the start of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The start of this FormulaOneRacer.
        :rtype: List[int]
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param start: The start of this FormulaOneRacer.
        :type start: List[int]
        """

        self._start = start

    @property
    def tessitura(self):
        """Gets the tessitura of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The tessitura of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._tessitura

    @tessitura.setter
    def tessitura(self, tessitura):
        """Sets the tessitura of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param tessitura: The tessitura of this FormulaOneRacer.
        :type tessitura: List[str]
        """

        self._tessitura = tessitura

    @property
    def start_career(self):
        """Gets the start_career of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The start_career of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._start_career

    @start_career.setter
    def start_career(self, start_career):
        """Sets the start_career of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param start_career: The start_career of this FormulaOneRacer.
        :type start_career: List[str]
        """

        self._start_career = start_career

    @property
    def birth_date(self):
        """Gets the birth_date of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The birth_date of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date):
        """Sets the birth_date of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param birth_date: The birth_date of this FormulaOneRacer.
        :type birth_date: List[str]
        """

        self._birth_date = birth_date

    @property
    def national_tournament_silver(self):
        """Gets the national_tournament_silver of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The national_tournament_silver of this FormulaOneRacer.
        :rtype: List[int]
        """
        return self._national_tournament_silver

    @national_tournament_silver.setter
    def national_tournament_silver(self, national_tournament_silver):
        """Sets the national_tournament_silver of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param national_tournament_silver: The national_tournament_silver of this FormulaOneRacer.
        :type national_tournament_silver: List[int]
        """

        self._national_tournament_silver = national_tournament_silver

    @property
    def other_activity(self):
        """Gets the other_activity of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The other_activity of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._other_activity

    @other_activity.setter
    def other_activity(self, other_activity):
        """Sets the other_activity of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param other_activity: The other_activity of this FormulaOneRacer.
        :type other_activity: List[str]
        """

        self._other_activity = other_activity

    @property
    def linguistics_tradition(self):
        """Gets the linguistics_tradition of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The linguistics_tradition of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._linguistics_tradition

    @linguistics_tradition.setter
    def linguistics_tradition(self, linguistics_tradition):
        """Sets the linguistics_tradition of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param linguistics_tradition: The linguistics_tradition of this FormulaOneRacer.
        :type linguistics_tradition: List[object]
        """

        self._linguistics_tradition = linguistics_tradition

    @property
    def sibling(self):
        """Gets the sibling of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The sibling of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._sibling

    @sibling.setter
    def sibling(self, sibling):
        """Sets the sibling of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param sibling: The sibling of this FormulaOneRacer.
        :type sibling: List[object]
        """

        self._sibling = sibling

    @property
    def title_single(self):
        """Gets the title_single of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The title_single of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._title_single

    @title_single.setter
    def title_single(self, title_single):
        """Sets the title_single of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param title_single: The title_single of this FormulaOneRacer.
        :type title_single: List[str]
        """

        self._title_single = title_single

    @property
    def olympic_games_gold(self):
        """Gets the olympic_games_gold of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The olympic_games_gold of this FormulaOneRacer.
        :rtype: List[int]
        """
        return self._olympic_games_gold

    @olympic_games_gold.setter
    def olympic_games_gold(self, olympic_games_gold):
        """Sets the olympic_games_gold of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param olympic_games_gold: The olympic_games_gold of this FormulaOneRacer.
        :type olympic_games_gold: List[int]
        """

        self._olympic_games_gold = olympic_games_gold

    @property
    def arrest_date(self):
        """Gets the arrest_date of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The arrest_date of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._arrest_date

    @arrest_date.setter
    def arrest_date(self, arrest_date):
        """Sets the arrest_date of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param arrest_date: The arrest_date of this FormulaOneRacer.
        :type arrest_date: List[str]
        """

        self._arrest_date = arrest_date

    @property
    def artistic_function(self):
        """Gets the artistic_function of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The artistic_function of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._artistic_function

    @artistic_function.setter
    def artistic_function(self, artistic_function):
        """Sets the artistic_function of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param artistic_function: The artistic_function of this FormulaOneRacer.
        :type artistic_function: List[str]
        """

        self._artistic_function = artistic_function

    @property
    def achievement(self):
        """Gets the achievement of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The achievement of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._achievement

    @achievement.setter
    def achievement(self, achievement):
        """Sets the achievement of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param achievement: The achievement of this FormulaOneRacer.
        :type achievement: List[object]
        """

        self._achievement = achievement

    @property
    def death_age(self):
        """Gets the death_age of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The death_age of this FormulaOneRacer.
        :rtype: List[int]
        """
        return self._death_age

    @death_age.setter
    def death_age(self, death_age):
        """Sets the death_age of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param death_age: The death_age of this FormulaOneRacer.
        :type death_age: List[int]
        """

        self._death_age = death_age

    @property
    def selection_point(self):
        """Gets the selection_point of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The selection_point of this FormulaOneRacer.
        :rtype: List[int]
        """
        return self._selection_point

    @selection_point.setter
    def selection_point(self, selection_point):
        """Sets the selection_point of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param selection_point: The selection_point of this FormulaOneRacer.
        :type selection_point: List[int]
        """

        self._selection_point = selection_point

    @property
    def type(self):
        """Gets the type of this FormulaOneRacer.

        type of the resource  # noqa: E501

        :return: The type of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FormulaOneRacer.

        type of the resource  # noqa: E501

        :param type: The type of this FormulaOneRacer.
        :type type: List[str]
        """

        self._type = type

    @property
    def relation(self):
        """Gets the relation of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The relation of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._relation

    @relation.setter
    def relation(self, relation):
        """Sets the relation of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param relation: The relation of this FormulaOneRacer.
        :type relation: List[object]
        """

        self._relation = relation

    @property
    def height_attack(self):
        """Gets the height_attack of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The height_attack of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._height_attack

    @height_attack.setter
    def height_attack(self, height_attack):
        """Sets the height_attack of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param height_attack: The height_attack of this FormulaOneRacer.
        :type height_attack: List[str]
        """

        self._height_attack = height_attack

    @property
    def living_place(self):
        """Gets the living_place of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The living_place of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._living_place

    @living_place.setter
    def living_place(self, living_place):
        """Sets the living_place of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param living_place: The living_place of this FormulaOneRacer.
        :type living_place: List[object]
        """

        self._living_place = living_place

    @property
    def season(self):
        """Gets the season of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The season of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param season: The season of this FormulaOneRacer.
        :type season: List[object]
        """

        self._season = season

    @property
    def world_team_cup(self):
        """Gets the world_team_cup of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The world_team_cup of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._world_team_cup

    @world_team_cup.setter
    def world_team_cup(self, world_team_cup):
        """Sets the world_team_cup of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param world_team_cup: The world_team_cup of this FormulaOneRacer.
        :type world_team_cup: List[str]
        """

        self._world_team_cup = world_team_cup

    @property
    def catch(self):
        """Gets the catch of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The catch of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._catch

    @catch.setter
    def catch(self, catch):
        """Sets the catch of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param catch: The catch of this FormulaOneRacer.
        :type catch: List[str]
        """

        self._catch = catch

    @property
    def decoration(self):
        """Gets the decoration of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The decoration of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._decoration

    @decoration.setter
    def decoration(self, decoration):
        """Sets the decoration of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param decoration: The decoration of this FormulaOneRacer.
        :type decoration: List[object]
        """

        self._decoration = decoration

    @property
    def case(self):
        """Gets the case of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The case of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._case

    @case.setter
    def case(self, case):
        """Sets the case of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param case: The case of this FormulaOneRacer.
        :type case: List[str]
        """

        self._case = case

    @property
    def profession(self):
        """Gets the profession of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The profession of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._profession

    @profession.setter
    def profession(self, profession):
        """Sets the profession of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param profession: The profession of this FormulaOneRacer.
        :type profession: List[object]
        """

        self._profession = profession

    @property
    def retirement_date(self):
        """Gets the retirement_date of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The retirement_date of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._retirement_date

    @retirement_date.setter
    def retirement_date(self, retirement_date):
        """Sets the retirement_date of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param retirement_date: The retirement_date of this FormulaOneRacer.
        :type retirement_date: List[str]
        """

        self._retirement_date = retirement_date

    @property
    def wife(self):
        """Gets the wife of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The wife of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._wife

    @wife.setter
    def wife(self, wife):
        """Sets the wife of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param wife: The wife of this FormulaOneRacer.
        :type wife: List[object]
        """

        self._wife = wife

    @property
    def ncaa_season(self):
        """Gets the ncaa_season of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The ncaa_season of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._ncaa_season

    @ncaa_season.setter
    def ncaa_season(self, ncaa_season):
        """Sets the ncaa_season of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param ncaa_season: The ncaa_season of this FormulaOneRacer.
        :type ncaa_season: List[str]
        """

        self._ncaa_season = ncaa_season

    @property
    def old_team_coached(self):
        """Gets the old_team_coached of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The old_team_coached of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._old_team_coached

    @old_team_coached.setter
    def old_team_coached(self, old_team_coached):
        """Sets the old_team_coached of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param old_team_coached: The old_team_coached of this FormulaOneRacer.
        :type old_team_coached: List[object]
        """

        self._old_team_coached = old_team_coached

    @property
    def coach_season(self):
        """Gets the coach_season of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The coach_season of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._coach_season

    @coach_season.setter
    def coach_season(self, coach_season):
        """Sets the coach_season of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param coach_season: The coach_season of this FormulaOneRacer.
        :type coach_season: List[str]
        """

        self._coach_season = coach_season

    @property
    def active_years_start_date_mgr(self):
        """Gets the active_years_start_date_mgr of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The active_years_start_date_mgr of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._active_years_start_date_mgr

    @active_years_start_date_mgr.setter
    def active_years_start_date_mgr(self, active_years_start_date_mgr):
        """Sets the active_years_start_date_mgr of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param active_years_start_date_mgr: The active_years_start_date_mgr of this FormulaOneRacer.
        :type active_years_start_date_mgr: List[str]
        """

        self._active_years_start_date_mgr = active_years_start_date_mgr

    @property
    def tattoo(self):
        """Gets the tattoo of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The tattoo of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._tattoo

    @tattoo.setter
    def tattoo(self, tattoo):
        """Sets the tattoo of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param tattoo: The tattoo of this FormulaOneRacer.
        :type tattoo: List[str]
        """

        self._tattoo = tattoo

    @property
    def hip_size(self):
        """Gets the hip_size of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The hip_size of this FormulaOneRacer.
        :rtype: List[float]
        """
        return self._hip_size

    @hip_size.setter
    def hip_size(self, hip_size):
        """Sets the hip_size of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param hip_size: The hip_size of this FormulaOneRacer.
        :type hip_size: List[float]
        """

        self._hip_size = hip_size

    @property
    def seiyu(self):
        """Gets the seiyu of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The seiyu of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._seiyu

    @seiyu.setter
    def seiyu(self, seiyu):
        """Sets the seiyu of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param seiyu: The seiyu of this FormulaOneRacer.
        :type seiyu: List[object]
        """

        self._seiyu = seiyu

    @property
    def career_points(self):
        """Gets the career_points of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The career_points of this FormulaOneRacer.
        :rtype: List[int]
        """
        return self._career_points

    @career_points.setter
    def career_points(self, career_points):
        """Sets the career_points of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param career_points: The career_points of this FormulaOneRacer.
        :type career_points: List[int]
        """

        self._career_points = career_points

    @property
    def short_prog_score(self):
        """Gets the short_prog_score of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The short_prog_score of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._short_prog_score

    @short_prog_score.setter
    def short_prog_score(self, short_prog_score):
        """Sets the short_prog_score of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param short_prog_score: The short_prog_score of this FormulaOneRacer.
        :type short_prog_score: List[str]
        """

        self._short_prog_score = short_prog_score

    @property
    def shoe_size(self):
        """Gets the shoe_size of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The shoe_size of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._shoe_size

    @shoe_size.setter
    def shoe_size(self, shoe_size):
        """Sets the shoe_size of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param shoe_size: The shoe_size of this FormulaOneRacer.
        :type shoe_size: List[str]
        """

        self._shoe_size = shoe_size

    @property
    def signature(self):
        """Gets the signature of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The signature of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param signature: The signature of this FormulaOneRacer.
        :type signature: List[str]
        """

        self._signature = signature

    @property
    def olympic_games_bronze(self):
        """Gets the olympic_games_bronze of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The olympic_games_bronze of this FormulaOneRacer.
        :rtype: List[int]
        """
        return self._olympic_games_bronze

    @olympic_games_bronze.setter
    def olympic_games_bronze(self, olympic_games_bronze):
        """Sets the olympic_games_bronze of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param olympic_games_bronze: The olympic_games_bronze of this FormulaOneRacer.
        :type olympic_games_bronze: List[int]
        """

        self._olympic_games_bronze = olympic_games_bronze

    @property
    def draft_team(self):
        """Gets the draft_team of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The draft_team of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._draft_team

    @draft_team.setter
    def draft_team(self, draft_team):
        """Sets the draft_team of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param draft_team: The draft_team of this FormulaOneRacer.
        :type draft_team: List[object]
        """

        self._draft_team = draft_team

    @property
    def final_lost_team(self):
        """Gets the final_lost_team of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The final_lost_team of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._final_lost_team

    @final_lost_team.setter
    def final_lost_team(self, final_lost_team):
        """Sets the final_lost_team of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param final_lost_team: The final_lost_team of this FormulaOneRacer.
        :type final_lost_team: List[str]
        """

        self._final_lost_team = final_lost_team

    @property
    def danse_score(self):
        """Gets the danse_score of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The danse_score of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._danse_score

    @danse_score.setter
    def danse_score(self, danse_score):
        """Sets the danse_score of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param danse_score: The danse_score of this FormulaOneRacer.
        :type danse_score: List[str]
        """

        self._danse_score = danse_score

    @property
    def probowl_pick(self):
        """Gets the probowl_pick of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The probowl_pick of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._probowl_pick

    @probowl_pick.setter
    def probowl_pick(self, probowl_pick):
        """Sets the probowl_pick of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param probowl_pick: The probowl_pick of this FormulaOneRacer.
        :type probowl_pick: List[str]
        """

        self._probowl_pick = probowl_pick

    @property
    def short_prog_competition(self):
        """Gets the short_prog_competition of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The short_prog_competition of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._short_prog_competition

    @short_prog_competition.setter
    def short_prog_competition(self, short_prog_competition):
        """Sets the short_prog_competition of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param short_prog_competition: The short_prog_competition of this FormulaOneRacer.
        :type short_prog_competition: List[str]
        """

        self._short_prog_competition = short_prog_competition

    @property
    def college_hof(self):
        """Gets the college_hof of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The college_hof of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._college_hof

    @college_hof.setter
    def college_hof(self, college_hof):
        """Sets the college_hof of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param college_hof: The college_hof of this FormulaOneRacer.
        :type college_hof: List[str]
        """

        self._college_hof = college_hof

    @property
    def birth_place(self):
        """Gets the birth_place of this FormulaOneRacer.

        where the person was born  # noqa: E501

        :return: The birth_place of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._birth_place

    @birth_place.setter
    def birth_place(self, birth_place):
        """Sets the birth_place of this FormulaOneRacer.

        where the person was born  # noqa: E501

        :param birth_place: The birth_place of this FormulaOneRacer.
        :type birth_place: List[object]
        """

        self._birth_place = birth_place

    @property
    def eye_color(self):
        """Gets the eye_color of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The eye_color of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._eye_color

    @eye_color.setter
    def eye_color(self, eye_color):
        """Sets the eye_color of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param eye_color: The eye_color of this FormulaOneRacer.
        :type eye_color: List[object]
        """

        self._eye_color = eye_color

    @property
    def networth(self):
        """Gets the networth of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The networth of this FormulaOneRacer.
        :rtype: List[float]
        """
        return self._networth

    @networth.setter
    def networth(self, networth):
        """Sets the networth of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param networth: The networth of this FormulaOneRacer.
        :type networth: List[float]
        """

        self._networth = networth

    @property
    def silver_medal_mixed(self):
        """Gets the silver_medal_mixed of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The silver_medal_mixed of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._silver_medal_mixed

    @silver_medal_mixed.setter
    def silver_medal_mixed(self, silver_medal_mixed):
        """Sets the silver_medal_mixed of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param silver_medal_mixed: The silver_medal_mixed of this FormulaOneRacer.
        :type silver_medal_mixed: List[str]
        """

        self._silver_medal_mixed = silver_medal_mixed

    @property
    def racket_catching(self):
        """Gets the racket_catching of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The racket_catching of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._racket_catching

    @racket_catching.setter
    def racket_catching(self, racket_catching):
        """Sets the racket_catching of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param racket_catching: The racket_catching of this FormulaOneRacer.
        :type racket_catching: List[str]
        """

        self._racket_catching = racket_catching

    @property
    def national_team_match_point(self):
        """Gets the national_team_match_point of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The national_team_match_point of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._national_team_match_point

    @national_team_match_point.setter
    def national_team_match_point(self, national_team_match_point):
        """Sets the national_team_match_point of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param national_team_match_point: The national_team_match_point of this FormulaOneRacer.
        :type national_team_match_point: List[str]
        """

        self._national_team_match_point = national_team_match_point

    @property
    def us_open_double(self):
        """Gets the us_open_double of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The us_open_double of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._us_open_double

    @us_open_double.setter
    def us_open_double(self, us_open_double):
        """Sets the us_open_double of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param us_open_double: The us_open_double of this FormulaOneRacer.
        :type us_open_double: List[str]
        """

        self._us_open_double = us_open_double

    @property
    def national_selection(self):
        """Gets the national_selection of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The national_selection of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._national_selection

    @national_selection.setter
    def national_selection(self, national_selection):
        """Sets the national_selection of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param national_selection: The national_selection of this FormulaOneRacer.
        :type national_selection: List[object]
        """

        self._national_selection = national_selection

    @property
    def agency(self):
        """Gets the agency of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The agency of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._agency

    @agency.setter
    def agency(self, agency):
        """Sets the agency of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param agency: The agency of this FormulaOneRacer.
        :type agency: List[object]
        """

        self._agency = agency

    @property
    def start_wqs(self):
        """Gets the start_wqs of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The start_wqs of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._start_wqs

    @start_wqs.setter
    def start_wqs(self, start_wqs):
        """Sets the start_wqs of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param start_wqs: The start_wqs of this FormulaOneRacer.
        :type start_wqs: List[str]
        """

        self._start_wqs = start_wqs

    @property
    def coach_club(self):
        """Gets the coach_club of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The coach_club of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._coach_club

    @coach_club.setter
    def coach_club(self, coach_club):
        """Sets the coach_club of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param coach_club: The coach_club of this FormulaOneRacer.
        :type coach_club: List[object]
        """

        self._coach_club = coach_club

    @property
    def horse_riding_discipline(self):
        """Gets the horse_riding_discipline of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The horse_riding_discipline of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._horse_riding_discipline

    @horse_riding_discipline.setter
    def horse_riding_discipline(self, horse_riding_discipline):
        """Sets the horse_riding_discipline of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param horse_riding_discipline: The horse_riding_discipline of this FormulaOneRacer.
        :type horse_riding_discipline: List[object]
        """

        self._horse_riding_discipline = horse_riding_discipline

    @property
    def board(self):
        """Gets the board of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The board of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._board

    @board.setter
    def board(self, board):
        """Sets the board of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param board: The board of this FormulaOneRacer.
        :type board: List[object]
        """

        self._board = board

    @property
    def asia_championship(self):
        """Gets the asia_championship of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The asia_championship of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._asia_championship

    @asia_championship.setter
    def asia_championship(self, asia_championship):
        """Sets the asia_championship of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param asia_championship: The asia_championship of this FormulaOneRacer.
        :type asia_championship: List[str]
        """

        self._asia_championship = asia_championship

    @property
    def dead_in_fight_date(self):
        """Gets the dead_in_fight_date of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The dead_in_fight_date of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._dead_in_fight_date

    @dead_in_fight_date.setter
    def dead_in_fight_date(self, dead_in_fight_date):
        """Sets the dead_in_fight_date of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param dead_in_fight_date: The dead_in_fight_date of this FormulaOneRacer.
        :type dead_in_fight_date: List[str]
        """

        self._dead_in_fight_date = dead_in_fight_date

    @property
    def espn_id(self):
        """Gets the espn_id of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The espn_id of this FormulaOneRacer.
        :rtype: List[int]
        """
        return self._espn_id

    @espn_id.setter
    def espn_id(self, espn_id):
        """Sets the espn_id of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param espn_id: The espn_id of this FormulaOneRacer.
        :type espn_id: List[int]
        """

        self._espn_id = espn_id

    @property
    def last_race(self):
        """Gets the last_race of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The last_race of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._last_race

    @last_race.setter
    def last_race(self, last_race):
        """Sets the last_race of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param last_race: The last_race of this FormulaOneRacer.
        :type last_race: List[object]
        """

        self._last_race = last_race

    @property
    def manager_season(self):
        """Gets the manager_season of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The manager_season of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._manager_season

    @manager_season.setter
    def manager_season(self, manager_season):
        """Sets the manager_season of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param manager_season: The manager_season of this FormulaOneRacer.
        :type manager_season: List[object]
        """

        self._manager_season = manager_season

    @property
    def wimbledon_double(self):
        """Gets the wimbledon_double of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The wimbledon_double of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._wimbledon_double

    @wimbledon_double.setter
    def wimbledon_double(self, wimbledon_double):
        """Sets the wimbledon_double of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param wimbledon_double: The wimbledon_double of this FormulaOneRacer.
        :type wimbledon_double: List[str]
        """

        self._wimbledon_double = wimbledon_double

    @property
    def full_competition(self):
        """Gets the full_competition of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The full_competition of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._full_competition

    @full_competition.setter
    def full_competition(self, full_competition):
        """Sets the full_competition of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param full_competition: The full_competition of this FormulaOneRacer.
        :type full_competition: List[str]
        """

        self._full_competition = full_competition

    @property
    def gold_medal_mixed(self):
        """Gets the gold_medal_mixed of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The gold_medal_mixed of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._gold_medal_mixed

    @gold_medal_mixed.setter
    def gold_medal_mixed(self, gold_medal_mixed):
        """Sets the gold_medal_mixed of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param gold_medal_mixed: The gold_medal_mixed of this FormulaOneRacer.
        :type gold_medal_mixed: List[str]
        """

        self._gold_medal_mixed = gold_medal_mixed

    @property
    def affair(self):
        """Gets the affair of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The affair of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._affair

    @affair.setter
    def affair(self, affair):
        """Sets the affair of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param affair: The affair of this FormulaOneRacer.
        :type affair: List[str]
        """

        self._affair = affair

    @property
    def body_discovered(self):
        """Gets the body_discovered of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The body_discovered of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._body_discovered

    @body_discovered.setter
    def body_discovered(self, body_discovered):
        """Sets the body_discovered of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param body_discovered: The body_discovered of this FormulaOneRacer.
        :type body_discovered: List[object]
        """

        self._body_discovered = body_discovered

    @property
    def buried_place(self):
        """Gets the buried_place of this FormulaOneRacer.

        The place where the person has been buried.  # noqa: E501

        :return: The buried_place of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._buried_place

    @buried_place.setter
    def buried_place(self, buried_place):
        """Sets the buried_place of this FormulaOneRacer.

        The place where the person has been buried.  # noqa: E501

        :param buried_place: The buried_place of this FormulaOneRacer.
        :type buried_place: List[object]
        """

        self._buried_place = buried_place

    @property
    def last_pro_match(self):
        """Gets the last_pro_match of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The last_pro_match of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._last_pro_match

    @last_pro_match.setter
    def last_pro_match(self, last_pro_match):
        """Sets the last_pro_match of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param last_pro_match: The last_pro_match of this FormulaOneRacer.
        :type last_pro_match: List[str]
        """

        self._last_pro_match = last_pro_match

    @property
    def backhand(self):
        """Gets the backhand of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The backhand of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._backhand

    @backhand.setter
    def backhand(self, backhand):
        """Sets the backhand of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param backhand: The backhand of this FormulaOneRacer.
        :type backhand: List[str]
        """

        self._backhand = backhand

    @property
    def created(self):
        """Gets the created of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The created of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param created: The created of this FormulaOneRacer.
        :type created: List[object]
        """

        self._created = created

    @property
    def end_career(self):
        """Gets the end_career of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The end_career of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._end_career

    @end_career.setter
    def end_career(self, end_career):
        """Sets the end_career of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param end_career: The end_career of this FormulaOneRacer.
        :type end_career: List[str]
        """

        self._end_career = end_career

    @property
    def other_sports_experience(self):
        """Gets the other_sports_experience of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The other_sports_experience of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._other_sports_experience

    @other_sports_experience.setter
    def other_sports_experience(self, other_sports_experience):
        """Sets the other_sports_experience of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param other_sports_experience: The other_sports_experience of this FormulaOneRacer.
        :type other_sports_experience: List[object]
        """

        self._other_sports_experience = other_sports_experience

    @property
    def note_on_resting_place(self):
        """Gets the note_on_resting_place of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The note_on_resting_place of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._note_on_resting_place

    @note_on_resting_place.setter
    def note_on_resting_place(self, note_on_resting_place):
        """Sets the note_on_resting_place of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param note_on_resting_place: The note_on_resting_place of this FormulaOneRacer.
        :type note_on_resting_place: List[str]
        """

        self._note_on_resting_place = note_on_resting_place

    @property
    def fed_cup(self):
        """Gets the fed_cup of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The fed_cup of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._fed_cup

    @fed_cup.setter
    def fed_cup(self, fed_cup):
        """Sets the fed_cup of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param fed_cup: The fed_cup of this FormulaOneRacer.
        :type fed_cup: List[str]
        """

        self._fed_cup = fed_cup

    @property
    def person_function(self):
        """Gets the person_function of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The person_function of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._person_function

    @person_function.setter
    def person_function(self, person_function):
        """Sets the person_function of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param person_function: The person_function of this FormulaOneRacer.
        :type person_function: List[object]
        """

        self._person_function = person_function

    @property
    def superbowl_win(self):
        """Gets the superbowl_win of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The superbowl_win of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._superbowl_win

    @superbowl_win.setter
    def superbowl_win(self, superbowl_win):
        """Sets the superbowl_win of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param superbowl_win: The superbowl_win of this FormulaOneRacer.
        :type superbowl_win: List[str]
        """

        self._superbowl_win = superbowl_win

    @property
    def pro_since(self):
        """Gets the pro_since of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The pro_since of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._pro_since

    @pro_since.setter
    def pro_since(self, pro_since):
        """Sets the pro_since of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param pro_since: The pro_since of this FormulaOneRacer.
        :type pro_since: List[str]
        """

        self._pro_since = pro_since

    @property
    def cause_of_death(self):
        """Gets the cause_of_death of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The cause_of_death of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._cause_of_death

    @cause_of_death.setter
    def cause_of_death(self, cause_of_death):
        """Sets the cause_of_death of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param cause_of_death: The cause_of_death of this FormulaOneRacer.
        :type cause_of_death: List[str]
        """

        self._cause_of_death = cause_of_death

    @property
    def creation_christian_bishop(self):
        """Gets the creation_christian_bishop of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The creation_christian_bishop of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._creation_christian_bishop

    @creation_christian_bishop.setter
    def creation_christian_bishop(self, creation_christian_bishop):
        """Sets the creation_christian_bishop of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param creation_christian_bishop: The creation_christian_bishop of this FormulaOneRacer.
        :type creation_christian_bishop: List[str]
        """

        self._creation_christian_bishop = creation_christian_bishop

    @property
    def bad_guy(self):
        """Gets the bad_guy of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The bad_guy of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._bad_guy

    @bad_guy.setter
    def bad_guy(self, bad_guy):
        """Sets the bad_guy of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param bad_guy: The bad_guy of this FormulaOneRacer.
        :type bad_guy: List[str]
        """

        self._bad_guy = bad_guy

    @property
    def gym_apparatus(self):
        """Gets the gym_apparatus of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The gym_apparatus of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._gym_apparatus

    @gym_apparatus.setter
    def gym_apparatus(self, gym_apparatus):
        """Sets the gym_apparatus of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param gym_apparatus: The gym_apparatus of this FormulaOneRacer.
        :type gym_apparatus: List[object]
        """

        self._gym_apparatus = gym_apparatus

    @property
    def temple_year(self):
        """Gets the temple_year of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The temple_year of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._temple_year

    @temple_year.setter
    def temple_year(self, temple_year):
        """Sets the temple_year of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param temple_year: The temple_year of this FormulaOneRacer.
        :type temple_year: List[str]
        """

        self._temple_year = temple_year

    @property
    def clothing_size(self):
        """Gets the clothing_size of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The clothing_size of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._clothing_size

    @clothing_size.setter
    def clothing_size(self, clothing_size):
        """Sets the clothing_size of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param clothing_size: The clothing_size of this FormulaOneRacer.
        :type clothing_size: List[str]
        """

        self._clothing_size = clothing_size

    @property
    def award(self):
        """Gets the award of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The award of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._award

    @award.setter
    def award(self, award):
        """Sets the award of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param award: The award of this FormulaOneRacer.
        :type award: List[object]
        """

        self._award = award

    @property
    def last_position(self):
        """Gets the last_position of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The last_position of this FormulaOneRacer.
        :rtype: List[int]
        """
        return self._last_position

    @last_position.setter
    def last_position(self, last_position):
        """Sets the last_position of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param last_position: The last_position of this FormulaOneRacer.
        :type last_position: List[int]
        """

        self._last_position = last_position

    @property
    def last_season(self):
        """Gets the last_season of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The last_season of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._last_season

    @last_season.setter
    def last_season(self, last_season):
        """Sets the last_season of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param last_season: The last_season of this FormulaOneRacer.
        :type last_season: List[str]
        """

        self._last_season = last_season

    @property
    def resting_date(self):
        """Gets the resting_date of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The resting_date of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._resting_date

    @resting_date.setter
    def resting_date(self, resting_date):
        """Sets the resting_date of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param resting_date: The resting_date of this FormulaOneRacer.
        :type resting_date: List[str]
        """

        self._resting_date = resting_date

    @property
    def masters_wins(self):
        """Gets the masters_wins of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The masters_wins of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._masters_wins

    @masters_wins.setter
    def masters_wins(self, masters_wins):
        """Sets the masters_wins of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param masters_wins: The masters_wins of this FormulaOneRacer.
        :type masters_wins: List[object]
        """

        self._masters_wins = masters_wins

    @property
    def continental_tournament_gold(self):
        """Gets the continental_tournament_gold of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The continental_tournament_gold of this FormulaOneRacer.
        :rtype: List[int]
        """
        return self._continental_tournament_gold

    @continental_tournament_gold.setter
    def continental_tournament_gold(self, continental_tournament_gold):
        """Sets the continental_tournament_gold of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param continental_tournament_gold: The continental_tournament_gold of this FormulaOneRacer.
        :type continental_tournament_gold: List[int]
        """

        self._continental_tournament_gold = continental_tournament_gold

    @property
    def orientation(self):
        """Gets the orientation of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The orientation of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._orientation

    @orientation.setter
    def orientation(self, orientation):
        """Sets the orientation of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param orientation: The orientation of this FormulaOneRacer.
        :type orientation: List[str]
        """

        self._orientation = orientation

    @property
    def grave(self):
        """Gets the grave of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The grave of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._grave

    @grave.setter
    def grave(self, grave):
        """Sets the grave of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param grave: The grave of this FormulaOneRacer.
        :type grave: List[str]
        """

        self._grave = grave

    @property
    def resting_place(self):
        """Gets the resting_place of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The resting_place of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._resting_place

    @resting_place.setter
    def resting_place(self, resting_place):
        """Sets the resting_place of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param resting_place: The resting_place of this FormulaOneRacer.
        :type resting_place: List[object]
        """

        self._resting_place = resting_place

    @property
    def abbeychurch_blessing_charge(self):
        """Gets the abbeychurch_blessing_charge of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The abbeychurch_blessing_charge of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._abbeychurch_blessing_charge

    @abbeychurch_blessing_charge.setter
    def abbeychurch_blessing_charge(self, abbeychurch_blessing_charge):
        """Sets the abbeychurch_blessing_charge of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param abbeychurch_blessing_charge: The abbeychurch_blessing_charge of this FormulaOneRacer.
        :type abbeychurch_blessing_charge: List[str]
        """

        self._abbeychurch_blessing_charge = abbeychurch_blessing_charge

    @property
    def mvp(self):
        """Gets the mvp of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The mvp of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._mvp

    @mvp.setter
    def mvp(self, mvp):
        """Sets the mvp of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param mvp: The mvp of this FormulaOneRacer.
        :type mvp: List[str]
        """

        self._mvp = mvp

    @property
    def handisport(self):
        """Gets the handisport of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The handisport of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._handisport

    @handisport.setter
    def handisport(self, handisport):
        """Sets the handisport of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param handisport: The handisport of this FormulaOneRacer.
        :type handisport: List[str]
        """

        self._handisport = handisport

    @property
    def best_rank_double(self):
        """Gets the best_rank_double of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The best_rank_double of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._best_rank_double

    @best_rank_double.setter
    def best_rank_double(self, best_rank_double):
        """Sets the best_rank_double of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param best_rank_double: The best_rank_double of this FormulaOneRacer.
        :type best_rank_double: List[str]
        """

        self._best_rank_double = best_rank_double

    @property
    def external_ornament(self):
        """Gets the external_ornament of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The external_ornament of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._external_ornament

    @external_ornament.setter
    def external_ornament(self, external_ornament):
        """Sets the external_ornament of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param external_ornament: The external_ornament of this FormulaOneRacer.
        :type external_ornament: List[str]
        """

        self._external_ornament = external_ornament

    @property
    def third(self):
        """Gets the third of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The third of this FormulaOneRacer.
        :rtype: List[int]
        """
        return self._third

    @third.setter
    def third(self, third):
        """Sets the third of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param third: The third of this FormulaOneRacer.
        :type third: List[int]
        """

        self._third = third

    @property
    def film_number(self):
        """Gets the film_number of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The film_number of this FormulaOneRacer.
        :rtype: List[int]
        """
        return self._film_number

    @film_number.setter
    def film_number(self, film_number):
        """Sets the film_number of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param film_number: The film_number of this FormulaOneRacer.
        :type film_number: List[int]
        """

        self._film_number = film_number

    @property
    def temple(self):
        """Gets the temple of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The temple of this FormulaOneRacer.
        :rtype: List[str]
        """
        return self._temple

    @temple.setter
    def temple(self, temple):
        """Sets the temple of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param temple: The temple of this FormulaOneRacer.
        :type temple: List[str]
        """

        self._temple = temple

    @property
    def national_tournament_gold(self):
        """Gets the national_tournament_gold of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The national_tournament_gold of this FormulaOneRacer.
        :rtype: List[int]
        """
        return self._national_tournament_gold

    @national_tournament_gold.setter
    def national_tournament_gold(self, national_tournament_gold):
        """Sets the national_tournament_gold of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param national_tournament_gold: The national_tournament_gold of this FormulaOneRacer.
        :type national_tournament_gold: List[int]
        """

        self._national_tournament_gold = national_tournament_gold

    @property
    def athletics_discipline(self):
        """Gets the athletics_discipline of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The athletics_discipline of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._athletics_discipline

    @athletics_discipline.setter
    def athletics_discipline(self, athletics_discipline):
        """Sets the athletics_discipline of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param athletics_discipline: The athletics_discipline of this FormulaOneRacer.
        :type athletics_discipline: List[object]
        """

        self._athletics_discipline = athletics_discipline

    @property
    def death_cause(self):
        """Gets the death_cause of this FormulaOneRacer.

        Description not available  # noqa: E501

        :return: The death_cause of this FormulaOneRacer.
        :rtype: List[object]
        """
        return self._death_cause

    @death_cause.setter
    def death_cause(self, death_cause):
        """Sets the death_cause of this FormulaOneRacer.

        Description not available  # noqa: E501

        :param death_cause: The death_cause of this FormulaOneRacer.
        :type death_cause: List[object]
        """

        self._death_cause = death_cause
