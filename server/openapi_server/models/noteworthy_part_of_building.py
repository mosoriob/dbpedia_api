# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class NoteworthyPartOfBuilding(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city_type=None, irish_name=None, reff_bourgmestre=None, community_iso_code=None, anthem=None, rank_agreement=None, wilaya=None, parliament=None, moldavian_name=None, rank_population=None, quote=None, initially_used_for=None, commissioner_date=None, demographics_as_of=None, largest_settlement=None, distance_to_london=None, geoloc_dual=None, distance_to_capital=None, subregion=None, sharing_out_area=None, phone_prefix_name=None, time_zone=None, gross_domestic_product_as_of=None, population=None, senior=None, human_development_index_rank=None, population_rural=None, gaelic_name=None, area_total_ranking=None, route=None, leader_name=None, principal_area=None, plant=None, green_long_distance_piste_number=None, cannon_number=None, purchasing_power_parity=None, grid_reference=None, barangays=None, bioclimate=None, dissolution_year=None, patron_saint=None, apskritis=None, area_of_catchment_quote=None, sea=None, life_expectancy=None, tamazight_name=None, ski_lift=None, insee_code=None, governorate=None, region_link=None, vice_leader_party=None, political_seats=None, artificial_snow_area=None, located_in_area=None, saint=None, gnl=None, licence_number=None, map_description=None, infant_mortality=None, area_metro=None, number_of_cantons=None, information_name=None, information=None, river=None, ethnic_group=None, heritage_register=None, subdivisions=None, refcul=None, italian_name=None, dissolution_date=None, building_end_year=None, ist=None, geoloc_department=None, borough=None, official_name=None, maximum_elevation=None, colonial_name=None, named_by_language=None, volume_quote=None, province_link=None, parish=None, old_name=None, bird=None, president_general_council_mandate=None, regional_prefecture=None, term_of_office=None, code_settlement=None, winter_temperature=None, construction_material=None, commissioner=None, refpol=None, number_of_counties=None, area=None, population_quote=None, biggest_city=None, nis_code=None, other_information=None, opening_year=None, area_code=None, average_depth_quote=None, geologic_period=None, coast_line=None, unitary_authority=None, area_land=None, population_metro_density=None, previous_population=None, iso_code_region=None, gini_coefficient=None, neighbour_region=None, event_date=None, income=None, touristic_site=None, next_entity=None, political_majority=None, area_quote=None, ski_tow=None, international_phone_prefix=None, largest_metro=None, gagaouze=None, label=None, iso_code=None, finnish_name=None, width_quote=None, agglomeration_population_year=None, daylight_saving_time_zone=None, long_distance_piste_number=None, political_leader=None, same_name=None, agglomeration=None, red_long_distance_piste_number=None, area_water=None, currently_used_for=None, output=None, previous_demographics=None, region_type=None, police_name=None, neighboring_municipality=None, population_pct_children=None, id=None, distance_to_charing_cross=None, lieutenancy=None, delegate_mayor=None, rebuilding_year=None, minimum_elevation=None, number_of_capital_deputies=None, ceremonial_county=None, scotish_name=None, watercourse=None, metropolitan_borough=None, coast_length=None, joint_community=None, ekatte_code=None, per_capita_income=None, settlement=None, sharing_out_population_year=None, foundation_date=None, maximum_depth=None, teryt_code=None, demolition_year=None, smallest_country=None, algerian_name=None, map=None, localization_thumbnail_caption=None, unlc_code=None, sicilian_name=None, department_position=None, population_pct_men=None, law_country=None, summer_temperature=None, area_date=None, kind_of_coordinate=None, black_long_distance_piste_number=None, water_area=None, frontier_length=None, tamazight_settlement_name=None, reopening_date=None, okato_code=None, disappearance_date=None, population_urban_density=None, largest_country=None, phone_prefix=None, capital=None, status_year=None, flora=None, agglomeration_area=None, cornish_name=None, largest_city=None, licence_number_label=None, limit=None, scots_name=None, refgeo=None, refgen=None, population_as_of=None, different=None, emblem=None, representative=None, maximum_area_quote=None, utc_offset=None, pluviometry=None, german_name=None, per_capita_income_rank=None, ski_piste_kilometre=None, distance_to_edinburgh=None, minimum_area=None, municipality_code=None, population_rural_density=None, kabyle_name=None, red_ski_piste_number=None, other_name=None, welsh_name=None, lake=None, collectivity_minority=None, regional_language=None, chaoui_name=None, english_name=None, county_seat=None, purchasing_power_parity_year=None, lieutenancy_area=None, historical_map=None, people_name=None, regency=None, code_municipal_monument=None, architectural_style=None, purchasing_power_parity_rank=None, depth_quote=None, reopening_year=None, avifauna_population=None, construction=None, land=None, sharing_out=None, department=None, opening_date=None, other_language=None, ofs_code=None, elevation=None, endangered_since=None, rank_area=None, prov_code=None, visitors_percentage_change=None, merger_date=None, seniunija=None, rebuilding_date=None, city_since=None, nuts_code=None, authority_mandate=None, gnis_code=None, deme=None, maximum_depth_quote=None, canton=None, province_iso_code=None, human_development_index_ranking_category=None, nation=None, arrondissement=None, french_name=None, supply=None, agglomeration_population=None, green_ski_piste_number=None, province=None, meaning=None, leader_party=None, population_total_ranking=None, twin_city=None, sharing_out_population=None, piscicultural_population=None, distance_to_dublin=None, sharing_out_name=None, land_percentage=None, visitors_total=None, population_year=None, administrative_collectivity=None, per_capita_income_as_of=None, architectual_bureau=None, circle=None, occitan_name=None, blue_long_distance_piste_number=None, building_start_date=None, algerian_settlement_name=None, gross_domestic_product_purchasing_power_parity_per_capita=None, date_agreement=None, frazioni=None, mayor_article=None, iso31661_code=None, simc_code=None, council_area=None, unesco=None, gross_domestic_product=None, gross_domestic_product_rank=None, distance_to_douglas=None, visitor_statistics_as_of=None, number_of_municipalities=None, coordinates=None, gini_coefficient_ranking=None, highest_point=None, flower=None, hra_state=None, depths=None, cca_state=None, politic_government_department=None, currency_code=None, tu=None, population_metro=None, climb_up_number=None, founding_person=None, postal_code=None, land_area=None, code_national_monument=None, originally_used_for=None, president_regional_council_mandate=None, retention_time=None, gini_coefficient_category=None, sardinian_name=None, features=None, forester_district=None, illiteracy=None, gross_domestic_product_per_people=None, kind_of_rock=None, arberisht_name=None, manx_name=None, protection_status=None, fips_code=None, greek_name=None, population_density=None, elevation_quote=None, outskirts=None, area_urban=None, unlo_code=None, district=None, merged_settlement=None, parliament_type=None, previous_entity=None, federal_state=None, maximum_area=None, demolition_date=None, population_urban=None, scottish_name=None, sovereign_country=None, phone_prefix_label=None, official_language=None, previous_population_total=None, commune=None, annual_temperature=None, description=None, number_of_state_deputies=None, average_depth=None, arabic_name=None, ski_piste_number=None, subdivision=None, human_development_index=None, alemmanic_name=None, human_development_index_as_of=None, capital_coordinates=None, touareg_name=None, administrative_head_city=None, maintained_by=None, visitors_per_day=None, kanji_name=None, blue_ski_piste_number=None, historical_name=None, area_rank=None, first_mention=None, localization_thumbnail=None, cable_car=None, administrative_district=None, type=None, linked_space=None, lowest_point=None, daira=None, number_of_island=None, cyrillique_name=None, catholic_percentage=None, old_district=None, area_rural=None, water_percentage=None, lowest=None, sharing_out_population_name=None, building_end_date=None, number_of_federal_deputies=None, map_caption=None, previous_name=None, city_link=None, architect=None, leader_title=None, foundation=None, agglomeration_demographics=None, calabrian_name=None, type_coordinate=None, touareg_settlement_name=None, distance_to_belfast=None, code_provincial_monument=None, climate=None, bourgmestre=None, depth=None, governing_body=None, black_ski_piste_number=None, protestant_percentage=None, related_places=None, zip_code=None, fauna=None, year_of_construction=None, subsystem=None, historical_region=None, international_phone_prefix_label=None, minority=None, frioulan_name=None, reference=None, code_land_registry=None, distance_to_cardiff=None, population_date=None, dutch_name=None, day=None, sheading=None, local_phone_prefix=None, population_pct_women=None, tree=None, old_province=None, vehicle_code=None, water=None, gross_domestic_product_nominal_per_capita=None, association_of_local_government=None, topic=None, main_island=None, maori_name=None, istat=None, minimum_area_quote=None, altitude=None, national_topographic_system_map_number=None, budget_year=None, gini_coefficient_as_of=None, scale=None, long_distance_piste_kilometre=None, building_start_year=None, sub_prefecture=None, snow_park_number=None, luxembourgish_name=None, area_total=None, population_total_reference=None, length_quote=None, relief=None, census_year=None, visitors_per_year=None, ladin_name=None, subdivision_link=None, cost=None, operated_by=None, mozabite_name=None, nearest_city=None, subsystem_link=None, whole_area=None, delegation=None, vice_leader=None, demographics=None):  # noqa: E501
        """NoteworthyPartOfBuilding - a model defined in OpenAPI

        :param city_type: The city_type of this NoteworthyPartOfBuilding.  # noqa: E501
        :type city_type: List[str]
        :param irish_name: The irish_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type irish_name: List[str]
        :param reff_bourgmestre: The reff_bourgmestre of this NoteworthyPartOfBuilding.  # noqa: E501
        :type reff_bourgmestre: List[object]
        :param community_iso_code: The community_iso_code of this NoteworthyPartOfBuilding.  # noqa: E501
        :type community_iso_code: List[str]
        :param anthem: The anthem of this NoteworthyPartOfBuilding.  # noqa: E501
        :type anthem: List[object]
        :param rank_agreement: The rank_agreement of this NoteworthyPartOfBuilding.  # noqa: E501
        :type rank_agreement: List[int]
        :param wilaya: The wilaya of this NoteworthyPartOfBuilding.  # noqa: E501
        :type wilaya: List[object]
        :param parliament: The parliament of this NoteworthyPartOfBuilding.  # noqa: E501
        :type parliament: List[object]
        :param moldavian_name: The moldavian_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type moldavian_name: List[str]
        :param rank_population: The rank_population of this NoteworthyPartOfBuilding.  # noqa: E501
        :type rank_population: List[int]
        :param quote: The quote of this NoteworthyPartOfBuilding.  # noqa: E501
        :type quote: List[str]
        :param initially_used_for: The initially_used_for of this NoteworthyPartOfBuilding.  # noqa: E501
        :type initially_used_for: List[str]
        :param commissioner_date: The commissioner_date of this NoteworthyPartOfBuilding.  # noqa: E501
        :type commissioner_date: List[str]
        :param demographics_as_of: The demographics_as_of of this NoteworthyPartOfBuilding.  # noqa: E501
        :type demographics_as_of: List[str]
        :param largest_settlement: The largest_settlement of this NoteworthyPartOfBuilding.  # noqa: E501
        :type largest_settlement: List[object]
        :param distance_to_london: The distance_to_london of this NoteworthyPartOfBuilding.  # noqa: E501
        :type distance_to_london: List[float]
        :param geoloc_dual: The geoloc_dual of this NoteworthyPartOfBuilding.  # noqa: E501
        :type geoloc_dual: List[str]
        :param distance_to_capital: The distance_to_capital of this NoteworthyPartOfBuilding.  # noqa: E501
        :type distance_to_capital: List[float]
        :param subregion: The subregion of this NoteworthyPartOfBuilding.  # noqa: E501
        :type subregion: List[object]
        :param sharing_out_area: The sharing_out_area of this NoteworthyPartOfBuilding.  # noqa: E501
        :type sharing_out_area: List[str]
        :param phone_prefix_name: The phone_prefix_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type phone_prefix_name: List[str]
        :param time_zone: The time_zone of this NoteworthyPartOfBuilding.  # noqa: E501
        :type time_zone: List[object]
        :param gross_domestic_product_as_of: The gross_domestic_product_as_of of this NoteworthyPartOfBuilding.  # noqa: E501
        :type gross_domestic_product_as_of: List[str]
        :param population: The population of this NoteworthyPartOfBuilding.  # noqa: E501
        :type population: List[object]
        :param senior: The senior of this NoteworthyPartOfBuilding.  # noqa: E501
        :type senior: List[str]
        :param human_development_index_rank: The human_development_index_rank of this NoteworthyPartOfBuilding.  # noqa: E501
        :type human_development_index_rank: List[str]
        :param population_rural: The population_rural of this NoteworthyPartOfBuilding.  # noqa: E501
        :type population_rural: List[int]
        :param gaelic_name: The gaelic_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type gaelic_name: List[str]
        :param area_total_ranking: The area_total_ranking of this NoteworthyPartOfBuilding.  # noqa: E501
        :type area_total_ranking: List[int]
        :param route: The route of this NoteworthyPartOfBuilding.  # noqa: E501
        :type route: List[str]
        :param leader_name: The leader_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type leader_name: List[object]
        :param principal_area: The principal_area of this NoteworthyPartOfBuilding.  # noqa: E501
        :type principal_area: List[object]
        :param plant: The plant of this NoteworthyPartOfBuilding.  # noqa: E501
        :type plant: List[object]
        :param green_long_distance_piste_number: The green_long_distance_piste_number of this NoteworthyPartOfBuilding.  # noqa: E501
        :type green_long_distance_piste_number: List[int]
        :param cannon_number: The cannon_number of this NoteworthyPartOfBuilding.  # noqa: E501
        :type cannon_number: List[int]
        :param purchasing_power_parity: The purchasing_power_parity of this NoteworthyPartOfBuilding.  # noqa: E501
        :type purchasing_power_parity: List[str]
        :param grid_reference: The grid_reference of this NoteworthyPartOfBuilding.  # noqa: E501
        :type grid_reference: List[str]
        :param barangays: The barangays of this NoteworthyPartOfBuilding.  # noqa: E501
        :type barangays: List[str]
        :param bioclimate: The bioclimate of this NoteworthyPartOfBuilding.  # noqa: E501
        :type bioclimate: List[str]
        :param dissolution_year: The dissolution_year of this NoteworthyPartOfBuilding.  # noqa: E501
        :type dissolution_year: List[str]
        :param patron_saint: The patron_saint of this NoteworthyPartOfBuilding.  # noqa: E501
        :type patron_saint: List[object]
        :param apskritis: The apskritis of this NoteworthyPartOfBuilding.  # noqa: E501
        :type apskritis: List[str]
        :param area_of_catchment_quote: The area_of_catchment_quote of this NoteworthyPartOfBuilding.  # noqa: E501
        :type area_of_catchment_quote: List[str]
        :param sea: The sea of this NoteworthyPartOfBuilding.  # noqa: E501
        :type sea: List[object]
        :param life_expectancy: The life_expectancy of this NoteworthyPartOfBuilding.  # noqa: E501
        :type life_expectancy: List[str]
        :param tamazight_name: The tamazight_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type tamazight_name: List[str]
        :param ski_lift: The ski_lift of this NoteworthyPartOfBuilding.  # noqa: E501
        :type ski_lift: List[int]
        :param insee_code: The insee_code of this NoteworthyPartOfBuilding.  # noqa: E501
        :type insee_code: List[int]
        :param governorate: The governorate of this NoteworthyPartOfBuilding.  # noqa: E501
        :type governorate: List[str]
        :param region_link: The region_link of this NoteworthyPartOfBuilding.  # noqa: E501
        :type region_link: List[str]
        :param vice_leader_party: The vice_leader_party of this NoteworthyPartOfBuilding.  # noqa: E501
        :type vice_leader_party: List[object]
        :param political_seats: The political_seats of this NoteworthyPartOfBuilding.  # noqa: E501
        :type political_seats: List[int]
        :param artificial_snow_area: The artificial_snow_area of this NoteworthyPartOfBuilding.  # noqa: E501
        :type artificial_snow_area: List[float]
        :param located_in_area: The located_in_area of this NoteworthyPartOfBuilding.  # noqa: E501
        :type located_in_area: List[object]
        :param saint: The saint of this NoteworthyPartOfBuilding.  # noqa: E501
        :type saint: List[object]
        :param gnl: The gnl of this NoteworthyPartOfBuilding.  # noqa: E501
        :type gnl: List[str]
        :param licence_number: The licence_number of this NoteworthyPartOfBuilding.  # noqa: E501
        :type licence_number: List[str]
        :param map_description: The map_description of this NoteworthyPartOfBuilding.  # noqa: E501
        :type map_description: List[str]
        :param infant_mortality: The infant_mortality of this NoteworthyPartOfBuilding.  # noqa: E501
        :type infant_mortality: List[float]
        :param area_metro: The area_metro of this NoteworthyPartOfBuilding.  # noqa: E501
        :type area_metro: List[object]
        :param number_of_cantons: The number_of_cantons of this NoteworthyPartOfBuilding.  # noqa: E501
        :type number_of_cantons: List[int]
        :param information_name: The information_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type information_name: List[str]
        :param information: The information of this NoteworthyPartOfBuilding.  # noqa: E501
        :type information: List[str]
        :param river: The river of this NoteworthyPartOfBuilding.  # noqa: E501
        :type river: List[object]
        :param ethnic_group: The ethnic_group of this NoteworthyPartOfBuilding.  # noqa: E501
        :type ethnic_group: List[object]
        :param heritage_register: The heritage_register of this NoteworthyPartOfBuilding.  # noqa: E501
        :type heritage_register: List[object]
        :param subdivisions: The subdivisions of this NoteworthyPartOfBuilding.  # noqa: E501
        :type subdivisions: List[int]
        :param refcul: The refcul of this NoteworthyPartOfBuilding.  # noqa: E501
        :type refcul: List[str]
        :param italian_name: The italian_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type italian_name: List[str]
        :param dissolution_date: The dissolution_date of this NoteworthyPartOfBuilding.  # noqa: E501
        :type dissolution_date: List[str]
        :param building_end_year: The building_end_year of this NoteworthyPartOfBuilding.  # noqa: E501
        :type building_end_year: List[str]
        :param ist: The ist of this NoteworthyPartOfBuilding.  # noqa: E501
        :type ist: List[str]
        :param geoloc_department: The geoloc_department of this NoteworthyPartOfBuilding.  # noqa: E501
        :type geoloc_department: List[object]
        :param borough: The borough of this NoteworthyPartOfBuilding.  # noqa: E501
        :type borough: List[object]
        :param official_name: The official_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type official_name: List[str]
        :param maximum_elevation: The maximum_elevation of this NoteworthyPartOfBuilding.  # noqa: E501
        :type maximum_elevation: List[float]
        :param colonial_name: The colonial_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type colonial_name: List[str]
        :param named_by_language: The named_by_language of this NoteworthyPartOfBuilding.  # noqa: E501
        :type named_by_language: List[object]
        :param volume_quote: The volume_quote of this NoteworthyPartOfBuilding.  # noqa: E501
        :type volume_quote: List[str]
        :param province_link: The province_link of this NoteworthyPartOfBuilding.  # noqa: E501
        :type province_link: List[object]
        :param parish: The parish of this NoteworthyPartOfBuilding.  # noqa: E501
        :type parish: List[object]
        :param old_name: The old_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type old_name: List[str]
        :param bird: The bird of this NoteworthyPartOfBuilding.  # noqa: E501
        :type bird: List[object]
        :param president_general_council_mandate: The president_general_council_mandate of this NoteworthyPartOfBuilding.  # noqa: E501
        :type president_general_council_mandate: List[str]
        :param regional_prefecture: The regional_prefecture of this NoteworthyPartOfBuilding.  # noqa: E501
        :type regional_prefecture: List[str]
        :param term_of_office: The term_of_office of this NoteworthyPartOfBuilding.  # noqa: E501
        :type term_of_office: List[str]
        :param code_settlement: The code_settlement of this NoteworthyPartOfBuilding.  # noqa: E501
        :type code_settlement: List[str]
        :param winter_temperature: The winter_temperature of this NoteworthyPartOfBuilding.  # noqa: E501
        :type winter_temperature: List[float]
        :param construction_material: The construction_material of this NoteworthyPartOfBuilding.  # noqa: E501
        :type construction_material: List[object]
        :param commissioner: The commissioner of this NoteworthyPartOfBuilding.  # noqa: E501
        :type commissioner: List[str]
        :param refpol: The refpol of this NoteworthyPartOfBuilding.  # noqa: E501
        :type refpol: List[str]
        :param number_of_counties: The number_of_counties of this NoteworthyPartOfBuilding.  # noqa: E501
        :type number_of_counties: List[int]
        :param area: The area of this NoteworthyPartOfBuilding.  # noqa: E501
        :type area: List[object]
        :param population_quote: The population_quote of this NoteworthyPartOfBuilding.  # noqa: E501
        :type population_quote: List[str]
        :param biggest_city: The biggest_city of this NoteworthyPartOfBuilding.  # noqa: E501
        :type biggest_city: List[object]
        :param nis_code: The nis_code of this NoteworthyPartOfBuilding.  # noqa: E501
        :type nis_code: List[object]
        :param other_information: The other_information of this NoteworthyPartOfBuilding.  # noqa: E501
        :type other_information: List[str]
        :param opening_year: The opening_year of this NoteworthyPartOfBuilding.  # noqa: E501
        :type opening_year: List[str]
        :param area_code: The area_code of this NoteworthyPartOfBuilding.  # noqa: E501
        :type area_code: List[str]
        :param average_depth_quote: The average_depth_quote of this NoteworthyPartOfBuilding.  # noqa: E501
        :type average_depth_quote: List[str]
        :param geologic_period: The geologic_period of this NoteworthyPartOfBuilding.  # noqa: E501
        :type geologic_period: List[str]
        :param coast_line: The coast_line of this NoteworthyPartOfBuilding.  # noqa: E501
        :type coast_line: List[float]
        :param unitary_authority: The unitary_authority of this NoteworthyPartOfBuilding.  # noqa: E501
        :type unitary_authority: List[object]
        :param area_land: The area_land of this NoteworthyPartOfBuilding.  # noqa: E501
        :type area_land: List[float]
        :param population_metro_density: The population_metro_density of this NoteworthyPartOfBuilding.  # noqa: E501
        :type population_metro_density: List[object]
        :param previous_population: The previous_population of this NoteworthyPartOfBuilding.  # noqa: E501
        :type previous_population: List[object]
        :param iso_code_region: The iso_code_region of this NoteworthyPartOfBuilding.  # noqa: E501
        :type iso_code_region: List[object]
        :param gini_coefficient: The gini_coefficient of this NoteworthyPartOfBuilding.  # noqa: E501
        :type gini_coefficient: List[float]
        :param neighbour_region: The neighbour_region of this NoteworthyPartOfBuilding.  # noqa: E501
        :type neighbour_region: List[str]
        :param event_date: The event_date of this NoteworthyPartOfBuilding.  # noqa: E501
        :type event_date: List[str]
        :param income: The income of this NoteworthyPartOfBuilding.  # noqa: E501
        :type income: List[str]
        :param touristic_site: The touristic_site of this NoteworthyPartOfBuilding.  # noqa: E501
        :type touristic_site: List[object]
        :param next_entity: The next_entity of this NoteworthyPartOfBuilding.  # noqa: E501
        :type next_entity: List[object]
        :param political_majority: The political_majority of this NoteworthyPartOfBuilding.  # noqa: E501
        :type political_majority: List[object]
        :param area_quote: The area_quote of this NoteworthyPartOfBuilding.  # noqa: E501
        :type area_quote: List[str]
        :param ski_tow: The ski_tow of this NoteworthyPartOfBuilding.  # noqa: E501
        :type ski_tow: List[int]
        :param international_phone_prefix: The international_phone_prefix of this NoteworthyPartOfBuilding.  # noqa: E501
        :type international_phone_prefix: List[str]
        :param largest_metro: The largest_metro of this NoteworthyPartOfBuilding.  # noqa: E501
        :type largest_metro: List[object]
        :param gagaouze: The gagaouze of this NoteworthyPartOfBuilding.  # noqa: E501
        :type gagaouze: List[str]
        :param label: The label of this NoteworthyPartOfBuilding.  # noqa: E501
        :type label: List[str]
        :param iso_code: The iso_code of this NoteworthyPartOfBuilding.  # noqa: E501
        :type iso_code: List[str]
        :param finnish_name: The finnish_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type finnish_name: List[str]
        :param width_quote: The width_quote of this NoteworthyPartOfBuilding.  # noqa: E501
        :type width_quote: List[str]
        :param agglomeration_population_year: The agglomeration_population_year of this NoteworthyPartOfBuilding.  # noqa: E501
        :type agglomeration_population_year: List[str]
        :param daylight_saving_time_zone: The daylight_saving_time_zone of this NoteworthyPartOfBuilding.  # noqa: E501
        :type daylight_saving_time_zone: List[object]
        :param long_distance_piste_number: The long_distance_piste_number of this NoteworthyPartOfBuilding.  # noqa: E501
        :type long_distance_piste_number: List[int]
        :param political_leader: The political_leader of this NoteworthyPartOfBuilding.  # noqa: E501
        :type political_leader: List[object]
        :param same_name: The same_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type same_name: List[str]
        :param agglomeration: The agglomeration of this NoteworthyPartOfBuilding.  # noqa: E501
        :type agglomeration: List[object]
        :param red_long_distance_piste_number: The red_long_distance_piste_number of this NoteworthyPartOfBuilding.  # noqa: E501
        :type red_long_distance_piste_number: List[int]
        :param area_water: The area_water of this NoteworthyPartOfBuilding.  # noqa: E501
        :type area_water: List[float]
        :param currently_used_for: The currently_used_for of this NoteworthyPartOfBuilding.  # noqa: E501
        :type currently_used_for: List[str]
        :param output: The output of this NoteworthyPartOfBuilding.  # noqa: E501
        :type output: List[float]
        :param previous_demographics: The previous_demographics of this NoteworthyPartOfBuilding.  # noqa: E501
        :type previous_demographics: List[object]
        :param region_type: The region_type of this NoteworthyPartOfBuilding.  # noqa: E501
        :type region_type: List[str]
        :param police_name: The police_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type police_name: List[str]
        :param neighboring_municipality: The neighboring_municipality of this NoteworthyPartOfBuilding.  # noqa: E501
        :type neighboring_municipality: List[object]
        :param population_pct_children: The population_pct_children of this NoteworthyPartOfBuilding.  # noqa: E501
        :type population_pct_children: List[int]
        :param id: The id of this NoteworthyPartOfBuilding.  # noqa: E501
        :type id: str
        :param distance_to_charing_cross: The distance_to_charing_cross of this NoteworthyPartOfBuilding.  # noqa: E501
        :type distance_to_charing_cross: List[float]
        :param lieutenancy: The lieutenancy of this NoteworthyPartOfBuilding.  # noqa: E501
        :type lieutenancy: List[str]
        :param delegate_mayor: The delegate_mayor of this NoteworthyPartOfBuilding.  # noqa: E501
        :type delegate_mayor: List[object]
        :param rebuilding_year: The rebuilding_year of this NoteworthyPartOfBuilding.  # noqa: E501
        :type rebuilding_year: List[str]
        :param minimum_elevation: The minimum_elevation of this NoteworthyPartOfBuilding.  # noqa: E501
        :type minimum_elevation: List[float]
        :param number_of_capital_deputies: The number_of_capital_deputies of this NoteworthyPartOfBuilding.  # noqa: E501
        :type number_of_capital_deputies: List[int]
        :param ceremonial_county: The ceremonial_county of this NoteworthyPartOfBuilding.  # noqa: E501
        :type ceremonial_county: List[object]
        :param scotish_name: The scotish_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type scotish_name: List[str]
        :param watercourse: The watercourse of this NoteworthyPartOfBuilding.  # noqa: E501
        :type watercourse: List[str]
        :param metropolitan_borough: The metropolitan_borough of this NoteworthyPartOfBuilding.  # noqa: E501
        :type metropolitan_borough: List[object]
        :param coast_length: The coast_length of this NoteworthyPartOfBuilding.  # noqa: E501
        :type coast_length: List[float]
        :param joint_community: The joint_community of this NoteworthyPartOfBuilding.  # noqa: E501
        :type joint_community: List[object]
        :param ekatte_code: The ekatte_code of this NoteworthyPartOfBuilding.  # noqa: E501
        :type ekatte_code: List[str]
        :param per_capita_income: The per_capita_income of this NoteworthyPartOfBuilding.  # noqa: E501
        :type per_capita_income: List[float]
        :param settlement: The settlement of this NoteworthyPartOfBuilding.  # noqa: E501
        :type settlement: List[object]
        :param sharing_out_population_year: The sharing_out_population_year of this NoteworthyPartOfBuilding.  # noqa: E501
        :type sharing_out_population_year: List[str]
        :param foundation_date: The foundation_date of this NoteworthyPartOfBuilding.  # noqa: E501
        :type foundation_date: List[str]
        :param maximum_depth: The maximum_depth of this NoteworthyPartOfBuilding.  # noqa: E501
        :type maximum_depth: List[float]
        :param teryt_code: The teryt_code of this NoteworthyPartOfBuilding.  # noqa: E501
        :type teryt_code: List[object]
        :param demolition_year: The demolition_year of this NoteworthyPartOfBuilding.  # noqa: E501
        :type demolition_year: List[str]
        :param smallest_country: The smallest_country of this NoteworthyPartOfBuilding.  # noqa: E501
        :type smallest_country: List[object]
        :param algerian_name: The algerian_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type algerian_name: List[str]
        :param map: The map of this NoteworthyPartOfBuilding.  # noqa: E501
        :type map: List[object]
        :param localization_thumbnail_caption: The localization_thumbnail_caption of this NoteworthyPartOfBuilding.  # noqa: E501
        :type localization_thumbnail_caption: List[str]
        :param unlc_code: The unlc_code of this NoteworthyPartOfBuilding.  # noqa: E501
        :type unlc_code: List[str]
        :param sicilian_name: The sicilian_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type sicilian_name: List[str]
        :param department_position: The department_position of this NoteworthyPartOfBuilding.  # noqa: E501
        :type department_position: List[str]
        :param population_pct_men: The population_pct_men of this NoteworthyPartOfBuilding.  # noqa: E501
        :type population_pct_men: List[int]
        :param law_country: The law_country of this NoteworthyPartOfBuilding.  # noqa: E501
        :type law_country: List[str]
        :param summer_temperature: The summer_temperature of this NoteworthyPartOfBuilding.  # noqa: E501
        :type summer_temperature: List[float]
        :param area_date: The area_date of this NoteworthyPartOfBuilding.  # noqa: E501
        :type area_date: List[str]
        :param kind_of_coordinate: The kind_of_coordinate of this NoteworthyPartOfBuilding.  # noqa: E501
        :type kind_of_coordinate: List[str]
        :param black_long_distance_piste_number: The black_long_distance_piste_number of this NoteworthyPartOfBuilding.  # noqa: E501
        :type black_long_distance_piste_number: List[int]
        :param water_area: The water_area of this NoteworthyPartOfBuilding.  # noqa: E501
        :type water_area: List[float]
        :param frontier_length: The frontier_length of this NoteworthyPartOfBuilding.  # noqa: E501
        :type frontier_length: List[float]
        :param tamazight_settlement_name: The tamazight_settlement_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type tamazight_settlement_name: List[str]
        :param reopening_date: The reopening_date of this NoteworthyPartOfBuilding.  # noqa: E501
        :type reopening_date: List[str]
        :param okato_code: The okato_code of this NoteworthyPartOfBuilding.  # noqa: E501
        :type okato_code: List[str]
        :param disappearance_date: The disappearance_date of this NoteworthyPartOfBuilding.  # noqa: E501
        :type disappearance_date: List[str]
        :param population_urban_density: The population_urban_density of this NoteworthyPartOfBuilding.  # noqa: E501
        :type population_urban_density: List[object]
        :param largest_country: The largest_country of this NoteworthyPartOfBuilding.  # noqa: E501
        :type largest_country: List[object]
        :param phone_prefix: The phone_prefix of this NoteworthyPartOfBuilding.  # noqa: E501
        :type phone_prefix: List[int]
        :param capital: The capital of this NoteworthyPartOfBuilding.  # noqa: E501
        :type capital: List[object]
        :param status_year: The status_year of this NoteworthyPartOfBuilding.  # noqa: E501
        :type status_year: List[str]
        :param flora: The flora of this NoteworthyPartOfBuilding.  # noqa: E501
        :type flora: List[str]
        :param agglomeration_area: The agglomeration_area of this NoteworthyPartOfBuilding.  # noqa: E501
        :type agglomeration_area: List[object]
        :param cornish_name: The cornish_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type cornish_name: List[str]
        :param largest_city: The largest_city of this NoteworthyPartOfBuilding.  # noqa: E501
        :type largest_city: List[object]
        :param licence_number_label: The licence_number_label of this NoteworthyPartOfBuilding.  # noqa: E501
        :type licence_number_label: List[str]
        :param limit: The limit of this NoteworthyPartOfBuilding.  # noqa: E501
        :type limit: List[str]
        :param scots_name: The scots_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type scots_name: List[str]
        :param refgeo: The refgeo of this NoteworthyPartOfBuilding.  # noqa: E501
        :type refgeo: List[str]
        :param refgen: The refgen of this NoteworthyPartOfBuilding.  # noqa: E501
        :type refgen: List[str]
        :param population_as_of: The population_as_of of this NoteworthyPartOfBuilding.  # noqa: E501
        :type population_as_of: List[str]
        :param different: The different of this NoteworthyPartOfBuilding.  # noqa: E501
        :type different: List[str]
        :param emblem: The emblem of this NoteworthyPartOfBuilding.  # noqa: E501
        :type emblem: List[str]
        :param representative: The representative of this NoteworthyPartOfBuilding.  # noqa: E501
        :type representative: List[int]
        :param maximum_area_quote: The maximum_area_quote of this NoteworthyPartOfBuilding.  # noqa: E501
        :type maximum_area_quote: List[str]
        :param utc_offset: The utc_offset of this NoteworthyPartOfBuilding.  # noqa: E501
        :type utc_offset: List[str]
        :param pluviometry: The pluviometry of this NoteworthyPartOfBuilding.  # noqa: E501
        :type pluviometry: List[str]
        :param german_name: The german_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type german_name: List[str]
        :param per_capita_income_rank: The per_capita_income_rank of this NoteworthyPartOfBuilding.  # noqa: E501
        :type per_capita_income_rank: List[str]
        :param ski_piste_kilometre: The ski_piste_kilometre of this NoteworthyPartOfBuilding.  # noqa: E501
        :type ski_piste_kilometre: List[float]
        :param distance_to_edinburgh: The distance_to_edinburgh of this NoteworthyPartOfBuilding.  # noqa: E501
        :type distance_to_edinburgh: List[float]
        :param minimum_area: The minimum_area of this NoteworthyPartOfBuilding.  # noqa: E501
        :type minimum_area: List[str]
        :param municipality_code: The municipality_code of this NoteworthyPartOfBuilding.  # noqa: E501
        :type municipality_code: List[str]
        :param population_rural_density: The population_rural_density of this NoteworthyPartOfBuilding.  # noqa: E501
        :type population_rural_density: List[float]
        :param kabyle_name: The kabyle_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type kabyle_name: List[str]
        :param red_ski_piste_number: The red_ski_piste_number of this NoteworthyPartOfBuilding.  # noqa: E501
        :type red_ski_piste_number: List[int]
        :param other_name: The other_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type other_name: List[str]
        :param welsh_name: The welsh_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type welsh_name: List[str]
        :param lake: The lake of this NoteworthyPartOfBuilding.  # noqa: E501
        :type lake: List[object]
        :param collectivity_minority: The collectivity_minority of this NoteworthyPartOfBuilding.  # noqa: E501
        :type collectivity_minority: List[object]
        :param regional_language: The regional_language of this NoteworthyPartOfBuilding.  # noqa: E501
        :type regional_language: List[object]
        :param chaoui_name: The chaoui_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type chaoui_name: List[str]
        :param english_name: The english_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type english_name: List[str]
        :param county_seat: The county_seat of this NoteworthyPartOfBuilding.  # noqa: E501
        :type county_seat: List[object]
        :param purchasing_power_parity_year: The purchasing_power_parity_year of this NoteworthyPartOfBuilding.  # noqa: E501
        :type purchasing_power_parity_year: List[str]
        :param lieutenancy_area: The lieutenancy_area of this NoteworthyPartOfBuilding.  # noqa: E501
        :type lieutenancy_area: List[object]
        :param historical_map: The historical_map of this NoteworthyPartOfBuilding.  # noqa: E501
        :type historical_map: List[str]
        :param people_name: The people_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type people_name: List[str]
        :param regency: The regency of this NoteworthyPartOfBuilding.  # noqa: E501
        :type regency: List[object]
        :param code_municipal_monument: The code_municipal_monument of this NoteworthyPartOfBuilding.  # noqa: E501
        :type code_municipal_monument: List[str]
        :param architectural_style: The architectural_style of this NoteworthyPartOfBuilding.  # noqa: E501
        :type architectural_style: List[object]
        :param purchasing_power_parity_rank: The purchasing_power_parity_rank of this NoteworthyPartOfBuilding.  # noqa: E501
        :type purchasing_power_parity_rank: List[str]
        :param depth_quote: The depth_quote of this NoteworthyPartOfBuilding.  # noqa: E501
        :type depth_quote: List[str]
        :param reopening_year: The reopening_year of this NoteworthyPartOfBuilding.  # noqa: E501
        :type reopening_year: List[str]
        :param avifauna_population: The avifauna_population of this NoteworthyPartOfBuilding.  # noqa: E501
        :type avifauna_population: List[str]
        :param construction: The construction of this NoteworthyPartOfBuilding.  # noqa: E501
        :type construction: List[object]
        :param land: The land of this NoteworthyPartOfBuilding.  # noqa: E501
        :type land: List[object]
        :param sharing_out: The sharing_out of this NoteworthyPartOfBuilding.  # noqa: E501
        :type sharing_out: List[str]
        :param department: The department of this NoteworthyPartOfBuilding.  # noqa: E501
        :type department: List[object]
        :param opening_date: The opening_date of this NoteworthyPartOfBuilding.  # noqa: E501
        :type opening_date: List[str]
        :param other_language: The other_language of this NoteworthyPartOfBuilding.  # noqa: E501
        :type other_language: List[str]
        :param ofs_code: The ofs_code of this NoteworthyPartOfBuilding.  # noqa: E501
        :type ofs_code: List[str]
        :param elevation: The elevation of this NoteworthyPartOfBuilding.  # noqa: E501
        :type elevation: List[float]
        :param endangered_since: The endangered_since of this NoteworthyPartOfBuilding.  # noqa: E501
        :type endangered_since: List[str]
        :param rank_area: The rank_area of this NoteworthyPartOfBuilding.  # noqa: E501
        :type rank_area: List[int]
        :param prov_code: The prov_code of this NoteworthyPartOfBuilding.  # noqa: E501
        :type prov_code: List[str]
        :param visitors_percentage_change: The visitors_percentage_change of this NoteworthyPartOfBuilding.  # noqa: E501
        :type visitors_percentage_change: List[float]
        :param merger_date: The merger_date of this NoteworthyPartOfBuilding.  # noqa: E501
        :type merger_date: List[str]
        :param seniunija: The seniunija of this NoteworthyPartOfBuilding.  # noqa: E501
        :type seniunija: List[str]
        :param rebuilding_date: The rebuilding_date of this NoteworthyPartOfBuilding.  # noqa: E501
        :type rebuilding_date: List[str]
        :param city_since: The city_since of this NoteworthyPartOfBuilding.  # noqa: E501
        :type city_since: List[str]
        :param nuts_code: The nuts_code of this NoteworthyPartOfBuilding.  # noqa: E501
        :type nuts_code: List[str]
        :param authority_mandate: The authority_mandate of this NoteworthyPartOfBuilding.  # noqa: E501
        :type authority_mandate: List[str]
        :param gnis_code: The gnis_code of this NoteworthyPartOfBuilding.  # noqa: E501
        :type gnis_code: List[str]
        :param deme: The deme of this NoteworthyPartOfBuilding.  # noqa: E501
        :type deme: List[str]
        :param maximum_depth_quote: The maximum_depth_quote of this NoteworthyPartOfBuilding.  # noqa: E501
        :type maximum_depth_quote: List[str]
        :param canton: The canton of this NoteworthyPartOfBuilding.  # noqa: E501
        :type canton: List[object]
        :param province_iso_code: The province_iso_code of this NoteworthyPartOfBuilding.  # noqa: E501
        :type province_iso_code: List[str]
        :param human_development_index_ranking_category: The human_development_index_ranking_category of this NoteworthyPartOfBuilding.  # noqa: E501
        :type human_development_index_ranking_category: List[object]
        :param nation: The nation of this NoteworthyPartOfBuilding.  # noqa: E501
        :type nation: List[str]
        :param arrondissement: The arrondissement of this NoteworthyPartOfBuilding.  # noqa: E501
        :type arrondissement: List[object]
        :param french_name: The french_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type french_name: List[str]
        :param supply: The supply of this NoteworthyPartOfBuilding.  # noqa: E501
        :type supply: List[object]
        :param agglomeration_population: The agglomeration_population of this NoteworthyPartOfBuilding.  # noqa: E501
        :type agglomeration_population: List[object]
        :param green_ski_piste_number: The green_ski_piste_number of this NoteworthyPartOfBuilding.  # noqa: E501
        :type green_ski_piste_number: List[int]
        :param province: The province of this NoteworthyPartOfBuilding.  # noqa: E501
        :type province: List[object]
        :param meaning: The meaning of this NoteworthyPartOfBuilding.  # noqa: E501
        :type meaning: List[str]
        :param leader_party: The leader_party of this NoteworthyPartOfBuilding.  # noqa: E501
        :type leader_party: List[object]
        :param population_total_ranking: The population_total_ranking of this NoteworthyPartOfBuilding.  # noqa: E501
        :type population_total_ranking: List[int]
        :param twin_city: The twin_city of this NoteworthyPartOfBuilding.  # noqa: E501
        :type twin_city: List[object]
        :param sharing_out_population: The sharing_out_population of this NoteworthyPartOfBuilding.  # noqa: E501
        :type sharing_out_population: List[int]
        :param piscicultural_population: The piscicultural_population of this NoteworthyPartOfBuilding.  # noqa: E501
        :type piscicultural_population: List[str]
        :param distance_to_dublin: The distance_to_dublin of this NoteworthyPartOfBuilding.  # noqa: E501
        :type distance_to_dublin: List[float]
        :param sharing_out_name: The sharing_out_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type sharing_out_name: List[object]
        :param land_percentage: The land_percentage of this NoteworthyPartOfBuilding.  # noqa: E501
        :type land_percentage: List[float]
        :param visitors_total: The visitors_total of this NoteworthyPartOfBuilding.  # noqa: E501
        :type visitors_total: List[int]
        :param population_year: The population_year of this NoteworthyPartOfBuilding.  # noqa: E501
        :type population_year: List[str]
        :param administrative_collectivity: The administrative_collectivity of this NoteworthyPartOfBuilding.  # noqa: E501
        :type administrative_collectivity: List[object]
        :param per_capita_income_as_of: The per_capita_income_as_of of this NoteworthyPartOfBuilding.  # noqa: E501
        :type per_capita_income_as_of: List[str]
        :param architectual_bureau: The architectual_bureau of this NoteworthyPartOfBuilding.  # noqa: E501
        :type architectual_bureau: List[object]
        :param circle: The circle of this NoteworthyPartOfBuilding.  # noqa: E501
        :type circle: List[str]
        :param occitan_name: The occitan_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type occitan_name: List[str]
        :param blue_long_distance_piste_number: The blue_long_distance_piste_number of this NoteworthyPartOfBuilding.  # noqa: E501
        :type blue_long_distance_piste_number: List[int]
        :param building_start_date: The building_start_date of this NoteworthyPartOfBuilding.  # noqa: E501
        :type building_start_date: List[str]
        :param algerian_settlement_name: The algerian_settlement_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type algerian_settlement_name: List[str]
        :param gross_domestic_product_purchasing_power_parity_per_capita: The gross_domestic_product_purchasing_power_parity_per_capita of this NoteworthyPartOfBuilding.  # noqa: E501
        :type gross_domestic_product_purchasing_power_parity_per_capita: List[object]
        :param date_agreement: The date_agreement of this NoteworthyPartOfBuilding.  # noqa: E501
        :type date_agreement: List[str]
        :param frazioni: The frazioni of this NoteworthyPartOfBuilding.  # noqa: E501
        :type frazioni: List[object]
        :param mayor_article: The mayor_article of this NoteworthyPartOfBuilding.  # noqa: E501
        :type mayor_article: List[str]
        :param iso31661_code: The iso31661_code of this NoteworthyPartOfBuilding.  # noqa: E501
        :type iso31661_code: List[str]
        :param simc_code: The simc_code of this NoteworthyPartOfBuilding.  # noqa: E501
        :type simc_code: List[object]
        :param council_area: The council_area of this NoteworthyPartOfBuilding.  # noqa: E501
        :type council_area: List[object]
        :param unesco: The unesco of this NoteworthyPartOfBuilding.  # noqa: E501
        :type unesco: List[object]
        :param gross_domestic_product: The gross_domestic_product of this NoteworthyPartOfBuilding.  # noqa: E501
        :type gross_domestic_product: List[object]
        :param gross_domestic_product_rank: The gross_domestic_product_rank of this NoteworthyPartOfBuilding.  # noqa: E501
        :type gross_domestic_product_rank: List[str]
        :param distance_to_douglas: The distance_to_douglas of this NoteworthyPartOfBuilding.  # noqa: E501
        :type distance_to_douglas: List[float]
        :param visitor_statistics_as_of: The visitor_statistics_as_of of this NoteworthyPartOfBuilding.  # noqa: E501
        :type visitor_statistics_as_of: List[str]
        :param number_of_municipalities: The number_of_municipalities of this NoteworthyPartOfBuilding.  # noqa: E501
        :type number_of_municipalities: List[int]
        :param coordinates: The coordinates of this NoteworthyPartOfBuilding.  # noqa: E501
        :type coordinates: List[str]
        :param gini_coefficient_ranking: The gini_coefficient_ranking of this NoteworthyPartOfBuilding.  # noqa: E501
        :type gini_coefficient_ranking: List[int]
        :param highest_point: The highest_point of this NoteworthyPartOfBuilding.  # noqa: E501
        :type highest_point: List[object]
        :param flower: The flower of this NoteworthyPartOfBuilding.  # noqa: E501
        :type flower: List[object]
        :param hra_state: The hra_state of this NoteworthyPartOfBuilding.  # noqa: E501
        :type hra_state: List[str]
        :param depths: The depths of this NoteworthyPartOfBuilding.  # noqa: E501
        :type depths: List[object]
        :param cca_state: The cca_state of this NoteworthyPartOfBuilding.  # noqa: E501
        :type cca_state: List[str]
        :param politic_government_department: The politic_government_department of this NoteworthyPartOfBuilding.  # noqa: E501
        :type politic_government_department: List[object]
        :param currency_code: The currency_code of this NoteworthyPartOfBuilding.  # noqa: E501
        :type currency_code: List[str]
        :param tu: The tu of this NoteworthyPartOfBuilding.  # noqa: E501
        :type tu: List[str]
        :param population_metro: The population_metro of this NoteworthyPartOfBuilding.  # noqa: E501
        :type population_metro: List[int]
        :param climb_up_number: The climb_up_number of this NoteworthyPartOfBuilding.  # noqa: E501
        :type climb_up_number: List[int]
        :param founding_person: The founding_person of this NoteworthyPartOfBuilding.  # noqa: E501
        :type founding_person: List[object]
        :param postal_code: The postal_code of this NoteworthyPartOfBuilding.  # noqa: E501
        :type postal_code: List[str]
        :param land_area: The land_area of this NoteworthyPartOfBuilding.  # noqa: E501
        :type land_area: List[float]
        :param code_national_monument: The code_national_monument of this NoteworthyPartOfBuilding.  # noqa: E501
        :type code_national_monument: List[str]
        :param originally_used_for: The originally_used_for of this NoteworthyPartOfBuilding.  # noqa: E501
        :type originally_used_for: List[str]
        :param president_regional_council_mandate: The president_regional_council_mandate of this NoteworthyPartOfBuilding.  # noqa: E501
        :type president_regional_council_mandate: List[str]
        :param retention_time: The retention_time of this NoteworthyPartOfBuilding.  # noqa: E501
        :type retention_time: List[str]
        :param gini_coefficient_category: The gini_coefficient_category of this NoteworthyPartOfBuilding.  # noqa: E501
        :type gini_coefficient_category: List[object]
        :param sardinian_name: The sardinian_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type sardinian_name: List[str]
        :param features: The features of this NoteworthyPartOfBuilding.  # noqa: E501
        :type features: List[object]
        :param forester_district: The forester_district of this NoteworthyPartOfBuilding.  # noqa: E501
        :type forester_district: List[object]
        :param illiteracy: The illiteracy of this NoteworthyPartOfBuilding.  # noqa: E501
        :type illiteracy: List[float]
        :param gross_domestic_product_per_people: The gross_domestic_product_per_people of this NoteworthyPartOfBuilding.  # noqa: E501
        :type gross_domestic_product_per_people: List[str]
        :param kind_of_rock: The kind_of_rock of this NoteworthyPartOfBuilding.  # noqa: E501
        :type kind_of_rock: List[str]
        :param arberisht_name: The arberisht_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type arberisht_name: List[str]
        :param manx_name: The manx_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type manx_name: List[str]
        :param protection_status: The protection_status of this NoteworthyPartOfBuilding.  # noqa: E501
        :type protection_status: List[str]
        :param fips_code: The fips_code of this NoteworthyPartOfBuilding.  # noqa: E501
        :type fips_code: List[str]
        :param greek_name: The greek_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type greek_name: List[str]
        :param population_density: The population_density of this NoteworthyPartOfBuilding.  # noqa: E501
        :type population_density: List[object]
        :param elevation_quote: The elevation_quote of this NoteworthyPartOfBuilding.  # noqa: E501
        :type elevation_quote: List[str]
        :param outskirts: The outskirts of this NoteworthyPartOfBuilding.  # noqa: E501
        :type outskirts: List[str]
        :param area_urban: The area_urban of this NoteworthyPartOfBuilding.  # noqa: E501
        :type area_urban: List[object]
        :param unlo_code: The unlo_code of this NoteworthyPartOfBuilding.  # noqa: E501
        :type unlo_code: List[str]
        :param district: The district of this NoteworthyPartOfBuilding.  # noqa: E501
        :type district: List[object]
        :param merged_settlement: The merged_settlement of this NoteworthyPartOfBuilding.  # noqa: E501
        :type merged_settlement: List[object]
        :param parliament_type: The parliament_type of this NoteworthyPartOfBuilding.  # noqa: E501
        :type parliament_type: List[str]
        :param previous_entity: The previous_entity of this NoteworthyPartOfBuilding.  # noqa: E501
        :type previous_entity: List[object]
        :param federal_state: The federal_state of this NoteworthyPartOfBuilding.  # noqa: E501
        :type federal_state: List[object]
        :param maximum_area: The maximum_area of this NoteworthyPartOfBuilding.  # noqa: E501
        :type maximum_area: List[str]
        :param demolition_date: The demolition_date of this NoteworthyPartOfBuilding.  # noqa: E501
        :type demolition_date: List[str]
        :param population_urban: The population_urban of this NoteworthyPartOfBuilding.  # noqa: E501
        :type population_urban: List[int]
        :param scottish_name: The scottish_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type scottish_name: List[str]
        :param sovereign_country: The sovereign_country of this NoteworthyPartOfBuilding.  # noqa: E501
        :type sovereign_country: List[object]
        :param phone_prefix_label: The phone_prefix_label of this NoteworthyPartOfBuilding.  # noqa: E501
        :type phone_prefix_label: List[str]
        :param official_language: The official_language of this NoteworthyPartOfBuilding.  # noqa: E501
        :type official_language: List[object]
        :param previous_population_total: The previous_population_total of this NoteworthyPartOfBuilding.  # noqa: E501
        :type previous_population_total: List[int]
        :param commune: The commune of this NoteworthyPartOfBuilding.  # noqa: E501
        :type commune: List[object]
        :param annual_temperature: The annual_temperature of this NoteworthyPartOfBuilding.  # noqa: E501
        :type annual_temperature: List[float]
        :param description: The description of this NoteworthyPartOfBuilding.  # noqa: E501
        :type description: List[str]
        :param number_of_state_deputies: The number_of_state_deputies of this NoteworthyPartOfBuilding.  # noqa: E501
        :type number_of_state_deputies: List[int]
        :param average_depth: The average_depth of this NoteworthyPartOfBuilding.  # noqa: E501
        :type average_depth: List[str]
        :param arabic_name: The arabic_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type arabic_name: List[str]
        :param ski_piste_number: The ski_piste_number of this NoteworthyPartOfBuilding.  # noqa: E501
        :type ski_piste_number: List[int]
        :param subdivision: The subdivision of this NoteworthyPartOfBuilding.  # noqa: E501
        :type subdivision: List[object]
        :param human_development_index: The human_development_index of this NoteworthyPartOfBuilding.  # noqa: E501
        :type human_development_index: List[object]
        :param alemmanic_name: The alemmanic_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type alemmanic_name: List[str]
        :param human_development_index_as_of: The human_development_index_as_of of this NoteworthyPartOfBuilding.  # noqa: E501
        :type human_development_index_as_of: List[str]
        :param capital_coordinates: The capital_coordinates of this NoteworthyPartOfBuilding.  # noqa: E501
        :type capital_coordinates: List[str]
        :param touareg_name: The touareg_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type touareg_name: List[str]
        :param administrative_head_city: The administrative_head_city of this NoteworthyPartOfBuilding.  # noqa: E501
        :type administrative_head_city: List[object]
        :param maintained_by: The maintained_by of this NoteworthyPartOfBuilding.  # noqa: E501
        :type maintained_by: List[object]
        :param visitors_per_day: The visitors_per_day of this NoteworthyPartOfBuilding.  # noqa: E501
        :type visitors_per_day: List[int]
        :param kanji_name: The kanji_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type kanji_name: List[str]
        :param blue_ski_piste_number: The blue_ski_piste_number of this NoteworthyPartOfBuilding.  # noqa: E501
        :type blue_ski_piste_number: List[int]
        :param historical_name: The historical_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type historical_name: List[str]
        :param area_rank: The area_rank of this NoteworthyPartOfBuilding.  # noqa: E501
        :type area_rank: List[str]
        :param first_mention: The first_mention of this NoteworthyPartOfBuilding.  # noqa: E501
        :type first_mention: List[str]
        :param localization_thumbnail: The localization_thumbnail of this NoteworthyPartOfBuilding.  # noqa: E501
        :type localization_thumbnail: List[object]
        :param cable_car: The cable_car of this NoteworthyPartOfBuilding.  # noqa: E501
        :type cable_car: List[int]
        :param administrative_district: The administrative_district of this NoteworthyPartOfBuilding.  # noqa: E501
        :type administrative_district: List[object]
        :param type: The type of this NoteworthyPartOfBuilding.  # noqa: E501
        :type type: List[str]
        :param linked_space: The linked_space of this NoteworthyPartOfBuilding.  # noqa: E501
        :type linked_space: List[str]
        :param lowest_point: The lowest_point of this NoteworthyPartOfBuilding.  # noqa: E501
        :type lowest_point: List[object]
        :param daira: The daira of this NoteworthyPartOfBuilding.  # noqa: E501
        :type daira: List[object]
        :param number_of_island: The number_of_island of this NoteworthyPartOfBuilding.  # noqa: E501
        :type number_of_island: List[str]
        :param cyrillique_name: The cyrillique_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type cyrillique_name: List[str]
        :param catholic_percentage: The catholic_percentage of this NoteworthyPartOfBuilding.  # noqa: E501
        :type catholic_percentage: List[str]
        :param old_district: The old_district of this NoteworthyPartOfBuilding.  # noqa: E501
        :type old_district: List[object]
        :param area_rural: The area_rural of this NoteworthyPartOfBuilding.  # noqa: E501
        :type area_rural: List[float]
        :param water_percentage: The water_percentage of this NoteworthyPartOfBuilding.  # noqa: E501
        :type water_percentage: List[float]
        :param lowest: The lowest of this NoteworthyPartOfBuilding.  # noqa: E501
        :type lowest: List[str]
        :param sharing_out_population_name: The sharing_out_population_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type sharing_out_population_name: List[str]
        :param building_end_date: The building_end_date of this NoteworthyPartOfBuilding.  # noqa: E501
        :type building_end_date: List[str]
        :param number_of_federal_deputies: The number_of_federal_deputies of this NoteworthyPartOfBuilding.  # noqa: E501
        :type number_of_federal_deputies: List[int]
        :param map_caption: The map_caption of this NoteworthyPartOfBuilding.  # noqa: E501
        :type map_caption: List[str]
        :param previous_name: The previous_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type previous_name: List[str]
        :param city_link: The city_link of this NoteworthyPartOfBuilding.  # noqa: E501
        :type city_link: List[str]
        :param architect: The architect of this NoteworthyPartOfBuilding.  # noqa: E501
        :type architect: List[object]
        :param leader_title: The leader_title of this NoteworthyPartOfBuilding.  # noqa: E501
        :type leader_title: List[str]
        :param foundation: The foundation of this NoteworthyPartOfBuilding.  # noqa: E501
        :type foundation: List[str]
        :param agglomeration_demographics: The agglomeration_demographics of this NoteworthyPartOfBuilding.  # noqa: E501
        :type agglomeration_demographics: List[object]
        :param calabrian_name: The calabrian_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type calabrian_name: List[str]
        :param type_coordinate: The type_coordinate of this NoteworthyPartOfBuilding.  # noqa: E501
        :type type_coordinate: List[str]
        :param touareg_settlement_name: The touareg_settlement_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type touareg_settlement_name: List[str]
        :param distance_to_belfast: The distance_to_belfast of this NoteworthyPartOfBuilding.  # noqa: E501
        :type distance_to_belfast: List[float]
        :param code_provincial_monument: The code_provincial_monument of this NoteworthyPartOfBuilding.  # noqa: E501
        :type code_provincial_monument: List[str]
        :param climate: The climate of this NoteworthyPartOfBuilding.  # noqa: E501
        :type climate: List[object]
        :param bourgmestre: The bourgmestre of this NoteworthyPartOfBuilding.  # noqa: E501
        :type bourgmestre: List[object]
        :param depth: The depth of this NoteworthyPartOfBuilding.  # noqa: E501
        :type depth: List[float]
        :param governing_body: The governing_body of this NoteworthyPartOfBuilding.  # noqa: E501
        :type governing_body: List[object]
        :param black_ski_piste_number: The black_ski_piste_number of this NoteworthyPartOfBuilding.  # noqa: E501
        :type black_ski_piste_number: List[int]
        :param protestant_percentage: The protestant_percentage of this NoteworthyPartOfBuilding.  # noqa: E501
        :type protestant_percentage: List[str]
        :param related_places: The related_places of this NoteworthyPartOfBuilding.  # noqa: E501
        :type related_places: List[object]
        :param zip_code: The zip_code of this NoteworthyPartOfBuilding.  # noqa: E501
        :type zip_code: List[str]
        :param fauna: The fauna of this NoteworthyPartOfBuilding.  # noqa: E501
        :type fauna: List[str]
        :param year_of_construction: The year_of_construction of this NoteworthyPartOfBuilding.  # noqa: E501
        :type year_of_construction: List[str]
        :param subsystem: The subsystem of this NoteworthyPartOfBuilding.  # noqa: E501
        :type subsystem: List[str]
        :param historical_region: The historical_region of this NoteworthyPartOfBuilding.  # noqa: E501
        :type historical_region: List[str]
        :param international_phone_prefix_label: The international_phone_prefix_label of this NoteworthyPartOfBuilding.  # noqa: E501
        :type international_phone_prefix_label: List[str]
        :param minority: The minority of this NoteworthyPartOfBuilding.  # noqa: E501
        :type minority: List[object]
        :param frioulan_name: The frioulan_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type frioulan_name: List[str]
        :param reference: The reference of this NoteworthyPartOfBuilding.  # noqa: E501
        :type reference: List[str]
        :param code_land_registry: The code_land_registry of this NoteworthyPartOfBuilding.  # noqa: E501
        :type code_land_registry: List[str]
        :param distance_to_cardiff: The distance_to_cardiff of this NoteworthyPartOfBuilding.  # noqa: E501
        :type distance_to_cardiff: List[float]
        :param population_date: The population_date of this NoteworthyPartOfBuilding.  # noqa: E501
        :type population_date: List[str]
        :param dutch_name: The dutch_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type dutch_name: List[str]
        :param day: The day of this NoteworthyPartOfBuilding.  # noqa: E501
        :type day: List[str]
        :param sheading: The sheading of this NoteworthyPartOfBuilding.  # noqa: E501
        :type sheading: List[object]
        :param local_phone_prefix: The local_phone_prefix of this NoteworthyPartOfBuilding.  # noqa: E501
        :type local_phone_prefix: List[int]
        :param population_pct_women: The population_pct_women of this NoteworthyPartOfBuilding.  # noqa: E501
        :type population_pct_women: List[int]
        :param tree: The tree of this NoteworthyPartOfBuilding.  # noqa: E501
        :type tree: List[object]
        :param old_province: The old_province of this NoteworthyPartOfBuilding.  # noqa: E501
        :type old_province: List[object]
        :param vehicle_code: The vehicle_code of this NoteworthyPartOfBuilding.  # noqa: E501
        :type vehicle_code: List[str]
        :param water: The water of this NoteworthyPartOfBuilding.  # noqa: E501
        :type water: List[str]
        :param gross_domestic_product_nominal_per_capita: The gross_domestic_product_nominal_per_capita of this NoteworthyPartOfBuilding.  # noqa: E501
        :type gross_domestic_product_nominal_per_capita: List[object]
        :param association_of_local_government: The association_of_local_government of this NoteworthyPartOfBuilding.  # noqa: E501
        :type association_of_local_government: List[object]
        :param topic: The topic of this NoteworthyPartOfBuilding.  # noqa: E501
        :type topic: List[str]
        :param main_island: The main_island of this NoteworthyPartOfBuilding.  # noqa: E501
        :type main_island: List[object]
        :param maori_name: The maori_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type maori_name: List[str]
        :param istat: The istat of this NoteworthyPartOfBuilding.  # noqa: E501
        :type istat: List[str]
        :param minimum_area_quote: The minimum_area_quote of this NoteworthyPartOfBuilding.  # noqa: E501
        :type minimum_area_quote: List[str]
        :param altitude: The altitude of this NoteworthyPartOfBuilding.  # noqa: E501
        :type altitude: List[object]
        :param national_topographic_system_map_number: The national_topographic_system_map_number of this NoteworthyPartOfBuilding.  # noqa: E501
        :type national_topographic_system_map_number: List[str]
        :param budget_year: The budget_year of this NoteworthyPartOfBuilding.  # noqa: E501
        :type budget_year: List[str]
        :param gini_coefficient_as_of: The gini_coefficient_as_of of this NoteworthyPartOfBuilding.  # noqa: E501
        :type gini_coefficient_as_of: List[str]
        :param scale: The scale of this NoteworthyPartOfBuilding.  # noqa: E501
        :type scale: List[str]
        :param long_distance_piste_kilometre: The long_distance_piste_kilometre of this NoteworthyPartOfBuilding.  # noqa: E501
        :type long_distance_piste_kilometre: List[float]
        :param building_start_year: The building_start_year of this NoteworthyPartOfBuilding.  # noqa: E501
        :type building_start_year: List[str]
        :param sub_prefecture: The sub_prefecture of this NoteworthyPartOfBuilding.  # noqa: E501
        :type sub_prefecture: List[str]
        :param snow_park_number: The snow_park_number of this NoteworthyPartOfBuilding.  # noqa: E501
        :type snow_park_number: List[int]
        :param luxembourgish_name: The luxembourgish_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type luxembourgish_name: List[str]
        :param area_total: The area_total of this NoteworthyPartOfBuilding.  # noqa: E501
        :type area_total: List[object]
        :param population_total_reference: The population_total_reference of this NoteworthyPartOfBuilding.  # noqa: E501
        :type population_total_reference: List[object]
        :param length_quote: The length_quote of this NoteworthyPartOfBuilding.  # noqa: E501
        :type length_quote: List[str]
        :param relief: The relief of this NoteworthyPartOfBuilding.  # noqa: E501
        :type relief: List[str]
        :param census_year: The census_year of this NoteworthyPartOfBuilding.  # noqa: E501
        :type census_year: List[str]
        :param visitors_per_year: The visitors_per_year of this NoteworthyPartOfBuilding.  # noqa: E501
        :type visitors_per_year: List[int]
        :param ladin_name: The ladin_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type ladin_name: List[str]
        :param subdivision_link: The subdivision_link of this NoteworthyPartOfBuilding.  # noqa: E501
        :type subdivision_link: List[str]
        :param cost: The cost of this NoteworthyPartOfBuilding.  # noqa: E501
        :type cost: List[float]
        :param operated_by: The operated_by of this NoteworthyPartOfBuilding.  # noqa: E501
        :type operated_by: List[object]
        :param mozabite_name: The mozabite_name of this NoteworthyPartOfBuilding.  # noqa: E501
        :type mozabite_name: List[str]
        :param nearest_city: The nearest_city of this NoteworthyPartOfBuilding.  # noqa: E501
        :type nearest_city: List[object]
        :param subsystem_link: The subsystem_link of this NoteworthyPartOfBuilding.  # noqa: E501
        :type subsystem_link: List[str]
        :param whole_area: The whole_area of this NoteworthyPartOfBuilding.  # noqa: E501
        :type whole_area: List[object]
        :param delegation: The delegation of this NoteworthyPartOfBuilding.  # noqa: E501
        :type delegation: List[str]
        :param vice_leader: The vice_leader of this NoteworthyPartOfBuilding.  # noqa: E501
        :type vice_leader: List[object]
        :param demographics: The demographics of this NoteworthyPartOfBuilding.  # noqa: E501
        :type demographics: List[object]
        """


        self.openapi_types = {
            'city_type': List[str],
            'irish_name': List[str],
            'reff_bourgmestre': List[object],
            'community_iso_code': List[str],
            'anthem': List[object],
            'rank_agreement': List[int],
            'wilaya': List[object],
            'parliament': List[object],
            'moldavian_name': List[str],
            'rank_population': List[int],
            'quote': List[str],
            'initially_used_for': List[str],
            'commissioner_date': List[str],
            'demographics_as_of': List[str],
            'largest_settlement': List[object],
            'distance_to_london': List[float],
            'geoloc_dual': List[str],
            'distance_to_capital': List[float],
            'subregion': List[object],
            'sharing_out_area': List[str],
            'phone_prefix_name': List[str],
            'time_zone': List[object],
            'gross_domestic_product_as_of': List[str],
            'population': List[object],
            'senior': List[str],
            'human_development_index_rank': List[str],
            'population_rural': List[int],
            'gaelic_name': List[str],
            'area_total_ranking': List[int],
            'route': List[str],
            'leader_name': List[object],
            'principal_area': List[object],
            'plant': List[object],
            'green_long_distance_piste_number': List[int],
            'cannon_number': List[int],
            'purchasing_power_parity': List[str],
            'grid_reference': List[str],
            'barangays': List[str],
            'bioclimate': List[str],
            'dissolution_year': List[str],
            'patron_saint': List[object],
            'apskritis': List[str],
            'area_of_catchment_quote': List[str],
            'sea': List[object],
            'life_expectancy': List[str],
            'tamazight_name': List[str],
            'ski_lift': List[int],
            'insee_code': List[int],
            'governorate': List[str],
            'region_link': List[str],
            'vice_leader_party': List[object],
            'political_seats': List[int],
            'artificial_snow_area': List[float],
            'located_in_area': List[object],
            'saint': List[object],
            'gnl': List[str],
            'licence_number': List[str],
            'map_description': List[str],
            'infant_mortality': List[float],
            'area_metro': List[object],
            'number_of_cantons': List[int],
            'information_name': List[str],
            'information': List[str],
            'river': List[object],
            'ethnic_group': List[object],
            'heritage_register': List[object],
            'subdivisions': List[int],
            'refcul': List[str],
            'italian_name': List[str],
            'dissolution_date': List[str],
            'building_end_year': List[str],
            'ist': List[str],
            'geoloc_department': List[object],
            'borough': List[object],
            'official_name': List[str],
            'maximum_elevation': List[float],
            'colonial_name': List[str],
            'named_by_language': List[object],
            'volume_quote': List[str],
            'province_link': List[object],
            'parish': List[object],
            'old_name': List[str],
            'bird': List[object],
            'president_general_council_mandate': List[str],
            'regional_prefecture': List[str],
            'term_of_office': List[str],
            'code_settlement': List[str],
            'winter_temperature': List[float],
            'construction_material': List[object],
            'commissioner': List[str],
            'refpol': List[str],
            'number_of_counties': List[int],
            'area': List[object],
            'population_quote': List[str],
            'biggest_city': List[object],
            'nis_code': List[object],
            'other_information': List[str],
            'opening_year': List[str],
            'area_code': List[str],
            'average_depth_quote': List[str],
            'geologic_period': List[str],
            'coast_line': List[float],
            'unitary_authority': List[object],
            'area_land': List[float],
            'population_metro_density': List[object],
            'previous_population': List[object],
            'iso_code_region': List[object],
            'gini_coefficient': List[float],
            'neighbour_region': List[str],
            'event_date': List[str],
            'income': List[str],
            'touristic_site': List[object],
            'next_entity': List[object],
            'political_majority': List[object],
            'area_quote': List[str],
            'ski_tow': List[int],
            'international_phone_prefix': List[str],
            'largest_metro': List[object],
            'gagaouze': List[str],
            'label': List[str],
            'iso_code': List[str],
            'finnish_name': List[str],
            'width_quote': List[str],
            'agglomeration_population_year': List[str],
            'daylight_saving_time_zone': List[object],
            'long_distance_piste_number': List[int],
            'political_leader': List[object],
            'same_name': List[str],
            'agglomeration': List[object],
            'red_long_distance_piste_number': List[int],
            'area_water': List[float],
            'currently_used_for': List[str],
            'output': List[float],
            'previous_demographics': List[object],
            'region_type': List[str],
            'police_name': List[str],
            'neighboring_municipality': List[object],
            'population_pct_children': List[int],
            'id': str,
            'distance_to_charing_cross': List[float],
            'lieutenancy': List[str],
            'delegate_mayor': List[object],
            'rebuilding_year': List[str],
            'minimum_elevation': List[float],
            'number_of_capital_deputies': List[int],
            'ceremonial_county': List[object],
            'scotish_name': List[str],
            'watercourse': List[str],
            'metropolitan_borough': List[object],
            'coast_length': List[float],
            'joint_community': List[object],
            'ekatte_code': List[str],
            'per_capita_income': List[float],
            'settlement': List[object],
            'sharing_out_population_year': List[str],
            'foundation_date': List[str],
            'maximum_depth': List[float],
            'teryt_code': List[object],
            'demolition_year': List[str],
            'smallest_country': List[object],
            'algerian_name': List[str],
            'map': List[object],
            'localization_thumbnail_caption': List[str],
            'unlc_code': List[str],
            'sicilian_name': List[str],
            'department_position': List[str],
            'population_pct_men': List[int],
            'law_country': List[str],
            'summer_temperature': List[float],
            'area_date': List[str],
            'kind_of_coordinate': List[str],
            'black_long_distance_piste_number': List[int],
            'water_area': List[float],
            'frontier_length': List[float],
            'tamazight_settlement_name': List[str],
            'reopening_date': List[str],
            'okato_code': List[str],
            'disappearance_date': List[str],
            'population_urban_density': List[object],
            'largest_country': List[object],
            'phone_prefix': List[int],
            'capital': List[object],
            'status_year': List[str],
            'flora': List[str],
            'agglomeration_area': List[object],
            'cornish_name': List[str],
            'largest_city': List[object],
            'licence_number_label': List[str],
            'limit': List[str],
            'scots_name': List[str],
            'refgeo': List[str],
            'refgen': List[str],
            'population_as_of': List[str],
            'different': List[str],
            'emblem': List[str],
            'representative': List[int],
            'maximum_area_quote': List[str],
            'utc_offset': List[str],
            'pluviometry': List[str],
            'german_name': List[str],
            'per_capita_income_rank': List[str],
            'ski_piste_kilometre': List[float],
            'distance_to_edinburgh': List[float],
            'minimum_area': List[str],
            'municipality_code': List[str],
            'population_rural_density': List[float],
            'kabyle_name': List[str],
            'red_ski_piste_number': List[int],
            'other_name': List[str],
            'welsh_name': List[str],
            'lake': List[object],
            'collectivity_minority': List[object],
            'regional_language': List[object],
            'chaoui_name': List[str],
            'english_name': List[str],
            'county_seat': List[object],
            'purchasing_power_parity_year': List[str],
            'lieutenancy_area': List[object],
            'historical_map': List[str],
            'people_name': List[str],
            'regency': List[object],
            'code_municipal_monument': List[str],
            'architectural_style': List[object],
            'purchasing_power_parity_rank': List[str],
            'depth_quote': List[str],
            'reopening_year': List[str],
            'avifauna_population': List[str],
            'construction': List[object],
            'land': List[object],
            'sharing_out': List[str],
            'department': List[object],
            'opening_date': List[str],
            'other_language': List[str],
            'ofs_code': List[str],
            'elevation': List[float],
            'endangered_since': List[str],
            'rank_area': List[int],
            'prov_code': List[str],
            'visitors_percentage_change': List[float],
            'merger_date': List[str],
            'seniunija': List[str],
            'rebuilding_date': List[str],
            'city_since': List[str],
            'nuts_code': List[str],
            'authority_mandate': List[str],
            'gnis_code': List[str],
            'deme': List[str],
            'maximum_depth_quote': List[str],
            'canton': List[object],
            'province_iso_code': List[str],
            'human_development_index_ranking_category': List[object],
            'nation': List[str],
            'arrondissement': List[object],
            'french_name': List[str],
            'supply': List[object],
            'agglomeration_population': List[object],
            'green_ski_piste_number': List[int],
            'province': List[object],
            'meaning': List[str],
            'leader_party': List[object],
            'population_total_ranking': List[int],
            'twin_city': List[object],
            'sharing_out_population': List[int],
            'piscicultural_population': List[str],
            'distance_to_dublin': List[float],
            'sharing_out_name': List[object],
            'land_percentage': List[float],
            'visitors_total': List[int],
            'population_year': List[str],
            'administrative_collectivity': List[object],
            'per_capita_income_as_of': List[str],
            'architectual_bureau': List[object],
            'circle': List[str],
            'occitan_name': List[str],
            'blue_long_distance_piste_number': List[int],
            'building_start_date': List[str],
            'algerian_settlement_name': List[str],
            'gross_domestic_product_purchasing_power_parity_per_capita': List[object],
            'date_agreement': List[str],
            'frazioni': List[object],
            'mayor_article': List[str],
            'iso31661_code': List[str],
            'simc_code': List[object],
            'council_area': List[object],
            'unesco': List[object],
            'gross_domestic_product': List[object],
            'gross_domestic_product_rank': List[str],
            'distance_to_douglas': List[float],
            'visitor_statistics_as_of': List[str],
            'number_of_municipalities': List[int],
            'coordinates': List[str],
            'gini_coefficient_ranking': List[int],
            'highest_point': List[object],
            'flower': List[object],
            'hra_state': List[str],
            'depths': List[object],
            'cca_state': List[str],
            'politic_government_department': List[object],
            'currency_code': List[str],
            'tu': List[str],
            'population_metro': List[int],
            'climb_up_number': List[int],
            'founding_person': List[object],
            'postal_code': List[str],
            'land_area': List[float],
            'code_national_monument': List[str],
            'originally_used_for': List[str],
            'president_regional_council_mandate': List[str],
            'retention_time': List[str],
            'gini_coefficient_category': List[object],
            'sardinian_name': List[str],
            'features': List[object],
            'forester_district': List[object],
            'illiteracy': List[float],
            'gross_domestic_product_per_people': List[str],
            'kind_of_rock': List[str],
            'arberisht_name': List[str],
            'manx_name': List[str],
            'protection_status': List[str],
            'fips_code': List[str],
            'greek_name': List[str],
            'population_density': List[object],
            'elevation_quote': List[str],
            'outskirts': List[str],
            'area_urban': List[object],
            'unlo_code': List[str],
            'district': List[object],
            'merged_settlement': List[object],
            'parliament_type': List[str],
            'previous_entity': List[object],
            'federal_state': List[object],
            'maximum_area': List[str],
            'demolition_date': List[str],
            'population_urban': List[int],
            'scottish_name': List[str],
            'sovereign_country': List[object],
            'phone_prefix_label': List[str],
            'official_language': List[object],
            'previous_population_total': List[int],
            'commune': List[object],
            'annual_temperature': List[float],
            'description': List[str],
            'number_of_state_deputies': List[int],
            'average_depth': List[str],
            'arabic_name': List[str],
            'ski_piste_number': List[int],
            'subdivision': List[object],
            'human_development_index': List[object],
            'alemmanic_name': List[str],
            'human_development_index_as_of': List[str],
            'capital_coordinates': List[str],
            'touareg_name': List[str],
            'administrative_head_city': List[object],
            'maintained_by': List[object],
            'visitors_per_day': List[int],
            'kanji_name': List[str],
            'blue_ski_piste_number': List[int],
            'historical_name': List[str],
            'area_rank': List[str],
            'first_mention': List[str],
            'localization_thumbnail': List[object],
            'cable_car': List[int],
            'administrative_district': List[object],
            'type': List[str],
            'linked_space': List[str],
            'lowest_point': List[object],
            'daira': List[object],
            'number_of_island': List[str],
            'cyrillique_name': List[str],
            'catholic_percentage': List[str],
            'old_district': List[object],
            'area_rural': List[float],
            'water_percentage': List[float],
            'lowest': List[str],
            'sharing_out_population_name': List[str],
            'building_end_date': List[str],
            'number_of_federal_deputies': List[int],
            'map_caption': List[str],
            'previous_name': List[str],
            'city_link': List[str],
            'architect': List[object],
            'leader_title': List[str],
            'foundation': List[str],
            'agglomeration_demographics': List[object],
            'calabrian_name': List[str],
            'type_coordinate': List[str],
            'touareg_settlement_name': List[str],
            'distance_to_belfast': List[float],
            'code_provincial_monument': List[str],
            'climate': List[object],
            'bourgmestre': List[object],
            'depth': List[float],
            'governing_body': List[object],
            'black_ski_piste_number': List[int],
            'protestant_percentage': List[str],
            'related_places': List[object],
            'zip_code': List[str],
            'fauna': List[str],
            'year_of_construction': List[str],
            'subsystem': List[str],
            'historical_region': List[str],
            'international_phone_prefix_label': List[str],
            'minority': List[object],
            'frioulan_name': List[str],
            'reference': List[str],
            'code_land_registry': List[str],
            'distance_to_cardiff': List[float],
            'population_date': List[str],
            'dutch_name': List[str],
            'day': List[str],
            'sheading': List[object],
            'local_phone_prefix': List[int],
            'population_pct_women': List[int],
            'tree': List[object],
            'old_province': List[object],
            'vehicle_code': List[str],
            'water': List[str],
            'gross_domestic_product_nominal_per_capita': List[object],
            'association_of_local_government': List[object],
            'topic': List[str],
            'main_island': List[object],
            'maori_name': List[str],
            'istat': List[str],
            'minimum_area_quote': List[str],
            'altitude': List[object],
            'national_topographic_system_map_number': List[str],
            'budget_year': List[str],
            'gini_coefficient_as_of': List[str],
            'scale': List[str],
            'long_distance_piste_kilometre': List[float],
            'building_start_year': List[str],
            'sub_prefecture': List[str],
            'snow_park_number': List[int],
            'luxembourgish_name': List[str],
            'area_total': List[object],
            'population_total_reference': List[object],
            'length_quote': List[str],
            'relief': List[str],
            'census_year': List[str],
            'visitors_per_year': List[int],
            'ladin_name': List[str],
            'subdivision_link': List[str],
            'cost': List[float],
            'operated_by': List[object],
            'mozabite_name': List[str],
            'nearest_city': List[object],
            'subsystem_link': List[str],
            'whole_area': List[object],
            'delegation': List[str],
            'vice_leader': List[object],
            'demographics': List[object]
        }

        self.attribute_map = {
            'city_type': 'cityType',
            'irish_name': 'irishName',
            'reff_bourgmestre': 'reffBourgmestre',
            'community_iso_code': 'communityIsoCode',
            'anthem': 'anthem',
            'rank_agreement': 'rankAgreement',
            'wilaya': 'wilaya',
            'parliament': 'parliament',
            'moldavian_name': 'moldavianName',
            'rank_population': 'rankPopulation',
            'quote': 'quote',
            'initially_used_for': 'initiallyUsedFor',
            'commissioner_date': 'commissionerDate',
            'demographics_as_of': 'demographicsAsOf',
            'largest_settlement': 'largestSettlement',
            'distance_to_london': 'distanceToLondon',
            'geoloc_dual': 'geolocDual',
            'distance_to_capital': 'distanceToCapital',
            'subregion': 'subregion',
            'sharing_out_area': 'sharingOutArea',
            'phone_prefix_name': 'phonePrefixName',
            'time_zone': 'timeZone',
            'gross_domestic_product_as_of': 'grossDomesticProductAsOf',
            'population': 'population',
            'senior': 'senior',
            'human_development_index_rank': 'humanDevelopmentIndexRank',
            'population_rural': 'populationRural',
            'gaelic_name': 'gaelicName',
            'area_total_ranking': 'areaTotalRanking',
            'route': 'route',
            'leader_name': 'leaderName',
            'principal_area': 'principalArea',
            'plant': 'plant',
            'green_long_distance_piste_number': 'greenLongDistancePisteNumber',
            'cannon_number': 'cannonNumber',
            'purchasing_power_parity': 'purchasingPowerParity',
            'grid_reference': 'gridReference',
            'barangays': 'barangays',
            'bioclimate': 'bioclimate',
            'dissolution_year': 'dissolutionYear',
            'patron_saint': 'patronSaint',
            'apskritis': 'apskritis',
            'area_of_catchment_quote': 'areaOfCatchmentQuote',
            'sea': 'sea',
            'life_expectancy': 'lifeExpectancy',
            'tamazight_name': 'tamazightName',
            'ski_lift': 'skiLift',
            'insee_code': 'inseeCode',
            'governorate': 'governorate',
            'region_link': 'regionLink',
            'vice_leader_party': 'viceLeaderParty',
            'political_seats': 'politicalSeats',
            'artificial_snow_area': 'artificialSnowArea',
            'located_in_area': 'locatedInArea',
            'saint': 'saint',
            'gnl': 'gnl',
            'licence_number': 'licenceNumber',
            'map_description': 'mapDescription',
            'infant_mortality': 'infantMortality',
            'area_metro': 'areaMetro',
            'number_of_cantons': 'numberOfCantons',
            'information_name': 'informationName',
            'information': 'information',
            'river': 'river',
            'ethnic_group': 'ethnicGroup',
            'heritage_register': 'heritageRegister',
            'subdivisions': 'subdivisions',
            'refcul': 'refcul',
            'italian_name': 'italianName',
            'dissolution_date': 'dissolutionDate',
            'building_end_year': 'buildingEndYear',
            'ist': 'ist',
            'geoloc_department': 'geolocDepartment',
            'borough': 'borough',
            'official_name': 'officialName',
            'maximum_elevation': 'maximumElevation',
            'colonial_name': 'colonialName',
            'named_by_language': 'namedByLanguage',
            'volume_quote': 'volumeQuote',
            'province_link': 'provinceLink',
            'parish': 'parish',
            'old_name': 'oldName',
            'bird': 'bird',
            'president_general_council_mandate': 'presidentGeneralCouncilMandate',
            'regional_prefecture': 'regionalPrefecture',
            'term_of_office': 'termOfOffice',
            'code_settlement': 'codeSettlement',
            'winter_temperature': 'winterTemperature',
            'construction_material': 'constructionMaterial',
            'commissioner': 'commissioner',
            'refpol': 'refpol',
            'number_of_counties': 'numberOfCounties',
            'area': 'area',
            'population_quote': 'populationQuote',
            'biggest_city': 'biggestCity',
            'nis_code': 'nisCode',
            'other_information': 'otherInformation',
            'opening_year': 'openingYear',
            'area_code': 'areaCode',
            'average_depth_quote': 'averageDepthQuote',
            'geologic_period': 'geologicPeriod',
            'coast_line': 'coastLine',
            'unitary_authority': 'unitaryAuthority',
            'area_land': 'areaLand',
            'population_metro_density': 'populationMetroDensity',
            'previous_population': 'previousPopulation',
            'iso_code_region': 'isoCodeRegion',
            'gini_coefficient': 'giniCoefficient',
            'neighbour_region': 'neighbourRegion',
            'event_date': 'eventDate',
            'income': 'income',
            'touristic_site': 'touristicSite',
            'next_entity': 'nextEntity',
            'political_majority': 'politicalMajority',
            'area_quote': 'areaQuote',
            'ski_tow': 'skiTow',
            'international_phone_prefix': 'internationalPhonePrefix',
            'largest_metro': 'largestMetro',
            'gagaouze': 'gagaouze',
            'label': 'label',
            'iso_code': 'isoCode',
            'finnish_name': 'finnishName',
            'width_quote': 'widthQuote',
            'agglomeration_population_year': 'agglomerationPopulationYear',
            'daylight_saving_time_zone': 'daylightSavingTimeZone',
            'long_distance_piste_number': 'longDistancePisteNumber',
            'political_leader': 'politicalLeader',
            'same_name': 'sameName',
            'agglomeration': 'agglomeration',
            'red_long_distance_piste_number': 'redLongDistancePisteNumber',
            'area_water': 'areaWater',
            'currently_used_for': 'currentlyUsedFor',
            'output': 'output',
            'previous_demographics': 'previousDemographics',
            'region_type': 'regionType',
            'police_name': 'policeName',
            'neighboring_municipality': 'neighboringMunicipality',
            'population_pct_children': 'populationPctChildren',
            'id': 'id',
            'distance_to_charing_cross': 'distanceToCharingCross',
            'lieutenancy': 'lieutenancy',
            'delegate_mayor': 'delegateMayor',
            'rebuilding_year': 'rebuildingYear',
            'minimum_elevation': 'minimumElevation',
            'number_of_capital_deputies': 'numberOfCapitalDeputies',
            'ceremonial_county': 'ceremonialCounty',
            'scotish_name': 'scotishName',
            'watercourse': 'watercourse',
            'metropolitan_borough': 'metropolitanBorough',
            'coast_length': 'coastLength',
            'joint_community': 'jointCommunity',
            'ekatte_code': 'ekatteCode',
            'per_capita_income': 'perCapitaIncome',
            'settlement': 'settlement',
            'sharing_out_population_year': 'sharingOutPopulationYear',
            'foundation_date': 'foundationDate',
            'maximum_depth': 'maximumDepth',
            'teryt_code': 'terytCode',
            'demolition_year': 'demolitionYear',
            'smallest_country': 'smallestCountry',
            'algerian_name': 'algerianName',
            'map': 'map',
            'localization_thumbnail_caption': 'localizationThumbnailCaption',
            'unlc_code': 'unlcCode',
            'sicilian_name': 'sicilianName',
            'department_position': 'departmentPosition',
            'population_pct_men': 'populationPctMen',
            'law_country': 'lawCountry',
            'summer_temperature': 'summerTemperature',
            'area_date': 'areaDate',
            'kind_of_coordinate': 'kindOfCoordinate',
            'black_long_distance_piste_number': 'blackLongDistancePisteNumber',
            'water_area': 'waterArea',
            'frontier_length': 'frontierLength',
            'tamazight_settlement_name': 'tamazightSettlementName',
            'reopening_date': 'reopeningDate',
            'okato_code': 'okatoCode',
            'disappearance_date': 'disappearanceDate',
            'population_urban_density': 'populationUrbanDensity',
            'largest_country': 'largestCountry',
            'phone_prefix': 'phonePrefix',
            'capital': 'capital',
            'status_year': 'statusYear',
            'flora': 'flora',
            'agglomeration_area': 'agglomerationArea',
            'cornish_name': 'cornishName',
            'largest_city': 'largestCity',
            'licence_number_label': 'licenceNumberLabel',
            'limit': 'limit',
            'scots_name': 'scotsName',
            'refgeo': 'refgeo',
            'refgen': 'refgen',
            'population_as_of': 'populationAsOf',
            'different': 'different',
            'emblem': 'emblem',
            'representative': 'representative',
            'maximum_area_quote': 'maximumAreaQuote',
            'utc_offset': 'utcOffset',
            'pluviometry': 'pluviometry',
            'german_name': 'germanName',
            'per_capita_income_rank': 'perCapitaIncomeRank',
            'ski_piste_kilometre': 'skiPisteKilometre',
            'distance_to_edinburgh': 'distanceToEdinburgh',
            'minimum_area': 'minimumArea',
            'municipality_code': 'municipalityCode',
            'population_rural_density': 'populationRuralDensity',
            'kabyle_name': 'kabyleName',
            'red_ski_piste_number': 'redSkiPisteNumber',
            'other_name': 'otherName',
            'welsh_name': 'welshName',
            'lake': 'lake',
            'collectivity_minority': 'collectivityMinority',
            'regional_language': 'regionalLanguage',
            'chaoui_name': 'chaouiName',
            'english_name': 'englishName',
            'county_seat': 'countySeat',
            'purchasing_power_parity_year': 'purchasingPowerParityYear',
            'lieutenancy_area': 'lieutenancyArea',
            'historical_map': 'historicalMap',
            'people_name': 'peopleName',
            'regency': 'regency',
            'code_municipal_monument': 'codeMunicipalMonument',
            'architectural_style': 'architecturalStyle',
            'purchasing_power_parity_rank': 'purchasingPowerParityRank',
            'depth_quote': 'depthQuote',
            'reopening_year': 'reopeningYear',
            'avifauna_population': 'avifaunaPopulation',
            'construction': 'construction',
            'land': 'land',
            'sharing_out': 'sharingOut',
            'department': 'department',
            'opening_date': 'openingDate',
            'other_language': 'otherLanguage',
            'ofs_code': 'ofsCode',
            'elevation': 'elevation',
            'endangered_since': 'endangeredSince',
            'rank_area': 'rankArea',
            'prov_code': 'provCode',
            'visitors_percentage_change': 'visitorsPercentageChange',
            'merger_date': 'mergerDate',
            'seniunija': 'seniunija',
            'rebuilding_date': 'rebuildingDate',
            'city_since': 'citySince',
            'nuts_code': 'nutsCode',
            'authority_mandate': 'authorityMandate',
            'gnis_code': 'gnisCode',
            'deme': 'deme',
            'maximum_depth_quote': 'maximumDepthQuote',
            'canton': 'canton',
            'province_iso_code': 'provinceIsoCode',
            'human_development_index_ranking_category': 'humanDevelopmentIndexRankingCategory',
            'nation': 'nation',
            'arrondissement': 'arrondissement',
            'french_name': 'frenchName',
            'supply': 'supply',
            'agglomeration_population': 'agglomerationPopulation',
            'green_ski_piste_number': 'greenSkiPisteNumber',
            'province': 'province',
            'meaning': 'meaning',
            'leader_party': 'leaderParty',
            'population_total_ranking': 'populationTotalRanking',
            'twin_city': 'twinCity',
            'sharing_out_population': 'sharingOutPopulation',
            'piscicultural_population': 'pisciculturalPopulation',
            'distance_to_dublin': 'distanceToDublin',
            'sharing_out_name': 'sharingOutName',
            'land_percentage': 'landPercentage',
            'visitors_total': 'visitorsTotal',
            'population_year': 'populationYear',
            'administrative_collectivity': 'administrativeCollectivity',
            'per_capita_income_as_of': 'perCapitaIncomeAsOf',
            'architectual_bureau': 'architectualBureau',
            'circle': 'circle',
            'occitan_name': 'occitanName',
            'blue_long_distance_piste_number': 'blueLongDistancePisteNumber',
            'building_start_date': 'buildingStartDate',
            'algerian_settlement_name': 'algerianSettlementName',
            'gross_domestic_product_purchasing_power_parity_per_capita': 'grossDomesticProductPurchasingPowerParityPerCapita',
            'date_agreement': 'dateAgreement',
            'frazioni': 'frazioni',
            'mayor_article': 'mayorArticle',
            'iso31661_code': 'iso31661Code',
            'simc_code': 'simcCode',
            'council_area': 'councilArea',
            'unesco': 'unesco',
            'gross_domestic_product': 'grossDomesticProduct',
            'gross_domestic_product_rank': 'grossDomesticProductRank',
            'distance_to_douglas': 'distanceToDouglas',
            'visitor_statistics_as_of': 'visitorStatisticsAsOf',
            'number_of_municipalities': 'numberOfMunicipalities',
            'coordinates': 'coordinates',
            'gini_coefficient_ranking': 'giniCoefficientRanking',
            'highest_point': 'highestPoint',
            'flower': 'flower',
            'hra_state': 'hraState',
            'depths': 'depths',
            'cca_state': 'ccaState',
            'politic_government_department': 'politicGovernmentDepartment',
            'currency_code': 'currencyCode',
            'tu': 'tu',
            'population_metro': 'populationMetro',
            'climb_up_number': 'climbUpNumber',
            'founding_person': 'foundingPerson',
            'postal_code': 'postalCode',
            'land_area': 'landArea',
            'code_national_monument': 'codeNationalMonument',
            'originally_used_for': 'originallyUsedFor',
            'president_regional_council_mandate': 'presidentRegionalCouncilMandate',
            'retention_time': 'retentionTime',
            'gini_coefficient_category': 'giniCoefficientCategory',
            'sardinian_name': 'sardinianName',
            'features': 'features',
            'forester_district': 'foresterDistrict',
            'illiteracy': 'illiteracy',
            'gross_domestic_product_per_people': 'grossDomesticProductPerPeople',
            'kind_of_rock': 'kindOfRock',
            'arberisht_name': 'arberishtName',
            'manx_name': 'manxName',
            'protection_status': 'protectionStatus',
            'fips_code': 'fipsCode',
            'greek_name': 'greekName',
            'population_density': 'populationDensity',
            'elevation_quote': 'elevationQuote',
            'outskirts': 'outskirts',
            'area_urban': 'areaUrban',
            'unlo_code': 'unloCode',
            'district': 'district',
            'merged_settlement': 'mergedSettlement',
            'parliament_type': 'parliamentType',
            'previous_entity': 'previousEntity',
            'federal_state': 'federalState',
            'maximum_area': 'maximumArea',
            'demolition_date': 'demolitionDate',
            'population_urban': 'populationUrban',
            'scottish_name': 'scottishName',
            'sovereign_country': 'sovereignCountry',
            'phone_prefix_label': 'phonePrefixLabel',
            'official_language': 'officialLanguage',
            'previous_population_total': 'previousPopulationTotal',
            'commune': 'commune',
            'annual_temperature': 'annualTemperature',
            'description': 'description',
            'number_of_state_deputies': 'numberOfStateDeputies',
            'average_depth': 'averageDepth',
            'arabic_name': 'arabicName',
            'ski_piste_number': 'skiPisteNumber',
            'subdivision': 'subdivision',
            'human_development_index': 'humanDevelopmentIndex',
            'alemmanic_name': 'alemmanicName',
            'human_development_index_as_of': 'humanDevelopmentIndexAsOf',
            'capital_coordinates': 'capitalCoordinates',
            'touareg_name': 'touaregName',
            'administrative_head_city': 'administrativeHeadCity',
            'maintained_by': 'maintainedBy',
            'visitors_per_day': 'visitorsPerDay',
            'kanji_name': 'kanjiName',
            'blue_ski_piste_number': 'blueSkiPisteNumber',
            'historical_name': 'historicalName',
            'area_rank': 'areaRank',
            'first_mention': 'firstMention',
            'localization_thumbnail': 'localizationThumbnail',
            'cable_car': 'cableCar',
            'administrative_district': 'administrativeDistrict',
            'type': 'type',
            'linked_space': 'linkedSpace',
            'lowest_point': 'lowestPoint',
            'daira': 'daira',
            'number_of_island': 'numberOfIsland',
            'cyrillique_name': 'cyrilliqueName',
            'catholic_percentage': 'catholicPercentage',
            'old_district': 'oldDistrict',
            'area_rural': 'areaRural',
            'water_percentage': 'waterPercentage',
            'lowest': 'lowest',
            'sharing_out_population_name': 'sharingOutPopulationName',
            'building_end_date': 'buildingEndDate',
            'number_of_federal_deputies': 'numberOfFederalDeputies',
            'map_caption': 'mapCaption',
            'previous_name': 'previousName',
            'city_link': 'cityLink',
            'architect': 'architect',
            'leader_title': 'leaderTitle',
            'foundation': 'foundation',
            'agglomeration_demographics': 'agglomerationDemographics',
            'calabrian_name': 'calabrianName',
            'type_coordinate': 'typeCoordinate',
            'touareg_settlement_name': 'touaregSettlementName',
            'distance_to_belfast': 'distanceToBelfast',
            'code_provincial_monument': 'codeProvincialMonument',
            'climate': 'climate',
            'bourgmestre': 'bourgmestre',
            'depth': 'depth',
            'governing_body': 'governingBody',
            'black_ski_piste_number': 'blackSkiPisteNumber',
            'protestant_percentage': 'protestantPercentage',
            'related_places': 'relatedPlaces',
            'zip_code': 'zipCode',
            'fauna': 'fauna',
            'year_of_construction': 'yearOfConstruction',
            'subsystem': 'subsystem',
            'historical_region': 'historicalRegion',
            'international_phone_prefix_label': 'internationalPhonePrefixLabel',
            'minority': 'minority',
            'frioulan_name': 'frioulanName',
            'reference': 'reference',
            'code_land_registry': 'codeLandRegistry',
            'distance_to_cardiff': 'distanceToCardiff',
            'population_date': 'populationDate',
            'dutch_name': 'dutchName',
            'day': 'day',
            'sheading': 'sheading',
            'local_phone_prefix': 'localPhonePrefix',
            'population_pct_women': 'populationPctWomen',
            'tree': 'tree',
            'old_province': 'oldProvince',
            'vehicle_code': 'vehicleCode',
            'water': 'water',
            'gross_domestic_product_nominal_per_capita': 'grossDomesticProductNominalPerCapita',
            'association_of_local_government': 'associationOfLocalGovernment',
            'topic': 'topic',
            'main_island': 'mainIsland',
            'maori_name': 'maoriName',
            'istat': 'istat',
            'minimum_area_quote': 'minimumAreaQuote',
            'altitude': 'altitude',
            'national_topographic_system_map_number': 'nationalTopographicSystemMapNumber',
            'budget_year': 'budgetYear',
            'gini_coefficient_as_of': 'giniCoefficientAsOf',
            'scale': 'scale',
            'long_distance_piste_kilometre': 'longDistancePisteKilometre',
            'building_start_year': 'buildingStartYear',
            'sub_prefecture': 'subPrefecture',
            'snow_park_number': 'snowParkNumber',
            'luxembourgish_name': 'luxembourgishName',
            'area_total': 'areaTotal',
            'population_total_reference': 'populationTotalReference',
            'length_quote': 'lengthQuote',
            'relief': 'relief',
            'census_year': 'censusYear',
            'visitors_per_year': 'visitorsPerYear',
            'ladin_name': 'ladinName',
            'subdivision_link': 'subdivisionLink',
            'cost': 'cost',
            'operated_by': 'operatedBy',
            'mozabite_name': 'mozabiteName',
            'nearest_city': 'nearestCity',
            'subsystem_link': 'subsystemLink',
            'whole_area': 'wholeArea',
            'delegation': 'delegation',
            'vice_leader': 'viceLeader',
            'demographics': 'demographics'
        }

        self._city_type = city_type
        self._irish_name = irish_name
        self._reff_bourgmestre = reff_bourgmestre
        self._community_iso_code = community_iso_code
        self._anthem = anthem
        self._rank_agreement = rank_agreement
        self._wilaya = wilaya
        self._parliament = parliament
        self._moldavian_name = moldavian_name
        self._rank_population = rank_population
        self._quote = quote
        self._initially_used_for = initially_used_for
        self._commissioner_date = commissioner_date
        self._demographics_as_of = demographics_as_of
        self._largest_settlement = largest_settlement
        self._distance_to_london = distance_to_london
        self._geoloc_dual = geoloc_dual
        self._distance_to_capital = distance_to_capital
        self._subregion = subregion
        self._sharing_out_area = sharing_out_area
        self._phone_prefix_name = phone_prefix_name
        self._time_zone = time_zone
        self._gross_domestic_product_as_of = gross_domestic_product_as_of
        self._population = population
        self._senior = senior
        self._human_development_index_rank = human_development_index_rank
        self._population_rural = population_rural
        self._gaelic_name = gaelic_name
        self._area_total_ranking = area_total_ranking
        self._route = route
        self._leader_name = leader_name
        self._principal_area = principal_area
        self._plant = plant
        self._green_long_distance_piste_number = green_long_distance_piste_number
        self._cannon_number = cannon_number
        self._purchasing_power_parity = purchasing_power_parity
        self._grid_reference = grid_reference
        self._barangays = barangays
        self._bioclimate = bioclimate
        self._dissolution_year = dissolution_year
        self._patron_saint = patron_saint
        self._apskritis = apskritis
        self._area_of_catchment_quote = area_of_catchment_quote
        self._sea = sea
        self._life_expectancy = life_expectancy
        self._tamazight_name = tamazight_name
        self._ski_lift = ski_lift
        self._insee_code = insee_code
        self._governorate = governorate
        self._region_link = region_link
        self._vice_leader_party = vice_leader_party
        self._political_seats = political_seats
        self._artificial_snow_area = artificial_snow_area
        self._located_in_area = located_in_area
        self._saint = saint
        self._gnl = gnl
        self._licence_number = licence_number
        self._map_description = map_description
        self._infant_mortality = infant_mortality
        self._area_metro = area_metro
        self._number_of_cantons = number_of_cantons
        self._information_name = information_name
        self._information = information
        self._river = river
        self._ethnic_group = ethnic_group
        self._heritage_register = heritage_register
        self._subdivisions = subdivisions
        self._refcul = refcul
        self._italian_name = italian_name
        self._dissolution_date = dissolution_date
        self._building_end_year = building_end_year
        self._ist = ist
        self._geoloc_department = geoloc_department
        self._borough = borough
        self._official_name = official_name
        self._maximum_elevation = maximum_elevation
        self._colonial_name = colonial_name
        self._named_by_language = named_by_language
        self._volume_quote = volume_quote
        self._province_link = province_link
        self._parish = parish
        self._old_name = old_name
        self._bird = bird
        self._president_general_council_mandate = president_general_council_mandate
        self._regional_prefecture = regional_prefecture
        self._term_of_office = term_of_office
        self._code_settlement = code_settlement
        self._winter_temperature = winter_temperature
        self._construction_material = construction_material
        self._commissioner = commissioner
        self._refpol = refpol
        self._number_of_counties = number_of_counties
        self._area = area
        self._population_quote = population_quote
        self._biggest_city = biggest_city
        self._nis_code = nis_code
        self._other_information = other_information
        self._opening_year = opening_year
        self._area_code = area_code
        self._average_depth_quote = average_depth_quote
        self._geologic_period = geologic_period
        self._coast_line = coast_line
        self._unitary_authority = unitary_authority
        self._area_land = area_land
        self._population_metro_density = population_metro_density
        self._previous_population = previous_population
        self._iso_code_region = iso_code_region
        self._gini_coefficient = gini_coefficient
        self._neighbour_region = neighbour_region
        self._event_date = event_date
        self._income = income
        self._touristic_site = touristic_site
        self._next_entity = next_entity
        self._political_majority = political_majority
        self._area_quote = area_quote
        self._ski_tow = ski_tow
        self._international_phone_prefix = international_phone_prefix
        self._largest_metro = largest_metro
        self._gagaouze = gagaouze
        self._label = label
        self._iso_code = iso_code
        self._finnish_name = finnish_name
        self._width_quote = width_quote
        self._agglomeration_population_year = agglomeration_population_year
        self._daylight_saving_time_zone = daylight_saving_time_zone
        self._long_distance_piste_number = long_distance_piste_number
        self._political_leader = political_leader
        self._same_name = same_name
        self._agglomeration = agglomeration
        self._red_long_distance_piste_number = red_long_distance_piste_number
        self._area_water = area_water
        self._currently_used_for = currently_used_for
        self._output = output
        self._previous_demographics = previous_demographics
        self._region_type = region_type
        self._police_name = police_name
        self._neighboring_municipality = neighboring_municipality
        self._population_pct_children = population_pct_children
        self._id = id
        self._distance_to_charing_cross = distance_to_charing_cross
        self._lieutenancy = lieutenancy
        self._delegate_mayor = delegate_mayor
        self._rebuilding_year = rebuilding_year
        self._minimum_elevation = minimum_elevation
        self._number_of_capital_deputies = number_of_capital_deputies
        self._ceremonial_county = ceremonial_county
        self._scotish_name = scotish_name
        self._watercourse = watercourse
        self._metropolitan_borough = metropolitan_borough
        self._coast_length = coast_length
        self._joint_community = joint_community
        self._ekatte_code = ekatte_code
        self._per_capita_income = per_capita_income
        self._settlement = settlement
        self._sharing_out_population_year = sharing_out_population_year
        self._foundation_date = foundation_date
        self._maximum_depth = maximum_depth
        self._teryt_code = teryt_code
        self._demolition_year = demolition_year
        self._smallest_country = smallest_country
        self._algerian_name = algerian_name
        self._map = map
        self._localization_thumbnail_caption = localization_thumbnail_caption
        self._unlc_code = unlc_code
        self._sicilian_name = sicilian_name
        self._department_position = department_position
        self._population_pct_men = population_pct_men
        self._law_country = law_country
        self._summer_temperature = summer_temperature
        self._area_date = area_date
        self._kind_of_coordinate = kind_of_coordinate
        self._black_long_distance_piste_number = black_long_distance_piste_number
        self._water_area = water_area
        self._frontier_length = frontier_length
        self._tamazight_settlement_name = tamazight_settlement_name
        self._reopening_date = reopening_date
        self._okato_code = okato_code
        self._disappearance_date = disappearance_date
        self._population_urban_density = population_urban_density
        self._largest_country = largest_country
        self._phone_prefix = phone_prefix
        self._capital = capital
        self._status_year = status_year
        self._flora = flora
        self._agglomeration_area = agglomeration_area
        self._cornish_name = cornish_name
        self._largest_city = largest_city
        self._licence_number_label = licence_number_label
        self._limit = limit
        self._scots_name = scots_name
        self._refgeo = refgeo
        self._refgen = refgen
        self._population_as_of = population_as_of
        self._different = different
        self._emblem = emblem
        self._representative = representative
        self._maximum_area_quote = maximum_area_quote
        self._utc_offset = utc_offset
        self._pluviometry = pluviometry
        self._german_name = german_name
        self._per_capita_income_rank = per_capita_income_rank
        self._ski_piste_kilometre = ski_piste_kilometre
        self._distance_to_edinburgh = distance_to_edinburgh
        self._minimum_area = minimum_area
        self._municipality_code = municipality_code
        self._population_rural_density = population_rural_density
        self._kabyle_name = kabyle_name
        self._red_ski_piste_number = red_ski_piste_number
        self._other_name = other_name
        self._welsh_name = welsh_name
        self._lake = lake
        self._collectivity_minority = collectivity_minority
        self._regional_language = regional_language
        self._chaoui_name = chaoui_name
        self._english_name = english_name
        self._county_seat = county_seat
        self._purchasing_power_parity_year = purchasing_power_parity_year
        self._lieutenancy_area = lieutenancy_area
        self._historical_map = historical_map
        self._people_name = people_name
        self._regency = regency
        self._code_municipal_monument = code_municipal_monument
        self._architectural_style = architectural_style
        self._purchasing_power_parity_rank = purchasing_power_parity_rank
        self._depth_quote = depth_quote
        self._reopening_year = reopening_year
        self._avifauna_population = avifauna_population
        self._construction = construction
        self._land = land
        self._sharing_out = sharing_out
        self._department = department
        self._opening_date = opening_date
        self._other_language = other_language
        self._ofs_code = ofs_code
        self._elevation = elevation
        self._endangered_since = endangered_since
        self._rank_area = rank_area
        self._prov_code = prov_code
        self._visitors_percentage_change = visitors_percentage_change
        self._merger_date = merger_date
        self._seniunija = seniunija
        self._rebuilding_date = rebuilding_date
        self._city_since = city_since
        self._nuts_code = nuts_code
        self._authority_mandate = authority_mandate
        self._gnis_code = gnis_code
        self._deme = deme
        self._maximum_depth_quote = maximum_depth_quote
        self._canton = canton
        self._province_iso_code = province_iso_code
        self._human_development_index_ranking_category = human_development_index_ranking_category
        self._nation = nation
        self._arrondissement = arrondissement
        self._french_name = french_name
        self._supply = supply
        self._agglomeration_population = agglomeration_population
        self._green_ski_piste_number = green_ski_piste_number
        self._province = province
        self._meaning = meaning
        self._leader_party = leader_party
        self._population_total_ranking = population_total_ranking
        self._twin_city = twin_city
        self._sharing_out_population = sharing_out_population
        self._piscicultural_population = piscicultural_population
        self._distance_to_dublin = distance_to_dublin
        self._sharing_out_name = sharing_out_name
        self._land_percentage = land_percentage
        self._visitors_total = visitors_total
        self._population_year = population_year
        self._administrative_collectivity = administrative_collectivity
        self._per_capita_income_as_of = per_capita_income_as_of
        self._architectual_bureau = architectual_bureau
        self._circle = circle
        self._occitan_name = occitan_name
        self._blue_long_distance_piste_number = blue_long_distance_piste_number
        self._building_start_date = building_start_date
        self._algerian_settlement_name = algerian_settlement_name
        self._gross_domestic_product_purchasing_power_parity_per_capita = gross_domestic_product_purchasing_power_parity_per_capita
        self._date_agreement = date_agreement
        self._frazioni = frazioni
        self._mayor_article = mayor_article
        self._iso31661_code = iso31661_code
        self._simc_code = simc_code
        self._council_area = council_area
        self._unesco = unesco
        self._gross_domestic_product = gross_domestic_product
        self._gross_domestic_product_rank = gross_domestic_product_rank
        self._distance_to_douglas = distance_to_douglas
        self._visitor_statistics_as_of = visitor_statistics_as_of
        self._number_of_municipalities = number_of_municipalities
        self._coordinates = coordinates
        self._gini_coefficient_ranking = gini_coefficient_ranking
        self._highest_point = highest_point
        self._flower = flower
        self._hra_state = hra_state
        self._depths = depths
        self._cca_state = cca_state
        self._politic_government_department = politic_government_department
        self._currency_code = currency_code
        self._tu = tu
        self._population_metro = population_metro
        self._climb_up_number = climb_up_number
        self._founding_person = founding_person
        self._postal_code = postal_code
        self._land_area = land_area
        self._code_national_monument = code_national_monument
        self._originally_used_for = originally_used_for
        self._president_regional_council_mandate = president_regional_council_mandate
        self._retention_time = retention_time
        self._gini_coefficient_category = gini_coefficient_category
        self._sardinian_name = sardinian_name
        self._features = features
        self._forester_district = forester_district
        self._illiteracy = illiteracy
        self._gross_domestic_product_per_people = gross_domestic_product_per_people
        self._kind_of_rock = kind_of_rock
        self._arberisht_name = arberisht_name
        self._manx_name = manx_name
        self._protection_status = protection_status
        self._fips_code = fips_code
        self._greek_name = greek_name
        self._population_density = population_density
        self._elevation_quote = elevation_quote
        self._outskirts = outskirts
        self._area_urban = area_urban
        self._unlo_code = unlo_code
        self._district = district
        self._merged_settlement = merged_settlement
        self._parliament_type = parliament_type
        self._previous_entity = previous_entity
        self._federal_state = federal_state
        self._maximum_area = maximum_area
        self._demolition_date = demolition_date
        self._population_urban = population_urban
        self._scottish_name = scottish_name
        self._sovereign_country = sovereign_country
        self._phone_prefix_label = phone_prefix_label
        self._official_language = official_language
        self._previous_population_total = previous_population_total
        self._commune = commune
        self._annual_temperature = annual_temperature
        self._description = description
        self._number_of_state_deputies = number_of_state_deputies
        self._average_depth = average_depth
        self._arabic_name = arabic_name
        self._ski_piste_number = ski_piste_number
        self._subdivision = subdivision
        self._human_development_index = human_development_index
        self._alemmanic_name = alemmanic_name
        self._human_development_index_as_of = human_development_index_as_of
        self._capital_coordinates = capital_coordinates
        self._touareg_name = touareg_name
        self._administrative_head_city = administrative_head_city
        self._maintained_by = maintained_by
        self._visitors_per_day = visitors_per_day
        self._kanji_name = kanji_name
        self._blue_ski_piste_number = blue_ski_piste_number
        self._historical_name = historical_name
        self._area_rank = area_rank
        self._first_mention = first_mention
        self._localization_thumbnail = localization_thumbnail
        self._cable_car = cable_car
        self._administrative_district = administrative_district
        self._type = type
        self._linked_space = linked_space
        self._lowest_point = lowest_point
        self._daira = daira
        self._number_of_island = number_of_island
        self._cyrillique_name = cyrillique_name
        self._catholic_percentage = catholic_percentage
        self._old_district = old_district
        self._area_rural = area_rural
        self._water_percentage = water_percentage
        self._lowest = lowest
        self._sharing_out_population_name = sharing_out_population_name
        self._building_end_date = building_end_date
        self._number_of_federal_deputies = number_of_federal_deputies
        self._map_caption = map_caption
        self._previous_name = previous_name
        self._city_link = city_link
        self._architect = architect
        self._leader_title = leader_title
        self._foundation = foundation
        self._agglomeration_demographics = agglomeration_demographics
        self._calabrian_name = calabrian_name
        self._type_coordinate = type_coordinate
        self._touareg_settlement_name = touareg_settlement_name
        self._distance_to_belfast = distance_to_belfast
        self._code_provincial_monument = code_provincial_monument
        self._climate = climate
        self._bourgmestre = bourgmestre
        self._depth = depth
        self._governing_body = governing_body
        self._black_ski_piste_number = black_ski_piste_number
        self._protestant_percentage = protestant_percentage
        self._related_places = related_places
        self._zip_code = zip_code
        self._fauna = fauna
        self._year_of_construction = year_of_construction
        self._subsystem = subsystem
        self._historical_region = historical_region
        self._international_phone_prefix_label = international_phone_prefix_label
        self._minority = minority
        self._frioulan_name = frioulan_name
        self._reference = reference
        self._code_land_registry = code_land_registry
        self._distance_to_cardiff = distance_to_cardiff
        self._population_date = population_date
        self._dutch_name = dutch_name
        self._day = day
        self._sheading = sheading
        self._local_phone_prefix = local_phone_prefix
        self._population_pct_women = population_pct_women
        self._tree = tree
        self._old_province = old_province
        self._vehicle_code = vehicle_code
        self._water = water
        self._gross_domestic_product_nominal_per_capita = gross_domestic_product_nominal_per_capita
        self._association_of_local_government = association_of_local_government
        self._topic = topic
        self._main_island = main_island
        self._maori_name = maori_name
        self._istat = istat
        self._minimum_area_quote = minimum_area_quote
        self._altitude = altitude
        self._national_topographic_system_map_number = national_topographic_system_map_number
        self._budget_year = budget_year
        self._gini_coefficient_as_of = gini_coefficient_as_of
        self._scale = scale
        self._long_distance_piste_kilometre = long_distance_piste_kilometre
        self._building_start_year = building_start_year
        self._sub_prefecture = sub_prefecture
        self._snow_park_number = snow_park_number
        self._luxembourgish_name = luxembourgish_name
        self._area_total = area_total
        self._population_total_reference = population_total_reference
        self._length_quote = length_quote
        self._relief = relief
        self._census_year = census_year
        self._visitors_per_year = visitors_per_year
        self._ladin_name = ladin_name
        self._subdivision_link = subdivision_link
        self._cost = cost
        self._operated_by = operated_by
        self._mozabite_name = mozabite_name
        self._nearest_city = nearest_city
        self._subsystem_link = subsystem_link
        self._whole_area = whole_area
        self._delegation = delegation
        self._vice_leader = vice_leader
        self._demographics = demographics

    @classmethod
    def from_dict(cls, dikt) -> 'NoteworthyPartOfBuilding':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NoteworthyPartOfBuilding of this NoteworthyPartOfBuilding.  # noqa: E501
        :rtype: NoteworthyPartOfBuilding
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city_type(self):
        """Gets the city_type of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The city_type of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._city_type

    @city_type.setter
    def city_type(self, city_type):
        """Sets the city_type of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param city_type: The city_type of this NoteworthyPartOfBuilding.
        :type city_type: List[str]
        """

        self._city_type = city_type

    @property
    def irish_name(self):
        """Gets the irish_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The irish_name of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._irish_name

    @irish_name.setter
    def irish_name(self, irish_name):
        """Sets the irish_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param irish_name: The irish_name of this NoteworthyPartOfBuilding.
        :type irish_name: List[str]
        """

        self._irish_name = irish_name

    @property
    def reff_bourgmestre(self):
        """Gets the reff_bourgmestre of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The reff_bourgmestre of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._reff_bourgmestre

    @reff_bourgmestre.setter
    def reff_bourgmestre(self, reff_bourgmestre):
        """Sets the reff_bourgmestre of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param reff_bourgmestre: The reff_bourgmestre of this NoteworthyPartOfBuilding.
        :type reff_bourgmestre: List[object]
        """

        self._reff_bourgmestre = reff_bourgmestre

    @property
    def community_iso_code(self):
        """Gets the community_iso_code of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The community_iso_code of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._community_iso_code

    @community_iso_code.setter
    def community_iso_code(self, community_iso_code):
        """Sets the community_iso_code of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param community_iso_code: The community_iso_code of this NoteworthyPartOfBuilding.
        :type community_iso_code: List[str]
        """

        self._community_iso_code = community_iso_code

    @property
    def anthem(self):
        """Gets the anthem of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The anthem of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._anthem

    @anthem.setter
    def anthem(self, anthem):
        """Sets the anthem of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param anthem: The anthem of this NoteworthyPartOfBuilding.
        :type anthem: List[object]
        """

        self._anthem = anthem

    @property
    def rank_agreement(self):
        """Gets the rank_agreement of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The rank_agreement of this NoteworthyPartOfBuilding.
        :rtype: List[int]
        """
        return self._rank_agreement

    @rank_agreement.setter
    def rank_agreement(self, rank_agreement):
        """Sets the rank_agreement of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param rank_agreement: The rank_agreement of this NoteworthyPartOfBuilding.
        :type rank_agreement: List[int]
        """

        self._rank_agreement = rank_agreement

    @property
    def wilaya(self):
        """Gets the wilaya of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The wilaya of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._wilaya

    @wilaya.setter
    def wilaya(self, wilaya):
        """Sets the wilaya of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param wilaya: The wilaya of this NoteworthyPartOfBuilding.
        :type wilaya: List[object]
        """

        self._wilaya = wilaya

    @property
    def parliament(self):
        """Gets the parliament of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The parliament of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._parliament

    @parliament.setter
    def parliament(self, parliament):
        """Sets the parliament of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param parliament: The parliament of this NoteworthyPartOfBuilding.
        :type parliament: List[object]
        """

        self._parliament = parliament

    @property
    def moldavian_name(self):
        """Gets the moldavian_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The moldavian_name of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._moldavian_name

    @moldavian_name.setter
    def moldavian_name(self, moldavian_name):
        """Sets the moldavian_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param moldavian_name: The moldavian_name of this NoteworthyPartOfBuilding.
        :type moldavian_name: List[str]
        """

        self._moldavian_name = moldavian_name

    @property
    def rank_population(self):
        """Gets the rank_population of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The rank_population of this NoteworthyPartOfBuilding.
        :rtype: List[int]
        """
        return self._rank_population

    @rank_population.setter
    def rank_population(self, rank_population):
        """Sets the rank_population of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param rank_population: The rank_population of this NoteworthyPartOfBuilding.
        :type rank_population: List[int]
        """

        self._rank_population = rank_population

    @property
    def quote(self):
        """Gets the quote of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The quote of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._quote

    @quote.setter
    def quote(self, quote):
        """Sets the quote of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param quote: The quote of this NoteworthyPartOfBuilding.
        :type quote: List[str]
        """

        self._quote = quote

    @property
    def initially_used_for(self):
        """Gets the initially_used_for of this NoteworthyPartOfBuilding.

        Initial use of the architectural structure.  # noqa: E501

        :return: The initially_used_for of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._initially_used_for

    @initially_used_for.setter
    def initially_used_for(self, initially_used_for):
        """Sets the initially_used_for of this NoteworthyPartOfBuilding.

        Initial use of the architectural structure.  # noqa: E501

        :param initially_used_for: The initially_used_for of this NoteworthyPartOfBuilding.
        :type initially_used_for: List[str]
        """

        self._initially_used_for = initially_used_for

    @property
    def commissioner_date(self):
        """Gets the commissioner_date of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The commissioner_date of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._commissioner_date

    @commissioner_date.setter
    def commissioner_date(self, commissioner_date):
        """Sets the commissioner_date of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param commissioner_date: The commissioner_date of this NoteworthyPartOfBuilding.
        :type commissioner_date: List[str]
        """

        self._commissioner_date = commissioner_date

    @property
    def demographics_as_of(self):
        """Gets the demographics_as_of of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The demographics_as_of of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._demographics_as_of

    @demographics_as_of.setter
    def demographics_as_of(self, demographics_as_of):
        """Sets the demographics_as_of of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param demographics_as_of: The demographics_as_of of this NoteworthyPartOfBuilding.
        :type demographics_as_of: List[str]
        """

        self._demographics_as_of = demographics_as_of

    @property
    def largest_settlement(self):
        """Gets the largest_settlement of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The largest_settlement of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._largest_settlement

    @largest_settlement.setter
    def largest_settlement(self, largest_settlement):
        """Sets the largest_settlement of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param largest_settlement: The largest_settlement of this NoteworthyPartOfBuilding.
        :type largest_settlement: List[object]
        """

        self._largest_settlement = largest_settlement

    @property
    def distance_to_london(self):
        """Gets the distance_to_london of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The distance_to_london of this NoteworthyPartOfBuilding.
        :rtype: List[float]
        """
        return self._distance_to_london

    @distance_to_london.setter
    def distance_to_london(self, distance_to_london):
        """Sets the distance_to_london of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param distance_to_london: The distance_to_london of this NoteworthyPartOfBuilding.
        :type distance_to_london: List[float]
        """

        self._distance_to_london = distance_to_london

    @property
    def geoloc_dual(self):
        """Gets the geoloc_dual of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The geoloc_dual of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._geoloc_dual

    @geoloc_dual.setter
    def geoloc_dual(self, geoloc_dual):
        """Sets the geoloc_dual of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param geoloc_dual: The geoloc_dual of this NoteworthyPartOfBuilding.
        :type geoloc_dual: List[str]
        """

        self._geoloc_dual = geoloc_dual

    @property
    def distance_to_capital(self):
        """Gets the distance_to_capital of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The distance_to_capital of this NoteworthyPartOfBuilding.
        :rtype: List[float]
        """
        return self._distance_to_capital

    @distance_to_capital.setter
    def distance_to_capital(self, distance_to_capital):
        """Sets the distance_to_capital of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param distance_to_capital: The distance_to_capital of this NoteworthyPartOfBuilding.
        :type distance_to_capital: List[float]
        """

        self._distance_to_capital = distance_to_capital

    @property
    def subregion(self):
        """Gets the subregion of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The subregion of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._subregion

    @subregion.setter
    def subregion(self, subregion):
        """Sets the subregion of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param subregion: The subregion of this NoteworthyPartOfBuilding.
        :type subregion: List[object]
        """

        self._subregion = subregion

    @property
    def sharing_out_area(self):
        """Gets the sharing_out_area of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The sharing_out_area of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._sharing_out_area

    @sharing_out_area.setter
    def sharing_out_area(self, sharing_out_area):
        """Sets the sharing_out_area of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param sharing_out_area: The sharing_out_area of this NoteworthyPartOfBuilding.
        :type sharing_out_area: List[str]
        """

        self._sharing_out_area = sharing_out_area

    @property
    def phone_prefix_name(self):
        """Gets the phone_prefix_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The phone_prefix_name of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._phone_prefix_name

    @phone_prefix_name.setter
    def phone_prefix_name(self, phone_prefix_name):
        """Sets the phone_prefix_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param phone_prefix_name: The phone_prefix_name of this NoteworthyPartOfBuilding.
        :type phone_prefix_name: List[str]
        """

        self._phone_prefix_name = phone_prefix_name

    @property
    def time_zone(self):
        """Gets the time_zone of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The time_zone of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param time_zone: The time_zone of this NoteworthyPartOfBuilding.
        :type time_zone: List[object]
        """

        self._time_zone = time_zone

    @property
    def gross_domestic_product_as_of(self):
        """Gets the gross_domestic_product_as_of of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The gross_domestic_product_as_of of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._gross_domestic_product_as_of

    @gross_domestic_product_as_of.setter
    def gross_domestic_product_as_of(self, gross_domestic_product_as_of):
        """Sets the gross_domestic_product_as_of of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param gross_domestic_product_as_of: The gross_domestic_product_as_of of this NoteworthyPartOfBuilding.
        :type gross_domestic_product_as_of: List[str]
        """

        self._gross_domestic_product_as_of = gross_domestic_product_as_of

    @property
    def population(self):
        """Gets the population of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The population of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._population

    @population.setter
    def population(self, population):
        """Sets the population of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param population: The population of this NoteworthyPartOfBuilding.
        :type population: List[object]
        """

        self._population = population

    @property
    def senior(self):
        """Gets the senior of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The senior of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._senior

    @senior.setter
    def senior(self, senior):
        """Sets the senior of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param senior: The senior of this NoteworthyPartOfBuilding.
        :type senior: List[str]
        """

        self._senior = senior

    @property
    def human_development_index_rank(self):
        """Gets the human_development_index_rank of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The human_development_index_rank of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._human_development_index_rank

    @human_development_index_rank.setter
    def human_development_index_rank(self, human_development_index_rank):
        """Sets the human_development_index_rank of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param human_development_index_rank: The human_development_index_rank of this NoteworthyPartOfBuilding.
        :type human_development_index_rank: List[str]
        """

        self._human_development_index_rank = human_development_index_rank

    @property
    def population_rural(self):
        """Gets the population_rural of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The population_rural of this NoteworthyPartOfBuilding.
        :rtype: List[int]
        """
        return self._population_rural

    @population_rural.setter
    def population_rural(self, population_rural):
        """Sets the population_rural of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param population_rural: The population_rural of this NoteworthyPartOfBuilding.
        :type population_rural: List[int]
        """

        self._population_rural = population_rural

    @property
    def gaelic_name(self):
        """Gets the gaelic_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The gaelic_name of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._gaelic_name

    @gaelic_name.setter
    def gaelic_name(self, gaelic_name):
        """Sets the gaelic_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param gaelic_name: The gaelic_name of this NoteworthyPartOfBuilding.
        :type gaelic_name: List[str]
        """

        self._gaelic_name = gaelic_name

    @property
    def area_total_ranking(self):
        """Gets the area_total_ranking of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The area_total_ranking of this NoteworthyPartOfBuilding.
        :rtype: List[int]
        """
        return self._area_total_ranking

    @area_total_ranking.setter
    def area_total_ranking(self, area_total_ranking):
        """Sets the area_total_ranking of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param area_total_ranking: The area_total_ranking of this NoteworthyPartOfBuilding.
        :type area_total_ranking: List[int]
        """

        self._area_total_ranking = area_total_ranking

    @property
    def route(self):
        """Gets the route of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The route of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._route

    @route.setter
    def route(self, route):
        """Sets the route of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param route: The route of this NoteworthyPartOfBuilding.
        :type route: List[str]
        """

        self._route = route

    @property
    def leader_name(self):
        """Gets the leader_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The leader_name of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._leader_name

    @leader_name.setter
    def leader_name(self, leader_name):
        """Sets the leader_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param leader_name: The leader_name of this NoteworthyPartOfBuilding.
        :type leader_name: List[object]
        """

        self._leader_name = leader_name

    @property
    def principal_area(self):
        """Gets the principal_area of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The principal_area of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._principal_area

    @principal_area.setter
    def principal_area(self, principal_area):
        """Sets the principal_area of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param principal_area: The principal_area of this NoteworthyPartOfBuilding.
        :type principal_area: List[object]
        """

        self._principal_area = principal_area

    @property
    def plant(self):
        """Gets the plant of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The plant of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._plant

    @plant.setter
    def plant(self, plant):
        """Sets the plant of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param plant: The plant of this NoteworthyPartOfBuilding.
        :type plant: List[object]
        """

        self._plant = plant

    @property
    def green_long_distance_piste_number(self):
        """Gets the green_long_distance_piste_number of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The green_long_distance_piste_number of this NoteworthyPartOfBuilding.
        :rtype: List[int]
        """
        return self._green_long_distance_piste_number

    @green_long_distance_piste_number.setter
    def green_long_distance_piste_number(self, green_long_distance_piste_number):
        """Sets the green_long_distance_piste_number of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param green_long_distance_piste_number: The green_long_distance_piste_number of this NoteworthyPartOfBuilding.
        :type green_long_distance_piste_number: List[int]
        """

        self._green_long_distance_piste_number = green_long_distance_piste_number

    @property
    def cannon_number(self):
        """Gets the cannon_number of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The cannon_number of this NoteworthyPartOfBuilding.
        :rtype: List[int]
        """
        return self._cannon_number

    @cannon_number.setter
    def cannon_number(self, cannon_number):
        """Sets the cannon_number of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param cannon_number: The cannon_number of this NoteworthyPartOfBuilding.
        :type cannon_number: List[int]
        """

        self._cannon_number = cannon_number

    @property
    def purchasing_power_parity(self):
        """Gets the purchasing_power_parity of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The purchasing_power_parity of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._purchasing_power_parity

    @purchasing_power_parity.setter
    def purchasing_power_parity(self, purchasing_power_parity):
        """Sets the purchasing_power_parity of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param purchasing_power_parity: The purchasing_power_parity of this NoteworthyPartOfBuilding.
        :type purchasing_power_parity: List[str]
        """

        self._purchasing_power_parity = purchasing_power_parity

    @property
    def grid_reference(self):
        """Gets the grid_reference of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The grid_reference of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._grid_reference

    @grid_reference.setter
    def grid_reference(self, grid_reference):
        """Sets the grid_reference of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param grid_reference: The grid_reference of this NoteworthyPartOfBuilding.
        :type grid_reference: List[str]
        """

        self._grid_reference = grid_reference

    @property
    def barangays(self):
        """Gets the barangays of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The barangays of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._barangays

    @barangays.setter
    def barangays(self, barangays):
        """Sets the barangays of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param barangays: The barangays of this NoteworthyPartOfBuilding.
        :type barangays: List[str]
        """

        self._barangays = barangays

    @property
    def bioclimate(self):
        """Gets the bioclimate of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The bioclimate of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._bioclimate

    @bioclimate.setter
    def bioclimate(self, bioclimate):
        """Sets the bioclimate of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param bioclimate: The bioclimate of this NoteworthyPartOfBuilding.
        :type bioclimate: List[str]
        """

        self._bioclimate = bioclimate

    @property
    def dissolution_year(self):
        """Gets the dissolution_year of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The dissolution_year of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._dissolution_year

    @dissolution_year.setter
    def dissolution_year(self, dissolution_year):
        """Sets the dissolution_year of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param dissolution_year: The dissolution_year of this NoteworthyPartOfBuilding.
        :type dissolution_year: List[str]
        """

        self._dissolution_year = dissolution_year

    @property
    def patron_saint(self):
        """Gets the patron_saint of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The patron_saint of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._patron_saint

    @patron_saint.setter
    def patron_saint(self, patron_saint):
        """Sets the patron_saint of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param patron_saint: The patron_saint of this NoteworthyPartOfBuilding.
        :type patron_saint: List[object]
        """

        self._patron_saint = patron_saint

    @property
    def apskritis(self):
        """Gets the apskritis of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The apskritis of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._apskritis

    @apskritis.setter
    def apskritis(self, apskritis):
        """Sets the apskritis of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param apskritis: The apskritis of this NoteworthyPartOfBuilding.
        :type apskritis: List[str]
        """

        self._apskritis = apskritis

    @property
    def area_of_catchment_quote(self):
        """Gets the area_of_catchment_quote of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The area_of_catchment_quote of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._area_of_catchment_quote

    @area_of_catchment_quote.setter
    def area_of_catchment_quote(self, area_of_catchment_quote):
        """Sets the area_of_catchment_quote of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param area_of_catchment_quote: The area_of_catchment_quote of this NoteworthyPartOfBuilding.
        :type area_of_catchment_quote: List[str]
        """

        self._area_of_catchment_quote = area_of_catchment_quote

    @property
    def sea(self):
        """Gets the sea of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The sea of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._sea

    @sea.setter
    def sea(self, sea):
        """Sets the sea of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param sea: The sea of this NoteworthyPartOfBuilding.
        :type sea: List[object]
        """

        self._sea = sea

    @property
    def life_expectancy(self):
        """Gets the life_expectancy of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The life_expectancy of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._life_expectancy

    @life_expectancy.setter
    def life_expectancy(self, life_expectancy):
        """Sets the life_expectancy of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param life_expectancy: The life_expectancy of this NoteworthyPartOfBuilding.
        :type life_expectancy: List[str]
        """

        self._life_expectancy = life_expectancy

    @property
    def tamazight_name(self):
        """Gets the tamazight_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The tamazight_name of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._tamazight_name

    @tamazight_name.setter
    def tamazight_name(self, tamazight_name):
        """Sets the tamazight_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param tamazight_name: The tamazight_name of this NoteworthyPartOfBuilding.
        :type tamazight_name: List[str]
        """

        self._tamazight_name = tamazight_name

    @property
    def ski_lift(self):
        """Gets the ski_lift of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The ski_lift of this NoteworthyPartOfBuilding.
        :rtype: List[int]
        """
        return self._ski_lift

    @ski_lift.setter
    def ski_lift(self, ski_lift):
        """Sets the ski_lift of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param ski_lift: The ski_lift of this NoteworthyPartOfBuilding.
        :type ski_lift: List[int]
        """

        self._ski_lift = ski_lift

    @property
    def insee_code(self):
        """Gets the insee_code of this NoteworthyPartOfBuilding.

        numerical indexing code used by the French National Institute for Statistics and Economic Studies (INSEE) to identify various entities  # noqa: E501

        :return: The insee_code of this NoteworthyPartOfBuilding.
        :rtype: List[int]
        """
        return self._insee_code

    @insee_code.setter
    def insee_code(self, insee_code):
        """Sets the insee_code of this NoteworthyPartOfBuilding.

        numerical indexing code used by the French National Institute for Statistics and Economic Studies (INSEE) to identify various entities  # noqa: E501

        :param insee_code: The insee_code of this NoteworthyPartOfBuilding.
        :type insee_code: List[int]
        """

        self._insee_code = insee_code

    @property
    def governorate(self):
        """Gets the governorate of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The governorate of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._governorate

    @governorate.setter
    def governorate(self, governorate):
        """Sets the governorate of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param governorate: The governorate of this NoteworthyPartOfBuilding.
        :type governorate: List[str]
        """

        self._governorate = governorate

    @property
    def region_link(self):
        """Gets the region_link of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The region_link of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._region_link

    @region_link.setter
    def region_link(self, region_link):
        """Sets the region_link of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param region_link: The region_link of this NoteworthyPartOfBuilding.
        :type region_link: List[str]
        """

        self._region_link = region_link

    @property
    def vice_leader_party(self):
        """Gets the vice_leader_party of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The vice_leader_party of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._vice_leader_party

    @vice_leader_party.setter
    def vice_leader_party(self, vice_leader_party):
        """Sets the vice_leader_party of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param vice_leader_party: The vice_leader_party of this NoteworthyPartOfBuilding.
        :type vice_leader_party: List[object]
        """

        self._vice_leader_party = vice_leader_party

    @property
    def political_seats(self):
        """Gets the political_seats of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The political_seats of this NoteworthyPartOfBuilding.
        :rtype: List[int]
        """
        return self._political_seats

    @political_seats.setter
    def political_seats(self, political_seats):
        """Sets the political_seats of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param political_seats: The political_seats of this NoteworthyPartOfBuilding.
        :type political_seats: List[int]
        """

        self._political_seats = political_seats

    @property
    def artificial_snow_area(self):
        """Gets the artificial_snow_area of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The artificial_snow_area of this NoteworthyPartOfBuilding.
        :rtype: List[float]
        """
        return self._artificial_snow_area

    @artificial_snow_area.setter
    def artificial_snow_area(self, artificial_snow_area):
        """Sets the artificial_snow_area of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param artificial_snow_area: The artificial_snow_area of this NoteworthyPartOfBuilding.
        :type artificial_snow_area: List[float]
        """

        self._artificial_snow_area = artificial_snow_area

    @property
    def located_in_area(self):
        """Gets the located_in_area of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The located_in_area of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._located_in_area

    @located_in_area.setter
    def located_in_area(self, located_in_area):
        """Sets the located_in_area of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param located_in_area: The located_in_area of this NoteworthyPartOfBuilding.
        :type located_in_area: List[object]
        """

        self._located_in_area = located_in_area

    @property
    def saint(self):
        """Gets the saint of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The saint of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._saint

    @saint.setter
    def saint(self, saint):
        """Sets the saint of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param saint: The saint of this NoteworthyPartOfBuilding.
        :type saint: List[object]
        """

        self._saint = saint

    @property
    def gnl(self):
        """Gets the gnl of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The gnl of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._gnl

    @gnl.setter
    def gnl(self, gnl):
        """Sets the gnl of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param gnl: The gnl of this NoteworthyPartOfBuilding.
        :type gnl: List[str]
        """

        self._gnl = gnl

    @property
    def licence_number(self):
        """Gets the licence_number of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The licence_number of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._licence_number

    @licence_number.setter
    def licence_number(self, licence_number):
        """Sets the licence_number of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param licence_number: The licence_number of this NoteworthyPartOfBuilding.
        :type licence_number: List[str]
        """

        self._licence_number = licence_number

    @property
    def map_description(self):
        """Gets the map_description of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The map_description of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._map_description

    @map_description.setter
    def map_description(self, map_description):
        """Sets the map_description of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param map_description: The map_description of this NoteworthyPartOfBuilding.
        :type map_description: List[str]
        """

        self._map_description = map_description

    @property
    def infant_mortality(self):
        """Gets the infant_mortality of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The infant_mortality of this NoteworthyPartOfBuilding.
        :rtype: List[float]
        """
        return self._infant_mortality

    @infant_mortality.setter
    def infant_mortality(self, infant_mortality):
        """Sets the infant_mortality of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param infant_mortality: The infant_mortality of this NoteworthyPartOfBuilding.
        :type infant_mortality: List[float]
        """

        self._infant_mortality = infant_mortality

    @property
    def area_metro(self):
        """Gets the area_metro of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The area_metro of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._area_metro

    @area_metro.setter
    def area_metro(self, area_metro):
        """Sets the area_metro of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param area_metro: The area_metro of this NoteworthyPartOfBuilding.
        :type area_metro: List[object]
        """

        self._area_metro = area_metro

    @property
    def number_of_cantons(self):
        """Gets the number_of_cantons of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The number_of_cantons of this NoteworthyPartOfBuilding.
        :rtype: List[int]
        """
        return self._number_of_cantons

    @number_of_cantons.setter
    def number_of_cantons(self, number_of_cantons):
        """Sets the number_of_cantons of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param number_of_cantons: The number_of_cantons of this NoteworthyPartOfBuilding.
        :type number_of_cantons: List[int]
        """

        self._number_of_cantons = number_of_cantons

    @property
    def information_name(self):
        """Gets the information_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The information_name of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._information_name

    @information_name.setter
    def information_name(self, information_name):
        """Sets the information_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param information_name: The information_name of this NoteworthyPartOfBuilding.
        :type information_name: List[str]
        """

        self._information_name = information_name

    @property
    def information(self):
        """Gets the information of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The information of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._information

    @information.setter
    def information(self, information):
        """Sets the information of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param information: The information of this NoteworthyPartOfBuilding.
        :type information: List[str]
        """

        self._information = information

    @property
    def river(self):
        """Gets the river of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The river of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._river

    @river.setter
    def river(self, river):
        """Sets the river of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param river: The river of this NoteworthyPartOfBuilding.
        :type river: List[object]
        """

        self._river = river

    @property
    def ethnic_group(self):
        """Gets the ethnic_group of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The ethnic_group of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._ethnic_group

    @ethnic_group.setter
    def ethnic_group(self, ethnic_group):
        """Sets the ethnic_group of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param ethnic_group: The ethnic_group of this NoteworthyPartOfBuilding.
        :type ethnic_group: List[object]
        """

        self._ethnic_group = ethnic_group

    @property
    def heritage_register(self):
        """Gets the heritage_register of this NoteworthyPartOfBuilding.

        registered in a heritage register : inventory of cultural properties, natural and man-made, tangible and intangible, movable and immovable, that are deemed to be of sufficient heritage value to be separately identified and recorded.  # noqa: E501

        :return: The heritage_register of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._heritage_register

    @heritage_register.setter
    def heritage_register(self, heritage_register):
        """Sets the heritage_register of this NoteworthyPartOfBuilding.

        registered in a heritage register : inventory of cultural properties, natural and man-made, tangible and intangible, movable and immovable, that are deemed to be of sufficient heritage value to be separately identified and recorded.  # noqa: E501

        :param heritage_register: The heritage_register of this NoteworthyPartOfBuilding.
        :type heritage_register: List[object]
        """

        self._heritage_register = heritage_register

    @property
    def subdivisions(self):
        """Gets the subdivisions of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The subdivisions of this NoteworthyPartOfBuilding.
        :rtype: List[int]
        """
        return self._subdivisions

    @subdivisions.setter
    def subdivisions(self, subdivisions):
        """Sets the subdivisions of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param subdivisions: The subdivisions of this NoteworthyPartOfBuilding.
        :type subdivisions: List[int]
        """

        self._subdivisions = subdivisions

    @property
    def refcul(self):
        """Gets the refcul of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The refcul of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._refcul

    @refcul.setter
    def refcul(self, refcul):
        """Sets the refcul of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param refcul: The refcul of this NoteworthyPartOfBuilding.
        :type refcul: List[str]
        """

        self._refcul = refcul

    @property
    def italian_name(self):
        """Gets the italian_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The italian_name of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._italian_name

    @italian_name.setter
    def italian_name(self, italian_name):
        """Sets the italian_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param italian_name: The italian_name of this NoteworthyPartOfBuilding.
        :type italian_name: List[str]
        """

        self._italian_name = italian_name

    @property
    def dissolution_date(self):
        """Gets the dissolution_date of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The dissolution_date of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._dissolution_date

    @dissolution_date.setter
    def dissolution_date(self, dissolution_date):
        """Sets the dissolution_date of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param dissolution_date: The dissolution_date of this NoteworthyPartOfBuilding.
        :type dissolution_date: List[str]
        """

        self._dissolution_date = dissolution_date

    @property
    def building_end_year(self):
        """Gets the building_end_year of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The building_end_year of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._building_end_year

    @building_end_year.setter
    def building_end_year(self, building_end_year):
        """Sets the building_end_year of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param building_end_year: The building_end_year of this NoteworthyPartOfBuilding.
        :type building_end_year: List[str]
        """

        self._building_end_year = building_end_year

    @property
    def ist(self):
        """Gets the ist of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The ist of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._ist

    @ist.setter
    def ist(self, ist):
        """Sets the ist of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param ist: The ist of this NoteworthyPartOfBuilding.
        :type ist: List[str]
        """

        self._ist = ist

    @property
    def geoloc_department(self):
        """Gets the geoloc_department of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The geoloc_department of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._geoloc_department

    @geoloc_department.setter
    def geoloc_department(self, geoloc_department):
        """Sets the geoloc_department of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param geoloc_department: The geoloc_department of this NoteworthyPartOfBuilding.
        :type geoloc_department: List[object]
        """

        self._geoloc_department = geoloc_department

    @property
    def borough(self):
        """Gets the borough of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The borough of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._borough

    @borough.setter
    def borough(self, borough):
        """Sets the borough of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param borough: The borough of this NoteworthyPartOfBuilding.
        :type borough: List[object]
        """

        self._borough = borough

    @property
    def official_name(self):
        """Gets the official_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The official_name of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._official_name

    @official_name.setter
    def official_name(self, official_name):
        """Sets the official_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param official_name: The official_name of this NoteworthyPartOfBuilding.
        :type official_name: List[str]
        """

        self._official_name = official_name

    @property
    def maximum_elevation(self):
        """Gets the maximum_elevation of this NoteworthyPartOfBuilding.

        maximum elevation above the sea level  # noqa: E501

        :return: The maximum_elevation of this NoteworthyPartOfBuilding.
        :rtype: List[float]
        """
        return self._maximum_elevation

    @maximum_elevation.setter
    def maximum_elevation(self, maximum_elevation):
        """Sets the maximum_elevation of this NoteworthyPartOfBuilding.

        maximum elevation above the sea level  # noqa: E501

        :param maximum_elevation: The maximum_elevation of this NoteworthyPartOfBuilding.
        :type maximum_elevation: List[float]
        """

        self._maximum_elevation = maximum_elevation

    @property
    def colonial_name(self):
        """Gets the colonial_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The colonial_name of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._colonial_name

    @colonial_name.setter
    def colonial_name(self, colonial_name):
        """Sets the colonial_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param colonial_name: The colonial_name of this NoteworthyPartOfBuilding.
        :type colonial_name: List[str]
        """

        self._colonial_name = colonial_name

    @property
    def named_by_language(self):
        """Gets the named_by_language of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The named_by_language of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._named_by_language

    @named_by_language.setter
    def named_by_language(self, named_by_language):
        """Sets the named_by_language of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param named_by_language: The named_by_language of this NoteworthyPartOfBuilding.
        :type named_by_language: List[object]
        """

        self._named_by_language = named_by_language

    @property
    def volume_quote(self):
        """Gets the volume_quote of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The volume_quote of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._volume_quote

    @volume_quote.setter
    def volume_quote(self, volume_quote):
        """Sets the volume_quote of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param volume_quote: The volume_quote of this NoteworthyPartOfBuilding.
        :type volume_quote: List[str]
        """

        self._volume_quote = volume_quote

    @property
    def province_link(self):
        """Gets the province_link of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The province_link of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._province_link

    @province_link.setter
    def province_link(self, province_link):
        """Sets the province_link of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param province_link: The province_link of this NoteworthyPartOfBuilding.
        :type province_link: List[object]
        """

        self._province_link = province_link

    @property
    def parish(self):
        """Gets the parish of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The parish of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._parish

    @parish.setter
    def parish(self, parish):
        """Sets the parish of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param parish: The parish of this NoteworthyPartOfBuilding.
        :type parish: List[object]
        """

        self._parish = parish

    @property
    def old_name(self):
        """Gets the old_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The old_name of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._old_name

    @old_name.setter
    def old_name(self, old_name):
        """Sets the old_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param old_name: The old_name of this NoteworthyPartOfBuilding.
        :type old_name: List[str]
        """

        self._old_name = old_name

    @property
    def bird(self):
        """Gets the bird of this NoteworthyPartOfBuilding.

        Τα πτηνά είναι ζώα ομοιόθερμα σπονδυλωτά, που στη συντριπτική πλειονότητα τους μπορούν να πετούν με τις πτέρυγες ή φτερούγες τους.  # noqa: E501

        :return: The bird of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._bird

    @bird.setter
    def bird(self, bird):
        """Sets the bird of this NoteworthyPartOfBuilding.

        Τα πτηνά είναι ζώα ομοιόθερμα σπονδυλωτά, που στη συντριπτική πλειονότητα τους μπορούν να πετούν με τις πτέρυγες ή φτερούγες τους.  # noqa: E501

        :param bird: The bird of this NoteworthyPartOfBuilding.
        :type bird: List[object]
        """

        self._bird = bird

    @property
    def president_general_council_mandate(self):
        """Gets the president_general_council_mandate of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The president_general_council_mandate of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._president_general_council_mandate

    @president_general_council_mandate.setter
    def president_general_council_mandate(self, president_general_council_mandate):
        """Sets the president_general_council_mandate of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param president_general_council_mandate: The president_general_council_mandate of this NoteworthyPartOfBuilding.
        :type president_general_council_mandate: List[str]
        """

        self._president_general_council_mandate = president_general_council_mandate

    @property
    def regional_prefecture(self):
        """Gets the regional_prefecture of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The regional_prefecture of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._regional_prefecture

    @regional_prefecture.setter
    def regional_prefecture(self, regional_prefecture):
        """Sets the regional_prefecture of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param regional_prefecture: The regional_prefecture of this NoteworthyPartOfBuilding.
        :type regional_prefecture: List[str]
        """

        self._regional_prefecture = regional_prefecture

    @property
    def term_of_office(self):
        """Gets the term_of_office of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The term_of_office of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._term_of_office

    @term_of_office.setter
    def term_of_office(self, term_of_office):
        """Sets the term_of_office of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param term_of_office: The term_of_office of this NoteworthyPartOfBuilding.
        :type term_of_office: List[str]
        """

        self._term_of_office = term_of_office

    @property
    def code_settlement(self):
        """Gets the code_settlement of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The code_settlement of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._code_settlement

    @code_settlement.setter
    def code_settlement(self, code_settlement):
        """Sets the code_settlement of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param code_settlement: The code_settlement of this NoteworthyPartOfBuilding.
        :type code_settlement: List[str]
        """

        self._code_settlement = code_settlement

    @property
    def winter_temperature(self):
        """Gets the winter_temperature of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The winter_temperature of this NoteworthyPartOfBuilding.
        :rtype: List[float]
        """
        return self._winter_temperature

    @winter_temperature.setter
    def winter_temperature(self, winter_temperature):
        """Sets the winter_temperature of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param winter_temperature: The winter_temperature of this NoteworthyPartOfBuilding.
        :type winter_temperature: List[float]
        """

        self._winter_temperature = winter_temperature

    @property
    def construction_material(self):
        """Gets the construction_material of this NoteworthyPartOfBuilding.

        Construction material (eg. concrete, steel, iron, stone, brick, wood).  # noqa: E501

        :return: The construction_material of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._construction_material

    @construction_material.setter
    def construction_material(self, construction_material):
        """Sets the construction_material of this NoteworthyPartOfBuilding.

        Construction material (eg. concrete, steel, iron, stone, brick, wood).  # noqa: E501

        :param construction_material: The construction_material of this NoteworthyPartOfBuilding.
        :type construction_material: List[object]
        """

        self._construction_material = construction_material

    @property
    def commissioner(self):
        """Gets the commissioner of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The commissioner of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._commissioner

    @commissioner.setter
    def commissioner(self, commissioner):
        """Sets the commissioner of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param commissioner: The commissioner of this NoteworthyPartOfBuilding.
        :type commissioner: List[str]
        """

        self._commissioner = commissioner

    @property
    def refpol(self):
        """Gets the refpol of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The refpol of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._refpol

    @refpol.setter
    def refpol(self, refpol):
        """Sets the refpol of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param refpol: The refpol of this NoteworthyPartOfBuilding.
        :type refpol: List[str]
        """

        self._refpol = refpol

    @property
    def number_of_counties(self):
        """Gets the number_of_counties of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The number_of_counties of this NoteworthyPartOfBuilding.
        :rtype: List[int]
        """
        return self._number_of_counties

    @number_of_counties.setter
    def number_of_counties(self, number_of_counties):
        """Sets the number_of_counties of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param number_of_counties: The number_of_counties of this NoteworthyPartOfBuilding.
        :type number_of_counties: List[int]
        """

        self._number_of_counties = number_of_counties

    @property
    def area(self):
        """Gets the area of this NoteworthyPartOfBuilding.

        The area of a owl:Thing in square metre.  # noqa: E501

        :return: The area of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this NoteworthyPartOfBuilding.

        The area of a owl:Thing in square metre.  # noqa: E501

        :param area: The area of this NoteworthyPartOfBuilding.
        :type area: List[object]
        """

        self._area = area

    @property
    def population_quote(self):
        """Gets the population_quote of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The population_quote of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._population_quote

    @population_quote.setter
    def population_quote(self, population_quote):
        """Sets the population_quote of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param population_quote: The population_quote of this NoteworthyPartOfBuilding.
        :type population_quote: List[str]
        """

        self._population_quote = population_quote

    @property
    def biggest_city(self):
        """Gets the biggest_city of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The biggest_city of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._biggest_city

    @biggest_city.setter
    def biggest_city(self, biggest_city):
        """Sets the biggest_city of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param biggest_city: The biggest_city of this NoteworthyPartOfBuilding.
        :type biggest_city: List[object]
        """

        self._biggest_city = biggest_city

    @property
    def nis_code(self):
        """Gets the nis_code of this NoteworthyPartOfBuilding.

        Indexing code used by the Belgium National Statistical Institute to identify populated places.  # noqa: E501

        :return: The nis_code of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._nis_code

    @nis_code.setter
    def nis_code(self, nis_code):
        """Sets the nis_code of this NoteworthyPartOfBuilding.

        Indexing code used by the Belgium National Statistical Institute to identify populated places.  # noqa: E501

        :param nis_code: The nis_code of this NoteworthyPartOfBuilding.
        :type nis_code: List[object]
        """

        self._nis_code = nis_code

    @property
    def other_information(self):
        """Gets the other_information of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The other_information of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._other_information

    @other_information.setter
    def other_information(self, other_information):
        """Sets the other_information of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param other_information: The other_information of this NoteworthyPartOfBuilding.
        :type other_information: List[str]
        """

        self._other_information = other_information

    @property
    def opening_year(self):
        """Gets the opening_year of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The opening_year of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._opening_year

    @opening_year.setter
    def opening_year(self, opening_year):
        """Sets the opening_year of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param opening_year: The opening_year of this NoteworthyPartOfBuilding.
        :type opening_year: List[str]
        """

        self._opening_year = opening_year

    @property
    def area_code(self):
        """Gets the area_code of this NoteworthyPartOfBuilding.

        Area code for telephone numbers.  # noqa: E501

        :return: The area_code of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._area_code

    @area_code.setter
    def area_code(self, area_code):
        """Sets the area_code of this NoteworthyPartOfBuilding.

        Area code for telephone numbers.  # noqa: E501

        :param area_code: The area_code of this NoteworthyPartOfBuilding.
        :type area_code: List[str]
        """

        self._area_code = area_code

    @property
    def average_depth_quote(self):
        """Gets the average_depth_quote of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The average_depth_quote of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._average_depth_quote

    @average_depth_quote.setter
    def average_depth_quote(self, average_depth_quote):
        """Sets the average_depth_quote of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param average_depth_quote: The average_depth_quote of this NoteworthyPartOfBuilding.
        :type average_depth_quote: List[str]
        """

        self._average_depth_quote = average_depth_quote

    @property
    def geologic_period(self):
        """Gets the geologic_period of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The geologic_period of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._geologic_period

    @geologic_period.setter
    def geologic_period(self, geologic_period):
        """Sets the geologic_period of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param geologic_period: The geologic_period of this NoteworthyPartOfBuilding.
        :type geologic_period: List[str]
        """

        self._geologic_period = geologic_period

    @property
    def coast_line(self):
        """Gets the coast_line of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The coast_line of this NoteworthyPartOfBuilding.
        :rtype: List[float]
        """
        return self._coast_line

    @coast_line.setter
    def coast_line(self, coast_line):
        """Sets the coast_line of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param coast_line: The coast_line of this NoteworthyPartOfBuilding.
        :type coast_line: List[float]
        """

        self._coast_line = coast_line

    @property
    def unitary_authority(self):
        """Gets the unitary_authority of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The unitary_authority of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._unitary_authority

    @unitary_authority.setter
    def unitary_authority(self, unitary_authority):
        """Sets the unitary_authority of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param unitary_authority: The unitary_authority of this NoteworthyPartOfBuilding.
        :type unitary_authority: List[object]
        """

        self._unitary_authority = unitary_authority

    @property
    def area_land(self):
        """Gets the area_land of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The area_land of this NoteworthyPartOfBuilding.
        :rtype: List[float]
        """
        return self._area_land

    @area_land.setter
    def area_land(self, area_land):
        """Sets the area_land of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param area_land: The area_land of this NoteworthyPartOfBuilding.
        :type area_land: List[float]
        """

        self._area_land = area_land

    @property
    def population_metro_density(self):
        """Gets the population_metro_density of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The population_metro_density of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._population_metro_density

    @population_metro_density.setter
    def population_metro_density(self, population_metro_density):
        """Sets the population_metro_density of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param population_metro_density: The population_metro_density of this NoteworthyPartOfBuilding.
        :type population_metro_density: List[object]
        """

        self._population_metro_density = population_metro_density

    @property
    def previous_population(self):
        """Gets the previous_population of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The previous_population of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._previous_population

    @previous_population.setter
    def previous_population(self, previous_population):
        """Sets the previous_population of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param previous_population: The previous_population of this NoteworthyPartOfBuilding.
        :type previous_population: List[object]
        """

        self._previous_population = previous_population

    @property
    def iso_code_region(self):
        """Gets the iso_code_region of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The iso_code_region of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._iso_code_region

    @iso_code_region.setter
    def iso_code_region(self, iso_code_region):
        """Sets the iso_code_region of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param iso_code_region: The iso_code_region of this NoteworthyPartOfBuilding.
        :type iso_code_region: List[object]
        """

        self._iso_code_region = iso_code_region

    @property
    def gini_coefficient(self):
        """Gets the gini_coefficient of this NoteworthyPartOfBuilding.

        is a measure of the inequality of a distribution. It is commonly used as a measure of inequality of income or wealth.  # noqa: E501

        :return: The gini_coefficient of this NoteworthyPartOfBuilding.
        :rtype: List[float]
        """
        return self._gini_coefficient

    @gini_coefficient.setter
    def gini_coefficient(self, gini_coefficient):
        """Sets the gini_coefficient of this NoteworthyPartOfBuilding.

        is a measure of the inequality of a distribution. It is commonly used as a measure of inequality of income or wealth.  # noqa: E501

        :param gini_coefficient: The gini_coefficient of this NoteworthyPartOfBuilding.
        :type gini_coefficient: List[float]
        """

        self._gini_coefficient = gini_coefficient

    @property
    def neighbour_region(self):
        """Gets the neighbour_region of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The neighbour_region of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._neighbour_region

    @neighbour_region.setter
    def neighbour_region(self, neighbour_region):
        """Sets the neighbour_region of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param neighbour_region: The neighbour_region of this NoteworthyPartOfBuilding.
        :type neighbour_region: List[str]
        """

        self._neighbour_region = neighbour_region

    @property
    def event_date(self):
        """Gets the event_date of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The event_date of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._event_date

    @event_date.setter
    def event_date(self, event_date):
        """Sets the event_date of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param event_date: The event_date of this NoteworthyPartOfBuilding.
        :type event_date: List[str]
        """

        self._event_date = event_date

    @property
    def income(self):
        """Gets the income of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The income of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._income

    @income.setter
    def income(self, income):
        """Sets the income of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param income: The income of this NoteworthyPartOfBuilding.
        :type income: List[str]
        """

        self._income = income

    @property
    def touristic_site(self):
        """Gets the touristic_site of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The touristic_site of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._touristic_site

    @touristic_site.setter
    def touristic_site(self, touristic_site):
        """Sets the touristic_site of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param touristic_site: The touristic_site of this NoteworthyPartOfBuilding.
        :type touristic_site: List[object]
        """

        self._touristic_site = touristic_site

    @property
    def next_entity(self):
        """Gets the next_entity of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The next_entity of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._next_entity

    @next_entity.setter
    def next_entity(self, next_entity):
        """Sets the next_entity of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param next_entity: The next_entity of this NoteworthyPartOfBuilding.
        :type next_entity: List[object]
        """

        self._next_entity = next_entity

    @property
    def political_majority(self):
        """Gets the political_majority of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The political_majority of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._political_majority

    @political_majority.setter
    def political_majority(self, political_majority):
        """Sets the political_majority of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param political_majority: The political_majority of this NoteworthyPartOfBuilding.
        :type political_majority: List[object]
        """

        self._political_majority = political_majority

    @property
    def area_quote(self):
        """Gets the area_quote of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The area_quote of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._area_quote

    @area_quote.setter
    def area_quote(self, area_quote):
        """Sets the area_quote of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param area_quote: The area_quote of this NoteworthyPartOfBuilding.
        :type area_quote: List[str]
        """

        self._area_quote = area_quote

    @property
    def ski_tow(self):
        """Gets the ski_tow of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The ski_tow of this NoteworthyPartOfBuilding.
        :rtype: List[int]
        """
        return self._ski_tow

    @ski_tow.setter
    def ski_tow(self, ski_tow):
        """Sets the ski_tow of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param ski_tow: The ski_tow of this NoteworthyPartOfBuilding.
        :type ski_tow: List[int]
        """

        self._ski_tow = ski_tow

    @property
    def international_phone_prefix(self):
        """Gets the international_phone_prefix of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The international_phone_prefix of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._international_phone_prefix

    @international_phone_prefix.setter
    def international_phone_prefix(self, international_phone_prefix):
        """Sets the international_phone_prefix of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param international_phone_prefix: The international_phone_prefix of this NoteworthyPartOfBuilding.
        :type international_phone_prefix: List[str]
        """

        self._international_phone_prefix = international_phone_prefix

    @property
    def largest_metro(self):
        """Gets the largest_metro of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The largest_metro of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._largest_metro

    @largest_metro.setter
    def largest_metro(self, largest_metro):
        """Sets the largest_metro of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param largest_metro: The largest_metro of this NoteworthyPartOfBuilding.
        :type largest_metro: List[object]
        """

        self._largest_metro = largest_metro

    @property
    def gagaouze(self):
        """Gets the gagaouze of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The gagaouze of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._gagaouze

    @gagaouze.setter
    def gagaouze(self, gagaouze):
        """Sets the gagaouze of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param gagaouze: The gagaouze of this NoteworthyPartOfBuilding.
        :type gagaouze: List[str]
        """

        self._gagaouze = gagaouze

    @property
    def label(self):
        """Gets the label of this NoteworthyPartOfBuilding.

        short description of the resource  # noqa: E501

        :return: The label of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this NoteworthyPartOfBuilding.

        short description of the resource  # noqa: E501

        :param label: The label of this NoteworthyPartOfBuilding.
        :type label: List[str]
        """

        self._label = label

    @property
    def iso_code(self):
        """Gets the iso_code of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The iso_code of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._iso_code

    @iso_code.setter
    def iso_code(self, iso_code):
        """Sets the iso_code of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param iso_code: The iso_code of this NoteworthyPartOfBuilding.
        :type iso_code: List[str]
        """

        self._iso_code = iso_code

    @property
    def finnish_name(self):
        """Gets the finnish_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The finnish_name of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._finnish_name

    @finnish_name.setter
    def finnish_name(self, finnish_name):
        """Sets the finnish_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param finnish_name: The finnish_name of this NoteworthyPartOfBuilding.
        :type finnish_name: List[str]
        """

        self._finnish_name = finnish_name

    @property
    def width_quote(self):
        """Gets the width_quote of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The width_quote of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._width_quote

    @width_quote.setter
    def width_quote(self, width_quote):
        """Sets the width_quote of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param width_quote: The width_quote of this NoteworthyPartOfBuilding.
        :type width_quote: List[str]
        """

        self._width_quote = width_quote

    @property
    def agglomeration_population_year(self):
        """Gets the agglomeration_population_year of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The agglomeration_population_year of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._agglomeration_population_year

    @agglomeration_population_year.setter
    def agglomeration_population_year(self, agglomeration_population_year):
        """Sets the agglomeration_population_year of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param agglomeration_population_year: The agglomeration_population_year of this NoteworthyPartOfBuilding.
        :type agglomeration_population_year: List[str]
        """

        self._agglomeration_population_year = agglomeration_population_year

    @property
    def daylight_saving_time_zone(self):
        """Gets the daylight_saving_time_zone of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The daylight_saving_time_zone of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._daylight_saving_time_zone

    @daylight_saving_time_zone.setter
    def daylight_saving_time_zone(self, daylight_saving_time_zone):
        """Sets the daylight_saving_time_zone of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param daylight_saving_time_zone: The daylight_saving_time_zone of this NoteworthyPartOfBuilding.
        :type daylight_saving_time_zone: List[object]
        """

        self._daylight_saving_time_zone = daylight_saving_time_zone

    @property
    def long_distance_piste_number(self):
        """Gets the long_distance_piste_number of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The long_distance_piste_number of this NoteworthyPartOfBuilding.
        :rtype: List[int]
        """
        return self._long_distance_piste_number

    @long_distance_piste_number.setter
    def long_distance_piste_number(self, long_distance_piste_number):
        """Sets the long_distance_piste_number of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param long_distance_piste_number: The long_distance_piste_number of this NoteworthyPartOfBuilding.
        :type long_distance_piste_number: List[int]
        """

        self._long_distance_piste_number = long_distance_piste_number

    @property
    def political_leader(self):
        """Gets the political_leader of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The political_leader of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._political_leader

    @political_leader.setter
    def political_leader(self, political_leader):
        """Sets the political_leader of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param political_leader: The political_leader of this NoteworthyPartOfBuilding.
        :type political_leader: List[object]
        """

        self._political_leader = political_leader

    @property
    def same_name(self):
        """Gets the same_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The same_name of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._same_name

    @same_name.setter
    def same_name(self, same_name):
        """Sets the same_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param same_name: The same_name of this NoteworthyPartOfBuilding.
        :type same_name: List[str]
        """

        self._same_name = same_name

    @property
    def agglomeration(self):
        """Gets the agglomeration of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The agglomeration of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._agglomeration

    @agglomeration.setter
    def agglomeration(self, agglomeration):
        """Sets the agglomeration of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param agglomeration: The agglomeration of this NoteworthyPartOfBuilding.
        :type agglomeration: List[object]
        """

        self._agglomeration = agglomeration

    @property
    def red_long_distance_piste_number(self):
        """Gets the red_long_distance_piste_number of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The red_long_distance_piste_number of this NoteworthyPartOfBuilding.
        :rtype: List[int]
        """
        return self._red_long_distance_piste_number

    @red_long_distance_piste_number.setter
    def red_long_distance_piste_number(self, red_long_distance_piste_number):
        """Sets the red_long_distance_piste_number of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param red_long_distance_piste_number: The red_long_distance_piste_number of this NoteworthyPartOfBuilding.
        :type red_long_distance_piste_number: List[int]
        """

        self._red_long_distance_piste_number = red_long_distance_piste_number

    @property
    def area_water(self):
        """Gets the area_water of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The area_water of this NoteworthyPartOfBuilding.
        :rtype: List[float]
        """
        return self._area_water

    @area_water.setter
    def area_water(self, area_water):
        """Sets the area_water of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param area_water: The area_water of this NoteworthyPartOfBuilding.
        :type area_water: List[float]
        """

        self._area_water = area_water

    @property
    def currently_used_for(self):
        """Gets the currently_used_for of this NoteworthyPartOfBuilding.

        Current use of the architectural structure, if it is currently being used as anything other than its original purpose.  # noqa: E501

        :return: The currently_used_for of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._currently_used_for

    @currently_used_for.setter
    def currently_used_for(self, currently_used_for):
        """Sets the currently_used_for of this NoteworthyPartOfBuilding.

        Current use of the architectural structure, if it is currently being used as anything other than its original purpose.  # noqa: E501

        :param currently_used_for: The currently_used_for of this NoteworthyPartOfBuilding.
        :type currently_used_for: List[str]
        """

        self._currently_used_for = currently_used_for

    @property
    def output(self):
        """Gets the output of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The output of this NoteworthyPartOfBuilding.
        :rtype: List[float]
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param output: The output of this NoteworthyPartOfBuilding.
        :type output: List[float]
        """

        self._output = output

    @property
    def previous_demographics(self):
        """Gets the previous_demographics of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The previous_demographics of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._previous_demographics

    @previous_demographics.setter
    def previous_demographics(self, previous_demographics):
        """Sets the previous_demographics of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param previous_demographics: The previous_demographics of this NoteworthyPartOfBuilding.
        :type previous_demographics: List[object]
        """

        self._previous_demographics = previous_demographics

    @property
    def region_type(self):
        """Gets the region_type of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The region_type of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._region_type

    @region_type.setter
    def region_type(self, region_type):
        """Sets the region_type of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param region_type: The region_type of this NoteworthyPartOfBuilding.
        :type region_type: List[str]
        """

        self._region_type = region_type

    @property
    def police_name(self):
        """Gets the police_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The police_name of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._police_name

    @police_name.setter
    def police_name(self, police_name):
        """Sets the police_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param police_name: The police_name of this NoteworthyPartOfBuilding.
        :type police_name: List[str]
        """

        self._police_name = police_name

    @property
    def neighboring_municipality(self):
        """Gets the neighboring_municipality of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The neighboring_municipality of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._neighboring_municipality

    @neighboring_municipality.setter
    def neighboring_municipality(self, neighboring_municipality):
        """Sets the neighboring_municipality of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param neighboring_municipality: The neighboring_municipality of this NoteworthyPartOfBuilding.
        :type neighboring_municipality: List[object]
        """

        self._neighboring_municipality = neighboring_municipality

    @property
    def population_pct_children(self):
        """Gets the population_pct_children of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The population_pct_children of this NoteworthyPartOfBuilding.
        :rtype: List[int]
        """
        return self._population_pct_children

    @population_pct_children.setter
    def population_pct_children(self, population_pct_children):
        """Sets the population_pct_children of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param population_pct_children: The population_pct_children of this NoteworthyPartOfBuilding.
        :type population_pct_children: List[int]
        """

        self._population_pct_children = population_pct_children

    @property
    def id(self):
        """Gets the id of this NoteworthyPartOfBuilding.

        identifier  # noqa: E501

        :return: The id of this NoteworthyPartOfBuilding.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NoteworthyPartOfBuilding.

        identifier  # noqa: E501

        :param id: The id of this NoteworthyPartOfBuilding.
        :type id: str
        """

        self._id = id

    @property
    def distance_to_charing_cross(self):
        """Gets the distance_to_charing_cross of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The distance_to_charing_cross of this NoteworthyPartOfBuilding.
        :rtype: List[float]
        """
        return self._distance_to_charing_cross

    @distance_to_charing_cross.setter
    def distance_to_charing_cross(self, distance_to_charing_cross):
        """Sets the distance_to_charing_cross of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param distance_to_charing_cross: The distance_to_charing_cross of this NoteworthyPartOfBuilding.
        :type distance_to_charing_cross: List[float]
        """

        self._distance_to_charing_cross = distance_to_charing_cross

    @property
    def lieutenancy(self):
        """Gets the lieutenancy of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The lieutenancy of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._lieutenancy

    @lieutenancy.setter
    def lieutenancy(self, lieutenancy):
        """Sets the lieutenancy of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param lieutenancy: The lieutenancy of this NoteworthyPartOfBuilding.
        :type lieutenancy: List[str]
        """

        self._lieutenancy = lieutenancy

    @property
    def delegate_mayor(self):
        """Gets the delegate_mayor of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The delegate_mayor of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._delegate_mayor

    @delegate_mayor.setter
    def delegate_mayor(self, delegate_mayor):
        """Sets the delegate_mayor of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param delegate_mayor: The delegate_mayor of this NoteworthyPartOfBuilding.
        :type delegate_mayor: List[object]
        """

        self._delegate_mayor = delegate_mayor

    @property
    def rebuilding_year(self):
        """Gets the rebuilding_year of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The rebuilding_year of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._rebuilding_year

    @rebuilding_year.setter
    def rebuilding_year(self, rebuilding_year):
        """Sets the rebuilding_year of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param rebuilding_year: The rebuilding_year of this NoteworthyPartOfBuilding.
        :type rebuilding_year: List[str]
        """

        self._rebuilding_year = rebuilding_year

    @property
    def minimum_elevation(self):
        """Gets the minimum_elevation of this NoteworthyPartOfBuilding.

        minimum elevation above the sea level  # noqa: E501

        :return: The minimum_elevation of this NoteworthyPartOfBuilding.
        :rtype: List[float]
        """
        return self._minimum_elevation

    @minimum_elevation.setter
    def minimum_elevation(self, minimum_elevation):
        """Sets the minimum_elevation of this NoteworthyPartOfBuilding.

        minimum elevation above the sea level  # noqa: E501

        :param minimum_elevation: The minimum_elevation of this NoteworthyPartOfBuilding.
        :type minimum_elevation: List[float]
        """

        self._minimum_elevation = minimum_elevation

    @property
    def number_of_capital_deputies(self):
        """Gets the number_of_capital_deputies of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The number_of_capital_deputies of this NoteworthyPartOfBuilding.
        :rtype: List[int]
        """
        return self._number_of_capital_deputies

    @number_of_capital_deputies.setter
    def number_of_capital_deputies(self, number_of_capital_deputies):
        """Sets the number_of_capital_deputies of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param number_of_capital_deputies: The number_of_capital_deputies of this NoteworthyPartOfBuilding.
        :type number_of_capital_deputies: List[int]
        """

        self._number_of_capital_deputies = number_of_capital_deputies

    @property
    def ceremonial_county(self):
        """Gets the ceremonial_county of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The ceremonial_county of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._ceremonial_county

    @ceremonial_county.setter
    def ceremonial_county(self, ceremonial_county):
        """Sets the ceremonial_county of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param ceremonial_county: The ceremonial_county of this NoteworthyPartOfBuilding.
        :type ceremonial_county: List[object]
        """

        self._ceremonial_county = ceremonial_county

    @property
    def scotish_name(self):
        """Gets the scotish_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The scotish_name of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._scotish_name

    @scotish_name.setter
    def scotish_name(self, scotish_name):
        """Sets the scotish_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param scotish_name: The scotish_name of this NoteworthyPartOfBuilding.
        :type scotish_name: List[str]
        """

        self._scotish_name = scotish_name

    @property
    def watercourse(self):
        """Gets the watercourse of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The watercourse of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._watercourse

    @watercourse.setter
    def watercourse(self, watercourse):
        """Sets the watercourse of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param watercourse: The watercourse of this NoteworthyPartOfBuilding.
        :type watercourse: List[str]
        """

        self._watercourse = watercourse

    @property
    def metropolitan_borough(self):
        """Gets the metropolitan_borough of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The metropolitan_borough of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._metropolitan_borough

    @metropolitan_borough.setter
    def metropolitan_borough(self, metropolitan_borough):
        """Sets the metropolitan_borough of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param metropolitan_borough: The metropolitan_borough of this NoteworthyPartOfBuilding.
        :type metropolitan_borough: List[object]
        """

        self._metropolitan_borough = metropolitan_borough

    @property
    def coast_length(self):
        """Gets the coast_length of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The coast_length of this NoteworthyPartOfBuilding.
        :rtype: List[float]
        """
        return self._coast_length

    @coast_length.setter
    def coast_length(self, coast_length):
        """Sets the coast_length of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param coast_length: The coast_length of this NoteworthyPartOfBuilding.
        :type coast_length: List[float]
        """

        self._coast_length = coast_length

    @property
    def joint_community(self):
        """Gets the joint_community of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The joint_community of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._joint_community

    @joint_community.setter
    def joint_community(self, joint_community):
        """Sets the joint_community of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param joint_community: The joint_community of this NoteworthyPartOfBuilding.
        :type joint_community: List[object]
        """

        self._joint_community = joint_community

    @property
    def ekatte_code(self):
        """Gets the ekatte_code of this NoteworthyPartOfBuilding.

        Indexing code used by the Bulgarian National Statistical Institute to identify populated places  # noqa: E501

        :return: The ekatte_code of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._ekatte_code

    @ekatte_code.setter
    def ekatte_code(self, ekatte_code):
        """Sets the ekatte_code of this NoteworthyPartOfBuilding.

        Indexing code used by the Bulgarian National Statistical Institute to identify populated places  # noqa: E501

        :param ekatte_code: The ekatte_code of this NoteworthyPartOfBuilding.
        :type ekatte_code: List[str]
        """

        self._ekatte_code = ekatte_code

    @property
    def per_capita_income(self):
        """Gets the per_capita_income of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The per_capita_income of this NoteworthyPartOfBuilding.
        :rtype: List[float]
        """
        return self._per_capita_income

    @per_capita_income.setter
    def per_capita_income(self, per_capita_income):
        """Sets the per_capita_income of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param per_capita_income: The per_capita_income of this NoteworthyPartOfBuilding.
        :type per_capita_income: List[float]
        """

        self._per_capita_income = per_capita_income

    @property
    def settlement(self):
        """Gets the settlement of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The settlement of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._settlement

    @settlement.setter
    def settlement(self, settlement):
        """Sets the settlement of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param settlement: The settlement of this NoteworthyPartOfBuilding.
        :type settlement: List[object]
        """

        self._settlement = settlement

    @property
    def sharing_out_population_year(self):
        """Gets the sharing_out_population_year of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The sharing_out_population_year of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._sharing_out_population_year

    @sharing_out_population_year.setter
    def sharing_out_population_year(self, sharing_out_population_year):
        """Sets the sharing_out_population_year of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param sharing_out_population_year: The sharing_out_population_year of this NoteworthyPartOfBuilding.
        :type sharing_out_population_year: List[str]
        """

        self._sharing_out_population_year = sharing_out_population_year

    @property
    def foundation_date(self):
        """Gets the foundation_date of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The foundation_date of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._foundation_date

    @foundation_date.setter
    def foundation_date(self, foundation_date):
        """Sets the foundation_date of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param foundation_date: The foundation_date of this NoteworthyPartOfBuilding.
        :type foundation_date: List[str]
        """

        self._foundation_date = foundation_date

    @property
    def maximum_depth(self):
        """Gets the maximum_depth of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The maximum_depth of this NoteworthyPartOfBuilding.
        :rtype: List[float]
        """
        return self._maximum_depth

    @maximum_depth.setter
    def maximum_depth(self, maximum_depth):
        """Sets the maximum_depth of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param maximum_depth: The maximum_depth of this NoteworthyPartOfBuilding.
        :type maximum_depth: List[float]
        """

        self._maximum_depth = maximum_depth

    @property
    def teryt_code(self):
        """Gets the teryt_code of this NoteworthyPartOfBuilding.

        indexing code used by the Polish National Official Register of the Territorial Division of the Country (TERYT) to identify various entities  # noqa: E501

        :return: The teryt_code of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._teryt_code

    @teryt_code.setter
    def teryt_code(self, teryt_code):
        """Sets the teryt_code of this NoteworthyPartOfBuilding.

        indexing code used by the Polish National Official Register of the Territorial Division of the Country (TERYT) to identify various entities  # noqa: E501

        :param teryt_code: The teryt_code of this NoteworthyPartOfBuilding.
        :type teryt_code: List[object]
        """

        self._teryt_code = teryt_code

    @property
    def demolition_year(self):
        """Gets the demolition_year of this NoteworthyPartOfBuilding.

        The year the building was demolished.  # noqa: E501

        :return: The demolition_year of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._demolition_year

    @demolition_year.setter
    def demolition_year(self, demolition_year):
        """Sets the demolition_year of this NoteworthyPartOfBuilding.

        The year the building was demolished.  # noqa: E501

        :param demolition_year: The demolition_year of this NoteworthyPartOfBuilding.
        :type demolition_year: List[str]
        """

        self._demolition_year = demolition_year

    @property
    def smallest_country(self):
        """Gets the smallest_country of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The smallest_country of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._smallest_country

    @smallest_country.setter
    def smallest_country(self, smallest_country):
        """Sets the smallest_country of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param smallest_country: The smallest_country of this NoteworthyPartOfBuilding.
        :type smallest_country: List[object]
        """

        self._smallest_country = smallest_country

    @property
    def algerian_name(self):
        """Gets the algerian_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The algerian_name of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._algerian_name

    @algerian_name.setter
    def algerian_name(self, algerian_name):
        """Sets the algerian_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param algerian_name: The algerian_name of this NoteworthyPartOfBuilding.
        :type algerian_name: List[str]
        """

        self._algerian_name = algerian_name

    @property
    def map(self):
        """Gets the map of this NoteworthyPartOfBuilding.

        A map of the place.  # noqa: E501

        :return: The map of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._map

    @map.setter
    def map(self, map):
        """Sets the map of this NoteworthyPartOfBuilding.

        A map of the place.  # noqa: E501

        :param map: The map of this NoteworthyPartOfBuilding.
        :type map: List[object]
        """

        self._map = map

    @property
    def localization_thumbnail_caption(self):
        """Gets the localization_thumbnail_caption of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The localization_thumbnail_caption of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._localization_thumbnail_caption

    @localization_thumbnail_caption.setter
    def localization_thumbnail_caption(self, localization_thumbnail_caption):
        """Sets the localization_thumbnail_caption of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param localization_thumbnail_caption: The localization_thumbnail_caption of this NoteworthyPartOfBuilding.
        :type localization_thumbnail_caption: List[str]
        """

        self._localization_thumbnail_caption = localization_thumbnail_caption

    @property
    def unlc_code(self):
        """Gets the unlc_code of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The unlc_code of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._unlc_code

    @unlc_code.setter
    def unlc_code(self, unlc_code):
        """Sets the unlc_code of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param unlc_code: The unlc_code of this NoteworthyPartOfBuilding.
        :type unlc_code: List[str]
        """

        self._unlc_code = unlc_code

    @property
    def sicilian_name(self):
        """Gets the sicilian_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The sicilian_name of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._sicilian_name

    @sicilian_name.setter
    def sicilian_name(self, sicilian_name):
        """Sets the sicilian_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param sicilian_name: The sicilian_name of this NoteworthyPartOfBuilding.
        :type sicilian_name: List[str]
        """

        self._sicilian_name = sicilian_name

    @property
    def department_position(self):
        """Gets the department_position of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The department_position of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._department_position

    @department_position.setter
    def department_position(self, department_position):
        """Sets the department_position of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param department_position: The department_position of this NoteworthyPartOfBuilding.
        :type department_position: List[str]
        """

        self._department_position = department_position

    @property
    def population_pct_men(self):
        """Gets the population_pct_men of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The population_pct_men of this NoteworthyPartOfBuilding.
        :rtype: List[int]
        """
        return self._population_pct_men

    @population_pct_men.setter
    def population_pct_men(self, population_pct_men):
        """Sets the population_pct_men of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param population_pct_men: The population_pct_men of this NoteworthyPartOfBuilding.
        :type population_pct_men: List[int]
        """

        self._population_pct_men = population_pct_men

    @property
    def law_country(self):
        """Gets the law_country of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The law_country of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._law_country

    @law_country.setter
    def law_country(self, law_country):
        """Sets the law_country of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param law_country: The law_country of this NoteworthyPartOfBuilding.
        :type law_country: List[str]
        """

        self._law_country = law_country

    @property
    def summer_temperature(self):
        """Gets the summer_temperature of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The summer_temperature of this NoteworthyPartOfBuilding.
        :rtype: List[float]
        """
        return self._summer_temperature

    @summer_temperature.setter
    def summer_temperature(self, summer_temperature):
        """Sets the summer_temperature of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param summer_temperature: The summer_temperature of this NoteworthyPartOfBuilding.
        :type summer_temperature: List[float]
        """

        self._summer_temperature = summer_temperature

    @property
    def area_date(self):
        """Gets the area_date of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The area_date of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._area_date

    @area_date.setter
    def area_date(self, area_date):
        """Sets the area_date of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param area_date: The area_date of this NoteworthyPartOfBuilding.
        :type area_date: List[str]
        """

        self._area_date = area_date

    @property
    def kind_of_coordinate(self):
        """Gets the kind_of_coordinate of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The kind_of_coordinate of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._kind_of_coordinate

    @kind_of_coordinate.setter
    def kind_of_coordinate(self, kind_of_coordinate):
        """Sets the kind_of_coordinate of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param kind_of_coordinate: The kind_of_coordinate of this NoteworthyPartOfBuilding.
        :type kind_of_coordinate: List[str]
        """

        self._kind_of_coordinate = kind_of_coordinate

    @property
    def black_long_distance_piste_number(self):
        """Gets the black_long_distance_piste_number of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The black_long_distance_piste_number of this NoteworthyPartOfBuilding.
        :rtype: List[int]
        """
        return self._black_long_distance_piste_number

    @black_long_distance_piste_number.setter
    def black_long_distance_piste_number(self, black_long_distance_piste_number):
        """Sets the black_long_distance_piste_number of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param black_long_distance_piste_number: The black_long_distance_piste_number of this NoteworthyPartOfBuilding.
        :type black_long_distance_piste_number: List[int]
        """

        self._black_long_distance_piste_number = black_long_distance_piste_number

    @property
    def water_area(self):
        """Gets the water_area of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The water_area of this NoteworthyPartOfBuilding.
        :rtype: List[float]
        """
        return self._water_area

    @water_area.setter
    def water_area(self, water_area):
        """Sets the water_area of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param water_area: The water_area of this NoteworthyPartOfBuilding.
        :type water_area: List[float]
        """

        self._water_area = water_area

    @property
    def frontier_length(self):
        """Gets the frontier_length of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The frontier_length of this NoteworthyPartOfBuilding.
        :rtype: List[float]
        """
        return self._frontier_length

    @frontier_length.setter
    def frontier_length(self, frontier_length):
        """Sets the frontier_length of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param frontier_length: The frontier_length of this NoteworthyPartOfBuilding.
        :type frontier_length: List[float]
        """

        self._frontier_length = frontier_length

    @property
    def tamazight_settlement_name(self):
        """Gets the tamazight_settlement_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The tamazight_settlement_name of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._tamazight_settlement_name

    @tamazight_settlement_name.setter
    def tamazight_settlement_name(self, tamazight_settlement_name):
        """Sets the tamazight_settlement_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param tamazight_settlement_name: The tamazight_settlement_name of this NoteworthyPartOfBuilding.
        :type tamazight_settlement_name: List[str]
        """

        self._tamazight_settlement_name = tamazight_settlement_name

    @property
    def reopening_date(self):
        """Gets the reopening_date of this NoteworthyPartOfBuilding.

        Date of reopening the architectural structure.  # noqa: E501

        :return: The reopening_date of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._reopening_date

    @reopening_date.setter
    def reopening_date(self, reopening_date):
        """Sets the reopening_date of this NoteworthyPartOfBuilding.

        Date of reopening the architectural structure.  # noqa: E501

        :param reopening_date: The reopening_date of this NoteworthyPartOfBuilding.
        :type reopening_date: List[str]
        """

        self._reopening_date = reopening_date

    @property
    def okato_code(self):
        """Gets the okato_code of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The okato_code of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._okato_code

    @okato_code.setter
    def okato_code(self, okato_code):
        """Sets the okato_code of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param okato_code: The okato_code of this NoteworthyPartOfBuilding.
        :type okato_code: List[str]
        """

        self._okato_code = okato_code

    @property
    def disappearance_date(self):
        """Gets the disappearance_date of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The disappearance_date of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._disappearance_date

    @disappearance_date.setter
    def disappearance_date(self, disappearance_date):
        """Sets the disappearance_date of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param disappearance_date: The disappearance_date of this NoteworthyPartOfBuilding.
        :type disappearance_date: List[str]
        """

        self._disappearance_date = disappearance_date

    @property
    def population_urban_density(self):
        """Gets the population_urban_density of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The population_urban_density of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._population_urban_density

    @population_urban_density.setter
    def population_urban_density(self, population_urban_density):
        """Sets the population_urban_density of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param population_urban_density: The population_urban_density of this NoteworthyPartOfBuilding.
        :type population_urban_density: List[object]
        """

        self._population_urban_density = population_urban_density

    @property
    def largest_country(self):
        """Gets the largest_country of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The largest_country of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._largest_country

    @largest_country.setter
    def largest_country(self, largest_country):
        """Sets the largest_country of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param largest_country: The largest_country of this NoteworthyPartOfBuilding.
        :type largest_country: List[object]
        """

        self._largest_country = largest_country

    @property
    def phone_prefix(self):
        """Gets the phone_prefix of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The phone_prefix of this NoteworthyPartOfBuilding.
        :rtype: List[int]
        """
        return self._phone_prefix

    @phone_prefix.setter
    def phone_prefix(self, phone_prefix):
        """Sets the phone_prefix of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param phone_prefix: The phone_prefix of this NoteworthyPartOfBuilding.
        :type phone_prefix: List[int]
        """

        self._phone_prefix = phone_prefix

    @property
    def capital(self):
        """Gets the capital of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The capital of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._capital

    @capital.setter
    def capital(self, capital):
        """Sets the capital of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param capital: The capital of this NoteworthyPartOfBuilding.
        :type capital: List[object]
        """

        self._capital = capital

    @property
    def status_year(self):
        """Gets the status_year of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The status_year of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._status_year

    @status_year.setter
    def status_year(self, status_year):
        """Sets the status_year of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param status_year: The status_year of this NoteworthyPartOfBuilding.
        :type status_year: List[str]
        """

        self._status_year = status_year

    @property
    def flora(self):
        """Gets the flora of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The flora of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._flora

    @flora.setter
    def flora(self, flora):
        """Sets the flora of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param flora: The flora of this NoteworthyPartOfBuilding.
        :type flora: List[str]
        """

        self._flora = flora

    @property
    def agglomeration_area(self):
        """Gets the agglomeration_area of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The agglomeration_area of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._agglomeration_area

    @agglomeration_area.setter
    def agglomeration_area(self, agglomeration_area):
        """Sets the agglomeration_area of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param agglomeration_area: The agglomeration_area of this NoteworthyPartOfBuilding.
        :type agglomeration_area: List[object]
        """

        self._agglomeration_area = agglomeration_area

    @property
    def cornish_name(self):
        """Gets the cornish_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The cornish_name of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._cornish_name

    @cornish_name.setter
    def cornish_name(self, cornish_name):
        """Sets the cornish_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param cornish_name: The cornish_name of this NoteworthyPartOfBuilding.
        :type cornish_name: List[str]
        """

        self._cornish_name = cornish_name

    @property
    def largest_city(self):
        """Gets the largest_city of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The largest_city of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._largest_city

    @largest_city.setter
    def largest_city(self, largest_city):
        """Sets the largest_city of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param largest_city: The largest_city of this NoteworthyPartOfBuilding.
        :type largest_city: List[object]
        """

        self._largest_city = largest_city

    @property
    def licence_number_label(self):
        """Gets the licence_number_label of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The licence_number_label of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._licence_number_label

    @licence_number_label.setter
    def licence_number_label(self, licence_number_label):
        """Sets the licence_number_label of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param licence_number_label: The licence_number_label of this NoteworthyPartOfBuilding.
        :type licence_number_label: List[str]
        """

        self._licence_number_label = licence_number_label

    @property
    def limit(self):
        """Gets the limit of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The limit of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param limit: The limit of this NoteworthyPartOfBuilding.
        :type limit: List[str]
        """

        self._limit = limit

    @property
    def scots_name(self):
        """Gets the scots_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The scots_name of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._scots_name

    @scots_name.setter
    def scots_name(self, scots_name):
        """Sets the scots_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param scots_name: The scots_name of this NoteworthyPartOfBuilding.
        :type scots_name: List[str]
        """

        self._scots_name = scots_name

    @property
    def refgeo(self):
        """Gets the refgeo of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The refgeo of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._refgeo

    @refgeo.setter
    def refgeo(self, refgeo):
        """Sets the refgeo of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param refgeo: The refgeo of this NoteworthyPartOfBuilding.
        :type refgeo: List[str]
        """

        self._refgeo = refgeo

    @property
    def refgen(self):
        """Gets the refgen of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The refgen of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._refgen

    @refgen.setter
    def refgen(self, refgen):
        """Sets the refgen of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param refgen: The refgen of this NoteworthyPartOfBuilding.
        :type refgen: List[str]
        """

        self._refgen = refgen

    @property
    def population_as_of(self):
        """Gets the population_as_of of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The population_as_of of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._population_as_of

    @population_as_of.setter
    def population_as_of(self, population_as_of):
        """Sets the population_as_of of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param population_as_of: The population_as_of of this NoteworthyPartOfBuilding.
        :type population_as_of: List[str]
        """

        self._population_as_of = population_as_of

    @property
    def different(self):
        """Gets the different of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The different of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._different

    @different.setter
    def different(self, different):
        """Sets the different of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param different: The different of this NoteworthyPartOfBuilding.
        :type different: List[str]
        """

        self._different = different

    @property
    def emblem(self):
        """Gets the emblem of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The emblem of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._emblem

    @emblem.setter
    def emblem(self, emblem):
        """Sets the emblem of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param emblem: The emblem of this NoteworthyPartOfBuilding.
        :type emblem: List[str]
        """

        self._emblem = emblem

    @property
    def representative(self):
        """Gets the representative of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The representative of this NoteworthyPartOfBuilding.
        :rtype: List[int]
        """
        return self._representative

    @representative.setter
    def representative(self, representative):
        """Sets the representative of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param representative: The representative of this NoteworthyPartOfBuilding.
        :type representative: List[int]
        """

        self._representative = representative

    @property
    def maximum_area_quote(self):
        """Gets the maximum_area_quote of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The maximum_area_quote of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._maximum_area_quote

    @maximum_area_quote.setter
    def maximum_area_quote(self, maximum_area_quote):
        """Sets the maximum_area_quote of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param maximum_area_quote: The maximum_area_quote of this NoteworthyPartOfBuilding.
        :type maximum_area_quote: List[str]
        """

        self._maximum_area_quote = maximum_area_quote

    @property
    def utc_offset(self):
        """Gets the utc_offset of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The utc_offset of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._utc_offset

    @utc_offset.setter
    def utc_offset(self, utc_offset):
        """Sets the utc_offset of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param utc_offset: The utc_offset of this NoteworthyPartOfBuilding.
        :type utc_offset: List[str]
        """

        self._utc_offset = utc_offset

    @property
    def pluviometry(self):
        """Gets the pluviometry of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The pluviometry of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._pluviometry

    @pluviometry.setter
    def pluviometry(self, pluviometry):
        """Sets the pluviometry of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param pluviometry: The pluviometry of this NoteworthyPartOfBuilding.
        :type pluviometry: List[str]
        """

        self._pluviometry = pluviometry

    @property
    def german_name(self):
        """Gets the german_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The german_name of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._german_name

    @german_name.setter
    def german_name(self, german_name):
        """Sets the german_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param german_name: The german_name of this NoteworthyPartOfBuilding.
        :type german_name: List[str]
        """

        self._german_name = german_name

    @property
    def per_capita_income_rank(self):
        """Gets the per_capita_income_rank of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The per_capita_income_rank of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._per_capita_income_rank

    @per_capita_income_rank.setter
    def per_capita_income_rank(self, per_capita_income_rank):
        """Sets the per_capita_income_rank of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param per_capita_income_rank: The per_capita_income_rank of this NoteworthyPartOfBuilding.
        :type per_capita_income_rank: List[str]
        """

        self._per_capita_income_rank = per_capita_income_rank

    @property
    def ski_piste_kilometre(self):
        """Gets the ski_piste_kilometre of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The ski_piste_kilometre of this NoteworthyPartOfBuilding.
        :rtype: List[float]
        """
        return self._ski_piste_kilometre

    @ski_piste_kilometre.setter
    def ski_piste_kilometre(self, ski_piste_kilometre):
        """Sets the ski_piste_kilometre of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param ski_piste_kilometre: The ski_piste_kilometre of this NoteworthyPartOfBuilding.
        :type ski_piste_kilometre: List[float]
        """

        self._ski_piste_kilometre = ski_piste_kilometre

    @property
    def distance_to_edinburgh(self):
        """Gets the distance_to_edinburgh of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The distance_to_edinburgh of this NoteworthyPartOfBuilding.
        :rtype: List[float]
        """
        return self._distance_to_edinburgh

    @distance_to_edinburgh.setter
    def distance_to_edinburgh(self, distance_to_edinburgh):
        """Sets the distance_to_edinburgh of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param distance_to_edinburgh: The distance_to_edinburgh of this NoteworthyPartOfBuilding.
        :type distance_to_edinburgh: List[float]
        """

        self._distance_to_edinburgh = distance_to_edinburgh

    @property
    def minimum_area(self):
        """Gets the minimum_area of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The minimum_area of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._minimum_area

    @minimum_area.setter
    def minimum_area(self, minimum_area):
        """Sets the minimum_area of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param minimum_area: The minimum_area of this NoteworthyPartOfBuilding.
        :type minimum_area: List[str]
        """

        self._minimum_area = minimum_area

    @property
    def municipality_code(self):
        """Gets the municipality_code of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The municipality_code of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._municipality_code

    @municipality_code.setter
    def municipality_code(self, municipality_code):
        """Sets the municipality_code of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param municipality_code: The municipality_code of this NoteworthyPartOfBuilding.
        :type municipality_code: List[str]
        """

        self._municipality_code = municipality_code

    @property
    def population_rural_density(self):
        """Gets the population_rural_density of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The population_rural_density of this NoteworthyPartOfBuilding.
        :rtype: List[float]
        """
        return self._population_rural_density

    @population_rural_density.setter
    def population_rural_density(self, population_rural_density):
        """Sets the population_rural_density of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param population_rural_density: The population_rural_density of this NoteworthyPartOfBuilding.
        :type population_rural_density: List[float]
        """

        self._population_rural_density = population_rural_density

    @property
    def kabyle_name(self):
        """Gets the kabyle_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The kabyle_name of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._kabyle_name

    @kabyle_name.setter
    def kabyle_name(self, kabyle_name):
        """Sets the kabyle_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param kabyle_name: The kabyle_name of this NoteworthyPartOfBuilding.
        :type kabyle_name: List[str]
        """

        self._kabyle_name = kabyle_name

    @property
    def red_ski_piste_number(self):
        """Gets the red_ski_piste_number of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The red_ski_piste_number of this NoteworthyPartOfBuilding.
        :rtype: List[int]
        """
        return self._red_ski_piste_number

    @red_ski_piste_number.setter
    def red_ski_piste_number(self, red_ski_piste_number):
        """Sets the red_ski_piste_number of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param red_ski_piste_number: The red_ski_piste_number of this NoteworthyPartOfBuilding.
        :type red_ski_piste_number: List[int]
        """

        self._red_ski_piste_number = red_ski_piste_number

    @property
    def other_name(self):
        """Gets the other_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The other_name of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._other_name

    @other_name.setter
    def other_name(self, other_name):
        """Sets the other_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param other_name: The other_name of this NoteworthyPartOfBuilding.
        :type other_name: List[str]
        """

        self._other_name = other_name

    @property
    def welsh_name(self):
        """Gets the welsh_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The welsh_name of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._welsh_name

    @welsh_name.setter
    def welsh_name(self, welsh_name):
        """Sets the welsh_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param welsh_name: The welsh_name of this NoteworthyPartOfBuilding.
        :type welsh_name: List[str]
        """

        self._welsh_name = welsh_name

    @property
    def lake(self):
        """Gets the lake of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The lake of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._lake

    @lake.setter
    def lake(self, lake):
        """Sets the lake of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param lake: The lake of this NoteworthyPartOfBuilding.
        :type lake: List[object]
        """

        self._lake = lake

    @property
    def collectivity_minority(self):
        """Gets the collectivity_minority of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The collectivity_minority of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._collectivity_minority

    @collectivity_minority.setter
    def collectivity_minority(self, collectivity_minority):
        """Sets the collectivity_minority of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param collectivity_minority: The collectivity_minority of this NoteworthyPartOfBuilding.
        :type collectivity_minority: List[object]
        """

        self._collectivity_minority = collectivity_minority

    @property
    def regional_language(self):
        """Gets the regional_language of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The regional_language of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._regional_language

    @regional_language.setter
    def regional_language(self, regional_language):
        """Sets the regional_language of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param regional_language: The regional_language of this NoteworthyPartOfBuilding.
        :type regional_language: List[object]
        """

        self._regional_language = regional_language

    @property
    def chaoui_name(self):
        """Gets the chaoui_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The chaoui_name of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._chaoui_name

    @chaoui_name.setter
    def chaoui_name(self, chaoui_name):
        """Sets the chaoui_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param chaoui_name: The chaoui_name of this NoteworthyPartOfBuilding.
        :type chaoui_name: List[str]
        """

        self._chaoui_name = chaoui_name

    @property
    def english_name(self):
        """Gets the english_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The english_name of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._english_name

    @english_name.setter
    def english_name(self, english_name):
        """Sets the english_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param english_name: The english_name of this NoteworthyPartOfBuilding.
        :type english_name: List[str]
        """

        self._english_name = english_name

    @property
    def county_seat(self):
        """Gets the county_seat of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The county_seat of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._county_seat

    @county_seat.setter
    def county_seat(self, county_seat):
        """Sets the county_seat of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param county_seat: The county_seat of this NoteworthyPartOfBuilding.
        :type county_seat: List[object]
        """

        self._county_seat = county_seat

    @property
    def purchasing_power_parity_year(self):
        """Gets the purchasing_power_parity_year of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The purchasing_power_parity_year of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._purchasing_power_parity_year

    @purchasing_power_parity_year.setter
    def purchasing_power_parity_year(self, purchasing_power_parity_year):
        """Sets the purchasing_power_parity_year of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param purchasing_power_parity_year: The purchasing_power_parity_year of this NoteworthyPartOfBuilding.
        :type purchasing_power_parity_year: List[str]
        """

        self._purchasing_power_parity_year = purchasing_power_parity_year

    @property
    def lieutenancy_area(self):
        """Gets the lieutenancy_area of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The lieutenancy_area of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._lieutenancy_area

    @lieutenancy_area.setter
    def lieutenancy_area(self, lieutenancy_area):
        """Sets the lieutenancy_area of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param lieutenancy_area: The lieutenancy_area of this NoteworthyPartOfBuilding.
        :type lieutenancy_area: List[object]
        """

        self._lieutenancy_area = lieutenancy_area

    @property
    def historical_map(self):
        """Gets the historical_map of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The historical_map of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._historical_map

    @historical_map.setter
    def historical_map(self, historical_map):
        """Sets the historical_map of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param historical_map: The historical_map of this NoteworthyPartOfBuilding.
        :type historical_map: List[str]
        """

        self._historical_map = historical_map

    @property
    def people_name(self):
        """Gets the people_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The people_name of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._people_name

    @people_name.setter
    def people_name(self, people_name):
        """Sets the people_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param people_name: The people_name of this NoteworthyPartOfBuilding.
        :type people_name: List[str]
        """

        self._people_name = people_name

    @property
    def regency(self):
        """Gets the regency of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The regency of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._regency

    @regency.setter
    def regency(self, regency):
        """Sets the regency of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param regency: The regency of this NoteworthyPartOfBuilding.
        :type regency: List[object]
        """

        self._regency = regency

    @property
    def code_municipal_monument(self):
        """Gets the code_municipal_monument of this NoteworthyPartOfBuilding.

        Code assigned to (Dutch) monuments at the municipal level, deemed to be of local value  # noqa: E501

        :return: The code_municipal_monument of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._code_municipal_monument

    @code_municipal_monument.setter
    def code_municipal_monument(self, code_municipal_monument):
        """Sets the code_municipal_monument of this NoteworthyPartOfBuilding.

        Code assigned to (Dutch) monuments at the municipal level, deemed to be of local value  # noqa: E501

        :param code_municipal_monument: The code_municipal_monument of this NoteworthyPartOfBuilding.
        :type code_municipal_monument: List[str]
        """

        self._code_municipal_monument = code_municipal_monument

    @property
    def architectural_style(self):
        """Gets the architectural_style of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The architectural_style of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._architectural_style

    @architectural_style.setter
    def architectural_style(self, architectural_style):
        """Sets the architectural_style of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param architectural_style: The architectural_style of this NoteworthyPartOfBuilding.
        :type architectural_style: List[object]
        """

        self._architectural_style = architectural_style

    @property
    def purchasing_power_parity_rank(self):
        """Gets the purchasing_power_parity_rank of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The purchasing_power_parity_rank of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._purchasing_power_parity_rank

    @purchasing_power_parity_rank.setter
    def purchasing_power_parity_rank(self, purchasing_power_parity_rank):
        """Sets the purchasing_power_parity_rank of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param purchasing_power_parity_rank: The purchasing_power_parity_rank of this NoteworthyPartOfBuilding.
        :type purchasing_power_parity_rank: List[str]
        """

        self._purchasing_power_parity_rank = purchasing_power_parity_rank

    @property
    def depth_quote(self):
        """Gets the depth_quote of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The depth_quote of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._depth_quote

    @depth_quote.setter
    def depth_quote(self, depth_quote):
        """Sets the depth_quote of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param depth_quote: The depth_quote of this NoteworthyPartOfBuilding.
        :type depth_quote: List[str]
        """

        self._depth_quote = depth_quote

    @property
    def reopening_year(self):
        """Gets the reopening_year of this NoteworthyPartOfBuilding.

        Year of reopening the architectural structure.  # noqa: E501

        :return: The reopening_year of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._reopening_year

    @reopening_year.setter
    def reopening_year(self, reopening_year):
        """Sets the reopening_year of this NoteworthyPartOfBuilding.

        Year of reopening the architectural structure.  # noqa: E501

        :param reopening_year: The reopening_year of this NoteworthyPartOfBuilding.
        :type reopening_year: List[str]
        """

        self._reopening_year = reopening_year

    @property
    def avifauna_population(self):
        """Gets the avifauna_population of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The avifauna_population of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._avifauna_population

    @avifauna_population.setter
    def avifauna_population(self, avifauna_population):
        """Sets the avifauna_population of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param avifauna_population: The avifauna_population of this NoteworthyPartOfBuilding.
        :type avifauna_population: List[str]
        """

        self._avifauna_population = avifauna_population

    @property
    def construction(self):
        """Gets the construction of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The construction of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._construction

    @construction.setter
    def construction(self, construction):
        """Sets the construction of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param construction: The construction of this NoteworthyPartOfBuilding.
        :type construction: List[object]
        """

        self._construction = construction

    @property
    def land(self):
        """Gets the land of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The land of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._land

    @land.setter
    def land(self, land):
        """Sets the land of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param land: The land of this NoteworthyPartOfBuilding.
        :type land: List[object]
        """

        self._land = land

    @property
    def sharing_out(self):
        """Gets the sharing_out of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The sharing_out of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._sharing_out

    @sharing_out.setter
    def sharing_out(self, sharing_out):
        """Sets the sharing_out of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param sharing_out: The sharing_out of this NoteworthyPartOfBuilding.
        :type sharing_out: List[str]
        """

        self._sharing_out = sharing_out

    @property
    def department(self):
        """Gets the department of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The department of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param department: The department of this NoteworthyPartOfBuilding.
        :type department: List[object]
        """

        self._department = department

    @property
    def opening_date(self):
        """Gets the opening_date of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The opening_date of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._opening_date

    @opening_date.setter
    def opening_date(self, opening_date):
        """Sets the opening_date of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param opening_date: The opening_date of this NoteworthyPartOfBuilding.
        :type opening_date: List[str]
        """

        self._opening_date = opening_date

    @property
    def other_language(self):
        """Gets the other_language of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The other_language of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._other_language

    @other_language.setter
    def other_language(self, other_language):
        """Sets the other_language of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param other_language: The other_language of this NoteworthyPartOfBuilding.
        :type other_language: List[str]
        """

        self._other_language = other_language

    @property
    def ofs_code(self):
        """Gets the ofs_code of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The ofs_code of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._ofs_code

    @ofs_code.setter
    def ofs_code(self, ofs_code):
        """Sets the ofs_code of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param ofs_code: The ofs_code of this NoteworthyPartOfBuilding.
        :type ofs_code: List[str]
        """

        self._ofs_code = ofs_code

    @property
    def elevation(self):
        """Gets the elevation of this NoteworthyPartOfBuilding.

        average elevation above the sea level  # noqa: E501

        :return: The elevation of this NoteworthyPartOfBuilding.
        :rtype: List[float]
        """
        return self._elevation

    @elevation.setter
    def elevation(self, elevation):
        """Sets the elevation of this NoteworthyPartOfBuilding.

        average elevation above the sea level  # noqa: E501

        :param elevation: The elevation of this NoteworthyPartOfBuilding.
        :type elevation: List[float]
        """

        self._elevation = elevation

    @property
    def endangered_since(self):
        """Gets the endangered_since of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The endangered_since of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._endangered_since

    @endangered_since.setter
    def endangered_since(self, endangered_since):
        """Sets the endangered_since of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param endangered_since: The endangered_since of this NoteworthyPartOfBuilding.
        :type endangered_since: List[str]
        """

        self._endangered_since = endangered_since

    @property
    def rank_area(self):
        """Gets the rank_area of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The rank_area of this NoteworthyPartOfBuilding.
        :rtype: List[int]
        """
        return self._rank_area

    @rank_area.setter
    def rank_area(self, rank_area):
        """Sets the rank_area of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param rank_area: The rank_area of this NoteworthyPartOfBuilding.
        :type rank_area: List[int]
        """

        self._rank_area = rank_area

    @property
    def prov_code(self):
        """Gets the prov_code of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The prov_code of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._prov_code

    @prov_code.setter
    def prov_code(self, prov_code):
        """Sets the prov_code of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param prov_code: The prov_code of this NoteworthyPartOfBuilding.
        :type prov_code: List[str]
        """

        self._prov_code = prov_code

    @property
    def visitors_percentage_change(self):
        """Gets the visitors_percentage_change of this NoteworthyPartOfBuilding.

        Percentage increase or decrease.  # noqa: E501

        :return: The visitors_percentage_change of this NoteworthyPartOfBuilding.
        :rtype: List[float]
        """
        return self._visitors_percentage_change

    @visitors_percentage_change.setter
    def visitors_percentage_change(self, visitors_percentage_change):
        """Sets the visitors_percentage_change of this NoteworthyPartOfBuilding.

        Percentage increase or decrease.  # noqa: E501

        :param visitors_percentage_change: The visitors_percentage_change of this NoteworthyPartOfBuilding.
        :type visitors_percentage_change: List[float]
        """

        self._visitors_percentage_change = visitors_percentage_change

    @property
    def merger_date(self):
        """Gets the merger_date of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The merger_date of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._merger_date

    @merger_date.setter
    def merger_date(self, merger_date):
        """Sets the merger_date of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param merger_date: The merger_date of this NoteworthyPartOfBuilding.
        :type merger_date: List[str]
        """

        self._merger_date = merger_date

    @property
    def seniunija(self):
        """Gets the seniunija of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The seniunija of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._seniunija

    @seniunija.setter
    def seniunija(self, seniunija):
        """Sets the seniunija of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param seniunija: The seniunija of this NoteworthyPartOfBuilding.
        :type seniunija: List[str]
        """

        self._seniunija = seniunija

    @property
    def rebuilding_date(self):
        """Gets the rebuilding_date of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The rebuilding_date of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._rebuilding_date

    @rebuilding_date.setter
    def rebuilding_date(self, rebuilding_date):
        """Sets the rebuilding_date of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param rebuilding_date: The rebuilding_date of this NoteworthyPartOfBuilding.
        :type rebuilding_date: List[str]
        """

        self._rebuilding_date = rebuilding_date

    @property
    def city_since(self):
        """Gets the city_since of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The city_since of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._city_since

    @city_since.setter
    def city_since(self, city_since):
        """Sets the city_since of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param city_since: The city_since of this NoteworthyPartOfBuilding.
        :type city_since: List[str]
        """

        self._city_since = city_since

    @property
    def nuts_code(self):
        """Gets the nuts_code of this NoteworthyPartOfBuilding.

        Nomenclature of Territorial Units for Statistics (NUTS) is a geocode  standard for referencing the subdivisions of countries  for statistical purposes. The standard is developed and regulated by the European Union, and thus only covers the member states of the EU in detail.  # noqa: E501

        :return: The nuts_code of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._nuts_code

    @nuts_code.setter
    def nuts_code(self, nuts_code):
        """Sets the nuts_code of this NoteworthyPartOfBuilding.

        Nomenclature of Territorial Units for Statistics (NUTS) is a geocode  standard for referencing the subdivisions of countries  for statistical purposes. The standard is developed and regulated by the European Union, and thus only covers the member states of the EU in detail.  # noqa: E501

        :param nuts_code: The nuts_code of this NoteworthyPartOfBuilding.
        :type nuts_code: List[str]
        """

        self._nuts_code = nuts_code

    @property
    def authority_mandate(self):
        """Gets the authority_mandate of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The authority_mandate of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._authority_mandate

    @authority_mandate.setter
    def authority_mandate(self, authority_mandate):
        """Sets the authority_mandate of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param authority_mandate: The authority_mandate of this NoteworthyPartOfBuilding.
        :type authority_mandate: List[str]
        """

        self._authority_mandate = authority_mandate

    @property
    def gnis_code(self):
        """Gets the gnis_code of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The gnis_code of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._gnis_code

    @gnis_code.setter
    def gnis_code(self, gnis_code):
        """Sets the gnis_code of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param gnis_code: The gnis_code of this NoteworthyPartOfBuilding.
        :type gnis_code: List[str]
        """

        self._gnis_code = gnis_code

    @property
    def deme(self):
        """Gets the deme of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The deme of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._deme

    @deme.setter
    def deme(self, deme):
        """Sets the deme of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param deme: The deme of this NoteworthyPartOfBuilding.
        :type deme: List[str]
        """

        self._deme = deme

    @property
    def maximum_depth_quote(self):
        """Gets the maximum_depth_quote of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The maximum_depth_quote of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._maximum_depth_quote

    @maximum_depth_quote.setter
    def maximum_depth_quote(self, maximum_depth_quote):
        """Sets the maximum_depth_quote of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param maximum_depth_quote: The maximum_depth_quote of this NoteworthyPartOfBuilding.
        :type maximum_depth_quote: List[str]
        """

        self._maximum_depth_quote = maximum_depth_quote

    @property
    def canton(self):
        """Gets the canton of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The canton of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._canton

    @canton.setter
    def canton(self, canton):
        """Sets the canton of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param canton: The canton of this NoteworthyPartOfBuilding.
        :type canton: List[object]
        """

        self._canton = canton

    @property
    def province_iso_code(self):
        """Gets the province_iso_code of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The province_iso_code of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._province_iso_code

    @province_iso_code.setter
    def province_iso_code(self, province_iso_code):
        """Sets the province_iso_code of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param province_iso_code: The province_iso_code of this NoteworthyPartOfBuilding.
        :type province_iso_code: List[str]
        """

        self._province_iso_code = province_iso_code

    @property
    def human_development_index_ranking_category(self):
        """Gets the human_development_index_ranking_category of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The human_development_index_ranking_category of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._human_development_index_ranking_category

    @human_development_index_ranking_category.setter
    def human_development_index_ranking_category(self, human_development_index_ranking_category):
        """Sets the human_development_index_ranking_category of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param human_development_index_ranking_category: The human_development_index_ranking_category of this NoteworthyPartOfBuilding.
        :type human_development_index_ranking_category: List[object]
        """

        self._human_development_index_ranking_category = human_development_index_ranking_category

    @property
    def nation(self):
        """Gets the nation of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The nation of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._nation

    @nation.setter
    def nation(self, nation):
        """Sets the nation of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param nation: The nation of this NoteworthyPartOfBuilding.
        :type nation: List[str]
        """

        self._nation = nation

    @property
    def arrondissement(self):
        """Gets the arrondissement of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The arrondissement of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._arrondissement

    @arrondissement.setter
    def arrondissement(self, arrondissement):
        """Sets the arrondissement of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param arrondissement: The arrondissement of this NoteworthyPartOfBuilding.
        :type arrondissement: List[object]
        """

        self._arrondissement = arrondissement

    @property
    def french_name(self):
        """Gets the french_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The french_name of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._french_name

    @french_name.setter
    def french_name(self, french_name):
        """Sets the french_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param french_name: The french_name of this NoteworthyPartOfBuilding.
        :type french_name: List[str]
        """

        self._french_name = french_name

    @property
    def supply(self):
        """Gets the supply of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The supply of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._supply

    @supply.setter
    def supply(self, supply):
        """Sets the supply of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param supply: The supply of this NoteworthyPartOfBuilding.
        :type supply: List[object]
        """

        self._supply = supply

    @property
    def agglomeration_population(self):
        """Gets the agglomeration_population of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The agglomeration_population of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._agglomeration_population

    @agglomeration_population.setter
    def agglomeration_population(self, agglomeration_population):
        """Sets the agglomeration_population of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param agglomeration_population: The agglomeration_population of this NoteworthyPartOfBuilding.
        :type agglomeration_population: List[object]
        """

        self._agglomeration_population = agglomeration_population

    @property
    def green_ski_piste_number(self):
        """Gets the green_ski_piste_number of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The green_ski_piste_number of this NoteworthyPartOfBuilding.
        :rtype: List[int]
        """
        return self._green_ski_piste_number

    @green_ski_piste_number.setter
    def green_ski_piste_number(self, green_ski_piste_number):
        """Sets the green_ski_piste_number of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param green_ski_piste_number: The green_ski_piste_number of this NoteworthyPartOfBuilding.
        :type green_ski_piste_number: List[int]
        """

        self._green_ski_piste_number = green_ski_piste_number

    @property
    def province(self):
        """Gets the province of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The province of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._province

    @province.setter
    def province(self, province):
        """Sets the province of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param province: The province of this NoteworthyPartOfBuilding.
        :type province: List[object]
        """

        self._province = province

    @property
    def meaning(self):
        """Gets the meaning of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The meaning of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._meaning

    @meaning.setter
    def meaning(self, meaning):
        """Sets the meaning of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param meaning: The meaning of this NoteworthyPartOfBuilding.
        :type meaning: List[str]
        """

        self._meaning = meaning

    @property
    def leader_party(self):
        """Gets the leader_party of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The leader_party of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._leader_party

    @leader_party.setter
    def leader_party(self, leader_party):
        """Sets the leader_party of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param leader_party: The leader_party of this NoteworthyPartOfBuilding.
        :type leader_party: List[object]
        """

        self._leader_party = leader_party

    @property
    def population_total_ranking(self):
        """Gets the population_total_ranking of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The population_total_ranking of this NoteworthyPartOfBuilding.
        :rtype: List[int]
        """
        return self._population_total_ranking

    @population_total_ranking.setter
    def population_total_ranking(self, population_total_ranking):
        """Sets the population_total_ranking of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param population_total_ranking: The population_total_ranking of this NoteworthyPartOfBuilding.
        :type population_total_ranking: List[int]
        """

        self._population_total_ranking = population_total_ranking

    @property
    def twin_city(self):
        """Gets the twin_city of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The twin_city of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._twin_city

    @twin_city.setter
    def twin_city(self, twin_city):
        """Sets the twin_city of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param twin_city: The twin_city of this NoteworthyPartOfBuilding.
        :type twin_city: List[object]
        """

        self._twin_city = twin_city

    @property
    def sharing_out_population(self):
        """Gets the sharing_out_population of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The sharing_out_population of this NoteworthyPartOfBuilding.
        :rtype: List[int]
        """
        return self._sharing_out_population

    @sharing_out_population.setter
    def sharing_out_population(self, sharing_out_population):
        """Sets the sharing_out_population of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param sharing_out_population: The sharing_out_population of this NoteworthyPartOfBuilding.
        :type sharing_out_population: List[int]
        """

        self._sharing_out_population = sharing_out_population

    @property
    def piscicultural_population(self):
        """Gets the piscicultural_population of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The piscicultural_population of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._piscicultural_population

    @piscicultural_population.setter
    def piscicultural_population(self, piscicultural_population):
        """Sets the piscicultural_population of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param piscicultural_population: The piscicultural_population of this NoteworthyPartOfBuilding.
        :type piscicultural_population: List[str]
        """

        self._piscicultural_population = piscicultural_population

    @property
    def distance_to_dublin(self):
        """Gets the distance_to_dublin of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The distance_to_dublin of this NoteworthyPartOfBuilding.
        :rtype: List[float]
        """
        return self._distance_to_dublin

    @distance_to_dublin.setter
    def distance_to_dublin(self, distance_to_dublin):
        """Sets the distance_to_dublin of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param distance_to_dublin: The distance_to_dublin of this NoteworthyPartOfBuilding.
        :type distance_to_dublin: List[float]
        """

        self._distance_to_dublin = distance_to_dublin

    @property
    def sharing_out_name(self):
        """Gets the sharing_out_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The sharing_out_name of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._sharing_out_name

    @sharing_out_name.setter
    def sharing_out_name(self, sharing_out_name):
        """Sets the sharing_out_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param sharing_out_name: The sharing_out_name of this NoteworthyPartOfBuilding.
        :type sharing_out_name: List[object]
        """

        self._sharing_out_name = sharing_out_name

    @property
    def land_percentage(self):
        """Gets the land_percentage of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The land_percentage of this NoteworthyPartOfBuilding.
        :rtype: List[float]
        """
        return self._land_percentage

    @land_percentage.setter
    def land_percentage(self, land_percentage):
        """Sets the land_percentage of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param land_percentage: The land_percentage of this NoteworthyPartOfBuilding.
        :type land_percentage: List[float]
        """

        self._land_percentage = land_percentage

    @property
    def visitors_total(self):
        """Gets the visitors_total of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The visitors_total of this NoteworthyPartOfBuilding.
        :rtype: List[int]
        """
        return self._visitors_total

    @visitors_total.setter
    def visitors_total(self, visitors_total):
        """Sets the visitors_total of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param visitors_total: The visitors_total of this NoteworthyPartOfBuilding.
        :type visitors_total: List[int]
        """

        self._visitors_total = visitors_total

    @property
    def population_year(self):
        """Gets the population_year of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The population_year of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._population_year

    @population_year.setter
    def population_year(self, population_year):
        """Sets the population_year of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param population_year: The population_year of this NoteworthyPartOfBuilding.
        :type population_year: List[str]
        """

        self._population_year = population_year

    @property
    def administrative_collectivity(self):
        """Gets the administrative_collectivity of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The administrative_collectivity of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._administrative_collectivity

    @administrative_collectivity.setter
    def administrative_collectivity(self, administrative_collectivity):
        """Sets the administrative_collectivity of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param administrative_collectivity: The administrative_collectivity of this NoteworthyPartOfBuilding.
        :type administrative_collectivity: List[object]
        """

        self._administrative_collectivity = administrative_collectivity

    @property
    def per_capita_income_as_of(self):
        """Gets the per_capita_income_as_of of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The per_capita_income_as_of of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._per_capita_income_as_of

    @per_capita_income_as_of.setter
    def per_capita_income_as_of(self, per_capita_income_as_of):
        """Sets the per_capita_income_as_of of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param per_capita_income_as_of: The per_capita_income_as_of of this NoteworthyPartOfBuilding.
        :type per_capita_income_as_of: List[str]
        """

        self._per_capita_income_as_of = per_capita_income_as_of

    @property
    def architectual_bureau(self):
        """Gets the architectual_bureau of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The architectual_bureau of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._architectual_bureau

    @architectual_bureau.setter
    def architectual_bureau(self, architectual_bureau):
        """Sets the architectual_bureau of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param architectual_bureau: The architectual_bureau of this NoteworthyPartOfBuilding.
        :type architectual_bureau: List[object]
        """

        self._architectual_bureau = architectual_bureau

    @property
    def circle(self):
        """Gets the circle of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The circle of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._circle

    @circle.setter
    def circle(self, circle):
        """Sets the circle of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param circle: The circle of this NoteworthyPartOfBuilding.
        :type circle: List[str]
        """

        self._circle = circle

    @property
    def occitan_name(self):
        """Gets the occitan_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The occitan_name of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._occitan_name

    @occitan_name.setter
    def occitan_name(self, occitan_name):
        """Sets the occitan_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param occitan_name: The occitan_name of this NoteworthyPartOfBuilding.
        :type occitan_name: List[str]
        """

        self._occitan_name = occitan_name

    @property
    def blue_long_distance_piste_number(self):
        """Gets the blue_long_distance_piste_number of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The blue_long_distance_piste_number of this NoteworthyPartOfBuilding.
        :rtype: List[int]
        """
        return self._blue_long_distance_piste_number

    @blue_long_distance_piste_number.setter
    def blue_long_distance_piste_number(self, blue_long_distance_piste_number):
        """Sets the blue_long_distance_piste_number of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param blue_long_distance_piste_number: The blue_long_distance_piste_number of this NoteworthyPartOfBuilding.
        :type blue_long_distance_piste_number: List[int]
        """

        self._blue_long_distance_piste_number = blue_long_distance_piste_number

    @property
    def building_start_date(self):
        """Gets the building_start_date of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The building_start_date of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._building_start_date

    @building_start_date.setter
    def building_start_date(self, building_start_date):
        """Sets the building_start_date of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param building_start_date: The building_start_date of this NoteworthyPartOfBuilding.
        :type building_start_date: List[str]
        """

        self._building_start_date = building_start_date

    @property
    def algerian_settlement_name(self):
        """Gets the algerian_settlement_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The algerian_settlement_name of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._algerian_settlement_name

    @algerian_settlement_name.setter
    def algerian_settlement_name(self, algerian_settlement_name):
        """Sets the algerian_settlement_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param algerian_settlement_name: The algerian_settlement_name of this NoteworthyPartOfBuilding.
        :type algerian_settlement_name: List[str]
        """

        self._algerian_settlement_name = algerian_settlement_name

    @property
    def gross_domestic_product_purchasing_power_parity_per_capita(self):
        """Gets the gross_domestic_product_purchasing_power_parity_per_capita of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The gross_domestic_product_purchasing_power_parity_per_capita of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._gross_domestic_product_purchasing_power_parity_per_capita

    @gross_domestic_product_purchasing_power_parity_per_capita.setter
    def gross_domestic_product_purchasing_power_parity_per_capita(self, gross_domestic_product_purchasing_power_parity_per_capita):
        """Sets the gross_domestic_product_purchasing_power_parity_per_capita of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param gross_domestic_product_purchasing_power_parity_per_capita: The gross_domestic_product_purchasing_power_parity_per_capita of this NoteworthyPartOfBuilding.
        :type gross_domestic_product_purchasing_power_parity_per_capita: List[object]
        """

        self._gross_domestic_product_purchasing_power_parity_per_capita = gross_domestic_product_purchasing_power_parity_per_capita

    @property
    def date_agreement(self):
        """Gets the date_agreement of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The date_agreement of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._date_agreement

    @date_agreement.setter
    def date_agreement(self, date_agreement):
        """Sets the date_agreement of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param date_agreement: The date_agreement of this NoteworthyPartOfBuilding.
        :type date_agreement: List[str]
        """

        self._date_agreement = date_agreement

    @property
    def frazioni(self):
        """Gets the frazioni of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The frazioni of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._frazioni

    @frazioni.setter
    def frazioni(self, frazioni):
        """Sets the frazioni of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param frazioni: The frazioni of this NoteworthyPartOfBuilding.
        :type frazioni: List[object]
        """

        self._frazioni = frazioni

    @property
    def mayor_article(self):
        """Gets the mayor_article of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The mayor_article of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._mayor_article

    @mayor_article.setter
    def mayor_article(self, mayor_article):
        """Sets the mayor_article of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param mayor_article: The mayor_article of this NoteworthyPartOfBuilding.
        :type mayor_article: List[str]
        """

        self._mayor_article = mayor_article

    @property
    def iso31661_code(self):
        """Gets the iso31661_code of this NoteworthyPartOfBuilding.

        defines codes for the names of countries, dependent territories, and special areas of geographical interest  # noqa: E501

        :return: The iso31661_code of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._iso31661_code

    @iso31661_code.setter
    def iso31661_code(self, iso31661_code):
        """Sets the iso31661_code of this NoteworthyPartOfBuilding.

        defines codes for the names of countries, dependent territories, and special areas of geographical interest  # noqa: E501

        :param iso31661_code: The iso31661_code of this NoteworthyPartOfBuilding.
        :type iso31661_code: List[str]
        """

        self._iso31661_code = iso31661_code

    @property
    def simc_code(self):
        """Gets the simc_code of this NoteworthyPartOfBuilding.

        indexing code used by the Polish National Official Register of the Territorial Division of the Country (TERYT) to identify various entities  # noqa: E501

        :return: The simc_code of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._simc_code

    @simc_code.setter
    def simc_code(self, simc_code):
        """Sets the simc_code of this NoteworthyPartOfBuilding.

        indexing code used by the Polish National Official Register of the Territorial Division of the Country (TERYT) to identify various entities  # noqa: E501

        :param simc_code: The simc_code of this NoteworthyPartOfBuilding.
        :type simc_code: List[object]
        """

        self._simc_code = simc_code

    @property
    def council_area(self):
        """Gets the council_area of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The council_area of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._council_area

    @council_area.setter
    def council_area(self, council_area):
        """Sets the council_area of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param council_area: The council_area of this NoteworthyPartOfBuilding.
        :type council_area: List[object]
        """

        self._council_area = council_area

    @property
    def unesco(self):
        """Gets the unesco of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The unesco of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._unesco

    @unesco.setter
    def unesco(self, unesco):
        """Sets the unesco of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param unesco: The unesco of this NoteworthyPartOfBuilding.
        :type unesco: List[object]
        """

        self._unesco = unesco

    @property
    def gross_domestic_product(self):
        """Gets the gross_domestic_product of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The gross_domestic_product of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._gross_domestic_product

    @gross_domestic_product.setter
    def gross_domestic_product(self, gross_domestic_product):
        """Sets the gross_domestic_product of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param gross_domestic_product: The gross_domestic_product of this NoteworthyPartOfBuilding.
        :type gross_domestic_product: List[object]
        """

        self._gross_domestic_product = gross_domestic_product

    @property
    def gross_domestic_product_rank(self):
        """Gets the gross_domestic_product_rank of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The gross_domestic_product_rank of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._gross_domestic_product_rank

    @gross_domestic_product_rank.setter
    def gross_domestic_product_rank(self, gross_domestic_product_rank):
        """Sets the gross_domestic_product_rank of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param gross_domestic_product_rank: The gross_domestic_product_rank of this NoteworthyPartOfBuilding.
        :type gross_domestic_product_rank: List[str]
        """

        self._gross_domestic_product_rank = gross_domestic_product_rank

    @property
    def distance_to_douglas(self):
        """Gets the distance_to_douglas of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The distance_to_douglas of this NoteworthyPartOfBuilding.
        :rtype: List[float]
        """
        return self._distance_to_douglas

    @distance_to_douglas.setter
    def distance_to_douglas(self, distance_to_douglas):
        """Sets the distance_to_douglas of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param distance_to_douglas: The distance_to_douglas of this NoteworthyPartOfBuilding.
        :type distance_to_douglas: List[float]
        """

        self._distance_to_douglas = distance_to_douglas

    @property
    def visitor_statistics_as_of(self):
        """Gets the visitor_statistics_as_of of this NoteworthyPartOfBuilding.

        Year visitor information was gathered.  # noqa: E501

        :return: The visitor_statistics_as_of of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._visitor_statistics_as_of

    @visitor_statistics_as_of.setter
    def visitor_statistics_as_of(self, visitor_statistics_as_of):
        """Sets the visitor_statistics_as_of of this NoteworthyPartOfBuilding.

        Year visitor information was gathered.  # noqa: E501

        :param visitor_statistics_as_of: The visitor_statistics_as_of of this NoteworthyPartOfBuilding.
        :type visitor_statistics_as_of: List[str]
        """

        self._visitor_statistics_as_of = visitor_statistics_as_of

    @property
    def number_of_municipalities(self):
        """Gets the number_of_municipalities of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The number_of_municipalities of this NoteworthyPartOfBuilding.
        :rtype: List[int]
        """
        return self._number_of_municipalities

    @number_of_municipalities.setter
    def number_of_municipalities(self, number_of_municipalities):
        """Sets the number_of_municipalities of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param number_of_municipalities: The number_of_municipalities of this NoteworthyPartOfBuilding.
        :type number_of_municipalities: List[int]
        """

        self._number_of_municipalities = number_of_municipalities

    @property
    def coordinates(self):
        """Gets the coordinates of this NoteworthyPartOfBuilding.

        ένα σύστημα συντεταγμένων με δύο μεγέθη.  # noqa: E501

        :return: The coordinates of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._coordinates

    @coordinates.setter
    def coordinates(self, coordinates):
        """Sets the coordinates of this NoteworthyPartOfBuilding.

        ένα σύστημα συντεταγμένων με δύο μεγέθη.  # noqa: E501

        :param coordinates: The coordinates of this NoteworthyPartOfBuilding.
        :type coordinates: List[str]
        """

        self._coordinates = coordinates

    @property
    def gini_coefficient_ranking(self):
        """Gets the gini_coefficient_ranking of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The gini_coefficient_ranking of this NoteworthyPartOfBuilding.
        :rtype: List[int]
        """
        return self._gini_coefficient_ranking

    @gini_coefficient_ranking.setter
    def gini_coefficient_ranking(self, gini_coefficient_ranking):
        """Sets the gini_coefficient_ranking of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param gini_coefficient_ranking: The gini_coefficient_ranking of this NoteworthyPartOfBuilding.
        :type gini_coefficient_ranking: List[int]
        """

        self._gini_coefficient_ranking = gini_coefficient_ranking

    @property
    def highest_point(self):
        """Gets the highest_point of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The highest_point of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._highest_point

    @highest_point.setter
    def highest_point(self, highest_point):
        """Sets the highest_point of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param highest_point: The highest_point of this NoteworthyPartOfBuilding.
        :type highest_point: List[object]
        """

        self._highest_point = highest_point

    @property
    def flower(self):
        """Gets the flower of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The flower of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._flower

    @flower.setter
    def flower(self, flower):
        """Sets the flower of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param flower: The flower of this NoteworthyPartOfBuilding.
        :type flower: List[object]
        """

        self._flower = flower

    @property
    def hra_state(self):
        """Gets the hra_state of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The hra_state of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._hra_state

    @hra_state.setter
    def hra_state(self, hra_state):
        """Sets the hra_state of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param hra_state: The hra_state of this NoteworthyPartOfBuilding.
        :type hra_state: List[str]
        """

        self._hra_state = hra_state

    @property
    def depths(self):
        """Gets the depths of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The depths of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._depths

    @depths.setter
    def depths(self, depths):
        """Sets the depths of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param depths: The depths of this NoteworthyPartOfBuilding.
        :type depths: List[object]
        """

        self._depths = depths

    @property
    def cca_state(self):
        """Gets the cca_state of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The cca_state of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._cca_state

    @cca_state.setter
    def cca_state(self, cca_state):
        """Sets the cca_state of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param cca_state: The cca_state of this NoteworthyPartOfBuilding.
        :type cca_state: List[str]
        """

        self._cca_state = cca_state

    @property
    def politic_government_department(self):
        """Gets the politic_government_department of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The politic_government_department of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._politic_government_department

    @politic_government_department.setter
    def politic_government_department(self, politic_government_department):
        """Sets the politic_government_department of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param politic_government_department: The politic_government_department of this NoteworthyPartOfBuilding.
        :type politic_government_department: List[object]
        """

        self._politic_government_department = politic_government_department

    @property
    def currency_code(self):
        """Gets the currency_code of this NoteworthyPartOfBuilding.

        ISO 4217 currency designators.  # noqa: E501

        :return: The currency_code of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this NoteworthyPartOfBuilding.

        ISO 4217 currency designators.  # noqa: E501

        :param currency_code: The currency_code of this NoteworthyPartOfBuilding.
        :type currency_code: List[str]
        """

        self._currency_code = currency_code

    @property
    def tu(self):
        """Gets the tu of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The tu of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._tu

    @tu.setter
    def tu(self, tu):
        """Sets the tu of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param tu: The tu of this NoteworthyPartOfBuilding.
        :type tu: List[str]
        """

        self._tu = tu

    @property
    def population_metro(self):
        """Gets the population_metro of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The population_metro of this NoteworthyPartOfBuilding.
        :rtype: List[int]
        """
        return self._population_metro

    @population_metro.setter
    def population_metro(self, population_metro):
        """Sets the population_metro of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param population_metro: The population_metro of this NoteworthyPartOfBuilding.
        :type population_metro: List[int]
        """

        self._population_metro = population_metro

    @property
    def climb_up_number(self):
        """Gets the climb_up_number of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The climb_up_number of this NoteworthyPartOfBuilding.
        :rtype: List[int]
        """
        return self._climb_up_number

    @climb_up_number.setter
    def climb_up_number(self, climb_up_number):
        """Sets the climb_up_number of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param climb_up_number: The climb_up_number of this NoteworthyPartOfBuilding.
        :type climb_up_number: List[int]
        """

        self._climb_up_number = climb_up_number

    @property
    def founding_person(self):
        """Gets the founding_person of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The founding_person of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._founding_person

    @founding_person.setter
    def founding_person(self, founding_person):
        """Sets the founding_person of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param founding_person: The founding_person of this NoteworthyPartOfBuilding.
        :type founding_person: List[object]
        """

        self._founding_person = founding_person

    @property
    def postal_code(self):
        """Gets the postal_code of this NoteworthyPartOfBuilding.

        A postal code (known in various countries as a post code, postcode, or ZIP code) is a series of letters and/or digits appended to a postal address for the purpose of sorting mail.  # noqa: E501

        :return: The postal_code of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this NoteworthyPartOfBuilding.

        A postal code (known in various countries as a post code, postcode, or ZIP code) is a series of letters and/or digits appended to a postal address for the purpose of sorting mail.  # noqa: E501

        :param postal_code: The postal_code of this NoteworthyPartOfBuilding.
        :type postal_code: List[str]
        """

        self._postal_code = postal_code

    @property
    def land_area(self):
        """Gets the land_area of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The land_area of this NoteworthyPartOfBuilding.
        :rtype: List[float]
        """
        return self._land_area

    @land_area.setter
    def land_area(self, land_area):
        """Sets the land_area of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param land_area: The land_area of this NoteworthyPartOfBuilding.
        :type land_area: List[float]
        """

        self._land_area = land_area

    @property
    def code_national_monument(self):
        """Gets the code_national_monument of this NoteworthyPartOfBuilding.

        Code assigned to (Dutch) monuments at the national level, deemed to be of national value  # noqa: E501

        :return: The code_national_monument of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._code_national_monument

    @code_national_monument.setter
    def code_national_monument(self, code_national_monument):
        """Sets the code_national_monument of this NoteworthyPartOfBuilding.

        Code assigned to (Dutch) monuments at the national level, deemed to be of national value  # noqa: E501

        :param code_national_monument: The code_national_monument of this NoteworthyPartOfBuilding.
        :type code_national_monument: List[str]
        """

        self._code_national_monument = code_national_monument

    @property
    def originally_used_for(self):
        """Gets the originally_used_for of this NoteworthyPartOfBuilding.

        Original use of the architectural structure, if it is currently being used as anything other than its original purpose.  # noqa: E501

        :return: The originally_used_for of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._originally_used_for

    @originally_used_for.setter
    def originally_used_for(self, originally_used_for):
        """Sets the originally_used_for of this NoteworthyPartOfBuilding.

        Original use of the architectural structure, if it is currently being used as anything other than its original purpose.  # noqa: E501

        :param originally_used_for: The originally_used_for of this NoteworthyPartOfBuilding.
        :type originally_used_for: List[str]
        """

        self._originally_used_for = originally_used_for

    @property
    def president_regional_council_mandate(self):
        """Gets the president_regional_council_mandate of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The president_regional_council_mandate of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._president_regional_council_mandate

    @president_regional_council_mandate.setter
    def president_regional_council_mandate(self, president_regional_council_mandate):
        """Sets the president_regional_council_mandate of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param president_regional_council_mandate: The president_regional_council_mandate of this NoteworthyPartOfBuilding.
        :type president_regional_council_mandate: List[str]
        """

        self._president_regional_council_mandate = president_regional_council_mandate

    @property
    def retention_time(self):
        """Gets the retention_time of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The retention_time of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._retention_time

    @retention_time.setter
    def retention_time(self, retention_time):
        """Sets the retention_time of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param retention_time: The retention_time of this NoteworthyPartOfBuilding.
        :type retention_time: List[str]
        """

        self._retention_time = retention_time

    @property
    def gini_coefficient_category(self):
        """Gets the gini_coefficient_category of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The gini_coefficient_category of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._gini_coefficient_category

    @gini_coefficient_category.setter
    def gini_coefficient_category(self, gini_coefficient_category):
        """Sets the gini_coefficient_category of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param gini_coefficient_category: The gini_coefficient_category of this NoteworthyPartOfBuilding.
        :type gini_coefficient_category: List[object]
        """

        self._gini_coefficient_category = gini_coefficient_category

    @property
    def sardinian_name(self):
        """Gets the sardinian_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The sardinian_name of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._sardinian_name

    @sardinian_name.setter
    def sardinian_name(self, sardinian_name):
        """Sets the sardinian_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param sardinian_name: The sardinian_name of this NoteworthyPartOfBuilding.
        :type sardinian_name: List[str]
        """

        self._sardinian_name = sardinian_name

    @property
    def features(self):
        """Gets the features of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The features of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param features: The features of this NoteworthyPartOfBuilding.
        :type features: List[object]
        """

        self._features = features

    @property
    def forester_district(self):
        """Gets the forester_district of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The forester_district of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._forester_district

    @forester_district.setter
    def forester_district(self, forester_district):
        """Sets the forester_district of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param forester_district: The forester_district of this NoteworthyPartOfBuilding.
        :type forester_district: List[object]
        """

        self._forester_district = forester_district

    @property
    def illiteracy(self):
        """Gets the illiteracy of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The illiteracy of this NoteworthyPartOfBuilding.
        :rtype: List[float]
        """
        return self._illiteracy

    @illiteracy.setter
    def illiteracy(self, illiteracy):
        """Sets the illiteracy of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param illiteracy: The illiteracy of this NoteworthyPartOfBuilding.
        :type illiteracy: List[float]
        """

        self._illiteracy = illiteracy

    @property
    def gross_domestic_product_per_people(self):
        """Gets the gross_domestic_product_per_people of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The gross_domestic_product_per_people of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._gross_domestic_product_per_people

    @gross_domestic_product_per_people.setter
    def gross_domestic_product_per_people(self, gross_domestic_product_per_people):
        """Sets the gross_domestic_product_per_people of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param gross_domestic_product_per_people: The gross_domestic_product_per_people of this NoteworthyPartOfBuilding.
        :type gross_domestic_product_per_people: List[str]
        """

        self._gross_domestic_product_per_people = gross_domestic_product_per_people

    @property
    def kind_of_rock(self):
        """Gets the kind_of_rock of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The kind_of_rock of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._kind_of_rock

    @kind_of_rock.setter
    def kind_of_rock(self, kind_of_rock):
        """Sets the kind_of_rock of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param kind_of_rock: The kind_of_rock of this NoteworthyPartOfBuilding.
        :type kind_of_rock: List[str]
        """

        self._kind_of_rock = kind_of_rock

    @property
    def arberisht_name(self):
        """Gets the arberisht_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The arberisht_name of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._arberisht_name

    @arberisht_name.setter
    def arberisht_name(self, arberisht_name):
        """Sets the arberisht_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param arberisht_name: The arberisht_name of this NoteworthyPartOfBuilding.
        :type arberisht_name: List[str]
        """

        self._arberisht_name = arberisht_name

    @property
    def manx_name(self):
        """Gets the manx_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The manx_name of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._manx_name

    @manx_name.setter
    def manx_name(self, manx_name):
        """Sets the manx_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param manx_name: The manx_name of this NoteworthyPartOfBuilding.
        :type manx_name: List[str]
        """

        self._manx_name = manx_name

    @property
    def protection_status(self):
        """Gets the protection_status of this NoteworthyPartOfBuilding.

        The sort of status that is granted to a protected Building or Monument. This is not about being protected or not, this is about the nature of the protection regime. E.g., in the Netherlands the protection status 'rijksmonument' points to more elaborate protection than other statuses.  # noqa: E501

        :return: The protection_status of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._protection_status

    @protection_status.setter
    def protection_status(self, protection_status):
        """Sets the protection_status of this NoteworthyPartOfBuilding.

        The sort of status that is granted to a protected Building or Monument. This is not about being protected or not, this is about the nature of the protection regime. E.g., in the Netherlands the protection status 'rijksmonument' points to more elaborate protection than other statuses.  # noqa: E501

        :param protection_status: The protection_status of this NoteworthyPartOfBuilding.
        :type protection_status: List[str]
        """

        self._protection_status = protection_status

    @property
    def fips_code(self):
        """Gets the fips_code of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The fips_code of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._fips_code

    @fips_code.setter
    def fips_code(self, fips_code):
        """Sets the fips_code of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param fips_code: The fips_code of this NoteworthyPartOfBuilding.
        :type fips_code: List[str]
        """

        self._fips_code = fips_code

    @property
    def greek_name(self):
        """Gets the greek_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The greek_name of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._greek_name

    @greek_name.setter
    def greek_name(self, greek_name):
        """Sets the greek_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param greek_name: The greek_name of this NoteworthyPartOfBuilding.
        :type greek_name: List[str]
        """

        self._greek_name = greek_name

    @property
    def population_density(self):
        """Gets the population_density of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The population_density of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._population_density

    @population_density.setter
    def population_density(self, population_density):
        """Sets the population_density of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param population_density: The population_density of this NoteworthyPartOfBuilding.
        :type population_density: List[object]
        """

        self._population_density = population_density

    @property
    def elevation_quote(self):
        """Gets the elevation_quote of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The elevation_quote of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._elevation_quote

    @elevation_quote.setter
    def elevation_quote(self, elevation_quote):
        """Sets the elevation_quote of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param elevation_quote: The elevation_quote of this NoteworthyPartOfBuilding.
        :type elevation_quote: List[str]
        """

        self._elevation_quote = elevation_quote

    @property
    def outskirts(self):
        """Gets the outskirts of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The outskirts of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._outskirts

    @outskirts.setter
    def outskirts(self, outskirts):
        """Sets the outskirts of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param outskirts: The outskirts of this NoteworthyPartOfBuilding.
        :type outskirts: List[str]
        """

        self._outskirts = outskirts

    @property
    def area_urban(self):
        """Gets the area_urban of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The area_urban of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._area_urban

    @area_urban.setter
    def area_urban(self, area_urban):
        """Sets the area_urban of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param area_urban: The area_urban of this NoteworthyPartOfBuilding.
        :type area_urban: List[object]
        """

        self._area_urban = area_urban

    @property
    def unlo_code(self):
        """Gets the unlo_code of this NoteworthyPartOfBuilding.

        UN/LOCODE, the United Nations Code for Trade and Transport Locations, is a geographic coding scheme developed and maintained by United Nations Economic Commission for Europe (UNECE), a unit of the United Nations. UN/LOCODE assigns codes to locations used in trade and transport  with functions such as seaports, rail and road terminals, airports, post offices and border crossing points.  # noqa: E501

        :return: The unlo_code of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._unlo_code

    @unlo_code.setter
    def unlo_code(self, unlo_code):
        """Sets the unlo_code of this NoteworthyPartOfBuilding.

        UN/LOCODE, the United Nations Code for Trade and Transport Locations, is a geographic coding scheme developed and maintained by United Nations Economic Commission for Europe (UNECE), a unit of the United Nations. UN/LOCODE assigns codes to locations used in trade and transport  with functions such as seaports, rail and road terminals, airports, post offices and border crossing points.  # noqa: E501

        :param unlo_code: The unlo_code of this NoteworthyPartOfBuilding.
        :type unlo_code: List[str]
        """

        self._unlo_code = unlo_code

    @property
    def district(self):
        """Gets the district of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The district of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._district

    @district.setter
    def district(self, district):
        """Sets the district of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param district: The district of this NoteworthyPartOfBuilding.
        :type district: List[object]
        """

        self._district = district

    @property
    def merged_settlement(self):
        """Gets the merged_settlement of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The merged_settlement of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._merged_settlement

    @merged_settlement.setter
    def merged_settlement(self, merged_settlement):
        """Sets the merged_settlement of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param merged_settlement: The merged_settlement of this NoteworthyPartOfBuilding.
        :type merged_settlement: List[object]
        """

        self._merged_settlement = merged_settlement

    @property
    def parliament_type(self):
        """Gets the parliament_type of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The parliament_type of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._parliament_type

    @parliament_type.setter
    def parliament_type(self, parliament_type):
        """Sets the parliament_type of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param parliament_type: The parliament_type of this NoteworthyPartOfBuilding.
        :type parliament_type: List[str]
        """

        self._parliament_type = parliament_type

    @property
    def previous_entity(self):
        """Gets the previous_entity of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The previous_entity of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._previous_entity

    @previous_entity.setter
    def previous_entity(self, previous_entity):
        """Sets the previous_entity of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param previous_entity: The previous_entity of this NoteworthyPartOfBuilding.
        :type previous_entity: List[object]
        """

        self._previous_entity = previous_entity

    @property
    def federal_state(self):
        """Gets the federal_state of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The federal_state of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._federal_state

    @federal_state.setter
    def federal_state(self, federal_state):
        """Sets the federal_state of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param federal_state: The federal_state of this NoteworthyPartOfBuilding.
        :type federal_state: List[object]
        """

        self._federal_state = federal_state

    @property
    def maximum_area(self):
        """Gets the maximum_area of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The maximum_area of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._maximum_area

    @maximum_area.setter
    def maximum_area(self, maximum_area):
        """Sets the maximum_area of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param maximum_area: The maximum_area of this NoteworthyPartOfBuilding.
        :type maximum_area: List[str]
        """

        self._maximum_area = maximum_area

    @property
    def demolition_date(self):
        """Gets the demolition_date of this NoteworthyPartOfBuilding.

        The date the building was demolished.  # noqa: E501

        :return: The demolition_date of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._demolition_date

    @demolition_date.setter
    def demolition_date(self, demolition_date):
        """Sets the demolition_date of this NoteworthyPartOfBuilding.

        The date the building was demolished.  # noqa: E501

        :param demolition_date: The demolition_date of this NoteworthyPartOfBuilding.
        :type demolition_date: List[str]
        """

        self._demolition_date = demolition_date

    @property
    def population_urban(self):
        """Gets the population_urban of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The population_urban of this NoteworthyPartOfBuilding.
        :rtype: List[int]
        """
        return self._population_urban

    @population_urban.setter
    def population_urban(self, population_urban):
        """Sets the population_urban of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param population_urban: The population_urban of this NoteworthyPartOfBuilding.
        :type population_urban: List[int]
        """

        self._population_urban = population_urban

    @property
    def scottish_name(self):
        """Gets the scottish_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The scottish_name of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._scottish_name

    @scottish_name.setter
    def scottish_name(self, scottish_name):
        """Sets the scottish_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param scottish_name: The scottish_name of this NoteworthyPartOfBuilding.
        :type scottish_name: List[str]
        """

        self._scottish_name = scottish_name

    @property
    def sovereign_country(self):
        """Gets the sovereign_country of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The sovereign_country of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._sovereign_country

    @sovereign_country.setter
    def sovereign_country(self, sovereign_country):
        """Sets the sovereign_country of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param sovereign_country: The sovereign_country of this NoteworthyPartOfBuilding.
        :type sovereign_country: List[object]
        """

        self._sovereign_country = sovereign_country

    @property
    def phone_prefix_label(self):
        """Gets the phone_prefix_label of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The phone_prefix_label of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._phone_prefix_label

    @phone_prefix_label.setter
    def phone_prefix_label(self, phone_prefix_label):
        """Sets the phone_prefix_label of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param phone_prefix_label: The phone_prefix_label of this NoteworthyPartOfBuilding.
        :type phone_prefix_label: List[str]
        """

        self._phone_prefix_label = phone_prefix_label

    @property
    def official_language(self):
        """Gets the official_language of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The official_language of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._official_language

    @official_language.setter
    def official_language(self, official_language):
        """Sets the official_language of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param official_language: The official_language of this NoteworthyPartOfBuilding.
        :type official_language: List[object]
        """

        self._official_language = official_language

    @property
    def previous_population_total(self):
        """Gets the previous_population_total of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The previous_population_total of this NoteworthyPartOfBuilding.
        :rtype: List[int]
        """
        return self._previous_population_total

    @previous_population_total.setter
    def previous_population_total(self, previous_population_total):
        """Sets the previous_population_total of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param previous_population_total: The previous_population_total of this NoteworthyPartOfBuilding.
        :type previous_population_total: List[int]
        """

        self._previous_population_total = previous_population_total

    @property
    def commune(self):
        """Gets the commune of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The commune of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._commune

    @commune.setter
    def commune(self, commune):
        """Sets the commune of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param commune: The commune of this NoteworthyPartOfBuilding.
        :type commune: List[object]
        """

        self._commune = commune

    @property
    def annual_temperature(self):
        """Gets the annual_temperature of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The annual_temperature of this NoteworthyPartOfBuilding.
        :rtype: List[float]
        """
        return self._annual_temperature

    @annual_temperature.setter
    def annual_temperature(self, annual_temperature):
        """Sets the annual_temperature of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param annual_temperature: The annual_temperature of this NoteworthyPartOfBuilding.
        :type annual_temperature: List[float]
        """

        self._annual_temperature = annual_temperature

    @property
    def description(self):
        """Gets the description of this NoteworthyPartOfBuilding.

        small description  # noqa: E501

        :return: The description of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NoteworthyPartOfBuilding.

        small description  # noqa: E501

        :param description: The description of this NoteworthyPartOfBuilding.
        :type description: List[str]
        """

        self._description = description

    @property
    def number_of_state_deputies(self):
        """Gets the number_of_state_deputies of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The number_of_state_deputies of this NoteworthyPartOfBuilding.
        :rtype: List[int]
        """
        return self._number_of_state_deputies

    @number_of_state_deputies.setter
    def number_of_state_deputies(self, number_of_state_deputies):
        """Sets the number_of_state_deputies of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param number_of_state_deputies: The number_of_state_deputies of this NoteworthyPartOfBuilding.
        :type number_of_state_deputies: List[int]
        """

        self._number_of_state_deputies = number_of_state_deputies

    @property
    def average_depth(self):
        """Gets the average_depth of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The average_depth of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._average_depth

    @average_depth.setter
    def average_depth(self, average_depth):
        """Sets the average_depth of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param average_depth: The average_depth of this NoteworthyPartOfBuilding.
        :type average_depth: List[str]
        """

        self._average_depth = average_depth

    @property
    def arabic_name(self):
        """Gets the arabic_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The arabic_name of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._arabic_name

    @arabic_name.setter
    def arabic_name(self, arabic_name):
        """Sets the arabic_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param arabic_name: The arabic_name of this NoteworthyPartOfBuilding.
        :type arabic_name: List[str]
        """

        self._arabic_name = arabic_name

    @property
    def ski_piste_number(self):
        """Gets the ski_piste_number of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The ski_piste_number of this NoteworthyPartOfBuilding.
        :rtype: List[int]
        """
        return self._ski_piste_number

    @ski_piste_number.setter
    def ski_piste_number(self, ski_piste_number):
        """Sets the ski_piste_number of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param ski_piste_number: The ski_piste_number of this NoteworthyPartOfBuilding.
        :type ski_piste_number: List[int]
        """

        self._ski_piste_number = ski_piste_number

    @property
    def subdivision(self):
        """Gets the subdivision of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The subdivision of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._subdivision

    @subdivision.setter
    def subdivision(self, subdivision):
        """Sets the subdivision of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param subdivision: The subdivision of this NoteworthyPartOfBuilding.
        :type subdivision: List[object]
        """

        self._subdivision = subdivision

    @property
    def human_development_index(self):
        """Gets the human_development_index of this NoteworthyPartOfBuilding.

        a composite statistic used to rank countries by level of \"human development\"  # noqa: E501

        :return: The human_development_index of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._human_development_index

    @human_development_index.setter
    def human_development_index(self, human_development_index):
        """Sets the human_development_index of this NoteworthyPartOfBuilding.

        a composite statistic used to rank countries by level of \"human development\"  # noqa: E501

        :param human_development_index: The human_development_index of this NoteworthyPartOfBuilding.
        :type human_development_index: List[object]
        """

        self._human_development_index = human_development_index

    @property
    def alemmanic_name(self):
        """Gets the alemmanic_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The alemmanic_name of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._alemmanic_name

    @alemmanic_name.setter
    def alemmanic_name(self, alemmanic_name):
        """Sets the alemmanic_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param alemmanic_name: The alemmanic_name of this NoteworthyPartOfBuilding.
        :type alemmanic_name: List[str]
        """

        self._alemmanic_name = alemmanic_name

    @property
    def human_development_index_as_of(self):
        """Gets the human_development_index_as_of of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The human_development_index_as_of of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._human_development_index_as_of

    @human_development_index_as_of.setter
    def human_development_index_as_of(self, human_development_index_as_of):
        """Sets the human_development_index_as_of of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param human_development_index_as_of: The human_development_index_as_of of this NoteworthyPartOfBuilding.
        :type human_development_index_as_of: List[str]
        """

        self._human_development_index_as_of = human_development_index_as_of

    @property
    def capital_coordinates(self):
        """Gets the capital_coordinates of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The capital_coordinates of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._capital_coordinates

    @capital_coordinates.setter
    def capital_coordinates(self, capital_coordinates):
        """Sets the capital_coordinates of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param capital_coordinates: The capital_coordinates of this NoteworthyPartOfBuilding.
        :type capital_coordinates: List[str]
        """

        self._capital_coordinates = capital_coordinates

    @property
    def touareg_name(self):
        """Gets the touareg_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The touareg_name of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._touareg_name

    @touareg_name.setter
    def touareg_name(self, touareg_name):
        """Sets the touareg_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param touareg_name: The touareg_name of this NoteworthyPartOfBuilding.
        :type touareg_name: List[str]
        """

        self._touareg_name = touareg_name

    @property
    def administrative_head_city(self):
        """Gets the administrative_head_city of this NoteworthyPartOfBuilding.

        city where stand the administrative power  # noqa: E501

        :return: The administrative_head_city of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._administrative_head_city

    @administrative_head_city.setter
    def administrative_head_city(self, administrative_head_city):
        """Sets the administrative_head_city of this NoteworthyPartOfBuilding.

        city where stand the administrative power  # noqa: E501

        :param administrative_head_city: The administrative_head_city of this NoteworthyPartOfBuilding.
        :type administrative_head_city: List[object]
        """

        self._administrative_head_city = administrative_head_city

    @property
    def maintained_by(self):
        """Gets the maintained_by of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The maintained_by of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._maintained_by

    @maintained_by.setter
    def maintained_by(self, maintained_by):
        """Sets the maintained_by of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param maintained_by: The maintained_by of this NoteworthyPartOfBuilding.
        :type maintained_by: List[object]
        """

        self._maintained_by = maintained_by

    @property
    def visitors_per_day(self):
        """Gets the visitors_per_day of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The visitors_per_day of this NoteworthyPartOfBuilding.
        :rtype: List[int]
        """
        return self._visitors_per_day

    @visitors_per_day.setter
    def visitors_per_day(self, visitors_per_day):
        """Sets the visitors_per_day of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param visitors_per_day: The visitors_per_day of this NoteworthyPartOfBuilding.
        :type visitors_per_day: List[int]
        """

        self._visitors_per_day = visitors_per_day

    @property
    def kanji_name(self):
        """Gets the kanji_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The kanji_name of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._kanji_name

    @kanji_name.setter
    def kanji_name(self, kanji_name):
        """Sets the kanji_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param kanji_name: The kanji_name of this NoteworthyPartOfBuilding.
        :type kanji_name: List[str]
        """

        self._kanji_name = kanji_name

    @property
    def blue_ski_piste_number(self):
        """Gets the blue_ski_piste_number of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The blue_ski_piste_number of this NoteworthyPartOfBuilding.
        :rtype: List[int]
        """
        return self._blue_ski_piste_number

    @blue_ski_piste_number.setter
    def blue_ski_piste_number(self, blue_ski_piste_number):
        """Sets the blue_ski_piste_number of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param blue_ski_piste_number: The blue_ski_piste_number of this NoteworthyPartOfBuilding.
        :type blue_ski_piste_number: List[int]
        """

        self._blue_ski_piste_number = blue_ski_piste_number

    @property
    def historical_name(self):
        """Gets the historical_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The historical_name of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._historical_name

    @historical_name.setter
    def historical_name(self, historical_name):
        """Sets the historical_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param historical_name: The historical_name of this NoteworthyPartOfBuilding.
        :type historical_name: List[str]
        """

        self._historical_name = historical_name

    @property
    def area_rank(self):
        """Gets the area_rank of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The area_rank of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._area_rank

    @area_rank.setter
    def area_rank(self, area_rank):
        """Sets the area_rank of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param area_rank: The area_rank of this NoteworthyPartOfBuilding.
        :type area_rank: List[str]
        """

        self._area_rank = area_rank

    @property
    def first_mention(self):
        """Gets the first_mention of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The first_mention of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._first_mention

    @first_mention.setter
    def first_mention(self, first_mention):
        """Sets the first_mention of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param first_mention: The first_mention of this NoteworthyPartOfBuilding.
        :type first_mention: List[str]
        """

        self._first_mention = first_mention

    @property
    def localization_thumbnail(self):
        """Gets the localization_thumbnail of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The localization_thumbnail of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._localization_thumbnail

    @localization_thumbnail.setter
    def localization_thumbnail(self, localization_thumbnail):
        """Sets the localization_thumbnail of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param localization_thumbnail: The localization_thumbnail of this NoteworthyPartOfBuilding.
        :type localization_thumbnail: List[object]
        """

        self._localization_thumbnail = localization_thumbnail

    @property
    def cable_car(self):
        """Gets the cable_car of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The cable_car of this NoteworthyPartOfBuilding.
        :rtype: List[int]
        """
        return self._cable_car

    @cable_car.setter
    def cable_car(self, cable_car):
        """Sets the cable_car of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param cable_car: The cable_car of this NoteworthyPartOfBuilding.
        :type cable_car: List[int]
        """

        self._cable_car = cable_car

    @property
    def administrative_district(self):
        """Gets the administrative_district of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The administrative_district of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._administrative_district

    @administrative_district.setter
    def administrative_district(self, administrative_district):
        """Sets the administrative_district of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param administrative_district: The administrative_district of this NoteworthyPartOfBuilding.
        :type administrative_district: List[object]
        """

        self._administrative_district = administrative_district

    @property
    def type(self):
        """Gets the type of this NoteworthyPartOfBuilding.

        type of the resource  # noqa: E501

        :return: The type of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NoteworthyPartOfBuilding.

        type of the resource  # noqa: E501

        :param type: The type of this NoteworthyPartOfBuilding.
        :type type: List[str]
        """

        self._type = type

    @property
    def linked_space(self):
        """Gets the linked_space of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The linked_space of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._linked_space

    @linked_space.setter
    def linked_space(self, linked_space):
        """Sets the linked_space of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param linked_space: The linked_space of this NoteworthyPartOfBuilding.
        :type linked_space: List[str]
        """

        self._linked_space = linked_space

    @property
    def lowest_point(self):
        """Gets the lowest_point of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The lowest_point of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._lowest_point

    @lowest_point.setter
    def lowest_point(self, lowest_point):
        """Sets the lowest_point of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param lowest_point: The lowest_point of this NoteworthyPartOfBuilding.
        :type lowest_point: List[object]
        """

        self._lowest_point = lowest_point

    @property
    def daira(self):
        """Gets the daira of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The daira of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._daira

    @daira.setter
    def daira(self, daira):
        """Sets the daira of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param daira: The daira of this NoteworthyPartOfBuilding.
        :type daira: List[object]
        """

        self._daira = daira

    @property
    def number_of_island(self):
        """Gets the number_of_island of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The number_of_island of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._number_of_island

    @number_of_island.setter
    def number_of_island(self, number_of_island):
        """Sets the number_of_island of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param number_of_island: The number_of_island of this NoteworthyPartOfBuilding.
        :type number_of_island: List[str]
        """

        self._number_of_island = number_of_island

    @property
    def cyrillique_name(self):
        """Gets the cyrillique_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The cyrillique_name of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._cyrillique_name

    @cyrillique_name.setter
    def cyrillique_name(self, cyrillique_name):
        """Sets the cyrillique_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param cyrillique_name: The cyrillique_name of this NoteworthyPartOfBuilding.
        :type cyrillique_name: List[str]
        """

        self._cyrillique_name = cyrillique_name

    @property
    def catholic_percentage(self):
        """Gets the catholic_percentage of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The catholic_percentage of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._catholic_percentage

    @catholic_percentage.setter
    def catholic_percentage(self, catholic_percentage):
        """Sets the catholic_percentage of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param catholic_percentage: The catholic_percentage of this NoteworthyPartOfBuilding.
        :type catholic_percentage: List[str]
        """

        self._catholic_percentage = catholic_percentage

    @property
    def old_district(self):
        """Gets the old_district of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The old_district of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._old_district

    @old_district.setter
    def old_district(self, old_district):
        """Sets the old_district of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param old_district: The old_district of this NoteworthyPartOfBuilding.
        :type old_district: List[object]
        """

        self._old_district = old_district

    @property
    def area_rural(self):
        """Gets the area_rural of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The area_rural of this NoteworthyPartOfBuilding.
        :rtype: List[float]
        """
        return self._area_rural

    @area_rural.setter
    def area_rural(self, area_rural):
        """Sets the area_rural of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param area_rural: The area_rural of this NoteworthyPartOfBuilding.
        :type area_rural: List[float]
        """

        self._area_rural = area_rural

    @property
    def water_percentage(self):
        """Gets the water_percentage of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The water_percentage of this NoteworthyPartOfBuilding.
        :rtype: List[float]
        """
        return self._water_percentage

    @water_percentage.setter
    def water_percentage(self, water_percentage):
        """Sets the water_percentage of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param water_percentage: The water_percentage of this NoteworthyPartOfBuilding.
        :type water_percentage: List[float]
        """

        self._water_percentage = water_percentage

    @property
    def lowest(self):
        """Gets the lowest of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The lowest of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._lowest

    @lowest.setter
    def lowest(self, lowest):
        """Sets the lowest of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param lowest: The lowest of this NoteworthyPartOfBuilding.
        :type lowest: List[str]
        """

        self._lowest = lowest

    @property
    def sharing_out_population_name(self):
        """Gets the sharing_out_population_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The sharing_out_population_name of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._sharing_out_population_name

    @sharing_out_population_name.setter
    def sharing_out_population_name(self, sharing_out_population_name):
        """Sets the sharing_out_population_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param sharing_out_population_name: The sharing_out_population_name of this NoteworthyPartOfBuilding.
        :type sharing_out_population_name: List[str]
        """

        self._sharing_out_population_name = sharing_out_population_name

    @property
    def building_end_date(self):
        """Gets the building_end_date of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The building_end_date of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._building_end_date

    @building_end_date.setter
    def building_end_date(self, building_end_date):
        """Sets the building_end_date of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param building_end_date: The building_end_date of this NoteworthyPartOfBuilding.
        :type building_end_date: List[str]
        """

        self._building_end_date = building_end_date

    @property
    def number_of_federal_deputies(self):
        """Gets the number_of_federal_deputies of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The number_of_federal_deputies of this NoteworthyPartOfBuilding.
        :rtype: List[int]
        """
        return self._number_of_federal_deputies

    @number_of_federal_deputies.setter
    def number_of_federal_deputies(self, number_of_federal_deputies):
        """Sets the number_of_federal_deputies of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param number_of_federal_deputies: The number_of_federal_deputies of this NoteworthyPartOfBuilding.
        :type number_of_federal_deputies: List[int]
        """

        self._number_of_federal_deputies = number_of_federal_deputies

    @property
    def map_caption(self):
        """Gets the map_caption of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The map_caption of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._map_caption

    @map_caption.setter
    def map_caption(self, map_caption):
        """Sets the map_caption of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param map_caption: The map_caption of this NoteworthyPartOfBuilding.
        :type map_caption: List[str]
        """

        self._map_caption = map_caption

    @property
    def previous_name(self):
        """Gets the previous_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The previous_name of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._previous_name

    @previous_name.setter
    def previous_name(self, previous_name):
        """Sets the previous_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param previous_name: The previous_name of this NoteworthyPartOfBuilding.
        :type previous_name: List[str]
        """

        self._previous_name = previous_name

    @property
    def city_link(self):
        """Gets the city_link of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The city_link of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._city_link

    @city_link.setter
    def city_link(self, city_link):
        """Sets the city_link of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param city_link: The city_link of this NoteworthyPartOfBuilding.
        :type city_link: List[str]
        """

        self._city_link = city_link

    @property
    def architect(self):
        """Gets the architect of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The architect of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._architect

    @architect.setter
    def architect(self, architect):
        """Sets the architect of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param architect: The architect of this NoteworthyPartOfBuilding.
        :type architect: List[object]
        """

        self._architect = architect

    @property
    def leader_title(self):
        """Gets the leader_title of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The leader_title of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._leader_title

    @leader_title.setter
    def leader_title(self, leader_title):
        """Sets the leader_title of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param leader_title: The leader_title of this NoteworthyPartOfBuilding.
        :type leader_title: List[str]
        """

        self._leader_title = leader_title

    @property
    def foundation(self):
        """Gets the foundation of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The foundation of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._foundation

    @foundation.setter
    def foundation(self, foundation):
        """Sets the foundation of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param foundation: The foundation of this NoteworthyPartOfBuilding.
        :type foundation: List[str]
        """

        self._foundation = foundation

    @property
    def agglomeration_demographics(self):
        """Gets the agglomeration_demographics of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The agglomeration_demographics of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._agglomeration_demographics

    @agglomeration_demographics.setter
    def agglomeration_demographics(self, agglomeration_demographics):
        """Sets the agglomeration_demographics of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param agglomeration_demographics: The agglomeration_demographics of this NoteworthyPartOfBuilding.
        :type agglomeration_demographics: List[object]
        """

        self._agglomeration_demographics = agglomeration_demographics

    @property
    def calabrian_name(self):
        """Gets the calabrian_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The calabrian_name of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._calabrian_name

    @calabrian_name.setter
    def calabrian_name(self, calabrian_name):
        """Sets the calabrian_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param calabrian_name: The calabrian_name of this NoteworthyPartOfBuilding.
        :type calabrian_name: List[str]
        """

        self._calabrian_name = calabrian_name

    @property
    def type_coordinate(self):
        """Gets the type_coordinate of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The type_coordinate of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._type_coordinate

    @type_coordinate.setter
    def type_coordinate(self, type_coordinate):
        """Sets the type_coordinate of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param type_coordinate: The type_coordinate of this NoteworthyPartOfBuilding.
        :type type_coordinate: List[str]
        """

        self._type_coordinate = type_coordinate

    @property
    def touareg_settlement_name(self):
        """Gets the touareg_settlement_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The touareg_settlement_name of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._touareg_settlement_name

    @touareg_settlement_name.setter
    def touareg_settlement_name(self, touareg_settlement_name):
        """Sets the touareg_settlement_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param touareg_settlement_name: The touareg_settlement_name of this NoteworthyPartOfBuilding.
        :type touareg_settlement_name: List[str]
        """

        self._touareg_settlement_name = touareg_settlement_name

    @property
    def distance_to_belfast(self):
        """Gets the distance_to_belfast of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The distance_to_belfast of this NoteworthyPartOfBuilding.
        :rtype: List[float]
        """
        return self._distance_to_belfast

    @distance_to_belfast.setter
    def distance_to_belfast(self, distance_to_belfast):
        """Sets the distance_to_belfast of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param distance_to_belfast: The distance_to_belfast of this NoteworthyPartOfBuilding.
        :type distance_to_belfast: List[float]
        """

        self._distance_to_belfast = distance_to_belfast

    @property
    def code_provincial_monument(self):
        """Gets the code_provincial_monument of this NoteworthyPartOfBuilding.

        Code assigned to (Dutch) monuments at the provincial level, mostly for monuments in the countryside, or for waterworks  # noqa: E501

        :return: The code_provincial_monument of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._code_provincial_monument

    @code_provincial_monument.setter
    def code_provincial_monument(self, code_provincial_monument):
        """Sets the code_provincial_monument of this NoteworthyPartOfBuilding.

        Code assigned to (Dutch) monuments at the provincial level, mostly for monuments in the countryside, or for waterworks  # noqa: E501

        :param code_provincial_monument: The code_provincial_monument of this NoteworthyPartOfBuilding.
        :type code_provincial_monument: List[str]
        """

        self._code_provincial_monument = code_provincial_monument

    @property
    def climate(self):
        """Gets the climate of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The climate of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._climate

    @climate.setter
    def climate(self, climate):
        """Sets the climate of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param climate: The climate of this NoteworthyPartOfBuilding.
        :type climate: List[object]
        """

        self._climate = climate

    @property
    def bourgmestre(self):
        """Gets the bourgmestre of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The bourgmestre of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._bourgmestre

    @bourgmestre.setter
    def bourgmestre(self, bourgmestre):
        """Sets the bourgmestre of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param bourgmestre: The bourgmestre of this NoteworthyPartOfBuilding.
        :type bourgmestre: List[object]
        """

        self._bourgmestre = bourgmestre

    @property
    def depth(self):
        """Gets the depth of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The depth of this NoteworthyPartOfBuilding.
        :rtype: List[float]
        """
        return self._depth

    @depth.setter
    def depth(self, depth):
        """Sets the depth of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param depth: The depth of this NoteworthyPartOfBuilding.
        :type depth: List[float]
        """

        self._depth = depth

    @property
    def governing_body(self):
        """Gets the governing_body of this NoteworthyPartOfBuilding.

        Body that owns/operates the Place.  # noqa: E501

        :return: The governing_body of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._governing_body

    @governing_body.setter
    def governing_body(self, governing_body):
        """Sets the governing_body of this NoteworthyPartOfBuilding.

        Body that owns/operates the Place.  # noqa: E501

        :param governing_body: The governing_body of this NoteworthyPartOfBuilding.
        :type governing_body: List[object]
        """

        self._governing_body = governing_body

    @property
    def black_ski_piste_number(self):
        """Gets the black_ski_piste_number of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The black_ski_piste_number of this NoteworthyPartOfBuilding.
        :rtype: List[int]
        """
        return self._black_ski_piste_number

    @black_ski_piste_number.setter
    def black_ski_piste_number(self, black_ski_piste_number):
        """Sets the black_ski_piste_number of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param black_ski_piste_number: The black_ski_piste_number of this NoteworthyPartOfBuilding.
        :type black_ski_piste_number: List[int]
        """

        self._black_ski_piste_number = black_ski_piste_number

    @property
    def protestant_percentage(self):
        """Gets the protestant_percentage of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The protestant_percentage of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._protestant_percentage

    @protestant_percentage.setter
    def protestant_percentage(self, protestant_percentage):
        """Sets the protestant_percentage of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param protestant_percentage: The protestant_percentage of this NoteworthyPartOfBuilding.
        :type protestant_percentage: List[str]
        """

        self._protestant_percentage = protestant_percentage

    @property
    def related_places(self):
        """Gets the related_places of this NoteworthyPartOfBuilding.

        This property is to accommodate the list field that contains a list of, e.g., monuments in the same town  # noqa: E501

        :return: The related_places of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._related_places

    @related_places.setter
    def related_places(self, related_places):
        """Sets the related_places of this NoteworthyPartOfBuilding.

        This property is to accommodate the list field that contains a list of, e.g., monuments in the same town  # noqa: E501

        :param related_places: The related_places of this NoteworthyPartOfBuilding.
        :type related_places: List[object]
        """

        self._related_places = related_places

    @property
    def zip_code(self):
        """Gets the zip_code of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The zip_code of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param zip_code: The zip_code of this NoteworthyPartOfBuilding.
        :type zip_code: List[str]
        """

        self._zip_code = zip_code

    @property
    def fauna(self):
        """Gets the fauna of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The fauna of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._fauna

    @fauna.setter
    def fauna(self, fauna):
        """Sets the fauna of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param fauna: The fauna of this NoteworthyPartOfBuilding.
        :type fauna: List[str]
        """

        self._fauna = fauna

    @property
    def year_of_construction(self):
        """Gets the year_of_construction of this NoteworthyPartOfBuilding.

        The year in which construction of the Place was finished.  # noqa: E501

        :return: The year_of_construction of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._year_of_construction

    @year_of_construction.setter
    def year_of_construction(self, year_of_construction):
        """Sets the year_of_construction of this NoteworthyPartOfBuilding.

        The year in which construction of the Place was finished.  # noqa: E501

        :param year_of_construction: The year_of_construction of this NoteworthyPartOfBuilding.
        :type year_of_construction: List[str]
        """

        self._year_of_construction = year_of_construction

    @property
    def subsystem(self):
        """Gets the subsystem of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The subsystem of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._subsystem

    @subsystem.setter
    def subsystem(self, subsystem):
        """Sets the subsystem of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param subsystem: The subsystem of this NoteworthyPartOfBuilding.
        :type subsystem: List[str]
        """

        self._subsystem = subsystem

    @property
    def historical_region(self):
        """Gets the historical_region of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The historical_region of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._historical_region

    @historical_region.setter
    def historical_region(self, historical_region):
        """Sets the historical_region of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param historical_region: The historical_region of this NoteworthyPartOfBuilding.
        :type historical_region: List[str]
        """

        self._historical_region = historical_region

    @property
    def international_phone_prefix_label(self):
        """Gets the international_phone_prefix_label of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The international_phone_prefix_label of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._international_phone_prefix_label

    @international_phone_prefix_label.setter
    def international_phone_prefix_label(self, international_phone_prefix_label):
        """Sets the international_phone_prefix_label of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param international_phone_prefix_label: The international_phone_prefix_label of this NoteworthyPartOfBuilding.
        :type international_phone_prefix_label: List[str]
        """

        self._international_phone_prefix_label = international_phone_prefix_label

    @property
    def minority(self):
        """Gets the minority of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The minority of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._minority

    @minority.setter
    def minority(self, minority):
        """Sets the minority of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param minority: The minority of this NoteworthyPartOfBuilding.
        :type minority: List[object]
        """

        self._minority = minority

    @property
    def frioulan_name(self):
        """Gets the frioulan_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The frioulan_name of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._frioulan_name

    @frioulan_name.setter
    def frioulan_name(self, frioulan_name):
        """Sets the frioulan_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param frioulan_name: The frioulan_name of this NoteworthyPartOfBuilding.
        :type frioulan_name: List[str]
        """

        self._frioulan_name = frioulan_name

    @property
    def reference(self):
        """Gets the reference of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The reference of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param reference: The reference of this NoteworthyPartOfBuilding.
        :type reference: List[str]
        """

        self._reference = reference

    @property
    def code_land_registry(self):
        """Gets the code_land_registry of this NoteworthyPartOfBuilding.

        Land Registry code designating a parcel of land  # noqa: E501

        :return: The code_land_registry of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._code_land_registry

    @code_land_registry.setter
    def code_land_registry(self, code_land_registry):
        """Sets the code_land_registry of this NoteworthyPartOfBuilding.

        Land Registry code designating a parcel of land  # noqa: E501

        :param code_land_registry: The code_land_registry of this NoteworthyPartOfBuilding.
        :type code_land_registry: List[str]
        """

        self._code_land_registry = code_land_registry

    @property
    def distance_to_cardiff(self):
        """Gets the distance_to_cardiff of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The distance_to_cardiff of this NoteworthyPartOfBuilding.
        :rtype: List[float]
        """
        return self._distance_to_cardiff

    @distance_to_cardiff.setter
    def distance_to_cardiff(self, distance_to_cardiff):
        """Sets the distance_to_cardiff of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param distance_to_cardiff: The distance_to_cardiff of this NoteworthyPartOfBuilding.
        :type distance_to_cardiff: List[float]
        """

        self._distance_to_cardiff = distance_to_cardiff

    @property
    def population_date(self):
        """Gets the population_date of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The population_date of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._population_date

    @population_date.setter
    def population_date(self, population_date):
        """Sets the population_date of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param population_date: The population_date of this NoteworthyPartOfBuilding.
        :type population_date: List[str]
        """

        self._population_date = population_date

    @property
    def dutch_name(self):
        """Gets the dutch_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The dutch_name of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._dutch_name

    @dutch_name.setter
    def dutch_name(self, dutch_name):
        """Sets the dutch_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param dutch_name: The dutch_name of this NoteworthyPartOfBuilding.
        :type dutch_name: List[str]
        """

        self._dutch_name = dutch_name

    @property
    def day(self):
        """Gets the day of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The day of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param day: The day of this NoteworthyPartOfBuilding.
        :type day: List[str]
        """

        self._day = day

    @property
    def sheading(self):
        """Gets the sheading of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The sheading of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._sheading

    @sheading.setter
    def sheading(self, sheading):
        """Sets the sheading of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param sheading: The sheading of this NoteworthyPartOfBuilding.
        :type sheading: List[object]
        """

        self._sheading = sheading

    @property
    def local_phone_prefix(self):
        """Gets the local_phone_prefix of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The local_phone_prefix of this NoteworthyPartOfBuilding.
        :rtype: List[int]
        """
        return self._local_phone_prefix

    @local_phone_prefix.setter
    def local_phone_prefix(self, local_phone_prefix):
        """Sets the local_phone_prefix of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param local_phone_prefix: The local_phone_prefix of this NoteworthyPartOfBuilding.
        :type local_phone_prefix: List[int]
        """

        self._local_phone_prefix = local_phone_prefix

    @property
    def population_pct_women(self):
        """Gets the population_pct_women of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The population_pct_women of this NoteworthyPartOfBuilding.
        :rtype: List[int]
        """
        return self._population_pct_women

    @population_pct_women.setter
    def population_pct_women(self, population_pct_women):
        """Sets the population_pct_women of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param population_pct_women: The population_pct_women of this NoteworthyPartOfBuilding.
        :type population_pct_women: List[int]
        """

        self._population_pct_women = population_pct_women

    @property
    def tree(self):
        """Gets the tree of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The tree of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._tree

    @tree.setter
    def tree(self, tree):
        """Sets the tree of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param tree: The tree of this NoteworthyPartOfBuilding.
        :type tree: List[object]
        """

        self._tree = tree

    @property
    def old_province(self):
        """Gets the old_province of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The old_province of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._old_province

    @old_province.setter
    def old_province(self, old_province):
        """Sets the old_province of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param old_province: The old_province of this NoteworthyPartOfBuilding.
        :type old_province: List[object]
        """

        self._old_province = old_province

    @property
    def vehicle_code(self):
        """Gets the vehicle_code of this NoteworthyPartOfBuilding.

        Region related vehicle code on the vehicle plates.  # noqa: E501

        :return: The vehicle_code of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._vehicle_code

    @vehicle_code.setter
    def vehicle_code(self, vehicle_code):
        """Sets the vehicle_code of this NoteworthyPartOfBuilding.

        Region related vehicle code on the vehicle plates.  # noqa: E501

        :param vehicle_code: The vehicle_code of this NoteworthyPartOfBuilding.
        :type vehicle_code: List[str]
        """

        self._vehicle_code = vehicle_code

    @property
    def water(self):
        """Gets the water of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The water of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._water

    @water.setter
    def water(self, water):
        """Sets the water of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param water: The water of this NoteworthyPartOfBuilding.
        :type water: List[str]
        """

        self._water = water

    @property
    def gross_domestic_product_nominal_per_capita(self):
        """Gets the gross_domestic_product_nominal_per_capita of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The gross_domestic_product_nominal_per_capita of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._gross_domestic_product_nominal_per_capita

    @gross_domestic_product_nominal_per_capita.setter
    def gross_domestic_product_nominal_per_capita(self, gross_domestic_product_nominal_per_capita):
        """Sets the gross_domestic_product_nominal_per_capita of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param gross_domestic_product_nominal_per_capita: The gross_domestic_product_nominal_per_capita of this NoteworthyPartOfBuilding.
        :type gross_domestic_product_nominal_per_capita: List[object]
        """

        self._gross_domestic_product_nominal_per_capita = gross_domestic_product_nominal_per_capita

    @property
    def association_of_local_government(self):
        """Gets the association_of_local_government of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The association_of_local_government of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._association_of_local_government

    @association_of_local_government.setter
    def association_of_local_government(self, association_of_local_government):
        """Sets the association_of_local_government of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param association_of_local_government: The association_of_local_government of this NoteworthyPartOfBuilding.
        :type association_of_local_government: List[object]
        """

        self._association_of_local_government = association_of_local_government

    @property
    def topic(self):
        """Gets the topic of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The topic of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param topic: The topic of this NoteworthyPartOfBuilding.
        :type topic: List[str]
        """

        self._topic = topic

    @property
    def main_island(self):
        """Gets the main_island of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The main_island of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._main_island

    @main_island.setter
    def main_island(self, main_island):
        """Sets the main_island of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param main_island: The main_island of this NoteworthyPartOfBuilding.
        :type main_island: List[object]
        """

        self._main_island = main_island

    @property
    def maori_name(self):
        """Gets the maori_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The maori_name of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._maori_name

    @maori_name.setter
    def maori_name(self, maori_name):
        """Sets the maori_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param maori_name: The maori_name of this NoteworthyPartOfBuilding.
        :type maori_name: List[str]
        """

        self._maori_name = maori_name

    @property
    def istat(self):
        """Gets the istat of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The istat of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._istat

    @istat.setter
    def istat(self, istat):
        """Sets the istat of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param istat: The istat of this NoteworthyPartOfBuilding.
        :type istat: List[str]
        """

        self._istat = istat

    @property
    def minimum_area_quote(self):
        """Gets the minimum_area_quote of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The minimum_area_quote of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._minimum_area_quote

    @minimum_area_quote.setter
    def minimum_area_quote(self, minimum_area_quote):
        """Sets the minimum_area_quote of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param minimum_area_quote: The minimum_area_quote of this NoteworthyPartOfBuilding.
        :type minimum_area_quote: List[str]
        """

        self._minimum_area_quote = minimum_area_quote

    @property
    def altitude(self):
        """Gets the altitude of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The altitude of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._altitude

    @altitude.setter
    def altitude(self, altitude):
        """Sets the altitude of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param altitude: The altitude of this NoteworthyPartOfBuilding.
        :type altitude: List[object]
        """

        self._altitude = altitude

    @property
    def national_topographic_system_map_number(self):
        """Gets the national_topographic_system_map_number of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The national_topographic_system_map_number of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._national_topographic_system_map_number

    @national_topographic_system_map_number.setter
    def national_topographic_system_map_number(self, national_topographic_system_map_number):
        """Sets the national_topographic_system_map_number of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param national_topographic_system_map_number: The national_topographic_system_map_number of this NoteworthyPartOfBuilding.
        :type national_topographic_system_map_number: List[str]
        """

        self._national_topographic_system_map_number = national_topographic_system_map_number

    @property
    def budget_year(self):
        """Gets the budget_year of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The budget_year of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._budget_year

    @budget_year.setter
    def budget_year(self, budget_year):
        """Sets the budget_year of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param budget_year: The budget_year of this NoteworthyPartOfBuilding.
        :type budget_year: List[str]
        """

        self._budget_year = budget_year

    @property
    def gini_coefficient_as_of(self):
        """Gets the gini_coefficient_as_of of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The gini_coefficient_as_of of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._gini_coefficient_as_of

    @gini_coefficient_as_of.setter
    def gini_coefficient_as_of(self, gini_coefficient_as_of):
        """Sets the gini_coefficient_as_of of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param gini_coefficient_as_of: The gini_coefficient_as_of of this NoteworthyPartOfBuilding.
        :type gini_coefficient_as_of: List[str]
        """

        self._gini_coefficient_as_of = gini_coefficient_as_of

    @property
    def scale(self):
        """Gets the scale of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The scale of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._scale

    @scale.setter
    def scale(self, scale):
        """Sets the scale of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param scale: The scale of this NoteworthyPartOfBuilding.
        :type scale: List[str]
        """

        self._scale = scale

    @property
    def long_distance_piste_kilometre(self):
        """Gets the long_distance_piste_kilometre of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The long_distance_piste_kilometre of this NoteworthyPartOfBuilding.
        :rtype: List[float]
        """
        return self._long_distance_piste_kilometre

    @long_distance_piste_kilometre.setter
    def long_distance_piste_kilometre(self, long_distance_piste_kilometre):
        """Sets the long_distance_piste_kilometre of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param long_distance_piste_kilometre: The long_distance_piste_kilometre of this NoteworthyPartOfBuilding.
        :type long_distance_piste_kilometre: List[float]
        """

        self._long_distance_piste_kilometre = long_distance_piste_kilometre

    @property
    def building_start_year(self):
        """Gets the building_start_year of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The building_start_year of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._building_start_year

    @building_start_year.setter
    def building_start_year(self, building_start_year):
        """Sets the building_start_year of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param building_start_year: The building_start_year of this NoteworthyPartOfBuilding.
        :type building_start_year: List[str]
        """

        self._building_start_year = building_start_year

    @property
    def sub_prefecture(self):
        """Gets the sub_prefecture of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The sub_prefecture of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._sub_prefecture

    @sub_prefecture.setter
    def sub_prefecture(self, sub_prefecture):
        """Sets the sub_prefecture of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param sub_prefecture: The sub_prefecture of this NoteworthyPartOfBuilding.
        :type sub_prefecture: List[str]
        """

        self._sub_prefecture = sub_prefecture

    @property
    def snow_park_number(self):
        """Gets the snow_park_number of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The snow_park_number of this NoteworthyPartOfBuilding.
        :rtype: List[int]
        """
        return self._snow_park_number

    @snow_park_number.setter
    def snow_park_number(self, snow_park_number):
        """Sets the snow_park_number of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param snow_park_number: The snow_park_number of this NoteworthyPartOfBuilding.
        :type snow_park_number: List[int]
        """

        self._snow_park_number = snow_park_number

    @property
    def luxembourgish_name(self):
        """Gets the luxembourgish_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The luxembourgish_name of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._luxembourgish_name

    @luxembourgish_name.setter
    def luxembourgish_name(self, luxembourgish_name):
        """Sets the luxembourgish_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param luxembourgish_name: The luxembourgish_name of this NoteworthyPartOfBuilding.
        :type luxembourgish_name: List[str]
        """

        self._luxembourgish_name = luxembourgish_name

    @property
    def area_total(self):
        """Gets the area_total of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The area_total of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._area_total

    @area_total.setter
    def area_total(self, area_total):
        """Sets the area_total of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param area_total: The area_total of this NoteworthyPartOfBuilding.
        :type area_total: List[object]
        """

        self._area_total = area_total

    @property
    def population_total_reference(self):
        """Gets the population_total_reference of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The population_total_reference of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._population_total_reference

    @population_total_reference.setter
    def population_total_reference(self, population_total_reference):
        """Sets the population_total_reference of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param population_total_reference: The population_total_reference of this NoteworthyPartOfBuilding.
        :type population_total_reference: List[object]
        """

        self._population_total_reference = population_total_reference

    @property
    def length_quote(self):
        """Gets the length_quote of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The length_quote of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._length_quote

    @length_quote.setter
    def length_quote(self, length_quote):
        """Sets the length_quote of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param length_quote: The length_quote of this NoteworthyPartOfBuilding.
        :type length_quote: List[str]
        """

        self._length_quote = length_quote

    @property
    def relief(self):
        """Gets the relief of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The relief of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._relief

    @relief.setter
    def relief(self, relief):
        """Sets the relief of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param relief: The relief of this NoteworthyPartOfBuilding.
        :type relief: List[str]
        """

        self._relief = relief

    @property
    def census_year(self):
        """Gets the census_year of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The census_year of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._census_year

    @census_year.setter
    def census_year(self, census_year):
        """Sets the census_year of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param census_year: The census_year of this NoteworthyPartOfBuilding.
        :type census_year: List[str]
        """

        self._census_year = census_year

    @property
    def visitors_per_year(self):
        """Gets the visitors_per_year of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The visitors_per_year of this NoteworthyPartOfBuilding.
        :rtype: List[int]
        """
        return self._visitors_per_year

    @visitors_per_year.setter
    def visitors_per_year(self, visitors_per_year):
        """Sets the visitors_per_year of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param visitors_per_year: The visitors_per_year of this NoteworthyPartOfBuilding.
        :type visitors_per_year: List[int]
        """

        self._visitors_per_year = visitors_per_year

    @property
    def ladin_name(self):
        """Gets the ladin_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The ladin_name of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._ladin_name

    @ladin_name.setter
    def ladin_name(self, ladin_name):
        """Sets the ladin_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param ladin_name: The ladin_name of this NoteworthyPartOfBuilding.
        :type ladin_name: List[str]
        """

        self._ladin_name = ladin_name

    @property
    def subdivision_link(self):
        """Gets the subdivision_link of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The subdivision_link of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._subdivision_link

    @subdivision_link.setter
    def subdivision_link(self, subdivision_link):
        """Sets the subdivision_link of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param subdivision_link: The subdivision_link of this NoteworthyPartOfBuilding.
        :type subdivision_link: List[str]
        """

        self._subdivision_link = subdivision_link

    @property
    def cost(self):
        """Gets the cost of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The cost of this NoteworthyPartOfBuilding.
        :rtype: List[float]
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param cost: The cost of this NoteworthyPartOfBuilding.
        :type cost: List[float]
        """

        self._cost = cost

    @property
    def operated_by(self):
        """Gets the operated_by of this NoteworthyPartOfBuilding.

        Organisation or city who is the operator of the ArchitecturalStructure. Not to confuse with maintainer or the owner.  # noqa: E501

        :return: The operated_by of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._operated_by

    @operated_by.setter
    def operated_by(self, operated_by):
        """Sets the operated_by of this NoteworthyPartOfBuilding.

        Organisation or city who is the operator of the ArchitecturalStructure. Not to confuse with maintainer or the owner.  # noqa: E501

        :param operated_by: The operated_by of this NoteworthyPartOfBuilding.
        :type operated_by: List[object]
        """

        self._operated_by = operated_by

    @property
    def mozabite_name(self):
        """Gets the mozabite_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The mozabite_name of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._mozabite_name

    @mozabite_name.setter
    def mozabite_name(self, mozabite_name):
        """Sets the mozabite_name of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param mozabite_name: The mozabite_name of this NoteworthyPartOfBuilding.
        :type mozabite_name: List[str]
        """

        self._mozabite_name = mozabite_name

    @property
    def nearest_city(self):
        """Gets the nearest_city of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The nearest_city of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._nearest_city

    @nearest_city.setter
    def nearest_city(self, nearest_city):
        """Sets the nearest_city of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param nearest_city: The nearest_city of this NoteworthyPartOfBuilding.
        :type nearest_city: List[object]
        """

        self._nearest_city = nearest_city

    @property
    def subsystem_link(self):
        """Gets the subsystem_link of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The subsystem_link of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._subsystem_link

    @subsystem_link.setter
    def subsystem_link(self, subsystem_link):
        """Sets the subsystem_link of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param subsystem_link: The subsystem_link of this NoteworthyPartOfBuilding.
        :type subsystem_link: List[str]
        """

        self._subsystem_link = subsystem_link

    @property
    def whole_area(self):
        """Gets the whole_area of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The whole_area of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._whole_area

    @whole_area.setter
    def whole_area(self, whole_area):
        """Sets the whole_area of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param whole_area: The whole_area of this NoteworthyPartOfBuilding.
        :type whole_area: List[object]
        """

        self._whole_area = whole_area

    @property
    def delegation(self):
        """Gets the delegation of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The delegation of this NoteworthyPartOfBuilding.
        :rtype: List[str]
        """
        return self._delegation

    @delegation.setter
    def delegation(self, delegation):
        """Sets the delegation of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param delegation: The delegation of this NoteworthyPartOfBuilding.
        :type delegation: List[str]
        """

        self._delegation = delegation

    @property
    def vice_leader(self):
        """Gets the vice_leader of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The vice_leader of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._vice_leader

    @vice_leader.setter
    def vice_leader(self, vice_leader):
        """Sets the vice_leader of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param vice_leader: The vice_leader of this NoteworthyPartOfBuilding.
        :type vice_leader: List[object]
        """

        self._vice_leader = vice_leader

    @property
    def demographics(self):
        """Gets the demographics of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :return: The demographics of this NoteworthyPartOfBuilding.
        :rtype: List[object]
        """
        return self._demographics

    @demographics.setter
    def demographics(self, demographics):
        """Sets the demographics of this NoteworthyPartOfBuilding.

        Description not available  # noqa: E501

        :param demographics: The demographics of this NoteworthyPartOfBuilding.
        :type demographics: List[object]
        """

        self._demographics = demographics
