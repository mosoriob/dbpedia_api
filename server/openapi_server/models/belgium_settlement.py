# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class BelgiumSettlement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, belgium_political_seats=None, description=None, legal_arrondissement=None, belgium_reff_bourgmestre=None, id=None, label=None, type=None, belgium_political_majority=None, belgium_merged_settlement=None):  # noqa: E501
        """BelgiumSettlement - a model defined in OpenAPI

        :param belgium_political_seats: The belgium_political_seats of this BelgiumSettlement.  # noqa: E501
        :type belgium_political_seats: List[int]
        :param description: The description of this BelgiumSettlement.  # noqa: E501
        :type description: List[str]
        :param legal_arrondissement: The legal_arrondissement of this BelgiumSettlement.  # noqa: E501
        :type legal_arrondissement: List[str]
        :param belgium_reff_bourgmestre: The belgium_reff_bourgmestre of this BelgiumSettlement.  # noqa: E501
        :type belgium_reff_bourgmestre: List[object]
        :param id: The id of this BelgiumSettlement.  # noqa: E501
        :type id: str
        :param label: The label of this BelgiumSettlement.  # noqa: E501
        :type label: List[str]
        :param type: The type of this BelgiumSettlement.  # noqa: E501
        :type type: List[str]
        :param belgium_political_majority: The belgium_political_majority of this BelgiumSettlement.  # noqa: E501
        :type belgium_political_majority: List[object]
        :param belgium_merged_settlement: The belgium_merged_settlement of this BelgiumSettlement.  # noqa: E501
        :type belgium_merged_settlement: List[object]
        """


        self.openapi_types = {
            'belgium_political_seats': List[int],
            'description': List[str],
            'legal_arrondissement': List[str],
            'belgium_reff_bourgmestre': List[object],
            'id': str,
            'label': List[str],
            'type': List[str],
            'belgium_political_majority': List[object],
            'belgium_merged_settlement': List[object]
        }

        self.attribute_map = {
            'belgium_political_seats': 'belgiumPoliticalSeats',
            'description': 'description',
            'legal_arrondissement': 'legalArrondissement',
            'belgium_reff_bourgmestre': 'belgiumReffBourgmestre',
            'id': 'id',
            'label': 'label',
            'type': 'type',
            'belgium_political_majority': 'belgiumPoliticalMajority',
            'belgium_merged_settlement': 'belgiumMergedSettlement'
        }

        self._belgium_political_seats = belgium_political_seats
        self._description = description
        self._legal_arrondissement = legal_arrondissement
        self._belgium_reff_bourgmestre = belgium_reff_bourgmestre
        self._id = id
        self._label = label
        self._type = type
        self._belgium_political_majority = belgium_political_majority
        self._belgium_merged_settlement = belgium_merged_settlement

    @classmethod
    def from_dict(cls, dikt) -> 'BelgiumSettlement':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BelgiumSettlement of this BelgiumSettlement.  # noqa: E501
        :rtype: BelgiumSettlement
        """
        return util.deserialize_model(dikt, cls)

    @property
    def belgium_political_seats(self):
        """Gets the belgium_political_seats of this BelgiumSettlement.

        Description not available  # noqa: E501

        :return: The belgium_political_seats of this BelgiumSettlement.
        :rtype: List[int]
        """
        return self._belgium_political_seats

    @belgium_political_seats.setter
    def belgium_political_seats(self, belgium_political_seats):
        """Sets the belgium_political_seats of this BelgiumSettlement.

        Description not available  # noqa: E501

        :param belgium_political_seats: The belgium_political_seats of this BelgiumSettlement.
        :type belgium_political_seats: List[int]
        """

        self._belgium_political_seats = belgium_political_seats

    @property
    def description(self):
        """Gets the description of this BelgiumSettlement.

        small description  # noqa: E501

        :return: The description of this BelgiumSettlement.
        :rtype: List[str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BelgiumSettlement.

        small description  # noqa: E501

        :param description: The description of this BelgiumSettlement.
        :type description: List[str]
        """

        self._description = description

    @property
    def legal_arrondissement(self):
        """Gets the legal_arrondissement of this BelgiumSettlement.

        Description not available  # noqa: E501

        :return: The legal_arrondissement of this BelgiumSettlement.
        :rtype: List[str]
        """
        return self._legal_arrondissement

    @legal_arrondissement.setter
    def legal_arrondissement(self, legal_arrondissement):
        """Sets the legal_arrondissement of this BelgiumSettlement.

        Description not available  # noqa: E501

        :param legal_arrondissement: The legal_arrondissement of this BelgiumSettlement.
        :type legal_arrondissement: List[str]
        """

        self._legal_arrondissement = legal_arrondissement

    @property
    def belgium_reff_bourgmestre(self):
        """Gets the belgium_reff_bourgmestre of this BelgiumSettlement.

        Description not available  # noqa: E501

        :return: The belgium_reff_bourgmestre of this BelgiumSettlement.
        :rtype: List[object]
        """
        return self._belgium_reff_bourgmestre

    @belgium_reff_bourgmestre.setter
    def belgium_reff_bourgmestre(self, belgium_reff_bourgmestre):
        """Sets the belgium_reff_bourgmestre of this BelgiumSettlement.

        Description not available  # noqa: E501

        :param belgium_reff_bourgmestre: The belgium_reff_bourgmestre of this BelgiumSettlement.
        :type belgium_reff_bourgmestre: List[object]
        """

        self._belgium_reff_bourgmestre = belgium_reff_bourgmestre

    @property
    def id(self):
        """Gets the id of this BelgiumSettlement.

        identifier  # noqa: E501

        :return: The id of this BelgiumSettlement.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BelgiumSettlement.

        identifier  # noqa: E501

        :param id: The id of this BelgiumSettlement.
        :type id: str
        """

        self._id = id

    @property
    def label(self):
        """Gets the label of this BelgiumSettlement.

        short description of the resource  # noqa: E501

        :return: The label of this BelgiumSettlement.
        :rtype: List[str]
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this BelgiumSettlement.

        short description of the resource  # noqa: E501

        :param label: The label of this BelgiumSettlement.
        :type label: List[str]
        """

        self._label = label

    @property
    def type(self):
        """Gets the type of this BelgiumSettlement.

        type of the resource  # noqa: E501

        :return: The type of this BelgiumSettlement.
        :rtype: List[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BelgiumSettlement.

        type of the resource  # noqa: E501

        :param type: The type of this BelgiumSettlement.
        :type type: List[str]
        """

        self._type = type

    @property
    def belgium_political_majority(self):
        """Gets the belgium_political_majority of this BelgiumSettlement.

        Description not available  # noqa: E501

        :return: The belgium_political_majority of this BelgiumSettlement.
        :rtype: List[object]
        """
        return self._belgium_political_majority

    @belgium_political_majority.setter
    def belgium_political_majority(self, belgium_political_majority):
        """Sets the belgium_political_majority of this BelgiumSettlement.

        Description not available  # noqa: E501

        :param belgium_political_majority: The belgium_political_majority of this BelgiumSettlement.
        :type belgium_political_majority: List[object]
        """

        self._belgium_political_majority = belgium_political_majority

    @property
    def belgium_merged_settlement(self):
        """Gets the belgium_merged_settlement of this BelgiumSettlement.

        Description not available  # noqa: E501

        :return: The belgium_merged_settlement of this BelgiumSettlement.
        :rtype: List[object]
        """
        return self._belgium_merged_settlement

    @belgium_merged_settlement.setter
    def belgium_merged_settlement(self, belgium_merged_settlement):
        """Sets the belgium_merged_settlement of this BelgiumSettlement.

        Description not available  # noqa: E501

        :param belgium_merged_settlement: The belgium_merged_settlement of this BelgiumSettlement.
        :type belgium_merged_settlement: List[object]
        """

        self._belgium_merged_settlement = belgium_merged_settlement
