# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class AlgerianSettlement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ons=None, land_registry_code=None, settlement_attached=None, description=None, administrative_center=None, id=None, label=None, type=None, urban_area=None, employers_celebration=None):  # noqa: E501
        """AlgerianSettlement - a model defined in OpenAPI

        :param ons: The ons of this AlgerianSettlement.  # noqa: E501
        :type ons: List[int]
        :param land_registry_code: The land_registry_code of this AlgerianSettlement.  # noqa: E501
        :type land_registry_code: List[str]
        :param settlement_attached: The settlement_attached of this AlgerianSettlement.  # noqa: E501
        :type settlement_attached: List[object]
        :param description: The description of this AlgerianSettlement.  # noqa: E501
        :type description: List[str]
        :param administrative_center: The administrative_center of this AlgerianSettlement.  # noqa: E501
        :type administrative_center: List[object]
        :param id: The id of this AlgerianSettlement.  # noqa: E501
        :type id: str
        :param label: The label of this AlgerianSettlement.  # noqa: E501
        :type label: List[str]
        :param type: The type of this AlgerianSettlement.  # noqa: E501
        :type type: List[str]
        :param urban_area: The urban_area of this AlgerianSettlement.  # noqa: E501
        :type urban_area: List[str]
        :param employers_celebration: The employers_celebration of this AlgerianSettlement.  # noqa: E501
        :type employers_celebration: List[str]
        """


        self.openapi_types = {
            'ons': List[int],
            'land_registry_code': List[str],
            'settlement_attached': List[object],
            'description': List[str],
            'administrative_center': List[object],
            'id': str,
            'label': List[str],
            'type': List[str],
            'urban_area': List[str],
            'employers_celebration': List[str]
        }

        self.attribute_map = {
            'ons': 'ons',
            'land_registry_code': 'landRegistryCode',
            'settlement_attached': 'settlementAttached',
            'description': 'description',
            'administrative_center': 'administrativeCenter',
            'id': 'id',
            'label': 'label',
            'type': 'type',
            'urban_area': 'urbanArea',
            'employers_celebration': 'employersCelebration'
        }

        self._ons = ons
        self._land_registry_code = land_registry_code
        self._settlement_attached = settlement_attached
        self._description = description
        self._administrative_center = administrative_center
        self._id = id
        self._label = label
        self._type = type
        self._urban_area = urban_area
        self._employers_celebration = employers_celebration

    @classmethod
    def from_dict(cls, dikt) -> 'AlgerianSettlement':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AlgerianSettlement of this AlgerianSettlement.  # noqa: E501
        :rtype: AlgerianSettlement
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ons(self):
        """Gets the ons of this AlgerianSettlement.

        Description not available  # noqa: E501

        :return: The ons of this AlgerianSettlement.
        :rtype: List[int]
        """
        return self._ons

    @ons.setter
    def ons(self, ons):
        """Sets the ons of this AlgerianSettlement.

        Description not available  # noqa: E501

        :param ons: The ons of this AlgerianSettlement.
        :type ons: List[int]
        """

        self._ons = ons

    @property
    def land_registry_code(self):
        """Gets the land_registry_code of this AlgerianSettlement.

        Description not available  # noqa: E501

        :return: The land_registry_code of this AlgerianSettlement.
        :rtype: List[str]
        """
        return self._land_registry_code

    @land_registry_code.setter
    def land_registry_code(self, land_registry_code):
        """Sets the land_registry_code of this AlgerianSettlement.

        Description not available  # noqa: E501

        :param land_registry_code: The land_registry_code of this AlgerianSettlement.
        :type land_registry_code: List[str]
        """

        self._land_registry_code = land_registry_code

    @property
    def settlement_attached(self):
        """Gets the settlement_attached of this AlgerianSettlement.

        Description not available  # noqa: E501

        :return: The settlement_attached of this AlgerianSettlement.
        :rtype: List[object]
        """
        return self._settlement_attached

    @settlement_attached.setter
    def settlement_attached(self, settlement_attached):
        """Sets the settlement_attached of this AlgerianSettlement.

        Description not available  # noqa: E501

        :param settlement_attached: The settlement_attached of this AlgerianSettlement.
        :type settlement_attached: List[object]
        """

        self._settlement_attached = settlement_attached

    @property
    def description(self):
        """Gets the description of this AlgerianSettlement.

        small description  # noqa: E501

        :return: The description of this AlgerianSettlement.
        :rtype: List[str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AlgerianSettlement.

        small description  # noqa: E501

        :param description: The description of this AlgerianSettlement.
        :type description: List[str]
        """

        self._description = description

    @property
    def administrative_center(self):
        """Gets the administrative_center of this AlgerianSettlement.

        Description not available  # noqa: E501

        :return: The administrative_center of this AlgerianSettlement.
        :rtype: List[object]
        """
        return self._administrative_center

    @administrative_center.setter
    def administrative_center(self, administrative_center):
        """Sets the administrative_center of this AlgerianSettlement.

        Description not available  # noqa: E501

        :param administrative_center: The administrative_center of this AlgerianSettlement.
        :type administrative_center: List[object]
        """

        self._administrative_center = administrative_center

    @property
    def id(self):
        """Gets the id of this AlgerianSettlement.

        identifier  # noqa: E501

        :return: The id of this AlgerianSettlement.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AlgerianSettlement.

        identifier  # noqa: E501

        :param id: The id of this AlgerianSettlement.
        :type id: str
        """

        self._id = id

    @property
    def label(self):
        """Gets the label of this AlgerianSettlement.

        short description of the resource  # noqa: E501

        :return: The label of this AlgerianSettlement.
        :rtype: List[str]
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this AlgerianSettlement.

        short description of the resource  # noqa: E501

        :param label: The label of this AlgerianSettlement.
        :type label: List[str]
        """

        self._label = label

    @property
    def type(self):
        """Gets the type of this AlgerianSettlement.

        type of the resource  # noqa: E501

        :return: The type of this AlgerianSettlement.
        :rtype: List[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AlgerianSettlement.

        type of the resource  # noqa: E501

        :param type: The type of this AlgerianSettlement.
        :type type: List[str]
        """

        self._type = type

    @property
    def urban_area(self):
        """Gets the urban_area of this AlgerianSettlement.

        Description not available  # noqa: E501

        :return: The urban_area of this AlgerianSettlement.
        :rtype: List[str]
        """
        return self._urban_area

    @urban_area.setter
    def urban_area(self, urban_area):
        """Sets the urban_area of this AlgerianSettlement.

        Description not available  # noqa: E501

        :param urban_area: The urban_area of this AlgerianSettlement.
        :type urban_area: List[str]
        """

        self._urban_area = urban_area

    @property
    def employers_celebration(self):
        """Gets the employers_celebration of this AlgerianSettlement.

        Description not available  # noqa: E501

        :return: The employers_celebration of this AlgerianSettlement.
        :rtype: List[str]
        """
        return self._employers_celebration

    @employers_celebration.setter
    def employers_celebration(self, employers_celebration):
        """Sets the employers_celebration of this AlgerianSettlement.

        Description not available  # noqa: E501

        :param employers_celebration: The employers_celebration of this AlgerianSettlement.
        :type employers_celebration: List[str]
        """

        self._employers_celebration = employers_celebration
