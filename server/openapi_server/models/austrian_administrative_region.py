# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class AustrianAdministrativeRegion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description=None, landtag_mandate=None, landtag=None, id=None, label=None, landeshauptmann=None, type=None, seat_number=None):  # noqa: E501
        """AustrianAdministrativeRegion - a model defined in OpenAPI

        :param description: The description of this AustrianAdministrativeRegion.  # noqa: E501
        :type description: List[str]
        :param landtag_mandate: The landtag_mandate of this AustrianAdministrativeRegion.  # noqa: E501
        :type landtag_mandate: List[str]
        :param landtag: The landtag of this AustrianAdministrativeRegion.  # noqa: E501
        :type landtag: List[str]
        :param id: The id of this AustrianAdministrativeRegion.  # noqa: E501
        :type id: str
        :param label: The label of this AustrianAdministrativeRegion.  # noqa: E501
        :type label: List[str]
        :param landeshauptmann: The landeshauptmann of this AustrianAdministrativeRegion.  # noqa: E501
        :type landeshauptmann: List[object]
        :param type: The type of this AustrianAdministrativeRegion.  # noqa: E501
        :type type: List[str]
        :param seat_number: The seat_number of this AustrianAdministrativeRegion.  # noqa: E501
        :type seat_number: List[int]
        """


        self.openapi_types = {
            'description': List[str],
            'landtag_mandate': List[str],
            'landtag': List[str],
            'id': str,
            'label': List[str],
            'landeshauptmann': List[object],
            'type': List[str],
            'seat_number': List[int]
        }

        self.attribute_map = {
            'description': 'description',
            'landtag_mandate': 'landtagMandate',
            'landtag': 'landtag',
            'id': 'id',
            'label': 'label',
            'landeshauptmann': 'landeshauptmann',
            'type': 'type',
            'seat_number': 'seatNumber'
        }

        self._description = description
        self._landtag_mandate = landtag_mandate
        self._landtag = landtag
        self._id = id
        self._label = label
        self._landeshauptmann = landeshauptmann
        self._type = type
        self._seat_number = seat_number

    @classmethod
    def from_dict(cls, dikt) -> 'AustrianAdministrativeRegion':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AustrianAdministrativeRegion of this AustrianAdministrativeRegion.  # noqa: E501
        :rtype: AustrianAdministrativeRegion
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this AustrianAdministrativeRegion.

        small description  # noqa: E501

        :return: The description of this AustrianAdministrativeRegion.
        :rtype: List[str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AustrianAdministrativeRegion.

        small description  # noqa: E501

        :param description: The description of this AustrianAdministrativeRegion.
        :type description: List[str]
        """

        self._description = description

    @property
    def landtag_mandate(self):
        """Gets the landtag_mandate of this AustrianAdministrativeRegion.

        Description not available  # noqa: E501

        :return: The landtag_mandate of this AustrianAdministrativeRegion.
        :rtype: List[str]
        """
        return self._landtag_mandate

    @landtag_mandate.setter
    def landtag_mandate(self, landtag_mandate):
        """Sets the landtag_mandate of this AustrianAdministrativeRegion.

        Description not available  # noqa: E501

        :param landtag_mandate: The landtag_mandate of this AustrianAdministrativeRegion.
        :type landtag_mandate: List[str]
        """

        self._landtag_mandate = landtag_mandate

    @property
    def landtag(self):
        """Gets the landtag of this AustrianAdministrativeRegion.

        Description not available  # noqa: E501

        :return: The landtag of this AustrianAdministrativeRegion.
        :rtype: List[str]
        """
        return self._landtag

    @landtag.setter
    def landtag(self, landtag):
        """Sets the landtag of this AustrianAdministrativeRegion.

        Description not available  # noqa: E501

        :param landtag: The landtag of this AustrianAdministrativeRegion.
        :type landtag: List[str]
        """

        self._landtag = landtag

    @property
    def id(self):
        """Gets the id of this AustrianAdministrativeRegion.

        identifier  # noqa: E501

        :return: The id of this AustrianAdministrativeRegion.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AustrianAdministrativeRegion.

        identifier  # noqa: E501

        :param id: The id of this AustrianAdministrativeRegion.
        :type id: str
        """

        self._id = id

    @property
    def label(self):
        """Gets the label of this AustrianAdministrativeRegion.

        short description of the resource  # noqa: E501

        :return: The label of this AustrianAdministrativeRegion.
        :rtype: List[str]
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this AustrianAdministrativeRegion.

        short description of the resource  # noqa: E501

        :param label: The label of this AustrianAdministrativeRegion.
        :type label: List[str]
        """

        self._label = label

    @property
    def landeshauptmann(self):
        """Gets the landeshauptmann of this AustrianAdministrativeRegion.

        Description not available  # noqa: E501

        :return: The landeshauptmann of this AustrianAdministrativeRegion.
        :rtype: List[object]
        """
        return self._landeshauptmann

    @landeshauptmann.setter
    def landeshauptmann(self, landeshauptmann):
        """Sets the landeshauptmann of this AustrianAdministrativeRegion.

        Description not available  # noqa: E501

        :param landeshauptmann: The landeshauptmann of this AustrianAdministrativeRegion.
        :type landeshauptmann: List[object]
        """

        self._landeshauptmann = landeshauptmann

    @property
    def type(self):
        """Gets the type of this AustrianAdministrativeRegion.

        type of the resource  # noqa: E501

        :return: The type of this AustrianAdministrativeRegion.
        :rtype: List[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AustrianAdministrativeRegion.

        type of the resource  # noqa: E501

        :param type: The type of this AustrianAdministrativeRegion.
        :type type: List[str]
        """

        self._type = type

    @property
    def seat_number(self):
        """Gets the seat_number of this AustrianAdministrativeRegion.

        Description not available  # noqa: E501

        :return: The seat_number of this AustrianAdministrativeRegion.
        :rtype: List[int]
        """
        return self._seat_number

    @seat_number.setter
    def seat_number(self, seat_number):
        """Sets the seat_number of this AustrianAdministrativeRegion.

        Description not available  # noqa: E501

        :param seat_number: The seat_number of this AustrianAdministrativeRegion.
        :type seat_number: List[int]
        """

        self._seat_number = seat_number
