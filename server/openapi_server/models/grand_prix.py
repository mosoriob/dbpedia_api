# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class GrandPrix(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, distance=None, number_of_people_attending=None, end_date=None, third_driver_country=None, description=None, first_driver_country=None, fastest_driver_country=None, first_driver=None, type=None, silver_medalist=None, participant=None, fastest_driver_team=None, duration=None, third_driver=None, medalist=None, previous_event=None, champion_in_single_female=None, course=None, distance_laps=None, champion_in_double_male=None, id=None, following_event=None, first_driver_team=None, champion_in_single_male=None, pole_driver=None, second_driver_country=None, bronze_medalist=None, champion_in_mixed_double=None, caused_by=None, label=None, gold_medalist=None, second_driver=None, fastest_driver=None, second_team=None, champion_in_single=None, race_track=None, third_team=None, next_event=None, champion_in_double_female=None, champion_in_double=None, start_date=None, pole_driver_country=None, champion=None, pole_driver_team=None):  # noqa: E501
        """GrandPrix - a model defined in OpenAPI

        :param distance: The distance of this GrandPrix.  # noqa: E501
        :type distance: List[object]
        :param number_of_people_attending: The number_of_people_attending of this GrandPrix.  # noqa: E501
        :type number_of_people_attending: List[int]
        :param end_date: The end_date of this GrandPrix.  # noqa: E501
        :type end_date: List[str]
        :param third_driver_country: The third_driver_country of this GrandPrix.  # noqa: E501
        :type third_driver_country: List[object]
        :param description: The description of this GrandPrix.  # noqa: E501
        :type description: List[str]
        :param first_driver_country: The first_driver_country of this GrandPrix.  # noqa: E501
        :type first_driver_country: List[object]
        :param fastest_driver_country: The fastest_driver_country of this GrandPrix.  # noqa: E501
        :type fastest_driver_country: List[object]
        :param first_driver: The first_driver of this GrandPrix.  # noqa: E501
        :type first_driver: List[object]
        :param type: The type of this GrandPrix.  # noqa: E501
        :type type: List[str]
        :param silver_medalist: The silver_medalist of this GrandPrix.  # noqa: E501
        :type silver_medalist: List[object]
        :param participant: The participant of this GrandPrix.  # noqa: E501
        :type participant: List[str]
        :param fastest_driver_team: The fastest_driver_team of this GrandPrix.  # noqa: E501
        :type fastest_driver_team: List[object]
        :param duration: The duration of this GrandPrix.  # noqa: E501
        :type duration: List[float]
        :param third_driver: The third_driver of this GrandPrix.  # noqa: E501
        :type third_driver: List[object]
        :param medalist: The medalist of this GrandPrix.  # noqa: E501
        :type medalist: List[object]
        :param previous_event: The previous_event of this GrandPrix.  # noqa: E501
        :type previous_event: List[object]
        :param champion_in_single_female: The champion_in_single_female of this GrandPrix.  # noqa: E501
        :type champion_in_single_female: List[object]
        :param course: The course of this GrandPrix.  # noqa: E501
        :type course: List[object]
        :param distance_laps: The distance_laps of this GrandPrix.  # noqa: E501
        :type distance_laps: List[int]
        :param champion_in_double_male: The champion_in_double_male of this GrandPrix.  # noqa: E501
        :type champion_in_double_male: List[object]
        :param id: The id of this GrandPrix.  # noqa: E501
        :type id: str
        :param following_event: The following_event of this GrandPrix.  # noqa: E501
        :type following_event: List[object]
        :param first_driver_team: The first_driver_team of this GrandPrix.  # noqa: E501
        :type first_driver_team: List[object]
        :param champion_in_single_male: The champion_in_single_male of this GrandPrix.  # noqa: E501
        :type champion_in_single_male: List[object]
        :param pole_driver: The pole_driver of this GrandPrix.  # noqa: E501
        :type pole_driver: List[object]
        :param second_driver_country: The second_driver_country of this GrandPrix.  # noqa: E501
        :type second_driver_country: List[object]
        :param bronze_medalist: The bronze_medalist of this GrandPrix.  # noqa: E501
        :type bronze_medalist: List[object]
        :param champion_in_mixed_double: The champion_in_mixed_double of this GrandPrix.  # noqa: E501
        :type champion_in_mixed_double: List[object]
        :param caused_by: The caused_by of this GrandPrix.  # noqa: E501
        :type caused_by: List[object]
        :param label: The label of this GrandPrix.  # noqa: E501
        :type label: List[str]
        :param gold_medalist: The gold_medalist of this GrandPrix.  # noqa: E501
        :type gold_medalist: List[object]
        :param second_driver: The second_driver of this GrandPrix.  # noqa: E501
        :type second_driver: List[object]
        :param fastest_driver: The fastest_driver of this GrandPrix.  # noqa: E501
        :type fastest_driver: List[object]
        :param second_team: The second_team of this GrandPrix.  # noqa: E501
        :type second_team: List[object]
        :param champion_in_single: The champion_in_single of this GrandPrix.  # noqa: E501
        :type champion_in_single: List[object]
        :param race_track: The race_track of this GrandPrix.  # noqa: E501
        :type race_track: List[object]
        :param third_team: The third_team of this GrandPrix.  # noqa: E501
        :type third_team: List[object]
        :param next_event: The next_event of this GrandPrix.  # noqa: E501
        :type next_event: List[object]
        :param champion_in_double_female: The champion_in_double_female of this GrandPrix.  # noqa: E501
        :type champion_in_double_female: List[object]
        :param champion_in_double: The champion_in_double of this GrandPrix.  # noqa: E501
        :type champion_in_double: List[object]
        :param start_date: The start_date of this GrandPrix.  # noqa: E501
        :type start_date: List[str]
        :param pole_driver_country: The pole_driver_country of this GrandPrix.  # noqa: E501
        :type pole_driver_country: List[object]
        :param champion: The champion of this GrandPrix.  # noqa: E501
        :type champion: List[object]
        :param pole_driver_team: The pole_driver_team of this GrandPrix.  # noqa: E501
        :type pole_driver_team: List[object]
        """


        self.openapi_types = {
            'distance': List[object],
            'number_of_people_attending': List[int],
            'end_date': List[str],
            'third_driver_country': List[object],
            'description': List[str],
            'first_driver_country': List[object],
            'fastest_driver_country': List[object],
            'first_driver': List[object],
            'type': List[str],
            'silver_medalist': List[object],
            'participant': List[str],
            'fastest_driver_team': List[object],
            'duration': List[float],
            'third_driver': List[object],
            'medalist': List[object],
            'previous_event': List[object],
            'champion_in_single_female': List[object],
            'course': List[object],
            'distance_laps': List[int],
            'champion_in_double_male': List[object],
            'id': str,
            'following_event': List[object],
            'first_driver_team': List[object],
            'champion_in_single_male': List[object],
            'pole_driver': List[object],
            'second_driver_country': List[object],
            'bronze_medalist': List[object],
            'champion_in_mixed_double': List[object],
            'caused_by': List[object],
            'label': List[str],
            'gold_medalist': List[object],
            'second_driver': List[object],
            'fastest_driver': List[object],
            'second_team': List[object],
            'champion_in_single': List[object],
            'race_track': List[object],
            'third_team': List[object],
            'next_event': List[object],
            'champion_in_double_female': List[object],
            'champion_in_double': List[object],
            'start_date': List[str],
            'pole_driver_country': List[object],
            'champion': List[object],
            'pole_driver_team': List[object]
        }

        self.attribute_map = {
            'distance': 'distance',
            'number_of_people_attending': 'numberOfPeopleAttending',
            'end_date': 'endDate',
            'third_driver_country': 'thirdDriverCountry',
            'description': 'description',
            'first_driver_country': 'firstDriverCountry',
            'fastest_driver_country': 'fastestDriverCountry',
            'first_driver': 'firstDriver',
            'type': 'type',
            'silver_medalist': 'silverMedalist',
            'participant': 'participant',
            'fastest_driver_team': 'fastestDriverTeam',
            'duration': 'duration',
            'third_driver': 'thirdDriver',
            'medalist': 'medalist',
            'previous_event': 'previousEvent',
            'champion_in_single_female': 'championInSingleFemale',
            'course': 'course',
            'distance_laps': 'distanceLaps',
            'champion_in_double_male': 'championInDoubleMale',
            'id': 'id',
            'following_event': 'followingEvent',
            'first_driver_team': 'firstDriverTeam',
            'champion_in_single_male': 'championInSingleMale',
            'pole_driver': 'poleDriver',
            'second_driver_country': 'secondDriverCountry',
            'bronze_medalist': 'bronzeMedalist',
            'champion_in_mixed_double': 'championInMixedDouble',
            'caused_by': 'causedBy',
            'label': 'label',
            'gold_medalist': 'goldMedalist',
            'second_driver': 'secondDriver',
            'fastest_driver': 'fastestDriver',
            'second_team': 'secondTeam',
            'champion_in_single': 'championInSingle',
            'race_track': 'raceTrack',
            'third_team': 'thirdTeam',
            'next_event': 'nextEvent',
            'champion_in_double_female': 'championInDoubleFemale',
            'champion_in_double': 'championInDouble',
            'start_date': 'startDate',
            'pole_driver_country': 'poleDriverCountry',
            'champion': 'champion',
            'pole_driver_team': 'poleDriverTeam'
        }

        self._distance = distance
        self._number_of_people_attending = number_of_people_attending
        self._end_date = end_date
        self._third_driver_country = third_driver_country
        self._description = description
        self._first_driver_country = first_driver_country
        self._fastest_driver_country = fastest_driver_country
        self._first_driver = first_driver
        self._type = type
        self._silver_medalist = silver_medalist
        self._participant = participant
        self._fastest_driver_team = fastest_driver_team
        self._duration = duration
        self._third_driver = third_driver
        self._medalist = medalist
        self._previous_event = previous_event
        self._champion_in_single_female = champion_in_single_female
        self._course = course
        self._distance_laps = distance_laps
        self._champion_in_double_male = champion_in_double_male
        self._id = id
        self._following_event = following_event
        self._first_driver_team = first_driver_team
        self._champion_in_single_male = champion_in_single_male
        self._pole_driver = pole_driver
        self._second_driver_country = second_driver_country
        self._bronze_medalist = bronze_medalist
        self._champion_in_mixed_double = champion_in_mixed_double
        self._caused_by = caused_by
        self._label = label
        self._gold_medalist = gold_medalist
        self._second_driver = second_driver
        self._fastest_driver = fastest_driver
        self._second_team = second_team
        self._champion_in_single = champion_in_single
        self._race_track = race_track
        self._third_team = third_team
        self._next_event = next_event
        self._champion_in_double_female = champion_in_double_female
        self._champion_in_double = champion_in_double
        self._start_date = start_date
        self._pole_driver_country = pole_driver_country
        self._champion = champion
        self._pole_driver_team = pole_driver_team

    @classmethod
    def from_dict(cls, dikt) -> 'GrandPrix':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GrandPrix of this GrandPrix.  # noqa: E501
        :rtype: GrandPrix
        """
        return util.deserialize_model(dikt, cls)

    @property
    def distance(self):
        """Gets the distance of this GrandPrix.

        Description not available  # noqa: E501

        :return: The distance of this GrandPrix.
        :rtype: List[object]
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this GrandPrix.

        Description not available  # noqa: E501

        :param distance: The distance of this GrandPrix.
        :type distance: List[object]
        """

        self._distance = distance

    @property
    def number_of_people_attending(self):
        """Gets the number_of_people_attending of this GrandPrix.

        Description not available  # noqa: E501

        :return: The number_of_people_attending of this GrandPrix.
        :rtype: List[int]
        """
        return self._number_of_people_attending

    @number_of_people_attending.setter
    def number_of_people_attending(self, number_of_people_attending):
        """Sets the number_of_people_attending of this GrandPrix.

        Description not available  # noqa: E501

        :param number_of_people_attending: The number_of_people_attending of this GrandPrix.
        :type number_of_people_attending: List[int]
        """

        self._number_of_people_attending = number_of_people_attending

    @property
    def end_date(self):
        """Gets the end_date of this GrandPrix.

        The end date of the event.  # noqa: E501

        :return: The end_date of this GrandPrix.
        :rtype: List[str]
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this GrandPrix.

        The end date of the event.  # noqa: E501

        :param end_date: The end_date of this GrandPrix.
        :type end_date: List[str]
        """

        self._end_date = end_date

    @property
    def third_driver_country(self):
        """Gets the third_driver_country of this GrandPrix.

        Description not available  # noqa: E501

        :return: The third_driver_country of this GrandPrix.
        :rtype: List[object]
        """
        return self._third_driver_country

    @third_driver_country.setter
    def third_driver_country(self, third_driver_country):
        """Sets the third_driver_country of this GrandPrix.

        Description not available  # noqa: E501

        :param third_driver_country: The third_driver_country of this GrandPrix.
        :type third_driver_country: List[object]
        """

        self._third_driver_country = third_driver_country

    @property
    def description(self):
        """Gets the description of this GrandPrix.

        small description  # noqa: E501

        :return: The description of this GrandPrix.
        :rtype: List[str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GrandPrix.

        small description  # noqa: E501

        :param description: The description of this GrandPrix.
        :type description: List[str]
        """

        self._description = description

    @property
    def first_driver_country(self):
        """Gets the first_driver_country of this GrandPrix.

        Description not available  # noqa: E501

        :return: The first_driver_country of this GrandPrix.
        :rtype: List[object]
        """
        return self._first_driver_country

    @first_driver_country.setter
    def first_driver_country(self, first_driver_country):
        """Sets the first_driver_country of this GrandPrix.

        Description not available  # noqa: E501

        :param first_driver_country: The first_driver_country of this GrandPrix.
        :type first_driver_country: List[object]
        """

        self._first_driver_country = first_driver_country

    @property
    def fastest_driver_country(self):
        """Gets the fastest_driver_country of this GrandPrix.

        Description not available  # noqa: E501

        :return: The fastest_driver_country of this GrandPrix.
        :rtype: List[object]
        """
        return self._fastest_driver_country

    @fastest_driver_country.setter
    def fastest_driver_country(self, fastest_driver_country):
        """Sets the fastest_driver_country of this GrandPrix.

        Description not available  # noqa: E501

        :param fastest_driver_country: The fastest_driver_country of this GrandPrix.
        :type fastest_driver_country: List[object]
        """

        self._fastest_driver_country = fastest_driver_country

    @property
    def first_driver(self):
        """Gets the first_driver of this GrandPrix.

        Description not available  # noqa: E501

        :return: The first_driver of this GrandPrix.
        :rtype: List[object]
        """
        return self._first_driver

    @first_driver.setter
    def first_driver(self, first_driver):
        """Sets the first_driver of this GrandPrix.

        Description not available  # noqa: E501

        :param first_driver: The first_driver of this GrandPrix.
        :type first_driver: List[object]
        """

        self._first_driver = first_driver

    @property
    def type(self):
        """Gets the type of this GrandPrix.

        type of the resource  # noqa: E501

        :return: The type of this GrandPrix.
        :rtype: List[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GrandPrix.

        type of the resource  # noqa: E501

        :param type: The type of this GrandPrix.
        :type type: List[str]
        """

        self._type = type

    @property
    def silver_medalist(self):
        """Gets the silver_medalist of this GrandPrix.

        Description not available  # noqa: E501

        :return: The silver_medalist of this GrandPrix.
        :rtype: List[object]
        """
        return self._silver_medalist

    @silver_medalist.setter
    def silver_medalist(self, silver_medalist):
        """Sets the silver_medalist of this GrandPrix.

        Description not available  # noqa: E501

        :param silver_medalist: The silver_medalist of this GrandPrix.
        :type silver_medalist: List[object]
        """

        self._silver_medalist = silver_medalist

    @property
    def participant(self):
        """Gets the participant of this GrandPrix.

        Description not available  # noqa: E501

        :return: The participant of this GrandPrix.
        :rtype: List[str]
        """
        return self._participant

    @participant.setter
    def participant(self, participant):
        """Sets the participant of this GrandPrix.

        Description not available  # noqa: E501

        :param participant: The participant of this GrandPrix.
        :type participant: List[str]
        """

        self._participant = participant

    @property
    def fastest_driver_team(self):
        """Gets the fastest_driver_team of this GrandPrix.

        Description not available  # noqa: E501

        :return: The fastest_driver_team of this GrandPrix.
        :rtype: List[object]
        """
        return self._fastest_driver_team

    @fastest_driver_team.setter
    def fastest_driver_team(self, fastest_driver_team):
        """Sets the fastest_driver_team of this GrandPrix.

        Description not available  # noqa: E501

        :param fastest_driver_team: The fastest_driver_team of this GrandPrix.
        :type fastest_driver_team: List[object]
        """

        self._fastest_driver_team = fastest_driver_team

    @property
    def duration(self):
        """Gets the duration of this GrandPrix.

        The duration of the item (movie, audio recording, event, etc.) in ISO 8601 date format  # noqa: E501

        :return: The duration of this GrandPrix.
        :rtype: List[float]
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this GrandPrix.

        The duration of the item (movie, audio recording, event, etc.) in ISO 8601 date format  # noqa: E501

        :param duration: The duration of this GrandPrix.
        :type duration: List[float]
        """

        self._duration = duration

    @property
    def third_driver(self):
        """Gets the third_driver of this GrandPrix.

        Description not available  # noqa: E501

        :return: The third_driver of this GrandPrix.
        :rtype: List[object]
        """
        return self._third_driver

    @third_driver.setter
    def third_driver(self, third_driver):
        """Sets the third_driver of this GrandPrix.

        Description not available  # noqa: E501

        :param third_driver: The third_driver of this GrandPrix.
        :type third_driver: List[object]
        """

        self._third_driver = third_driver

    @property
    def medalist(self):
        """Gets the medalist of this GrandPrix.

        Description not available  # noqa: E501

        :return: The medalist of this GrandPrix.
        :rtype: List[object]
        """
        return self._medalist

    @medalist.setter
    def medalist(self, medalist):
        """Sets the medalist of this GrandPrix.

        Description not available  # noqa: E501

        :param medalist: The medalist of this GrandPrix.
        :type medalist: List[object]
        """

        self._medalist = medalist

    @property
    def previous_event(self):
        """Gets the previous_event of this GrandPrix.

        Description not available  # noqa: E501

        :return: The previous_event of this GrandPrix.
        :rtype: List[object]
        """
        return self._previous_event

    @previous_event.setter
    def previous_event(self, previous_event):
        """Sets the previous_event of this GrandPrix.

        Description not available  # noqa: E501

        :param previous_event: The previous_event of this GrandPrix.
        :type previous_event: List[object]
        """

        self._previous_event = previous_event

    @property
    def champion_in_single_female(self):
        """Gets the champion_in_single_female of this GrandPrix.

        winner of a competition in the single female session, to distinguish from the double session (as in tennis)  # noqa: E501

        :return: The champion_in_single_female of this GrandPrix.
        :rtype: List[object]
        """
        return self._champion_in_single_female

    @champion_in_single_female.setter
    def champion_in_single_female(self, champion_in_single_female):
        """Sets the champion_in_single_female of this GrandPrix.

        winner of a competition in the single female session, to distinguish from the double session (as in tennis)  # noqa: E501

        :param champion_in_single_female: The champion_in_single_female of this GrandPrix.
        :type champion_in_single_female: List[object]
        """

        self._champion_in_single_female = champion_in_single_female

    @property
    def course(self):
        """Gets the course of this GrandPrix.

        Description not available  # noqa: E501

        :return: The course of this GrandPrix.
        :rtype: List[object]
        """
        return self._course

    @course.setter
    def course(self, course):
        """Sets the course of this GrandPrix.

        Description not available  # noqa: E501

        :param course: The course of this GrandPrix.
        :type course: List[object]
        """

        self._course = course

    @property
    def distance_laps(self):
        """Gets the distance_laps of this GrandPrix.

        Description not available  # noqa: E501

        :return: The distance_laps of this GrandPrix.
        :rtype: List[int]
        """
        return self._distance_laps

    @distance_laps.setter
    def distance_laps(self, distance_laps):
        """Sets the distance_laps of this GrandPrix.

        Description not available  # noqa: E501

        :param distance_laps: The distance_laps of this GrandPrix.
        :type distance_laps: List[int]
        """

        self._distance_laps = distance_laps

    @property
    def champion_in_double_male(self):
        """Gets the champion_in_double_male of this GrandPrix.

        winner of a competition in the male double session (as in tennis)  # noqa: E501

        :return: The champion_in_double_male of this GrandPrix.
        :rtype: List[object]
        """
        return self._champion_in_double_male

    @champion_in_double_male.setter
    def champion_in_double_male(self, champion_in_double_male):
        """Sets the champion_in_double_male of this GrandPrix.

        winner of a competition in the male double session (as in tennis)  # noqa: E501

        :param champion_in_double_male: The champion_in_double_male of this GrandPrix.
        :type champion_in_double_male: List[object]
        """

        self._champion_in_double_male = champion_in_double_male

    @property
    def id(self):
        """Gets the id of this GrandPrix.

        identifier  # noqa: E501

        :return: The id of this GrandPrix.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GrandPrix.

        identifier  # noqa: E501

        :param id: The id of this GrandPrix.
        :type id: str
        """

        self._id = id

    @property
    def following_event(self):
        """Gets the following_event of this GrandPrix.

        Description not available  # noqa: E501

        :return: The following_event of this GrandPrix.
        :rtype: List[object]
        """
        return self._following_event

    @following_event.setter
    def following_event(self, following_event):
        """Sets the following_event of this GrandPrix.

        Description not available  # noqa: E501

        :param following_event: The following_event of this GrandPrix.
        :type following_event: List[object]
        """

        self._following_event = following_event

    @property
    def first_driver_team(self):
        """Gets the first_driver_team of this GrandPrix.

        Description not available  # noqa: E501

        :return: The first_driver_team of this GrandPrix.
        :rtype: List[object]
        """
        return self._first_driver_team

    @first_driver_team.setter
    def first_driver_team(self, first_driver_team):
        """Sets the first_driver_team of this GrandPrix.

        Description not available  # noqa: E501

        :param first_driver_team: The first_driver_team of this GrandPrix.
        :type first_driver_team: List[object]
        """

        self._first_driver_team = first_driver_team

    @property
    def champion_in_single_male(self):
        """Gets the champion_in_single_male of this GrandPrix.

        winner of a competition in the single male session, to distinguish from the double session (as in tennis)  # noqa: E501

        :return: The champion_in_single_male of this GrandPrix.
        :rtype: List[object]
        """
        return self._champion_in_single_male

    @champion_in_single_male.setter
    def champion_in_single_male(self, champion_in_single_male):
        """Sets the champion_in_single_male of this GrandPrix.

        winner of a competition in the single male session, to distinguish from the double session (as in tennis)  # noqa: E501

        :param champion_in_single_male: The champion_in_single_male of this GrandPrix.
        :type champion_in_single_male: List[object]
        """

        self._champion_in_single_male = champion_in_single_male

    @property
    def pole_driver(self):
        """Gets the pole_driver of this GrandPrix.

        Description not available  # noqa: E501

        :return: The pole_driver of this GrandPrix.
        :rtype: List[object]
        """
        return self._pole_driver

    @pole_driver.setter
    def pole_driver(self, pole_driver):
        """Sets the pole_driver of this GrandPrix.

        Description not available  # noqa: E501

        :param pole_driver: The pole_driver of this GrandPrix.
        :type pole_driver: List[object]
        """

        self._pole_driver = pole_driver

    @property
    def second_driver_country(self):
        """Gets the second_driver_country of this GrandPrix.

        Description not available  # noqa: E501

        :return: The second_driver_country of this GrandPrix.
        :rtype: List[object]
        """
        return self._second_driver_country

    @second_driver_country.setter
    def second_driver_country(self, second_driver_country):
        """Sets the second_driver_country of this GrandPrix.

        Description not available  # noqa: E501

        :param second_driver_country: The second_driver_country of this GrandPrix.
        :type second_driver_country: List[object]
        """

        self._second_driver_country = second_driver_country

    @property
    def bronze_medalist(self):
        """Gets the bronze_medalist of this GrandPrix.

        Description not available  # noqa: E501

        :return: The bronze_medalist of this GrandPrix.
        :rtype: List[object]
        """
        return self._bronze_medalist

    @bronze_medalist.setter
    def bronze_medalist(self, bronze_medalist):
        """Sets the bronze_medalist of this GrandPrix.

        Description not available  # noqa: E501

        :param bronze_medalist: The bronze_medalist of this GrandPrix.
        :type bronze_medalist: List[object]
        """

        self._bronze_medalist = bronze_medalist

    @property
    def champion_in_mixed_double(self):
        """Gets the champion_in_mixed_double of this GrandPrix.

        winner of a competition in the mixed double session (as in tennis)  # noqa: E501

        :return: The champion_in_mixed_double of this GrandPrix.
        :rtype: List[object]
        """
        return self._champion_in_mixed_double

    @champion_in_mixed_double.setter
    def champion_in_mixed_double(self, champion_in_mixed_double):
        """Sets the champion_in_mixed_double of this GrandPrix.

        winner of a competition in the mixed double session (as in tennis)  # noqa: E501

        :param champion_in_mixed_double: The champion_in_mixed_double of this GrandPrix.
        :type champion_in_mixed_double: List[object]
        """

        self._champion_in_mixed_double = champion_in_mixed_double

    @property
    def caused_by(self):
        """Gets the caused_by of this GrandPrix.

        Description not available  # noqa: E501

        :return: The caused_by of this GrandPrix.
        :rtype: List[object]
        """
        return self._caused_by

    @caused_by.setter
    def caused_by(self, caused_by):
        """Sets the caused_by of this GrandPrix.

        Description not available  # noqa: E501

        :param caused_by: The caused_by of this GrandPrix.
        :type caused_by: List[object]
        """

        self._caused_by = caused_by

    @property
    def label(self):
        """Gets the label of this GrandPrix.

        short description of the resource  # noqa: E501

        :return: The label of this GrandPrix.
        :rtype: List[str]
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this GrandPrix.

        short description of the resource  # noqa: E501

        :param label: The label of this GrandPrix.
        :type label: List[str]
        """

        self._label = label

    @property
    def gold_medalist(self):
        """Gets the gold_medalist of this GrandPrix.

        Description not available  # noqa: E501

        :return: The gold_medalist of this GrandPrix.
        :rtype: List[object]
        """
        return self._gold_medalist

    @gold_medalist.setter
    def gold_medalist(self, gold_medalist):
        """Sets the gold_medalist of this GrandPrix.

        Description not available  # noqa: E501

        :param gold_medalist: The gold_medalist of this GrandPrix.
        :type gold_medalist: List[object]
        """

        self._gold_medalist = gold_medalist

    @property
    def second_driver(self):
        """Gets the second_driver of this GrandPrix.

        Description not available  # noqa: E501

        :return: The second_driver of this GrandPrix.
        :rtype: List[object]
        """
        return self._second_driver

    @second_driver.setter
    def second_driver(self, second_driver):
        """Sets the second_driver of this GrandPrix.

        Description not available  # noqa: E501

        :param second_driver: The second_driver of this GrandPrix.
        :type second_driver: List[object]
        """

        self._second_driver = second_driver

    @property
    def fastest_driver(self):
        """Gets the fastest_driver of this GrandPrix.

        Description not available  # noqa: E501

        :return: The fastest_driver of this GrandPrix.
        :rtype: List[object]
        """
        return self._fastest_driver

    @fastest_driver.setter
    def fastest_driver(self, fastest_driver):
        """Sets the fastest_driver of this GrandPrix.

        Description not available  # noqa: E501

        :param fastest_driver: The fastest_driver of this GrandPrix.
        :type fastest_driver: List[object]
        """

        self._fastest_driver = fastest_driver

    @property
    def second_team(self):
        """Gets the second_team of this GrandPrix.

        Description not available  # noqa: E501

        :return: The second_team of this GrandPrix.
        :rtype: List[object]
        """
        return self._second_team

    @second_team.setter
    def second_team(self, second_team):
        """Sets the second_team of this GrandPrix.

        Description not available  # noqa: E501

        :param second_team: The second_team of this GrandPrix.
        :type second_team: List[object]
        """

        self._second_team = second_team

    @property
    def champion_in_single(self):
        """Gets the champion_in_single of this GrandPrix.

        winner of a competition in the single session, to distinguish from the double session (as in tennis)  # noqa: E501

        :return: The champion_in_single of this GrandPrix.
        :rtype: List[object]
        """
        return self._champion_in_single

    @champion_in_single.setter
    def champion_in_single(self, champion_in_single):
        """Sets the champion_in_single of this GrandPrix.

        winner of a competition in the single session, to distinguish from the double session (as in tennis)  # noqa: E501

        :param champion_in_single: The champion_in_single of this GrandPrix.
        :type champion_in_single: List[object]
        """

        self._champion_in_single = champion_in_single

    @property
    def race_track(self):
        """Gets the race_track of this GrandPrix.

        Description not available  # noqa: E501

        :return: The race_track of this GrandPrix.
        :rtype: List[object]
        """
        return self._race_track

    @race_track.setter
    def race_track(self, race_track):
        """Sets the race_track of this GrandPrix.

        Description not available  # noqa: E501

        :param race_track: The race_track of this GrandPrix.
        :type race_track: List[object]
        """

        self._race_track = race_track

    @property
    def third_team(self):
        """Gets the third_team of this GrandPrix.

        Description not available  # noqa: E501

        :return: The third_team of this GrandPrix.
        :rtype: List[object]
        """
        return self._third_team

    @third_team.setter
    def third_team(self, third_team):
        """Sets the third_team of this GrandPrix.

        Description not available  # noqa: E501

        :param third_team: The third_team of this GrandPrix.
        :type third_team: List[object]
        """

        self._third_team = third_team

    @property
    def next_event(self):
        """Gets the next_event of this GrandPrix.

        Description not available  # noqa: E501

        :return: The next_event of this GrandPrix.
        :rtype: List[object]
        """
        return self._next_event

    @next_event.setter
    def next_event(self, next_event):
        """Sets the next_event of this GrandPrix.

        Description not available  # noqa: E501

        :param next_event: The next_event of this GrandPrix.
        :type next_event: List[object]
        """

        self._next_event = next_event

    @property
    def champion_in_double_female(self):
        """Gets the champion_in_double_female of this GrandPrix.

        winner of a competition in the female double session (as in tennis)  # noqa: E501

        :return: The champion_in_double_female of this GrandPrix.
        :rtype: List[object]
        """
        return self._champion_in_double_female

    @champion_in_double_female.setter
    def champion_in_double_female(self, champion_in_double_female):
        """Sets the champion_in_double_female of this GrandPrix.

        winner of a competition in the female double session (as in tennis)  # noqa: E501

        :param champion_in_double_female: The champion_in_double_female of this GrandPrix.
        :type champion_in_double_female: List[object]
        """

        self._champion_in_double_female = champion_in_double_female

    @property
    def champion_in_double(self):
        """Gets the champion_in_double of this GrandPrix.

        winner of a competition in the double session (as in tennis)  # noqa: E501

        :return: The champion_in_double of this GrandPrix.
        :rtype: List[object]
        """
        return self._champion_in_double

    @champion_in_double.setter
    def champion_in_double(self, champion_in_double):
        """Sets the champion_in_double of this GrandPrix.

        winner of a competition in the double session (as in tennis)  # noqa: E501

        :param champion_in_double: The champion_in_double of this GrandPrix.
        :type champion_in_double: List[object]
        """

        self._champion_in_double = champion_in_double

    @property
    def start_date(self):
        """Gets the start_date of this GrandPrix.

        The start date of the event.  # noqa: E501

        :return: The start_date of this GrandPrix.
        :rtype: List[str]
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this GrandPrix.

        The start date of the event.  # noqa: E501

        :param start_date: The start_date of this GrandPrix.
        :type start_date: List[str]
        """

        self._start_date = start_date

    @property
    def pole_driver_country(self):
        """Gets the pole_driver_country of this GrandPrix.

        Description not available  # noqa: E501

        :return: The pole_driver_country of this GrandPrix.
        :rtype: List[object]
        """
        return self._pole_driver_country

    @pole_driver_country.setter
    def pole_driver_country(self, pole_driver_country):
        """Sets the pole_driver_country of this GrandPrix.

        Description not available  # noqa: E501

        :param pole_driver_country: The pole_driver_country of this GrandPrix.
        :type pole_driver_country: List[object]
        """

        self._pole_driver_country = pole_driver_country

    @property
    def champion(self):
        """Gets the champion of this GrandPrix.

        winner of a competition  # noqa: E501

        :return: The champion of this GrandPrix.
        :rtype: List[object]
        """
        return self._champion

    @champion.setter
    def champion(self, champion):
        """Sets the champion of this GrandPrix.

        winner of a competition  # noqa: E501

        :param champion: The champion of this GrandPrix.
        :type champion: List[object]
        """

        self._champion = champion

    @property
    def pole_driver_team(self):
        """Gets the pole_driver_team of this GrandPrix.

        Description not available  # noqa: E501

        :return: The pole_driver_team of this GrandPrix.
        :rtype: List[object]
        """
        return self._pole_driver_team

    @pole_driver_team.setter
    def pole_driver_team(self, pole_driver_team):
        """Sets the pole_driver_team of this GrandPrix.

        Description not available  # noqa: E501

        :param pole_driver_team: The pole_driver_team of this GrandPrix.
        :type pole_driver_team: List[object]
        """

        self._pole_driver_team = pole_driver_team
