# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class School(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, team_name=None, viaf_id=None, df_e=None, art_patron=None, secretary_general=None, discipline=None, type=None, oversight=None, head_label=None, season=None, id=None, executive_headteacher=None, superintendent=None, education_system=None, act_score=None, number_of_employees=None, player_season=None, endowment=None, regional_council=None, dean=None, number_of_volunteers=None, vice_principal=None, grades=None, ceo=None, number_of_graduate_students=None, alumni=None, ceeb=None, school_board=None, headquarter=None, nobel_laureates=None, honours=None, sat_score=None, organisation_member=None, product=None, foundation_place=None, national_selection=None, number_of_classrooms=None, religious_head=None, staff=None, official_school_colour=None, u_rn=None, school_patron=None, closed=None, ranking=None, trustee=None, upper_age=None, ratio=None, age_range=None, rector=None, fees=None, reopened=None, acting_headteacher=None, leader_function=None, sixth_form_students=None, manager_season=None, number_of_locations=None, number_of_academic_staff=None, offered_classes=None, denomination=None, average_class_size=None, campus_size=None, revenue=None, national_ranking=None, affiliation=None, vice_principal_label=None, assistant_principal=None, lower_age=None, school_number=None, nla_id=None, chairperson=None, religious_head_label=None, region_served=None, formation_date=None, campus_type=None, number_of_students=None, faculty_size=None, extinction_date=None, specialist=None, teaching_staff=None, slogan=None, location_city=None, school_code=None, classes=None, ideology=None, description=None, membership=None, formation_year=None, principal=None, junior_season=None, head=None, chaplain=None, administrator=None, extinction_year=None, child_organisation=None, parent_organisation=None, number_of_undergraduate_students=None, number_of_staff=None, hometown=None, custodian=None, bar_pass_rate=None, tuition=None, label=None, legal_form=None, headteacher=None, testaverage=None, general_council=None, rival=None, age=None, main_organ=None):  # noqa: E501
        """School - a model defined in OpenAPI

        :param team_name: The team_name of this School.  # noqa: E501
        :type team_name: List[str]
        :param viaf_id: The viaf_id of this School.  # noqa: E501
        :type viaf_id: List[str]
        :param df_e: The df_e of this School.  # noqa: E501
        :type df_e: List[object]
        :param art_patron: The art_patron of this School.  # noqa: E501
        :type art_patron: List[object]
        :param secretary_general: The secretary_general of this School.  # noqa: E501
        :type secretary_general: List[object]
        :param discipline: The discipline of this School.  # noqa: E501
        :type discipline: List[object]
        :param type: The type of this School.  # noqa: E501
        :type type: List[str]
        :param oversight: The oversight of this School.  # noqa: E501
        :type oversight: List[str]
        :param head_label: The head_label of this School.  # noqa: E501
        :type head_label: List[str]
        :param season: The season of this School.  # noqa: E501
        :type season: List[object]
        :param id: The id of this School.  # noqa: E501
        :type id: str
        :param executive_headteacher: The executive_headteacher of this School.  # noqa: E501
        :type executive_headteacher: List[object]
        :param superintendent: The superintendent of this School.  # noqa: E501
        :type superintendent: List[object]
        :param education_system: The education_system of this School.  # noqa: E501
        :type education_system: List[object]
        :param act_score: The act_score of this School.  # noqa: E501
        :type act_score: List[object]
        :param number_of_employees: The number_of_employees of this School.  # noqa: E501
        :type number_of_employees: List[int]
        :param player_season: The player_season of this School.  # noqa: E501
        :type player_season: List[object]
        :param endowment: The endowment of this School.  # noqa: E501
        :type endowment: List[float]
        :param regional_council: The regional_council of this School.  # noqa: E501
        :type regional_council: List[object]
        :param dean: The dean of this School.  # noqa: E501
        :type dean: List[object]
        :param number_of_volunteers: The number_of_volunteers of this School.  # noqa: E501
        :type number_of_volunteers: List[int]
        :param vice_principal: The vice_principal of this School.  # noqa: E501
        :type vice_principal: List[object]
        :param grades: The grades of this School.  # noqa: E501
        :type grades: List[object]
        :param ceo: The ceo of this School.  # noqa: E501
        :type ceo: List[object]
        :param number_of_graduate_students: The number_of_graduate_students of this School.  # noqa: E501
        :type number_of_graduate_students: List[int]
        :param alumni: The alumni of this School.  # noqa: E501
        :type alumni: List[object]
        :param ceeb: The ceeb of this School.  # noqa: E501
        :type ceeb: List[str]
        :param school_board: The school_board of this School.  # noqa: E501
        :type school_board: List[object]
        :param headquarter: The headquarter of this School.  # noqa: E501
        :type headquarter: List[object]
        :param nobel_laureates: The nobel_laureates of this School.  # noqa: E501
        :type nobel_laureates: List[object]
        :param honours: The honours of this School.  # noqa: E501
        :type honours: List[object]
        :param sat_score: The sat_score of this School.  # noqa: E501
        :type sat_score: List[object]
        :param organisation_member: The organisation_member of this School.  # noqa: E501
        :type organisation_member: List[object]
        :param product: The product of this School.  # noqa: E501
        :type product: List[object]
        :param foundation_place: The foundation_place of this School.  # noqa: E501
        :type foundation_place: List[object]
        :param national_selection: The national_selection of this School.  # noqa: E501
        :type national_selection: List[object]
        :param number_of_classrooms: The number_of_classrooms of this School.  # noqa: E501
        :type number_of_classrooms: List[object]
        :param religious_head: The religious_head of this School.  # noqa: E501
        :type religious_head: List[object]
        :param staff: The staff of this School.  # noqa: E501
        :type staff: List[int]
        :param official_school_colour: The official_school_colour of this School.  # noqa: E501
        :type official_school_colour: List[str]
        :param u_rn: The u_rn of this School.  # noqa: E501
        :type u_rn: List[object]
        :param school_patron: The school_patron of this School.  # noqa: E501
        :type school_patron: List[object]
        :param closed: The closed of this School.  # noqa: E501
        :type closed: List[str]
        :param ranking: The ranking of this School.  # noqa: E501
        :type ranking: List[int]
        :param trustee: The trustee of this School.  # noqa: E501
        :type trustee: List[object]
        :param upper_age: The upper_age of this School.  # noqa: E501
        :type upper_age: List[int]
        :param ratio: The ratio of this School.  # noqa: E501
        :type ratio: List[str]
        :param age_range: The age_range of this School.  # noqa: E501
        :type age_range: List[int]
        :param rector: The rector of this School.  # noqa: E501
        :type rector: List[object]
        :param fees: The fees of this School.  # noqa: E501
        :type fees: List[float]
        :param reopened: The reopened of this School.  # noqa: E501
        :type reopened: List[str]
        :param acting_headteacher: The acting_headteacher of this School.  # noqa: E501
        :type acting_headteacher: List[object]
        :param leader_function: The leader_function of this School.  # noqa: E501
        :type leader_function: List[object]
        :param sixth_form_students: The sixth_form_students of this School.  # noqa: E501
        :type sixth_form_students: List[str]
        :param manager_season: The manager_season of this School.  # noqa: E501
        :type manager_season: List[object]
        :param number_of_locations: The number_of_locations of this School.  # noqa: E501
        :type number_of_locations: List[int]
        :param number_of_academic_staff: The number_of_academic_staff of this School.  # noqa: E501
        :type number_of_academic_staff: List[int]
        :param offered_classes: The offered_classes of this School.  # noqa: E501
        :type offered_classes: List[str]
        :param denomination: The denomination of this School.  # noqa: E501
        :type denomination: List[object]
        :param average_class_size: The average_class_size of this School.  # noqa: E501
        :type average_class_size: List[float]
        :param campus_size: The campus_size of this School.  # noqa: E501
        :type campus_size: List[object]
        :param revenue: The revenue of this School.  # noqa: E501
        :type revenue: List[float]
        :param national_ranking: The national_ranking of this School.  # noqa: E501
        :type national_ranking: List[int]
        :param affiliation: The affiliation of this School.  # noqa: E501
        :type affiliation: List[object]
        :param vice_principal_label: The vice_principal_label of this School.  # noqa: E501
        :type vice_principal_label: List[object]
        :param assistant_principal: The assistant_principal of this School.  # noqa: E501
        :type assistant_principal: List[object]
        :param lower_age: The lower_age of this School.  # noqa: E501
        :type lower_age: List[int]
        :param school_number: The school_number of this School.  # noqa: E501
        :type school_number: List[str]
        :param nla_id: The nla_id of this School.  # noqa: E501
        :type nla_id: List[str]
        :param chairperson: The chairperson of this School.  # noqa: E501
        :type chairperson: List[object]
        :param religious_head_label: The religious_head_label of this School.  # noqa: E501
        :type religious_head_label: List[object]
        :param region_served: The region_served of this School.  # noqa: E501
        :type region_served: List[object]
        :param formation_date: The formation_date of this School.  # noqa: E501
        :type formation_date: List[str]
        :param campus_type: The campus_type of this School.  # noqa: E501
        :type campus_type: List[str]
        :param number_of_students: The number_of_students of this School.  # noqa: E501
        :type number_of_students: List[int]
        :param faculty_size: The faculty_size of this School.  # noqa: E501
        :type faculty_size: List[int]
        :param extinction_date: The extinction_date of this School.  # noqa: E501
        :type extinction_date: List[str]
        :param specialist: The specialist of this School.  # noqa: E501
        :type specialist: List[str]
        :param teaching_staff: The teaching_staff of this School.  # noqa: E501
        :type teaching_staff: List[object]
        :param slogan: The slogan of this School.  # noqa: E501
        :type slogan: List[str]
        :param location_city: The location_city of this School.  # noqa: E501
        :type location_city: List[object]
        :param school_code: The school_code of this School.  # noqa: E501
        :type school_code: List[str]
        :param classes: The classes of this School.  # noqa: E501
        :type classes: List[int]
        :param ideology: The ideology of this School.  # noqa: E501
        :type ideology: List[object]
        :param description: The description of this School.  # noqa: E501
        :type description: List[str]
        :param membership: The membership of this School.  # noqa: E501
        :type membership: List[str]
        :param formation_year: The formation_year of this School.  # noqa: E501
        :type formation_year: List[str]
        :param principal: The principal of this School.  # noqa: E501
        :type principal: List[object]
        :param junior_season: The junior_season of this School.  # noqa: E501
        :type junior_season: List[object]
        :param head: The head of this School.  # noqa: E501
        :type head: List[object]
        :param chaplain: The chaplain of this School.  # noqa: E501
        :type chaplain: List[object]
        :param administrator: The administrator of this School.  # noqa: E501
        :type administrator: List[object]
        :param extinction_year: The extinction_year of this School.  # noqa: E501
        :type extinction_year: List[str]
        :param child_organisation: The child_organisation of this School.  # noqa: E501
        :type child_organisation: List[object]
        :param parent_organisation: The parent_organisation of this School.  # noqa: E501
        :type parent_organisation: List[object]
        :param number_of_undergraduate_students: The number_of_undergraduate_students of this School.  # noqa: E501
        :type number_of_undergraduate_students: List[int]
        :param number_of_staff: The number_of_staff of this School.  # noqa: E501
        :type number_of_staff: List[int]
        :param hometown: The hometown of this School.  # noqa: E501
        :type hometown: List[object]
        :param custodian: The custodian of this School.  # noqa: E501
        :type custodian: List[object]
        :param bar_pass_rate: The bar_pass_rate of this School.  # noqa: E501
        :type bar_pass_rate: List[float]
        :param tuition: The tuition of this School.  # noqa: E501
        :type tuition: List[float]
        :param label: The label of this School.  # noqa: E501
        :type label: List[str]
        :param legal_form: The legal_form of this School.  # noqa: E501
        :type legal_form: List[object]
        :param headteacher: The headteacher of this School.  # noqa: E501
        :type headteacher: List[object]
        :param testaverage: The testaverage of this School.  # noqa: E501
        :type testaverage: List[float]
        :param general_council: The general_council of this School.  # noqa: E501
        :type general_council: List[object]
        :param rival: The rival of this School.  # noqa: E501
        :type rival: List[object]
        :param age: The age of this School.  # noqa: E501
        :type age: List[int]
        :param main_organ: The main_organ of this School.  # noqa: E501
        :type main_organ: List[object]
        """


        self.openapi_types = {
            'team_name': List[str],
            'viaf_id': List[str],
            'df_e': List[object],
            'art_patron': List[object],
            'secretary_general': List[object],
            'discipline': List[object],
            'type': List[str],
            'oversight': List[str],
            'head_label': List[str],
            'season': List[object],
            'id': str,
            'executive_headteacher': List[object],
            'superintendent': List[object],
            'education_system': List[object],
            'act_score': List[object],
            'number_of_employees': List[int],
            'player_season': List[object],
            'endowment': List[float],
            'regional_council': List[object],
            'dean': List[object],
            'number_of_volunteers': List[int],
            'vice_principal': List[object],
            'grades': List[object],
            'ceo': List[object],
            'number_of_graduate_students': List[int],
            'alumni': List[object],
            'ceeb': List[str],
            'school_board': List[object],
            'headquarter': List[object],
            'nobel_laureates': List[object],
            'honours': List[object],
            'sat_score': List[object],
            'organisation_member': List[object],
            'product': List[object],
            'foundation_place': List[object],
            'national_selection': List[object],
            'number_of_classrooms': List[object],
            'religious_head': List[object],
            'staff': List[int],
            'official_school_colour': List[str],
            'u_rn': List[object],
            'school_patron': List[object],
            'closed': List[str],
            'ranking': List[int],
            'trustee': List[object],
            'upper_age': List[int],
            'ratio': List[str],
            'age_range': List[int],
            'rector': List[object],
            'fees': List[float],
            'reopened': List[str],
            'acting_headteacher': List[object],
            'leader_function': List[object],
            'sixth_form_students': List[str],
            'manager_season': List[object],
            'number_of_locations': List[int],
            'number_of_academic_staff': List[int],
            'offered_classes': List[str],
            'denomination': List[object],
            'average_class_size': List[float],
            'campus_size': List[object],
            'revenue': List[float],
            'national_ranking': List[int],
            'affiliation': List[object],
            'vice_principal_label': List[object],
            'assistant_principal': List[object],
            'lower_age': List[int],
            'school_number': List[str],
            'nla_id': List[str],
            'chairperson': List[object],
            'religious_head_label': List[object],
            'region_served': List[object],
            'formation_date': List[str],
            'campus_type': List[str],
            'number_of_students': List[int],
            'faculty_size': List[int],
            'extinction_date': List[str],
            'specialist': List[str],
            'teaching_staff': List[object],
            'slogan': List[str],
            'location_city': List[object],
            'school_code': List[str],
            'classes': List[int],
            'ideology': List[object],
            'description': List[str],
            'membership': List[str],
            'formation_year': List[str],
            'principal': List[object],
            'junior_season': List[object],
            'head': List[object],
            'chaplain': List[object],
            'administrator': List[object],
            'extinction_year': List[str],
            'child_organisation': List[object],
            'parent_organisation': List[object],
            'number_of_undergraduate_students': List[int],
            'number_of_staff': List[int],
            'hometown': List[object],
            'custodian': List[object],
            'bar_pass_rate': List[float],
            'tuition': List[float],
            'label': List[str],
            'legal_form': List[object],
            'headteacher': List[object],
            'testaverage': List[float],
            'general_council': List[object],
            'rival': List[object],
            'age': List[int],
            'main_organ': List[object]
        }

        self.attribute_map = {
            'team_name': 'teamName',
            'viaf_id': 'viafId',
            'df_e': 'dfE',
            'art_patron': 'artPatron',
            'secretary_general': 'secretaryGeneral',
            'discipline': 'discipline',
            'type': 'type',
            'oversight': 'oversight',
            'head_label': 'headLabel',
            'season': 'season',
            'id': 'id',
            'executive_headteacher': 'executiveHeadteacher',
            'superintendent': 'superintendent',
            'education_system': 'educationSystem',
            'act_score': 'actScore',
            'number_of_employees': 'numberOfEmployees',
            'player_season': 'playerSeason',
            'endowment': 'endowment',
            'regional_council': 'regionalCouncil',
            'dean': 'dean',
            'number_of_volunteers': 'numberOfVolunteers',
            'vice_principal': 'vicePrincipal',
            'grades': 'grades',
            'ceo': 'ceo',
            'number_of_graduate_students': 'numberOfGraduateStudents',
            'alumni': 'alumni',
            'ceeb': 'ceeb',
            'school_board': 'schoolBoard',
            'headquarter': 'headquarter',
            'nobel_laureates': 'nobelLaureates',
            'honours': 'honours',
            'sat_score': 'satScore',
            'organisation_member': 'organisationMember',
            'product': 'product',
            'foundation_place': 'foundationPlace',
            'national_selection': 'nationalSelection',
            'number_of_classrooms': 'numberOfClassrooms',
            'religious_head': 'religiousHead',
            'staff': 'staff',
            'official_school_colour': 'officialSchoolColour',
            'u_rn': 'uRN',
            'school_patron': 'schoolPatron',
            'closed': 'closed',
            'ranking': 'ranking',
            'trustee': 'trustee',
            'upper_age': 'upperAge',
            'ratio': 'ratio',
            'age_range': 'ageRange',
            'rector': 'rector',
            'fees': 'fees',
            'reopened': 'reopened',
            'acting_headteacher': 'actingHeadteacher',
            'leader_function': 'leaderFunction',
            'sixth_form_students': 'sixthFormStudents',
            'manager_season': 'managerSeason',
            'number_of_locations': 'numberOfLocations',
            'number_of_academic_staff': 'numberOfAcademicStaff',
            'offered_classes': 'offeredClasses',
            'denomination': 'denomination',
            'average_class_size': 'averageClassSize',
            'campus_size': 'campusSize',
            'revenue': 'revenue',
            'national_ranking': 'nationalRanking',
            'affiliation': 'affiliation',
            'vice_principal_label': 'vicePrincipalLabel',
            'assistant_principal': 'assistantPrincipal',
            'lower_age': 'lowerAge',
            'school_number': 'schoolNumber',
            'nla_id': 'nlaId',
            'chairperson': 'chairperson',
            'religious_head_label': 'religiousHeadLabel',
            'region_served': 'regionServed',
            'formation_date': 'formationDate',
            'campus_type': 'campusType',
            'number_of_students': 'numberOfStudents',
            'faculty_size': 'facultySize',
            'extinction_date': 'extinctionDate',
            'specialist': 'specialist',
            'teaching_staff': 'teachingStaff',
            'slogan': 'slogan',
            'location_city': 'locationCity',
            'school_code': 'schoolCode',
            'classes': 'classes',
            'ideology': 'ideology',
            'description': 'description',
            'membership': 'membership',
            'formation_year': 'formationYear',
            'principal': 'principal',
            'junior_season': 'juniorSeason',
            'head': 'head',
            'chaplain': 'chaplain',
            'administrator': 'administrator',
            'extinction_year': 'extinctionYear',
            'child_organisation': 'childOrganisation',
            'parent_organisation': 'parentOrganisation',
            'number_of_undergraduate_students': 'numberOfUndergraduateStudents',
            'number_of_staff': 'numberOfStaff',
            'hometown': 'hometown',
            'custodian': 'custodian',
            'bar_pass_rate': 'barPassRate',
            'tuition': 'tuition',
            'label': 'label',
            'legal_form': 'legalForm',
            'headteacher': 'headteacher',
            'testaverage': 'testaverage',
            'general_council': 'generalCouncil',
            'rival': 'rival',
            'age': 'age',
            'main_organ': 'mainOrgan'
        }

        self._team_name = team_name
        self._viaf_id = viaf_id
        self._df_e = df_e
        self._art_patron = art_patron
        self._secretary_general = secretary_general
        self._discipline = discipline
        self._type = type
        self._oversight = oversight
        self._head_label = head_label
        self._season = season
        self._id = id
        self._executive_headteacher = executive_headteacher
        self._superintendent = superintendent
        self._education_system = education_system
        self._act_score = act_score
        self._number_of_employees = number_of_employees
        self._player_season = player_season
        self._endowment = endowment
        self._regional_council = regional_council
        self._dean = dean
        self._number_of_volunteers = number_of_volunteers
        self._vice_principal = vice_principal
        self._grades = grades
        self._ceo = ceo
        self._number_of_graduate_students = number_of_graduate_students
        self._alumni = alumni
        self._ceeb = ceeb
        self._school_board = school_board
        self._headquarter = headquarter
        self._nobel_laureates = nobel_laureates
        self._honours = honours
        self._sat_score = sat_score
        self._organisation_member = organisation_member
        self._product = product
        self._foundation_place = foundation_place
        self._national_selection = national_selection
        self._number_of_classrooms = number_of_classrooms
        self._religious_head = religious_head
        self._staff = staff
        self._official_school_colour = official_school_colour
        self._u_rn = u_rn
        self._school_patron = school_patron
        self._closed = closed
        self._ranking = ranking
        self._trustee = trustee
        self._upper_age = upper_age
        self._ratio = ratio
        self._age_range = age_range
        self._rector = rector
        self._fees = fees
        self._reopened = reopened
        self._acting_headteacher = acting_headteacher
        self._leader_function = leader_function
        self._sixth_form_students = sixth_form_students
        self._manager_season = manager_season
        self._number_of_locations = number_of_locations
        self._number_of_academic_staff = number_of_academic_staff
        self._offered_classes = offered_classes
        self._denomination = denomination
        self._average_class_size = average_class_size
        self._campus_size = campus_size
        self._revenue = revenue
        self._national_ranking = national_ranking
        self._affiliation = affiliation
        self._vice_principal_label = vice_principal_label
        self._assistant_principal = assistant_principal
        self._lower_age = lower_age
        self._school_number = school_number
        self._nla_id = nla_id
        self._chairperson = chairperson
        self._religious_head_label = religious_head_label
        self._region_served = region_served
        self._formation_date = formation_date
        self._campus_type = campus_type
        self._number_of_students = number_of_students
        self._faculty_size = faculty_size
        self._extinction_date = extinction_date
        self._specialist = specialist
        self._teaching_staff = teaching_staff
        self._slogan = slogan
        self._location_city = location_city
        self._school_code = school_code
        self._classes = classes
        self._ideology = ideology
        self._description = description
        self._membership = membership
        self._formation_year = formation_year
        self._principal = principal
        self._junior_season = junior_season
        self._head = head
        self._chaplain = chaplain
        self._administrator = administrator
        self._extinction_year = extinction_year
        self._child_organisation = child_organisation
        self._parent_organisation = parent_organisation
        self._number_of_undergraduate_students = number_of_undergraduate_students
        self._number_of_staff = number_of_staff
        self._hometown = hometown
        self._custodian = custodian
        self._bar_pass_rate = bar_pass_rate
        self._tuition = tuition
        self._label = label
        self._legal_form = legal_form
        self._headteacher = headteacher
        self._testaverage = testaverage
        self._general_council = general_council
        self._rival = rival
        self._age = age
        self._main_organ = main_organ

    @classmethod
    def from_dict(cls, dikt) -> 'School':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The School of this School.  # noqa: E501
        :rtype: School
        """
        return util.deserialize_model(dikt, cls)

    @property
    def team_name(self):
        """Gets the team_name of this School.

        Description not available  # noqa: E501

        :return: The team_name of this School.
        :rtype: List[str]
        """
        return self._team_name

    @team_name.setter
    def team_name(self, team_name):
        """Sets the team_name of this School.

        Description not available  # noqa: E501

        :param team_name: The team_name of this School.
        :type team_name: List[str]
        """

        self._team_name = team_name

    @property
    def viaf_id(self):
        """Gets the viaf_id of this School.

        International authority data from the Online Computer Library Center (OCLC)  # noqa: E501

        :return: The viaf_id of this School.
        :rtype: List[str]
        """
        return self._viaf_id

    @viaf_id.setter
    def viaf_id(self, viaf_id):
        """Sets the viaf_id of this School.

        International authority data from the Online Computer Library Center (OCLC)  # noqa: E501

        :param viaf_id: The viaf_id of this School.
        :type viaf_id: List[str]
        """

        self._viaf_id = viaf_id

    @property
    def df_e(self):
        """Gets the df_e of this School.

        Department for Education (UK) number of a school in England or Wales  # noqa: E501

        :return: The df_e of this School.
        :rtype: List[object]
        """
        return self._df_e

    @df_e.setter
    def df_e(self, df_e):
        """Sets the df_e of this School.

        Department for Education (UK) number of a school in England or Wales  # noqa: E501

        :param df_e: The df_e of this School.
        :type df_e: List[object]
        """

        self._df_e = df_e

    @property
    def art_patron(self):
        """Gets the art_patron of this School.

        An influential, wealthy person who supported an artist, craftsman, a scholar or a noble.. See also  # noqa: E501

        :return: The art_patron of this School.
        :rtype: List[object]
        """
        return self._art_patron

    @art_patron.setter
    def art_patron(self, art_patron):
        """Sets the art_patron of this School.

        An influential, wealthy person who supported an artist, craftsman, a scholar or a noble.. See also  # noqa: E501

        :param art_patron: The art_patron of this School.
        :type art_patron: List[object]
        """

        self._art_patron = art_patron

    @property
    def secretary_general(self):
        """Gets the secretary_general of this School.

        Description not available  # noqa: E501

        :return: The secretary_general of this School.
        :rtype: List[object]
        """
        return self._secretary_general

    @secretary_general.setter
    def secretary_general(self, secretary_general):
        """Sets the secretary_general of this School.

        Description not available  # noqa: E501

        :param secretary_general: The secretary_general of this School.
        :type secretary_general: List[object]
        """

        self._secretary_general = secretary_general

    @property
    def discipline(self):
        """Gets the discipline of this School.

        Description not available  # noqa: E501

        :return: The discipline of this School.
        :rtype: List[object]
        """
        return self._discipline

    @discipline.setter
    def discipline(self, discipline):
        """Sets the discipline of this School.

        Description not available  # noqa: E501

        :param discipline: The discipline of this School.
        :type discipline: List[object]
        """

        self._discipline = discipline

    @property
    def type(self):
        """Gets the type of this School.

        type of the resource  # noqa: E501

        :return: The type of this School.
        :rtype: List[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this School.

        type of the resource  # noqa: E501

        :param type: The type of this School.
        :type type: List[str]
        """

        self._type = type

    @property
    def oversight(self):
        """Gets the oversight of this School.

        Description not available  # noqa: E501

        :return: The oversight of this School.
        :rtype: List[str]
        """
        return self._oversight

    @oversight.setter
    def oversight(self, oversight):
        """Sets the oversight of this School.

        Description not available  # noqa: E501

        :param oversight: The oversight of this School.
        :type oversight: List[str]
        """

        self._oversight = oversight

    @property
    def head_label(self):
        """Gets the head_label of this School.

        Description not available  # noqa: E501

        :return: The head_label of this School.
        :rtype: List[str]
        """
        return self._head_label

    @head_label.setter
    def head_label(self, head_label):
        """Sets the head_label of this School.

        Description not available  # noqa: E501

        :param head_label: The head_label of this School.
        :type head_label: List[str]
        """

        self._head_label = head_label

    @property
    def season(self):
        """Gets the season of this School.

        Description not available  # noqa: E501

        :return: The season of this School.
        :rtype: List[object]
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this School.

        Description not available  # noqa: E501

        :param season: The season of this School.
        :type season: List[object]
        """

        self._season = season

    @property
    def id(self):
        """Gets the id of this School.

        identifier  # noqa: E501

        :return: The id of this School.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this School.

        identifier  # noqa: E501

        :param id: The id of this School.
        :type id: str
        """

        self._id = id

    @property
    def executive_headteacher(self):
        """Gets the executive_headteacher of this School.

        Description not available  # noqa: E501

        :return: The executive_headteacher of this School.
        :rtype: List[object]
        """
        return self._executive_headteacher

    @executive_headteacher.setter
    def executive_headteacher(self, executive_headteacher):
        """Sets the executive_headteacher of this School.

        Description not available  # noqa: E501

        :param executive_headteacher: The executive_headteacher of this School.
        :type executive_headteacher: List[object]
        """

        self._executive_headteacher = executive_headteacher

    @property
    def superintendent(self):
        """Gets the superintendent of this School.

        Description not available  # noqa: E501

        :return: The superintendent of this School.
        :rtype: List[object]
        """
        return self._superintendent

    @superintendent.setter
    def superintendent(self, superintendent):
        """Sets the superintendent of this School.

        Description not available  # noqa: E501

        :param superintendent: The superintendent of this School.
        :type superintendent: List[object]
        """

        self._superintendent = superintendent

    @property
    def education_system(self):
        """Gets the education_system of this School.

        Description not available  # noqa: E501

        :return: The education_system of this School.
        :rtype: List[object]
        """
        return self._education_system

    @education_system.setter
    def education_system(self, education_system):
        """Sets the education_system of this School.

        Description not available  # noqa: E501

        :param education_system: The education_system of this School.
        :type education_system: List[object]
        """

        self._education_system = education_system

    @property
    def act_score(self):
        """Gets the act_score of this School.

        most recent average ACT scores  # noqa: E501

        :return: The act_score of this School.
        :rtype: List[object]
        """
        return self._act_score

    @act_score.setter
    def act_score(self, act_score):
        """Sets the act_score of this School.

        most recent average ACT scores  # noqa: E501

        :param act_score: The act_score of this School.
        :type act_score: List[object]
        """

        self._act_score = act_score

    @property
    def number_of_employees(self):
        """Gets the number_of_employees of this School.

        Description not available  # noqa: E501

        :return: The number_of_employees of this School.
        :rtype: List[int]
        """
        return self._number_of_employees

    @number_of_employees.setter
    def number_of_employees(self, number_of_employees):
        """Sets the number_of_employees of this School.

        Description not available  # noqa: E501

        :param number_of_employees: The number_of_employees of this School.
        :type number_of_employees: List[int]
        """

        self._number_of_employees = number_of_employees

    @property
    def player_season(self):
        """Gets the player_season of this School.

        Description not available  # noqa: E501

        :return: The player_season of this School.
        :rtype: List[object]
        """
        return self._player_season

    @player_season.setter
    def player_season(self, player_season):
        """Sets the player_season of this School.

        Description not available  # noqa: E501

        :param player_season: The player_season of this School.
        :type player_season: List[object]
        """

        self._player_season = player_season

    @property
    def endowment(self):
        """Gets the endowment of this School.

        Description not available  # noqa: E501

        :return: The endowment of this School.
        :rtype: List[float]
        """
        return self._endowment

    @endowment.setter
    def endowment(self, endowment):
        """Sets the endowment of this School.

        Description not available  # noqa: E501

        :param endowment: The endowment of this School.
        :type endowment: List[float]
        """

        self._endowment = endowment

    @property
    def regional_council(self):
        """Gets the regional_council of this School.

        Description not available  # noqa: E501

        :return: The regional_council of this School.
        :rtype: List[object]
        """
        return self._regional_council

    @regional_council.setter
    def regional_council(self, regional_council):
        """Sets the regional_council of this School.

        Description not available  # noqa: E501

        :param regional_council: The regional_council of this School.
        :type regional_council: List[object]
        """

        self._regional_council = regional_council

    @property
    def dean(self):
        """Gets the dean of this School.

        Description not available  # noqa: E501

        :return: The dean of this School.
        :rtype: List[object]
        """
        return self._dean

    @dean.setter
    def dean(self, dean):
        """Sets the dean of this School.

        Description not available  # noqa: E501

        :param dean: The dean of this School.
        :type dean: List[object]
        """

        self._dean = dean

    @property
    def number_of_volunteers(self):
        """Gets the number_of_volunteers of this School.

        Description not available  # noqa: E501

        :return: The number_of_volunteers of this School.
        :rtype: List[int]
        """
        return self._number_of_volunteers

    @number_of_volunteers.setter
    def number_of_volunteers(self, number_of_volunteers):
        """Sets the number_of_volunteers of this School.

        Description not available  # noqa: E501

        :param number_of_volunteers: The number_of_volunteers of this School.
        :type number_of_volunteers: List[int]
        """

        self._number_of_volunteers = number_of_volunteers

    @property
    def vice_principal(self):
        """Gets the vice_principal of this School.

        Description not available  # noqa: E501

        :return: The vice_principal of this School.
        :rtype: List[object]
        """
        return self._vice_principal

    @vice_principal.setter
    def vice_principal(self, vice_principal):
        """Sets the vice_principal of this School.

        Description not available  # noqa: E501

        :param vice_principal: The vice_principal of this School.
        :type vice_principal: List[object]
        """

        self._vice_principal = vice_principal

    @property
    def grades(self):
        """Gets the grades of this School.

        Description not available  # noqa: E501

        :return: The grades of this School.
        :rtype: List[object]
        """
        return self._grades

    @grades.setter
    def grades(self, grades):
        """Sets the grades of this School.

        Description not available  # noqa: E501

        :param grades: The grades of this School.
        :type grades: List[object]
        """

        self._grades = grades

    @property
    def ceo(self):
        """Gets the ceo of this School.

        Description not available  # noqa: E501

        :return: The ceo of this School.
        :rtype: List[object]
        """
        return self._ceo

    @ceo.setter
    def ceo(self, ceo):
        """Sets the ceo of this School.

        Description not available  # noqa: E501

        :param ceo: The ceo of this School.
        :type ceo: List[object]
        """

        self._ceo = ceo

    @property
    def number_of_graduate_students(self):
        """Gets the number_of_graduate_students of this School.

        Description not available  # noqa: E501

        :return: The number_of_graduate_students of this School.
        :rtype: List[int]
        """
        return self._number_of_graduate_students

    @number_of_graduate_students.setter
    def number_of_graduate_students(self, number_of_graduate_students):
        """Sets the number_of_graduate_students of this School.

        Description not available  # noqa: E501

        :param number_of_graduate_students: The number_of_graduate_students of this School.
        :type number_of_graduate_students: List[int]
        """

        self._number_of_graduate_students = number_of_graduate_students

    @property
    def alumni(self):
        """Gets the alumni of this School.

        Description not available  # noqa: E501

        :return: The alumni of this School.
        :rtype: List[object]
        """
        return self._alumni

    @alumni.setter
    def alumni(self, alumni):
        """Sets the alumni of this School.

        Description not available  # noqa: E501

        :param alumni: The alumni of this School.
        :type alumni: List[object]
        """

        self._alumni = alumni

    @property
    def ceeb(self):
        """Gets the ceeb of this School.

        Description not available  # noqa: E501

        :return: The ceeb of this School.
        :rtype: List[str]
        """
        return self._ceeb

    @ceeb.setter
    def ceeb(self, ceeb):
        """Sets the ceeb of this School.

        Description not available  # noqa: E501

        :param ceeb: The ceeb of this School.
        :type ceeb: List[str]
        """

        self._ceeb = ceeb

    @property
    def school_board(self):
        """Gets the school_board of this School.

        Description not available  # noqa: E501

        :return: The school_board of this School.
        :rtype: List[object]
        """
        return self._school_board

    @school_board.setter
    def school_board(self, school_board):
        """Sets the school_board of this School.

        Description not available  # noqa: E501

        :param school_board: The school_board of this School.
        :type school_board: List[object]
        """

        self._school_board = school_board

    @property
    def headquarter(self):
        """Gets the headquarter of this School.

        Description not available  # noqa: E501

        :return: The headquarter of this School.
        :rtype: List[object]
        """
        return self._headquarter

    @headquarter.setter
    def headquarter(self, headquarter):
        """Sets the headquarter of this School.

        Description not available  # noqa: E501

        :param headquarter: The headquarter of this School.
        :type headquarter: List[object]
        """

        self._headquarter = headquarter

    @property
    def nobel_laureates(self):
        """Gets the nobel_laureates of this School.

        Description not available  # noqa: E501

        :return: The nobel_laureates of this School.
        :rtype: List[object]
        """
        return self._nobel_laureates

    @nobel_laureates.setter
    def nobel_laureates(self, nobel_laureates):
        """Sets the nobel_laureates of this School.

        Description not available  # noqa: E501

        :param nobel_laureates: The nobel_laureates of this School.
        :type nobel_laureates: List[object]
        """

        self._nobel_laureates = nobel_laureates

    @property
    def honours(self):
        """Gets the honours of this School.

        Description not available  # noqa: E501

        :return: The honours of this School.
        :rtype: List[object]
        """
        return self._honours

    @honours.setter
    def honours(self, honours):
        """Sets the honours of this School.

        Description not available  # noqa: E501

        :param honours: The honours of this School.
        :type honours: List[object]
        """

        self._honours = honours

    @property
    def sat_score(self):
        """Gets the sat_score of this School.

        most recent average SAT scores  # noqa: E501

        :return: The sat_score of this School.
        :rtype: List[object]
        """
        return self._sat_score

    @sat_score.setter
    def sat_score(self, sat_score):
        """Sets the sat_score of this School.

        most recent average SAT scores  # noqa: E501

        :param sat_score: The sat_score of this School.
        :type sat_score: List[object]
        """

        self._sat_score = sat_score

    @property
    def organisation_member(self):
        """Gets the organisation_member of this School.

        Identify the members of an organisation.  # noqa: E501

        :return: The organisation_member of this School.
        :rtype: List[object]
        """
        return self._organisation_member

    @organisation_member.setter
    def organisation_member(self, organisation_member):
        """Sets the organisation_member of this School.

        Identify the members of an organisation.  # noqa: E501

        :param organisation_member: The organisation_member of this School.
        :type organisation_member: List[object]
        """

        self._organisation_member = organisation_member

    @property
    def product(self):
        """Gets the product of this School.

        Description not available  # noqa: E501

        :return: The product of this School.
        :rtype: List[object]
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this School.

        Description not available  # noqa: E501

        :param product: The product of this School.
        :type product: List[object]
        """

        self._product = product

    @property
    def foundation_place(self):
        """Gets the foundation_place of this School.

        Description not available  # noqa: E501

        :return: The foundation_place of this School.
        :rtype: List[object]
        """
        return self._foundation_place

    @foundation_place.setter
    def foundation_place(self, foundation_place):
        """Sets the foundation_place of this School.

        Description not available  # noqa: E501

        :param foundation_place: The foundation_place of this School.
        :type foundation_place: List[object]
        """

        self._foundation_place = foundation_place

    @property
    def national_selection(self):
        """Gets the national_selection of this School.

        Description not available  # noqa: E501

        :return: The national_selection of this School.
        :rtype: List[object]
        """
        return self._national_selection

    @national_selection.setter
    def national_selection(self, national_selection):
        """Sets the national_selection of this School.

        Description not available  # noqa: E501

        :param national_selection: The national_selection of this School.
        :type national_selection: List[object]
        """

        self._national_selection = national_selection

    @property
    def number_of_classrooms(self):
        """Gets the number_of_classrooms of this School.

        Description not available  # noqa: E501

        :return: The number_of_classrooms of this School.
        :rtype: List[object]
        """
        return self._number_of_classrooms

    @number_of_classrooms.setter
    def number_of_classrooms(self, number_of_classrooms):
        """Sets the number_of_classrooms of this School.

        Description not available  # noqa: E501

        :param number_of_classrooms: The number_of_classrooms of this School.
        :type number_of_classrooms: List[object]
        """

        self._number_of_classrooms = number_of_classrooms

    @property
    def religious_head(self):
        """Gets the religious_head of this School.

        Description not available  # noqa: E501

        :return: The religious_head of this School.
        :rtype: List[object]
        """
        return self._religious_head

    @religious_head.setter
    def religious_head(self, religious_head):
        """Sets the religious_head of this School.

        Description not available  # noqa: E501

        :param religious_head: The religious_head of this School.
        :type religious_head: List[object]
        """

        self._religious_head = religious_head

    @property
    def staff(self):
        """Gets the staff of this School.

        Description not available  # noqa: E501

        :return: The staff of this School.
        :rtype: List[int]
        """
        return self._staff

    @staff.setter
    def staff(self, staff):
        """Sets the staff of this School.

        Description not available  # noqa: E501

        :param staff: The staff of this School.
        :type staff: List[int]
        """

        self._staff = staff

    @property
    def official_school_colour(self):
        """Gets the official_school_colour of this School.

        The official colour of the EducationalInstitution represented by the colour name (e.g.: red or green).  # noqa: E501

        :return: The official_school_colour of this School.
        :rtype: List[str]
        """
        return self._official_school_colour

    @official_school_colour.setter
    def official_school_colour(self, official_school_colour):
        """Sets the official_school_colour of this School.

        The official colour of the EducationalInstitution represented by the colour name (e.g.: red or green).  # noqa: E501

        :param official_school_colour: The official_school_colour of this School.
        :type official_school_colour: List[str]
        """

        self._official_school_colour = official_school_colour

    @property
    def u_rn(self):
        """Gets the u_rn of this School.

        DfE unique reference number of a school in England or Wales  # noqa: E501

        :return: The u_rn of this School.
        :rtype: List[object]
        """
        return self._u_rn

    @u_rn.setter
    def u_rn(self, u_rn):
        """Sets the u_rn of this School.

        DfE unique reference number of a school in England or Wales  # noqa: E501

        :param u_rn: The u_rn of this School.
        :type u_rn: List[object]
        """

        self._u_rn = u_rn

    @property
    def school_patron(self):
        """Gets the school_patron of this School.

        Description not available  # noqa: E501

        :return: The school_patron of this School.
        :rtype: List[object]
        """
        return self._school_patron

    @school_patron.setter
    def school_patron(self, school_patron):
        """Sets the school_patron of this School.

        Description not available  # noqa: E501

        :param school_patron: The school_patron of this School.
        :type school_patron: List[object]
        """

        self._school_patron = school_patron

    @property
    def closed(self):
        """Gets the closed of this School.

        Description not available  # noqa: E501

        :return: The closed of this School.
        :rtype: List[str]
        """
        return self._closed

    @closed.setter
    def closed(self, closed):
        """Sets the closed of this School.

        Description not available  # noqa: E501

        :param closed: The closed of this School.
        :type closed: List[str]
        """

        self._closed = closed

    @property
    def ranking(self):
        """Gets the ranking of this School.

        Description not available  # noqa: E501

        :return: The ranking of this School.
        :rtype: List[int]
        """
        return self._ranking

    @ranking.setter
    def ranking(self, ranking):
        """Sets the ranking of this School.

        Description not available  # noqa: E501

        :param ranking: The ranking of this School.
        :type ranking: List[int]
        """

        self._ranking = ranking

    @property
    def trustee(self):
        """Gets the trustee of this School.

        Description not available  # noqa: E501

        :return: The trustee of this School.
        :rtype: List[object]
        """
        return self._trustee

    @trustee.setter
    def trustee(self, trustee):
        """Sets the trustee of this School.

        Description not available  # noqa: E501

        :param trustee: The trustee of this School.
        :type trustee: List[object]
        """

        self._trustee = trustee

    @property
    def upper_age(self):
        """Gets the upper_age of this School.

        Description not available  # noqa: E501

        :return: The upper_age of this School.
        :rtype: List[int]
        """
        return self._upper_age

    @upper_age.setter
    def upper_age(self, upper_age):
        """Sets the upper_age of this School.

        Description not available  # noqa: E501

        :param upper_age: The upper_age of this School.
        :type upper_age: List[int]
        """

        self._upper_age = upper_age

    @property
    def ratio(self):
        """Gets the ratio of this School.

        Description not available  # noqa: E501

        :return: The ratio of this School.
        :rtype: List[str]
        """
        return self._ratio

    @ratio.setter
    def ratio(self, ratio):
        """Sets the ratio of this School.

        Description not available  # noqa: E501

        :param ratio: The ratio of this School.
        :type ratio: List[str]
        """

        self._ratio = ratio

    @property
    def age_range(self):
        """Gets the age_range of this School.

        Description not available  # noqa: E501

        :return: The age_range of this School.
        :rtype: List[int]
        """
        return self._age_range

    @age_range.setter
    def age_range(self, age_range):
        """Sets the age_range of this School.

        Description not available  # noqa: E501

        :param age_range: The age_range of this School.
        :type age_range: List[int]
        """

        self._age_range = age_range

    @property
    def rector(self):
        """Gets the rector of this School.

        Description not available  # noqa: E501

        :return: The rector of this School.
        :rtype: List[object]
        """
        return self._rector

    @rector.setter
    def rector(self, rector):
        """Sets the rector of this School.

        Description not available  # noqa: E501

        :param rector: The rector of this School.
        :type rector: List[object]
        """

        self._rector = rector

    @property
    def fees(self):
        """Gets the fees of this School.

        Description not available  # noqa: E501

        :return: The fees of this School.
        :rtype: List[float]
        """
        return self._fees

    @fees.setter
    def fees(self, fees):
        """Sets the fees of this School.

        Description not available  # noqa: E501

        :param fees: The fees of this School.
        :type fees: List[float]
        """

        self._fees = fees

    @property
    def reopened(self):
        """Gets the reopened of this School.

        Description not available  # noqa: E501

        :return: The reopened of this School.
        :rtype: List[str]
        """
        return self._reopened

    @reopened.setter
    def reopened(self, reopened):
        """Sets the reopened of this School.

        Description not available  # noqa: E501

        :param reopened: The reopened of this School.
        :type reopened: List[str]
        """

        self._reopened = reopened

    @property
    def acting_headteacher(self):
        """Gets the acting_headteacher of this School.

        Description not available  # noqa: E501

        :return: The acting_headteacher of this School.
        :rtype: List[object]
        """
        return self._acting_headteacher

    @acting_headteacher.setter
    def acting_headteacher(self, acting_headteacher):
        """Sets the acting_headteacher of this School.

        Description not available  # noqa: E501

        :param acting_headteacher: The acting_headteacher of this School.
        :type acting_headteacher: List[object]
        """

        self._acting_headteacher = acting_headteacher

    @property
    def leader_function(self):
        """Gets the leader_function of this School.

        Description not available  # noqa: E501

        :return: The leader_function of this School.
        :rtype: List[object]
        """
        return self._leader_function

    @leader_function.setter
    def leader_function(self, leader_function):
        """Sets the leader_function of this School.

        Description not available  # noqa: E501

        :param leader_function: The leader_function of this School.
        :type leader_function: List[object]
        """

        self._leader_function = leader_function

    @property
    def sixth_form_students(self):
        """Gets the sixth_form_students of this School.

        Description not available  # noqa: E501

        :return: The sixth_form_students of this School.
        :rtype: List[str]
        """
        return self._sixth_form_students

    @sixth_form_students.setter
    def sixth_form_students(self, sixth_form_students):
        """Sets the sixth_form_students of this School.

        Description not available  # noqa: E501

        :param sixth_form_students: The sixth_form_students of this School.
        :type sixth_form_students: List[str]
        """

        self._sixth_form_students = sixth_form_students

    @property
    def manager_season(self):
        """Gets the manager_season of this School.

        Description not available  # noqa: E501

        :return: The manager_season of this School.
        :rtype: List[object]
        """
        return self._manager_season

    @manager_season.setter
    def manager_season(self, manager_season):
        """Sets the manager_season of this School.

        Description not available  # noqa: E501

        :param manager_season: The manager_season of this School.
        :type manager_season: List[object]
        """

        self._manager_season = manager_season

    @property
    def number_of_locations(self):
        """Gets the number_of_locations of this School.

        Description not available  # noqa: E501

        :return: The number_of_locations of this School.
        :rtype: List[int]
        """
        return self._number_of_locations

    @number_of_locations.setter
    def number_of_locations(self, number_of_locations):
        """Sets the number_of_locations of this School.

        Description not available  # noqa: E501

        :param number_of_locations: The number_of_locations of this School.
        :type number_of_locations: List[int]
        """

        self._number_of_locations = number_of_locations

    @property
    def number_of_academic_staff(self):
        """Gets the number_of_academic_staff of this School.

        Description not available  # noqa: E501

        :return: The number_of_academic_staff of this School.
        :rtype: List[int]
        """
        return self._number_of_academic_staff

    @number_of_academic_staff.setter
    def number_of_academic_staff(self, number_of_academic_staff):
        """Sets the number_of_academic_staff of this School.

        Description not available  # noqa: E501

        :param number_of_academic_staff: The number_of_academic_staff of this School.
        :type number_of_academic_staff: List[int]
        """

        self._number_of_academic_staff = number_of_academic_staff

    @property
    def offered_classes(self):
        """Gets the offered_classes of this School.

        Description not available  # noqa: E501

        :return: The offered_classes of this School.
        :rtype: List[str]
        """
        return self._offered_classes

    @offered_classes.setter
    def offered_classes(self, offered_classes):
        """Sets the offered_classes of this School.

        Description not available  # noqa: E501

        :param offered_classes: The offered_classes of this School.
        :type offered_classes: List[str]
        """

        self._offered_classes = offered_classes

    @property
    def denomination(self):
        """Gets the denomination of this School.

        Description not available  # noqa: E501

        :return: The denomination of this School.
        :rtype: List[object]
        """
        return self._denomination

    @denomination.setter
    def denomination(self, denomination):
        """Sets the denomination of this School.

        Description not available  # noqa: E501

        :param denomination: The denomination of this School.
        :type denomination: List[object]
        """

        self._denomination = denomination

    @property
    def average_class_size(self):
        """Gets the average_class_size of this School.

        Description not available  # noqa: E501

        :return: The average_class_size of this School.
        :rtype: List[float]
        """
        return self._average_class_size

    @average_class_size.setter
    def average_class_size(self, average_class_size):
        """Sets the average_class_size of this School.

        Description not available  # noqa: E501

        :param average_class_size: The average_class_size of this School.
        :type average_class_size: List[float]
        """

        self._average_class_size = average_class_size

    @property
    def campus_size(self):
        """Gets the campus_size of this School.

        Description not available  # noqa: E501

        :return: The campus_size of this School.
        :rtype: List[object]
        """
        return self._campus_size

    @campus_size.setter
    def campus_size(self, campus_size):
        """Sets the campus_size of this School.

        Description not available  # noqa: E501

        :param campus_size: The campus_size of this School.
        :type campus_size: List[object]
        """

        self._campus_size = campus_size

    @property
    def revenue(self):
        """Gets the revenue of this School.

        Description not available  # noqa: E501

        :return: The revenue of this School.
        :rtype: List[float]
        """
        return self._revenue

    @revenue.setter
    def revenue(self, revenue):
        """Sets the revenue of this School.

        Description not available  # noqa: E501

        :param revenue: The revenue of this School.
        :type revenue: List[float]
        """

        self._revenue = revenue

    @property
    def national_ranking(self):
        """Gets the national_ranking of this School.

        Description not available  # noqa: E501

        :return: The national_ranking of this School.
        :rtype: List[int]
        """
        return self._national_ranking

    @national_ranking.setter
    def national_ranking(self, national_ranking):
        """Sets the national_ranking of this School.

        Description not available  # noqa: E501

        :param national_ranking: The national_ranking of this School.
        :type national_ranking: List[int]
        """

        self._national_ranking = national_ranking

    @property
    def affiliation(self):
        """Gets the affiliation of this School.

        Description not available  # noqa: E501

        :return: The affiliation of this School.
        :rtype: List[object]
        """
        return self._affiliation

    @affiliation.setter
    def affiliation(self, affiliation):
        """Sets the affiliation of this School.

        Description not available  # noqa: E501

        :param affiliation: The affiliation of this School.
        :type affiliation: List[object]
        """

        self._affiliation = affiliation

    @property
    def vice_principal_label(self):
        """Gets the vice_principal_label of this School.

        Description not available  # noqa: E501

        :return: The vice_principal_label of this School.
        :rtype: List[object]
        """
        return self._vice_principal_label

    @vice_principal_label.setter
    def vice_principal_label(self, vice_principal_label):
        """Sets the vice_principal_label of this School.

        Description not available  # noqa: E501

        :param vice_principal_label: The vice_principal_label of this School.
        :type vice_principal_label: List[object]
        """

        self._vice_principal_label = vice_principal_label

    @property
    def assistant_principal(self):
        """Gets the assistant_principal of this School.

        Description not available  # noqa: E501

        :return: The assistant_principal of this School.
        :rtype: List[object]
        """
        return self._assistant_principal

    @assistant_principal.setter
    def assistant_principal(self, assistant_principal):
        """Sets the assistant_principal of this School.

        Description not available  # noqa: E501

        :param assistant_principal: The assistant_principal of this School.
        :type assistant_principal: List[object]
        """

        self._assistant_principal = assistant_principal

    @property
    def lower_age(self):
        """Gets the lower_age of this School.

        Description not available  # noqa: E501

        :return: The lower_age of this School.
        :rtype: List[int]
        """
        return self._lower_age

    @lower_age.setter
    def lower_age(self, lower_age):
        """Sets the lower_age of this School.

        Description not available  # noqa: E501

        :param lower_age: The lower_age of this School.
        :type lower_age: List[int]
        """

        self._lower_age = lower_age

    @property
    def school_number(self):
        """Gets the school_number of this School.

        Description not available  # noqa: E501

        :return: The school_number of this School.
        :rtype: List[str]
        """
        return self._school_number

    @school_number.setter
    def school_number(self, school_number):
        """Sets the school_number of this School.

        Description not available  # noqa: E501

        :param school_number: The school_number of this School.
        :type school_number: List[str]
        """

        self._school_number = school_number

    @property
    def nla_id(self):
        """Gets the nla_id of this School.

        NLA Trove’s People and Organisation view allows the discovery of biographical and other contextual information about people and organisations. Search also available via VIAF.  # noqa: E501

        :return: The nla_id of this School.
        :rtype: List[str]
        """
        return self._nla_id

    @nla_id.setter
    def nla_id(self, nla_id):
        """Sets the nla_id of this School.

        NLA Trove’s People and Organisation view allows the discovery of biographical and other contextual information about people and organisations. Search also available via VIAF.  # noqa: E501

        :param nla_id: The nla_id of this School.
        :type nla_id: List[str]
        """

        self._nla_id = nla_id

    @property
    def chairperson(self):
        """Gets the chairperson of this School.

        Description not available  # noqa: E501

        :return: The chairperson of this School.
        :rtype: List[object]
        """
        return self._chairperson

    @chairperson.setter
    def chairperson(self, chairperson):
        """Sets the chairperson of this School.

        Description not available  # noqa: E501

        :param chairperson: The chairperson of this School.
        :type chairperson: List[object]
        """

        self._chairperson = chairperson

    @property
    def religious_head_label(self):
        """Gets the religious_head_label of this School.

        Description not available  # noqa: E501

        :return: The religious_head_label of this School.
        :rtype: List[object]
        """
        return self._religious_head_label

    @religious_head_label.setter
    def religious_head_label(self, religious_head_label):
        """Sets the religious_head_label of this School.

        Description not available  # noqa: E501

        :param religious_head_label: The religious_head_label of this School.
        :type religious_head_label: List[object]
        """

        self._religious_head_label = religious_head_label

    @property
    def region_served(self):
        """Gets the region_served of this School.

        Description not available  # noqa: E501

        :return: The region_served of this School.
        :rtype: List[object]
        """
        return self._region_served

    @region_served.setter
    def region_served(self, region_served):
        """Sets the region_served of this School.

        Description not available  # noqa: E501

        :param region_served: The region_served of this School.
        :type region_served: List[object]
        """

        self._region_served = region_served

    @property
    def formation_date(self):
        """Gets the formation_date of this School.

        Description not available  # noqa: E501

        :return: The formation_date of this School.
        :rtype: List[str]
        """
        return self._formation_date

    @formation_date.setter
    def formation_date(self, formation_date):
        """Sets the formation_date of this School.

        Description not available  # noqa: E501

        :param formation_date: The formation_date of this School.
        :type formation_date: List[str]
        """

        self._formation_date = formation_date

    @property
    def campus_type(self):
        """Gets the campus_type of this School.

        Description not available  # noqa: E501

        :return: The campus_type of this School.
        :rtype: List[str]
        """
        return self._campus_type

    @campus_type.setter
    def campus_type(self, campus_type):
        """Sets the campus_type of this School.

        Description not available  # noqa: E501

        :param campus_type: The campus_type of this School.
        :type campus_type: List[str]
        """

        self._campus_type = campus_type

    @property
    def number_of_students(self):
        """Gets the number_of_students of this School.

        Description not available  # noqa: E501

        :return: The number_of_students of this School.
        :rtype: List[int]
        """
        return self._number_of_students

    @number_of_students.setter
    def number_of_students(self, number_of_students):
        """Sets the number_of_students of this School.

        Description not available  # noqa: E501

        :param number_of_students: The number_of_students of this School.
        :type number_of_students: List[int]
        """

        self._number_of_students = number_of_students

    @property
    def faculty_size(self):
        """Gets the faculty_size of this School.

        number of faculty members  # noqa: E501

        :return: The faculty_size of this School.
        :rtype: List[int]
        """
        return self._faculty_size

    @faculty_size.setter
    def faculty_size(self, faculty_size):
        """Sets the faculty_size of this School.

        number of faculty members  # noqa: E501

        :param faculty_size: The faculty_size of this School.
        :type faculty_size: List[int]
        """

        self._faculty_size = faculty_size

    @property
    def extinction_date(self):
        """Gets the extinction_date of this School.

        Description not available  # noqa: E501

        :return: The extinction_date of this School.
        :rtype: List[str]
        """
        return self._extinction_date

    @extinction_date.setter
    def extinction_date(self, extinction_date):
        """Sets the extinction_date of this School.

        Description not available  # noqa: E501

        :param extinction_date: The extinction_date of this School.
        :type extinction_date: List[str]
        """

        self._extinction_date = extinction_date

    @property
    def specialist(self):
        """Gets the specialist of this School.

        Description not available  # noqa: E501

        :return: The specialist of this School.
        :rtype: List[str]
        """
        return self._specialist

    @specialist.setter
    def specialist(self, specialist):
        """Sets the specialist of this School.

        Description not available  # noqa: E501

        :param specialist: The specialist of this School.
        :type specialist: List[str]
        """

        self._specialist = specialist

    @property
    def teaching_staff(self):
        """Gets the teaching_staff of this School.

        Description not available  # noqa: E501

        :return: The teaching_staff of this School.
        :rtype: List[object]
        """
        return self._teaching_staff

    @teaching_staff.setter
    def teaching_staff(self, teaching_staff):
        """Sets the teaching_staff of this School.

        Description not available  # noqa: E501

        :param teaching_staff: The teaching_staff of this School.
        :type teaching_staff: List[object]
        """

        self._teaching_staff = teaching_staff

    @property
    def slogan(self):
        """Gets the slogan of this School.

        Description not available  # noqa: E501

        :return: The slogan of this School.
        :rtype: List[str]
        """
        return self._slogan

    @slogan.setter
    def slogan(self, slogan):
        """Sets the slogan of this School.

        Description not available  # noqa: E501

        :param slogan: The slogan of this School.
        :type slogan: List[str]
        """

        self._slogan = slogan

    @property
    def location_city(self):
        """Gets the location_city of this School.

        City the thing is located.  # noqa: E501

        :return: The location_city of this School.
        :rtype: List[object]
        """
        return self._location_city

    @location_city.setter
    def location_city(self, location_city):
        """Sets the location_city of this School.

        City the thing is located.  # noqa: E501

        :param location_city: The location_city of this School.
        :type location_city: List[object]
        """

        self._location_city = location_city

    @property
    def school_code(self):
        """Gets the school_code of this School.

        Description not available  # noqa: E501

        :return: The school_code of this School.
        :rtype: List[str]
        """
        return self._school_code

    @school_code.setter
    def school_code(self, school_code):
        """Sets the school_code of this School.

        Description not available  # noqa: E501

        :param school_code: The school_code of this School.
        :type school_code: List[str]
        """

        self._school_code = school_code

    @property
    def classes(self):
        """Gets the classes of this School.

        Description not available  # noqa: E501

        :return: The classes of this School.
        :rtype: List[int]
        """
        return self._classes

    @classes.setter
    def classes(self, classes):
        """Sets the classes of this School.

        Description not available  # noqa: E501

        :param classes: The classes of this School.
        :type classes: List[int]
        """

        self._classes = classes

    @property
    def ideology(self):
        """Gets the ideology of this School.

        Description not available  # noqa: E501

        :return: The ideology of this School.
        :rtype: List[object]
        """
        return self._ideology

    @ideology.setter
    def ideology(self, ideology):
        """Sets the ideology of this School.

        Description not available  # noqa: E501

        :param ideology: The ideology of this School.
        :type ideology: List[object]
        """

        self._ideology = ideology

    @property
    def description(self):
        """Gets the description of this School.

        small description  # noqa: E501

        :return: The description of this School.
        :rtype: List[str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this School.

        small description  # noqa: E501

        :param description: The description of this School.
        :type description: List[str]
        """

        self._description = description

    @property
    def membership(self):
        """Gets the membership of this School.

        Description not available  # noqa: E501

        :return: The membership of this School.
        :rtype: List[str]
        """
        return self._membership

    @membership.setter
    def membership(self, membership):
        """Sets the membership of this School.

        Description not available  # noqa: E501

        :param membership: The membership of this School.
        :type membership: List[str]
        """

        self._membership = membership

    @property
    def formation_year(self):
        """Gets the formation_year of this School.

        Description not available  # noqa: E501

        :return: The formation_year of this School.
        :rtype: List[str]
        """
        return self._formation_year

    @formation_year.setter
    def formation_year(self, formation_year):
        """Sets the formation_year of this School.

        Description not available  # noqa: E501

        :param formation_year: The formation_year of this School.
        :type formation_year: List[str]
        """

        self._formation_year = formation_year

    @property
    def principal(self):
        """Gets the principal of this School.

        Description not available  # noqa: E501

        :return: The principal of this School.
        :rtype: List[object]
        """
        return self._principal

    @principal.setter
    def principal(self, principal):
        """Sets the principal of this School.

        Description not available  # noqa: E501

        :param principal: The principal of this School.
        :type principal: List[object]
        """

        self._principal = principal

    @property
    def junior_season(self):
        """Gets the junior_season of this School.

        Description not available  # noqa: E501

        :return: The junior_season of this School.
        :rtype: List[object]
        """
        return self._junior_season

    @junior_season.setter
    def junior_season(self, junior_season):
        """Sets the junior_season of this School.

        Description not available  # noqa: E501

        :param junior_season: The junior_season of this School.
        :type junior_season: List[object]
        """

        self._junior_season = junior_season

    @property
    def head(self):
        """Gets the head of this School.

        Description not available  # noqa: E501

        :return: The head of this School.
        :rtype: List[object]
        """
        return self._head

    @head.setter
    def head(self, head):
        """Sets the head of this School.

        Description not available  # noqa: E501

        :param head: The head of this School.
        :type head: List[object]
        """

        self._head = head

    @property
    def chaplain(self):
        """Gets the chaplain of this School.

        Description not available  # noqa: E501

        :return: The chaplain of this School.
        :rtype: List[object]
        """
        return self._chaplain

    @chaplain.setter
    def chaplain(self, chaplain):
        """Sets the chaplain of this School.

        Description not available  # noqa: E501

        :param chaplain: The chaplain of this School.
        :type chaplain: List[object]
        """

        self._chaplain = chaplain

    @property
    def administrator(self):
        """Gets the administrator of this School.

        Description not available  # noqa: E501

        :return: The administrator of this School.
        :rtype: List[object]
        """
        return self._administrator

    @administrator.setter
    def administrator(self, administrator):
        """Sets the administrator of this School.

        Description not available  # noqa: E501

        :param administrator: The administrator of this School.
        :type administrator: List[object]
        """

        self._administrator = administrator

    @property
    def extinction_year(self):
        """Gets the extinction_year of this School.

        Description not available  # noqa: E501

        :return: The extinction_year of this School.
        :rtype: List[str]
        """
        return self._extinction_year

    @extinction_year.setter
    def extinction_year(self, extinction_year):
        """Sets the extinction_year of this School.

        Description not available  # noqa: E501

        :param extinction_year: The extinction_year of this School.
        :type extinction_year: List[str]
        """

        self._extinction_year = extinction_year

    @property
    def child_organisation(self):
        """Gets the child_organisation of this School.

        Description not available  # noqa: E501

        :return: The child_organisation of this School.
        :rtype: List[object]
        """
        return self._child_organisation

    @child_organisation.setter
    def child_organisation(self, child_organisation):
        """Sets the child_organisation of this School.

        Description not available  # noqa: E501

        :param child_organisation: The child_organisation of this School.
        :type child_organisation: List[object]
        """

        self._child_organisation = child_organisation

    @property
    def parent_organisation(self):
        """Gets the parent_organisation of this School.

        Description not available  # noqa: E501

        :return: The parent_organisation of this School.
        :rtype: List[object]
        """
        return self._parent_organisation

    @parent_organisation.setter
    def parent_organisation(self, parent_organisation):
        """Sets the parent_organisation of this School.

        Description not available  # noqa: E501

        :param parent_organisation: The parent_organisation of this School.
        :type parent_organisation: List[object]
        """

        self._parent_organisation = parent_organisation

    @property
    def number_of_undergraduate_students(self):
        """Gets the number_of_undergraduate_students of this School.

        Description not available  # noqa: E501

        :return: The number_of_undergraduate_students of this School.
        :rtype: List[int]
        """
        return self._number_of_undergraduate_students

    @number_of_undergraduate_students.setter
    def number_of_undergraduate_students(self, number_of_undergraduate_students):
        """Sets the number_of_undergraduate_students of this School.

        Description not available  # noqa: E501

        :param number_of_undergraduate_students: The number_of_undergraduate_students of this School.
        :type number_of_undergraduate_students: List[int]
        """

        self._number_of_undergraduate_students = number_of_undergraduate_students

    @property
    def number_of_staff(self):
        """Gets the number_of_staff of this School.

        Description not available  # noqa: E501

        :return: The number_of_staff of this School.
        :rtype: List[int]
        """
        return self._number_of_staff

    @number_of_staff.setter
    def number_of_staff(self, number_of_staff):
        """Sets the number_of_staff of this School.

        Description not available  # noqa: E501

        :param number_of_staff: The number_of_staff of this School.
        :type number_of_staff: List[int]
        """

        self._number_of_staff = number_of_staff

    @property
    def hometown(self):
        """Gets the hometown of this School.

        Description not available  # noqa: E501

        :return: The hometown of this School.
        :rtype: List[object]
        """
        return self._hometown

    @hometown.setter
    def hometown(self, hometown):
        """Sets the hometown of this School.

        Description not available  # noqa: E501

        :param hometown: The hometown of this School.
        :type hometown: List[object]
        """

        self._hometown = hometown

    @property
    def custodian(self):
        """Gets the custodian of this School.

        Description not available  # noqa: E501

        :return: The custodian of this School.
        :rtype: List[object]
        """
        return self._custodian

    @custodian.setter
    def custodian(self, custodian):
        """Sets the custodian of this School.

        Description not available  # noqa: E501

        :param custodian: The custodian of this School.
        :type custodian: List[object]
        """

        self._custodian = custodian

    @property
    def bar_pass_rate(self):
        """Gets the bar_pass_rate of this School.

        Description not available  # noqa: E501

        :return: The bar_pass_rate of this School.
        :rtype: List[float]
        """
        return self._bar_pass_rate

    @bar_pass_rate.setter
    def bar_pass_rate(self, bar_pass_rate):
        """Sets the bar_pass_rate of this School.

        Description not available  # noqa: E501

        :param bar_pass_rate: The bar_pass_rate of this School.
        :type bar_pass_rate: List[float]
        """

        self._bar_pass_rate = bar_pass_rate

    @property
    def tuition(self):
        """Gets the tuition of this School.

        Description not available  # noqa: E501

        :return: The tuition of this School.
        :rtype: List[float]
        """
        return self._tuition

    @tuition.setter
    def tuition(self, tuition):
        """Sets the tuition of this School.

        Description not available  # noqa: E501

        :param tuition: The tuition of this School.
        :type tuition: List[float]
        """

        self._tuition = tuition

    @property
    def label(self):
        """Gets the label of this School.

        short description of the resource  # noqa: E501

        :return: The label of this School.
        :rtype: List[str]
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this School.

        short description of the resource  # noqa: E501

        :param label: The label of this School.
        :type label: List[str]
        """

        self._label = label

    @property
    def legal_form(self):
        """Gets the legal_form of this School.

        There are many types of business entity defined in the legal systems of various countries. These include corporations, cooperatives, partnerships, sole traders, limited liability company and other specialized types of organization.  # noqa: E501

        :return: The legal_form of this School.
        :rtype: List[object]
        """
        return self._legal_form

    @legal_form.setter
    def legal_form(self, legal_form):
        """Sets the legal_form of this School.

        There are many types of business entity defined in the legal systems of various countries. These include corporations, cooperatives, partnerships, sole traders, limited liability company and other specialized types of organization.  # noqa: E501

        :param legal_form: The legal_form of this School.
        :type legal_form: List[object]
        """

        self._legal_form = legal_form

    @property
    def headteacher(self):
        """Gets the headteacher of this School.

        Description not available  # noqa: E501

        :return: The headteacher of this School.
        :rtype: List[object]
        """
        return self._headteacher

    @headteacher.setter
    def headteacher(self, headteacher):
        """Sets the headteacher of this School.

        Description not available  # noqa: E501

        :param headteacher: The headteacher of this School.
        :type headteacher: List[object]
        """

        self._headteacher = headteacher

    @property
    def testaverage(self):
        """Gets the testaverage of this School.

        Description not available  # noqa: E501

        :return: The testaverage of this School.
        :rtype: List[float]
        """
        return self._testaverage

    @testaverage.setter
    def testaverage(self, testaverage):
        """Sets the testaverage of this School.

        Description not available  # noqa: E501

        :param testaverage: The testaverage of this School.
        :type testaverage: List[float]
        """

        self._testaverage = testaverage

    @property
    def general_council(self):
        """Gets the general_council of this School.

        Description not available  # noqa: E501

        :return: The general_council of this School.
        :rtype: List[object]
        """
        return self._general_council

    @general_council.setter
    def general_council(self, general_council):
        """Sets the general_council of this School.

        Description not available  # noqa: E501

        :param general_council: The general_council of this School.
        :type general_council: List[object]
        """

        self._general_council = general_council

    @property
    def rival(self):
        """Gets the rival of this School.

        Description not available  # noqa: E501

        :return: The rival of this School.
        :rtype: List[object]
        """
        return self._rival

    @rival.setter
    def rival(self, rival):
        """Sets the rival of this School.

        Description not available  # noqa: E501

        :param rival: The rival of this School.
        :type rival: List[object]
        """

        self._rival = rival

    @property
    def age(self):
        """Gets the age of this School.

        Description not available  # noqa: E501

        :return: The age of this School.
        :rtype: List[int]
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this School.

        Description not available  # noqa: E501

        :param age: The age of this School.
        :type age: List[int]
        """

        self._age = age

    @property
    def main_organ(self):
        """Gets the main_organ of this School.

        Description not available  # noqa: E501

        :return: The main_organ of this School.
        :rtype: List[object]
        """
        return self._main_organ

    @main_organ.setter
    def main_organ(self, main_organ):
        """Sets the main_organ of this School.

        Description not available  # noqa: E501

        :param main_organ: The main_organ of this School.
        :type main_organ: List[object]
        """

        self._main_organ = main_organ
