# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Drug(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, iupac_name=None, ch_ebi=None, bioavailability=None, description=None, id=None, label=None, type=None, melting_point=None, boiling_point=None):  # noqa: E501
        """Drug - a model defined in OpenAPI

        :param iupac_name: The iupac_name of this Drug.  # noqa: E501
        :type iupac_name: List[str]
        :param ch_ebi: The ch_ebi of this Drug.  # noqa: E501
        :type ch_ebi: List[str]
        :param bioavailability: The bioavailability of this Drug.  # noqa: E501
        :type bioavailability: List[float]
        :param description: The description of this Drug.  # noqa: E501
        :type description: List[str]
        :param id: The id of this Drug.  # noqa: E501
        :type id: str
        :param label: The label of this Drug.  # noqa: E501
        :type label: List[str]
        :param type: The type of this Drug.  # noqa: E501
        :type type: List[str]
        :param melting_point: The melting_point of this Drug.  # noqa: E501
        :type melting_point: List[object]
        :param boiling_point: The boiling_point of this Drug.  # noqa: E501
        :type boiling_point: List[object]
        """


        self.openapi_types = {
            'iupac_name': List[str],
            'ch_ebi': List[str],
            'bioavailability': List[float],
            'description': List[str],
            'id': str,
            'label': List[str],
            'type': List[str],
            'melting_point': List[object],
            'boiling_point': List[object]
        }

        self.attribute_map = {
            'iupac_name': 'iupacName',
            'ch_ebi': 'chEBI',
            'bioavailability': 'bioavailability',
            'description': 'description',
            'id': 'id',
            'label': 'label',
            'type': 'type',
            'melting_point': 'meltingPoint',
            'boiling_point': 'boilingPoint'
        }

        self._iupac_name = iupac_name
        self._ch_ebi = ch_ebi
        self._bioavailability = bioavailability
        self._description = description
        self._id = id
        self._label = label
        self._type = type
        self._melting_point = melting_point
        self._boiling_point = boiling_point

    @classmethod
    def from_dict(cls, dikt) -> 'Drug':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Drug of this Drug.  # noqa: E501
        :rtype: Drug
        """
        return util.deserialize_model(dikt, cls)

    @property
    def iupac_name(self):
        """Gets the iupac_name of this Drug.

        Description not available  # noqa: E501

        :return: The iupac_name of this Drug.
        :rtype: List[str]
        """
        return self._iupac_name

    @iupac_name.setter
    def iupac_name(self, iupac_name):
        """Sets the iupac_name of this Drug.

        Description not available  # noqa: E501

        :param iupac_name: The iupac_name of this Drug.
        :type iupac_name: List[str]
        """

        self._iupac_name = iupac_name

    @property
    def ch_ebi(self):
        """Gets the ch_ebi of this Drug.

        A unique identifier for the drug in the Chemical Entities of Biological Interest (ChEBI) ontology  # noqa: E501

        :return: The ch_ebi of this Drug.
        :rtype: List[str]
        """
        return self._ch_ebi

    @ch_ebi.setter
    def ch_ebi(self, ch_ebi):
        """Sets the ch_ebi of this Drug.

        A unique identifier for the drug in the Chemical Entities of Biological Interest (ChEBI) ontology  # noqa: E501

        :param ch_ebi: The ch_ebi of this Drug.
        :type ch_ebi: List[str]
        """

        self._ch_ebi = ch_ebi

    @property
    def bioavailability(self):
        """Gets the bioavailability of this Drug.

        \"The rate and extent to which the active ingredient or active moiety is absorbed from a drug product and becomes available at the site of action. For drug products that are not intended to be absorbed into the bloodstream, bioavailability may be assessed by measurements intended to reflect the rate and extent to which the active ingredient or active moiety becomes available at the site of action (21CFR320.1).\"  # noqa: E501

        :return: The bioavailability of this Drug.
        :rtype: List[float]
        """
        return self._bioavailability

    @bioavailability.setter
    def bioavailability(self, bioavailability):
        """Sets the bioavailability of this Drug.

        \"The rate and extent to which the active ingredient or active moiety is absorbed from a drug product and becomes available at the site of action. For drug products that are not intended to be absorbed into the bloodstream, bioavailability may be assessed by measurements intended to reflect the rate and extent to which the active ingredient or active moiety becomes available at the site of action (21CFR320.1).\"  # noqa: E501

        :param bioavailability: The bioavailability of this Drug.
        :type bioavailability: List[float]
        """

        self._bioavailability = bioavailability

    @property
    def description(self):
        """Gets the description of this Drug.

        small description  # noqa: E501

        :return: The description of this Drug.
        :rtype: List[str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Drug.

        small description  # noqa: E501

        :param description: The description of this Drug.
        :type description: List[str]
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this Drug.

        identifier  # noqa: E501

        :return: The id of this Drug.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Drug.

        identifier  # noqa: E501

        :param id: The id of this Drug.
        :type id: str
        """

        self._id = id

    @property
    def label(self):
        """Gets the label of this Drug.

        short description of the resource  # noqa: E501

        :return: The label of this Drug.
        :rtype: List[str]
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Drug.

        short description of the resource  # noqa: E501

        :param label: The label of this Drug.
        :type label: List[str]
        """

        self._label = label

    @property
    def type(self):
        """Gets the type of this Drug.

        type of the resource  # noqa: E501

        :return: The type of this Drug.
        :rtype: List[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Drug.

        type of the resource  # noqa: E501

        :param type: The type of this Drug.
        :type type: List[str]
        """

        self._type = type

    @property
    def melting_point(self):
        """Gets the melting_point of this Drug.

        Description not available  # noqa: E501

        :return: The melting_point of this Drug.
        :rtype: List[object]
        """
        return self._melting_point

    @melting_point.setter
    def melting_point(self, melting_point):
        """Sets the melting_point of this Drug.

        Description not available  # noqa: E501

        :param melting_point: The melting_point of this Drug.
        :type melting_point: List[object]
        """

        self._melting_point = melting_point

    @property
    def boiling_point(self):
        """Gets the boiling_point of this Drug.

        Description not available  # noqa: E501

        :return: The boiling_point of this Drug.
        :rtype: List[object]
        """
        return self._boiling_point

    @boiling_point.setter
    def boiling_point(self, boiling_point):
        """Sets the boiling_point of this Drug.

        Description not available  # noqa: E501

        :param boiling_point: The boiling_point of this Drug.
        :type boiling_point: List[object]
        """

        self._boiling_point = boiling_point
