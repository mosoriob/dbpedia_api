# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class PopulatedPlace(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city_type=None, community_iso_code=None, anthem=None, nation=None, arrondissement=None, agglomeration=None, french_name=None, type=None, moldavian_name=None, rank_population=None, previous_demographics=None, leader_party=None, police_name=None, neighboring_municipality=None, population_pct_children=None, commissioner_date=None, population_total_ranking=None, id=None, sharing_out_population=None, demographics_as_of=None, cyrillique_name=None, largest_settlement=None, lieutenancy=None, catholic_percentage=None, old_district=None, area_rural=None, sharing_out_area=None, phone_prefix_name=None, delegate_mayor=None, sharing_out_population_name=None, gross_domestic_product_as_of=None, population=None, senior=None, population_rural=None, number_of_capital_deputies=None, ceremonial_county=None, population_year=None, area_total_ranking=None, number_of_federal_deputies=None, scotish_name=None, leader_name=None, principal_area=None, watercourse=None, metropolitan_borough=None, per_capita_income_as_of=None, purchasing_power_parity=None, barangays=None, circle=None, occitan_name=None, dissolution_year=None, previous_name=None, gross_domestic_product_purchasing_power_parity_per_capita=None, leader_title=None, foundation=None, apskritis=None, ekatte_code=None, per_capita_income=None, sharing_out_population_year=None, foundation_date=None, life_expectancy=None, simc_code=None, agglomeration_demographics=None, calabrian_name=None, teryt_code=None, governorate=None, smallest_country=None, council_area=None, gross_domestic_product=None, vice_leader_party=None, localization_thumbnail_caption=None, saint=None, gnl=None, number_of_municipalities=None, licence_number=None, unlc_code=None, sicilian_name=None, department_position=None, infant_mortality=None, gini_coefficient_ranking=None, population_pct_men=None, area_metro=None, number_of_cantons=None, hra_state=None, okato_code=None, disappearance_date=None, cca_state=None, protestant_percentage=None, politic_government_department=None, ethnic_group=None, population_urban_density=None, largest_country=None, phone_prefix=None, zip_code=None, population_metro=None, capital=None, italian_name=None, dissolution_date=None, status_year=None, founding_person=None, postal_code=None, agglomeration_area=None, historical_region=None, international_phone_prefix_label=None, ist=None, borough=None, frioulan_name=None, gini_coefficient_category=None, colonial_name=None, largest_city=None, sardinian_name=None, illiteracy=None, licence_number_label=None, parish=None, old_name=None, arberisht_name=None, scots_name=None, term_of_office=None, population_as_of=None, emblem=None, commissioner=None, number_of_counties=None, area=None, sheading=None, pluviometry=None, german_name=None, local_phone_prefix=None, population_pct_women=None, old_province=None, fips_code=None, nis_code=None, greek_name=None, population_density=None, population_rural_density=None, area_code=None, gross_domestic_product_nominal_per_capita=None, unitary_authority=None, population_metro_density=None, previous_population=None, outskirts=None, area_urban=None, gini_coefficient=None, topic=None, other_name=None, regional_language=None, income=None, maori_name=None, population_urban=None, istat=None, touristic_site=None, gini_coefficient_as_of=None, county_seat=None, purchasing_power_parity_year=None, lieutenancy_area=None, official_language=None, previous_population_total=None, people_name=None, description=None, number_of_state_deputies=None, purchasing_power_parity_rank=None, human_development_index=None, alemmanic_name=None, luxembourgish_name=None, area_total=None, human_development_index_as_of=None, census_year=None, sharing_out=None, department=None, administrative_head_city=None, ladin_name=None, international_phone_prefix=None, rank_area=None, gagaouze=None, seniunija=None, kanji_name=None, label=None, city_since=None, gnis_code=None, deme=None, first_mention=None, localization_thumbnail=None, province_iso_code=None, delegation=None, human_development_index_ranking_category=None, vice_leader=None, demographics=None):  # noqa: E501
        """PopulatedPlace - a model defined in OpenAPI

        :param city_type: The city_type of this PopulatedPlace.  # noqa: E501
        :type city_type: List[str]
        :param community_iso_code: The community_iso_code of this PopulatedPlace.  # noqa: E501
        :type community_iso_code: List[str]
        :param anthem: The anthem of this PopulatedPlace.  # noqa: E501
        :type anthem: List[object]
        :param nation: The nation of this PopulatedPlace.  # noqa: E501
        :type nation: List[str]
        :param arrondissement: The arrondissement of this PopulatedPlace.  # noqa: E501
        :type arrondissement: List[object]
        :param agglomeration: The agglomeration of this PopulatedPlace.  # noqa: E501
        :type agglomeration: List[object]
        :param french_name: The french_name of this PopulatedPlace.  # noqa: E501
        :type french_name: List[str]
        :param type: The type of this PopulatedPlace.  # noqa: E501
        :type type: List[str]
        :param moldavian_name: The moldavian_name of this PopulatedPlace.  # noqa: E501
        :type moldavian_name: List[str]
        :param rank_population: The rank_population of this PopulatedPlace.  # noqa: E501
        :type rank_population: List[int]
        :param previous_demographics: The previous_demographics of this PopulatedPlace.  # noqa: E501
        :type previous_demographics: List[object]
        :param leader_party: The leader_party of this PopulatedPlace.  # noqa: E501
        :type leader_party: List[object]
        :param police_name: The police_name of this PopulatedPlace.  # noqa: E501
        :type police_name: List[str]
        :param neighboring_municipality: The neighboring_municipality of this PopulatedPlace.  # noqa: E501
        :type neighboring_municipality: List[object]
        :param population_pct_children: The population_pct_children of this PopulatedPlace.  # noqa: E501
        :type population_pct_children: List[int]
        :param commissioner_date: The commissioner_date of this PopulatedPlace.  # noqa: E501
        :type commissioner_date: List[str]
        :param population_total_ranking: The population_total_ranking of this PopulatedPlace.  # noqa: E501
        :type population_total_ranking: List[int]
        :param id: The id of this PopulatedPlace.  # noqa: E501
        :type id: str
        :param sharing_out_population: The sharing_out_population of this PopulatedPlace.  # noqa: E501
        :type sharing_out_population: List[int]
        :param demographics_as_of: The demographics_as_of of this PopulatedPlace.  # noqa: E501
        :type demographics_as_of: List[str]
        :param cyrillique_name: The cyrillique_name of this PopulatedPlace.  # noqa: E501
        :type cyrillique_name: List[str]
        :param largest_settlement: The largest_settlement of this PopulatedPlace.  # noqa: E501
        :type largest_settlement: List[object]
        :param lieutenancy: The lieutenancy of this PopulatedPlace.  # noqa: E501
        :type lieutenancy: List[str]
        :param catholic_percentage: The catholic_percentage of this PopulatedPlace.  # noqa: E501
        :type catholic_percentage: List[str]
        :param old_district: The old_district of this PopulatedPlace.  # noqa: E501
        :type old_district: List[object]
        :param area_rural: The area_rural of this PopulatedPlace.  # noqa: E501
        :type area_rural: List[float]
        :param sharing_out_area: The sharing_out_area of this PopulatedPlace.  # noqa: E501
        :type sharing_out_area: List[str]
        :param phone_prefix_name: The phone_prefix_name of this PopulatedPlace.  # noqa: E501
        :type phone_prefix_name: List[str]
        :param delegate_mayor: The delegate_mayor of this PopulatedPlace.  # noqa: E501
        :type delegate_mayor: List[object]
        :param sharing_out_population_name: The sharing_out_population_name of this PopulatedPlace.  # noqa: E501
        :type sharing_out_population_name: List[str]
        :param gross_domestic_product_as_of: The gross_domestic_product_as_of of this PopulatedPlace.  # noqa: E501
        :type gross_domestic_product_as_of: List[str]
        :param population: The population of this PopulatedPlace.  # noqa: E501
        :type population: List[object]
        :param senior: The senior of this PopulatedPlace.  # noqa: E501
        :type senior: List[str]
        :param population_rural: The population_rural of this PopulatedPlace.  # noqa: E501
        :type population_rural: List[int]
        :param number_of_capital_deputies: The number_of_capital_deputies of this PopulatedPlace.  # noqa: E501
        :type number_of_capital_deputies: List[int]
        :param ceremonial_county: The ceremonial_county of this PopulatedPlace.  # noqa: E501
        :type ceremonial_county: List[object]
        :param population_year: The population_year of this PopulatedPlace.  # noqa: E501
        :type population_year: List[str]
        :param area_total_ranking: The area_total_ranking of this PopulatedPlace.  # noqa: E501
        :type area_total_ranking: List[int]
        :param number_of_federal_deputies: The number_of_federal_deputies of this PopulatedPlace.  # noqa: E501
        :type number_of_federal_deputies: List[int]
        :param scotish_name: The scotish_name of this PopulatedPlace.  # noqa: E501
        :type scotish_name: List[str]
        :param leader_name: The leader_name of this PopulatedPlace.  # noqa: E501
        :type leader_name: List[object]
        :param principal_area: The principal_area of this PopulatedPlace.  # noqa: E501
        :type principal_area: List[object]
        :param watercourse: The watercourse of this PopulatedPlace.  # noqa: E501
        :type watercourse: List[str]
        :param metropolitan_borough: The metropolitan_borough of this PopulatedPlace.  # noqa: E501
        :type metropolitan_borough: List[object]
        :param per_capita_income_as_of: The per_capita_income_as_of of this PopulatedPlace.  # noqa: E501
        :type per_capita_income_as_of: List[str]
        :param purchasing_power_parity: The purchasing_power_parity of this PopulatedPlace.  # noqa: E501
        :type purchasing_power_parity: List[str]
        :param barangays: The barangays of this PopulatedPlace.  # noqa: E501
        :type barangays: List[str]
        :param circle: The circle of this PopulatedPlace.  # noqa: E501
        :type circle: List[str]
        :param occitan_name: The occitan_name of this PopulatedPlace.  # noqa: E501
        :type occitan_name: List[str]
        :param dissolution_year: The dissolution_year of this PopulatedPlace.  # noqa: E501
        :type dissolution_year: List[str]
        :param previous_name: The previous_name of this PopulatedPlace.  # noqa: E501
        :type previous_name: List[str]
        :param gross_domestic_product_purchasing_power_parity_per_capita: The gross_domestic_product_purchasing_power_parity_per_capita of this PopulatedPlace.  # noqa: E501
        :type gross_domestic_product_purchasing_power_parity_per_capita: List[object]
        :param leader_title: The leader_title of this PopulatedPlace.  # noqa: E501
        :type leader_title: List[str]
        :param foundation: The foundation of this PopulatedPlace.  # noqa: E501
        :type foundation: List[str]
        :param apskritis: The apskritis of this PopulatedPlace.  # noqa: E501
        :type apskritis: List[str]
        :param ekatte_code: The ekatte_code of this PopulatedPlace.  # noqa: E501
        :type ekatte_code: List[str]
        :param per_capita_income: The per_capita_income of this PopulatedPlace.  # noqa: E501
        :type per_capita_income: List[float]
        :param sharing_out_population_year: The sharing_out_population_year of this PopulatedPlace.  # noqa: E501
        :type sharing_out_population_year: List[str]
        :param foundation_date: The foundation_date of this PopulatedPlace.  # noqa: E501
        :type foundation_date: List[str]
        :param life_expectancy: The life_expectancy of this PopulatedPlace.  # noqa: E501
        :type life_expectancy: List[str]
        :param simc_code: The simc_code of this PopulatedPlace.  # noqa: E501
        :type simc_code: List[object]
        :param agglomeration_demographics: The agglomeration_demographics of this PopulatedPlace.  # noqa: E501
        :type agglomeration_demographics: List[object]
        :param calabrian_name: The calabrian_name of this PopulatedPlace.  # noqa: E501
        :type calabrian_name: List[str]
        :param teryt_code: The teryt_code of this PopulatedPlace.  # noqa: E501
        :type teryt_code: List[object]
        :param governorate: The governorate of this PopulatedPlace.  # noqa: E501
        :type governorate: List[str]
        :param smallest_country: The smallest_country of this PopulatedPlace.  # noqa: E501
        :type smallest_country: List[object]
        :param council_area: The council_area of this PopulatedPlace.  # noqa: E501
        :type council_area: List[object]
        :param gross_domestic_product: The gross_domestic_product of this PopulatedPlace.  # noqa: E501
        :type gross_domestic_product: List[object]
        :param vice_leader_party: The vice_leader_party of this PopulatedPlace.  # noqa: E501
        :type vice_leader_party: List[object]
        :param localization_thumbnail_caption: The localization_thumbnail_caption of this PopulatedPlace.  # noqa: E501
        :type localization_thumbnail_caption: List[str]
        :param saint: The saint of this PopulatedPlace.  # noqa: E501
        :type saint: List[object]
        :param gnl: The gnl of this PopulatedPlace.  # noqa: E501
        :type gnl: List[str]
        :param number_of_municipalities: The number_of_municipalities of this PopulatedPlace.  # noqa: E501
        :type number_of_municipalities: List[int]
        :param licence_number: The licence_number of this PopulatedPlace.  # noqa: E501
        :type licence_number: List[str]
        :param unlc_code: The unlc_code of this PopulatedPlace.  # noqa: E501
        :type unlc_code: List[str]
        :param sicilian_name: The sicilian_name of this PopulatedPlace.  # noqa: E501
        :type sicilian_name: List[str]
        :param department_position: The department_position of this PopulatedPlace.  # noqa: E501
        :type department_position: List[str]
        :param infant_mortality: The infant_mortality of this PopulatedPlace.  # noqa: E501
        :type infant_mortality: List[float]
        :param gini_coefficient_ranking: The gini_coefficient_ranking of this PopulatedPlace.  # noqa: E501
        :type gini_coefficient_ranking: List[int]
        :param population_pct_men: The population_pct_men of this PopulatedPlace.  # noqa: E501
        :type population_pct_men: List[int]
        :param area_metro: The area_metro of this PopulatedPlace.  # noqa: E501
        :type area_metro: List[object]
        :param number_of_cantons: The number_of_cantons of this PopulatedPlace.  # noqa: E501
        :type number_of_cantons: List[int]
        :param hra_state: The hra_state of this PopulatedPlace.  # noqa: E501
        :type hra_state: List[str]
        :param okato_code: The okato_code of this PopulatedPlace.  # noqa: E501
        :type okato_code: List[str]
        :param disappearance_date: The disappearance_date of this PopulatedPlace.  # noqa: E501
        :type disappearance_date: List[str]
        :param cca_state: The cca_state of this PopulatedPlace.  # noqa: E501
        :type cca_state: List[str]
        :param protestant_percentage: The protestant_percentage of this PopulatedPlace.  # noqa: E501
        :type protestant_percentage: List[str]
        :param politic_government_department: The politic_government_department of this PopulatedPlace.  # noqa: E501
        :type politic_government_department: List[object]
        :param ethnic_group: The ethnic_group of this PopulatedPlace.  # noqa: E501
        :type ethnic_group: List[object]
        :param population_urban_density: The population_urban_density of this PopulatedPlace.  # noqa: E501
        :type population_urban_density: List[object]
        :param largest_country: The largest_country of this PopulatedPlace.  # noqa: E501
        :type largest_country: List[object]
        :param phone_prefix: The phone_prefix of this PopulatedPlace.  # noqa: E501
        :type phone_prefix: List[int]
        :param zip_code: The zip_code of this PopulatedPlace.  # noqa: E501
        :type zip_code: List[str]
        :param population_metro: The population_metro of this PopulatedPlace.  # noqa: E501
        :type population_metro: List[int]
        :param capital: The capital of this PopulatedPlace.  # noqa: E501
        :type capital: List[object]
        :param italian_name: The italian_name of this PopulatedPlace.  # noqa: E501
        :type italian_name: List[str]
        :param dissolution_date: The dissolution_date of this PopulatedPlace.  # noqa: E501
        :type dissolution_date: List[str]
        :param status_year: The status_year of this PopulatedPlace.  # noqa: E501
        :type status_year: List[str]
        :param founding_person: The founding_person of this PopulatedPlace.  # noqa: E501
        :type founding_person: List[object]
        :param postal_code: The postal_code of this PopulatedPlace.  # noqa: E501
        :type postal_code: List[str]
        :param agglomeration_area: The agglomeration_area of this PopulatedPlace.  # noqa: E501
        :type agglomeration_area: List[object]
        :param historical_region: The historical_region of this PopulatedPlace.  # noqa: E501
        :type historical_region: List[str]
        :param international_phone_prefix_label: The international_phone_prefix_label of this PopulatedPlace.  # noqa: E501
        :type international_phone_prefix_label: List[str]
        :param ist: The ist of this PopulatedPlace.  # noqa: E501
        :type ist: List[str]
        :param borough: The borough of this PopulatedPlace.  # noqa: E501
        :type borough: List[object]
        :param frioulan_name: The frioulan_name of this PopulatedPlace.  # noqa: E501
        :type frioulan_name: List[str]
        :param gini_coefficient_category: The gini_coefficient_category of this PopulatedPlace.  # noqa: E501
        :type gini_coefficient_category: List[object]
        :param colonial_name: The colonial_name of this PopulatedPlace.  # noqa: E501
        :type colonial_name: List[str]
        :param largest_city: The largest_city of this PopulatedPlace.  # noqa: E501
        :type largest_city: List[object]
        :param sardinian_name: The sardinian_name of this PopulatedPlace.  # noqa: E501
        :type sardinian_name: List[str]
        :param illiteracy: The illiteracy of this PopulatedPlace.  # noqa: E501
        :type illiteracy: List[float]
        :param licence_number_label: The licence_number_label of this PopulatedPlace.  # noqa: E501
        :type licence_number_label: List[str]
        :param parish: The parish of this PopulatedPlace.  # noqa: E501
        :type parish: List[object]
        :param old_name: The old_name of this PopulatedPlace.  # noqa: E501
        :type old_name: List[str]
        :param arberisht_name: The arberisht_name of this PopulatedPlace.  # noqa: E501
        :type arberisht_name: List[str]
        :param scots_name: The scots_name of this PopulatedPlace.  # noqa: E501
        :type scots_name: List[str]
        :param term_of_office: The term_of_office of this PopulatedPlace.  # noqa: E501
        :type term_of_office: List[str]
        :param population_as_of: The population_as_of of this PopulatedPlace.  # noqa: E501
        :type population_as_of: List[str]
        :param emblem: The emblem of this PopulatedPlace.  # noqa: E501
        :type emblem: List[str]
        :param commissioner: The commissioner of this PopulatedPlace.  # noqa: E501
        :type commissioner: List[str]
        :param number_of_counties: The number_of_counties of this PopulatedPlace.  # noqa: E501
        :type number_of_counties: List[int]
        :param area: The area of this PopulatedPlace.  # noqa: E501
        :type area: List[object]
        :param sheading: The sheading of this PopulatedPlace.  # noqa: E501
        :type sheading: List[object]
        :param pluviometry: The pluviometry of this PopulatedPlace.  # noqa: E501
        :type pluviometry: List[str]
        :param german_name: The german_name of this PopulatedPlace.  # noqa: E501
        :type german_name: List[str]
        :param local_phone_prefix: The local_phone_prefix of this PopulatedPlace.  # noqa: E501
        :type local_phone_prefix: List[int]
        :param population_pct_women: The population_pct_women of this PopulatedPlace.  # noqa: E501
        :type population_pct_women: List[int]
        :param old_province: The old_province of this PopulatedPlace.  # noqa: E501
        :type old_province: List[object]
        :param fips_code: The fips_code of this PopulatedPlace.  # noqa: E501
        :type fips_code: List[str]
        :param nis_code: The nis_code of this PopulatedPlace.  # noqa: E501
        :type nis_code: List[object]
        :param greek_name: The greek_name of this PopulatedPlace.  # noqa: E501
        :type greek_name: List[str]
        :param population_density: The population_density of this PopulatedPlace.  # noqa: E501
        :type population_density: List[object]
        :param population_rural_density: The population_rural_density of this PopulatedPlace.  # noqa: E501
        :type population_rural_density: List[float]
        :param area_code: The area_code of this PopulatedPlace.  # noqa: E501
        :type area_code: List[str]
        :param gross_domestic_product_nominal_per_capita: The gross_domestic_product_nominal_per_capita of this PopulatedPlace.  # noqa: E501
        :type gross_domestic_product_nominal_per_capita: List[object]
        :param unitary_authority: The unitary_authority of this PopulatedPlace.  # noqa: E501
        :type unitary_authority: List[object]
        :param population_metro_density: The population_metro_density of this PopulatedPlace.  # noqa: E501
        :type population_metro_density: List[object]
        :param previous_population: The previous_population of this PopulatedPlace.  # noqa: E501
        :type previous_population: List[object]
        :param outskirts: The outskirts of this PopulatedPlace.  # noqa: E501
        :type outskirts: List[str]
        :param area_urban: The area_urban of this PopulatedPlace.  # noqa: E501
        :type area_urban: List[object]
        :param gini_coefficient: The gini_coefficient of this PopulatedPlace.  # noqa: E501
        :type gini_coefficient: List[float]
        :param topic: The topic of this PopulatedPlace.  # noqa: E501
        :type topic: List[str]
        :param other_name: The other_name of this PopulatedPlace.  # noqa: E501
        :type other_name: List[str]
        :param regional_language: The regional_language of this PopulatedPlace.  # noqa: E501
        :type regional_language: List[object]
        :param income: The income of this PopulatedPlace.  # noqa: E501
        :type income: List[str]
        :param maori_name: The maori_name of this PopulatedPlace.  # noqa: E501
        :type maori_name: List[str]
        :param population_urban: The population_urban of this PopulatedPlace.  # noqa: E501
        :type population_urban: List[int]
        :param istat: The istat of this PopulatedPlace.  # noqa: E501
        :type istat: List[str]
        :param touristic_site: The touristic_site of this PopulatedPlace.  # noqa: E501
        :type touristic_site: List[object]
        :param gini_coefficient_as_of: The gini_coefficient_as_of of this PopulatedPlace.  # noqa: E501
        :type gini_coefficient_as_of: List[str]
        :param county_seat: The county_seat of this PopulatedPlace.  # noqa: E501
        :type county_seat: List[object]
        :param purchasing_power_parity_year: The purchasing_power_parity_year of this PopulatedPlace.  # noqa: E501
        :type purchasing_power_parity_year: List[str]
        :param lieutenancy_area: The lieutenancy_area of this PopulatedPlace.  # noqa: E501
        :type lieutenancy_area: List[object]
        :param official_language: The official_language of this PopulatedPlace.  # noqa: E501
        :type official_language: List[object]
        :param previous_population_total: The previous_population_total of this PopulatedPlace.  # noqa: E501
        :type previous_population_total: List[int]
        :param people_name: The people_name of this PopulatedPlace.  # noqa: E501
        :type people_name: List[str]
        :param description: The description of this PopulatedPlace.  # noqa: E501
        :type description: List[str]
        :param number_of_state_deputies: The number_of_state_deputies of this PopulatedPlace.  # noqa: E501
        :type number_of_state_deputies: List[int]
        :param purchasing_power_parity_rank: The purchasing_power_parity_rank of this PopulatedPlace.  # noqa: E501
        :type purchasing_power_parity_rank: List[str]
        :param human_development_index: The human_development_index of this PopulatedPlace.  # noqa: E501
        :type human_development_index: List[object]
        :param alemmanic_name: The alemmanic_name of this PopulatedPlace.  # noqa: E501
        :type alemmanic_name: List[str]
        :param luxembourgish_name: The luxembourgish_name of this PopulatedPlace.  # noqa: E501
        :type luxembourgish_name: List[str]
        :param area_total: The area_total of this PopulatedPlace.  # noqa: E501
        :type area_total: List[object]
        :param human_development_index_as_of: The human_development_index_as_of of this PopulatedPlace.  # noqa: E501
        :type human_development_index_as_of: List[str]
        :param census_year: The census_year of this PopulatedPlace.  # noqa: E501
        :type census_year: List[str]
        :param sharing_out: The sharing_out of this PopulatedPlace.  # noqa: E501
        :type sharing_out: List[str]
        :param department: The department of this PopulatedPlace.  # noqa: E501
        :type department: List[object]
        :param administrative_head_city: The administrative_head_city of this PopulatedPlace.  # noqa: E501
        :type administrative_head_city: List[object]
        :param ladin_name: The ladin_name of this PopulatedPlace.  # noqa: E501
        :type ladin_name: List[str]
        :param international_phone_prefix: The international_phone_prefix of this PopulatedPlace.  # noqa: E501
        :type international_phone_prefix: List[str]
        :param rank_area: The rank_area of this PopulatedPlace.  # noqa: E501
        :type rank_area: List[int]
        :param gagaouze: The gagaouze of this PopulatedPlace.  # noqa: E501
        :type gagaouze: List[str]
        :param seniunija: The seniunija of this PopulatedPlace.  # noqa: E501
        :type seniunija: List[str]
        :param kanji_name: The kanji_name of this PopulatedPlace.  # noqa: E501
        :type kanji_name: List[str]
        :param label: The label of this PopulatedPlace.  # noqa: E501
        :type label: List[str]
        :param city_since: The city_since of this PopulatedPlace.  # noqa: E501
        :type city_since: List[str]
        :param gnis_code: The gnis_code of this PopulatedPlace.  # noqa: E501
        :type gnis_code: List[str]
        :param deme: The deme of this PopulatedPlace.  # noqa: E501
        :type deme: List[str]
        :param first_mention: The first_mention of this PopulatedPlace.  # noqa: E501
        :type first_mention: List[str]
        :param localization_thumbnail: The localization_thumbnail of this PopulatedPlace.  # noqa: E501
        :type localization_thumbnail: List[object]
        :param province_iso_code: The province_iso_code of this PopulatedPlace.  # noqa: E501
        :type province_iso_code: List[str]
        :param delegation: The delegation of this PopulatedPlace.  # noqa: E501
        :type delegation: List[str]
        :param human_development_index_ranking_category: The human_development_index_ranking_category of this PopulatedPlace.  # noqa: E501
        :type human_development_index_ranking_category: List[object]
        :param vice_leader: The vice_leader of this PopulatedPlace.  # noqa: E501
        :type vice_leader: List[object]
        :param demographics: The demographics of this PopulatedPlace.  # noqa: E501
        :type demographics: List[object]
        """


        self.openapi_types = {
            'city_type': List[str],
            'community_iso_code': List[str],
            'anthem': List[object],
            'nation': List[str],
            'arrondissement': List[object],
            'agglomeration': List[object],
            'french_name': List[str],
            'type': List[str],
            'moldavian_name': List[str],
            'rank_population': List[int],
            'previous_demographics': List[object],
            'leader_party': List[object],
            'police_name': List[str],
            'neighboring_municipality': List[object],
            'population_pct_children': List[int],
            'commissioner_date': List[str],
            'population_total_ranking': List[int],
            'id': str,
            'sharing_out_population': List[int],
            'demographics_as_of': List[str],
            'cyrillique_name': List[str],
            'largest_settlement': List[object],
            'lieutenancy': List[str],
            'catholic_percentage': List[str],
            'old_district': List[object],
            'area_rural': List[float],
            'sharing_out_area': List[str],
            'phone_prefix_name': List[str],
            'delegate_mayor': List[object],
            'sharing_out_population_name': List[str],
            'gross_domestic_product_as_of': List[str],
            'population': List[object],
            'senior': List[str],
            'population_rural': List[int],
            'number_of_capital_deputies': List[int],
            'ceremonial_county': List[object],
            'population_year': List[str],
            'area_total_ranking': List[int],
            'number_of_federal_deputies': List[int],
            'scotish_name': List[str],
            'leader_name': List[object],
            'principal_area': List[object],
            'watercourse': List[str],
            'metropolitan_borough': List[object],
            'per_capita_income_as_of': List[str],
            'purchasing_power_parity': List[str],
            'barangays': List[str],
            'circle': List[str],
            'occitan_name': List[str],
            'dissolution_year': List[str],
            'previous_name': List[str],
            'gross_domestic_product_purchasing_power_parity_per_capita': List[object],
            'leader_title': List[str],
            'foundation': List[str],
            'apskritis': List[str],
            'ekatte_code': List[str],
            'per_capita_income': List[float],
            'sharing_out_population_year': List[str],
            'foundation_date': List[str],
            'life_expectancy': List[str],
            'simc_code': List[object],
            'agglomeration_demographics': List[object],
            'calabrian_name': List[str],
            'teryt_code': List[object],
            'governorate': List[str],
            'smallest_country': List[object],
            'council_area': List[object],
            'gross_domestic_product': List[object],
            'vice_leader_party': List[object],
            'localization_thumbnail_caption': List[str],
            'saint': List[object],
            'gnl': List[str],
            'number_of_municipalities': List[int],
            'licence_number': List[str],
            'unlc_code': List[str],
            'sicilian_name': List[str],
            'department_position': List[str],
            'infant_mortality': List[float],
            'gini_coefficient_ranking': List[int],
            'population_pct_men': List[int],
            'area_metro': List[object],
            'number_of_cantons': List[int],
            'hra_state': List[str],
            'okato_code': List[str],
            'disappearance_date': List[str],
            'cca_state': List[str],
            'protestant_percentage': List[str],
            'politic_government_department': List[object],
            'ethnic_group': List[object],
            'population_urban_density': List[object],
            'largest_country': List[object],
            'phone_prefix': List[int],
            'zip_code': List[str],
            'population_metro': List[int],
            'capital': List[object],
            'italian_name': List[str],
            'dissolution_date': List[str],
            'status_year': List[str],
            'founding_person': List[object],
            'postal_code': List[str],
            'agglomeration_area': List[object],
            'historical_region': List[str],
            'international_phone_prefix_label': List[str],
            'ist': List[str],
            'borough': List[object],
            'frioulan_name': List[str],
            'gini_coefficient_category': List[object],
            'colonial_name': List[str],
            'largest_city': List[object],
            'sardinian_name': List[str],
            'illiteracy': List[float],
            'licence_number_label': List[str],
            'parish': List[object],
            'old_name': List[str],
            'arberisht_name': List[str],
            'scots_name': List[str],
            'term_of_office': List[str],
            'population_as_of': List[str],
            'emblem': List[str],
            'commissioner': List[str],
            'number_of_counties': List[int],
            'area': List[object],
            'sheading': List[object],
            'pluviometry': List[str],
            'german_name': List[str],
            'local_phone_prefix': List[int],
            'population_pct_women': List[int],
            'old_province': List[object],
            'fips_code': List[str],
            'nis_code': List[object],
            'greek_name': List[str],
            'population_density': List[object],
            'population_rural_density': List[float],
            'area_code': List[str],
            'gross_domestic_product_nominal_per_capita': List[object],
            'unitary_authority': List[object],
            'population_metro_density': List[object],
            'previous_population': List[object],
            'outskirts': List[str],
            'area_urban': List[object],
            'gini_coefficient': List[float],
            'topic': List[str],
            'other_name': List[str],
            'regional_language': List[object],
            'income': List[str],
            'maori_name': List[str],
            'population_urban': List[int],
            'istat': List[str],
            'touristic_site': List[object],
            'gini_coefficient_as_of': List[str],
            'county_seat': List[object],
            'purchasing_power_parity_year': List[str],
            'lieutenancy_area': List[object],
            'official_language': List[object],
            'previous_population_total': List[int],
            'people_name': List[str],
            'description': List[str],
            'number_of_state_deputies': List[int],
            'purchasing_power_parity_rank': List[str],
            'human_development_index': List[object],
            'alemmanic_name': List[str],
            'luxembourgish_name': List[str],
            'area_total': List[object],
            'human_development_index_as_of': List[str],
            'census_year': List[str],
            'sharing_out': List[str],
            'department': List[object],
            'administrative_head_city': List[object],
            'ladin_name': List[str],
            'international_phone_prefix': List[str],
            'rank_area': List[int],
            'gagaouze': List[str],
            'seniunija': List[str],
            'kanji_name': List[str],
            'label': List[str],
            'city_since': List[str],
            'gnis_code': List[str],
            'deme': List[str],
            'first_mention': List[str],
            'localization_thumbnail': List[object],
            'province_iso_code': List[str],
            'delegation': List[str],
            'human_development_index_ranking_category': List[object],
            'vice_leader': List[object],
            'demographics': List[object]
        }

        self.attribute_map = {
            'city_type': 'cityType',
            'community_iso_code': 'communityIsoCode',
            'anthem': 'anthem',
            'nation': 'nation',
            'arrondissement': 'arrondissement',
            'agglomeration': 'agglomeration',
            'french_name': 'frenchName',
            'type': 'type',
            'moldavian_name': 'moldavianName',
            'rank_population': 'rankPopulation',
            'previous_demographics': 'previousDemographics',
            'leader_party': 'leaderParty',
            'police_name': 'policeName',
            'neighboring_municipality': 'neighboringMunicipality',
            'population_pct_children': 'populationPctChildren',
            'commissioner_date': 'commissionerDate',
            'population_total_ranking': 'populationTotalRanking',
            'id': 'id',
            'sharing_out_population': 'sharingOutPopulation',
            'demographics_as_of': 'demographicsAsOf',
            'cyrillique_name': 'cyrilliqueName',
            'largest_settlement': 'largestSettlement',
            'lieutenancy': 'lieutenancy',
            'catholic_percentage': 'catholicPercentage',
            'old_district': 'oldDistrict',
            'area_rural': 'areaRural',
            'sharing_out_area': 'sharingOutArea',
            'phone_prefix_name': 'phonePrefixName',
            'delegate_mayor': 'delegateMayor',
            'sharing_out_population_name': 'sharingOutPopulationName',
            'gross_domestic_product_as_of': 'grossDomesticProductAsOf',
            'population': 'population',
            'senior': 'senior',
            'population_rural': 'populationRural',
            'number_of_capital_deputies': 'numberOfCapitalDeputies',
            'ceremonial_county': 'ceremonialCounty',
            'population_year': 'populationYear',
            'area_total_ranking': 'areaTotalRanking',
            'number_of_federal_deputies': 'numberOfFederalDeputies',
            'scotish_name': 'scotishName',
            'leader_name': 'leaderName',
            'principal_area': 'principalArea',
            'watercourse': 'watercourse',
            'metropolitan_borough': 'metropolitanBorough',
            'per_capita_income_as_of': 'perCapitaIncomeAsOf',
            'purchasing_power_parity': 'purchasingPowerParity',
            'barangays': 'barangays',
            'circle': 'circle',
            'occitan_name': 'occitanName',
            'dissolution_year': 'dissolutionYear',
            'previous_name': 'previousName',
            'gross_domestic_product_purchasing_power_parity_per_capita': 'grossDomesticProductPurchasingPowerParityPerCapita',
            'leader_title': 'leaderTitle',
            'foundation': 'foundation',
            'apskritis': 'apskritis',
            'ekatte_code': 'ekatteCode',
            'per_capita_income': 'perCapitaIncome',
            'sharing_out_population_year': 'sharingOutPopulationYear',
            'foundation_date': 'foundationDate',
            'life_expectancy': 'lifeExpectancy',
            'simc_code': 'simcCode',
            'agglomeration_demographics': 'agglomerationDemographics',
            'calabrian_name': 'calabrianName',
            'teryt_code': 'terytCode',
            'governorate': 'governorate',
            'smallest_country': 'smallestCountry',
            'council_area': 'councilArea',
            'gross_domestic_product': 'grossDomesticProduct',
            'vice_leader_party': 'viceLeaderParty',
            'localization_thumbnail_caption': 'localizationThumbnailCaption',
            'saint': 'saint',
            'gnl': 'gnl',
            'number_of_municipalities': 'numberOfMunicipalities',
            'licence_number': 'licenceNumber',
            'unlc_code': 'unlcCode',
            'sicilian_name': 'sicilianName',
            'department_position': 'departmentPosition',
            'infant_mortality': 'infantMortality',
            'gini_coefficient_ranking': 'giniCoefficientRanking',
            'population_pct_men': 'populationPctMen',
            'area_metro': 'areaMetro',
            'number_of_cantons': 'numberOfCantons',
            'hra_state': 'hraState',
            'okato_code': 'okatoCode',
            'disappearance_date': 'disappearanceDate',
            'cca_state': 'ccaState',
            'protestant_percentage': 'protestantPercentage',
            'politic_government_department': 'politicGovernmentDepartment',
            'ethnic_group': 'ethnicGroup',
            'population_urban_density': 'populationUrbanDensity',
            'largest_country': 'largestCountry',
            'phone_prefix': 'phonePrefix',
            'zip_code': 'zipCode',
            'population_metro': 'populationMetro',
            'capital': 'capital',
            'italian_name': 'italianName',
            'dissolution_date': 'dissolutionDate',
            'status_year': 'statusYear',
            'founding_person': 'foundingPerson',
            'postal_code': 'postalCode',
            'agglomeration_area': 'agglomerationArea',
            'historical_region': 'historicalRegion',
            'international_phone_prefix_label': 'internationalPhonePrefixLabel',
            'ist': 'ist',
            'borough': 'borough',
            'frioulan_name': 'frioulanName',
            'gini_coefficient_category': 'giniCoefficientCategory',
            'colonial_name': 'colonialName',
            'largest_city': 'largestCity',
            'sardinian_name': 'sardinianName',
            'illiteracy': 'illiteracy',
            'licence_number_label': 'licenceNumberLabel',
            'parish': 'parish',
            'old_name': 'oldName',
            'arberisht_name': 'arberishtName',
            'scots_name': 'scotsName',
            'term_of_office': 'termOfOffice',
            'population_as_of': 'populationAsOf',
            'emblem': 'emblem',
            'commissioner': 'commissioner',
            'number_of_counties': 'numberOfCounties',
            'area': 'area',
            'sheading': 'sheading',
            'pluviometry': 'pluviometry',
            'german_name': 'germanName',
            'local_phone_prefix': 'localPhonePrefix',
            'population_pct_women': 'populationPctWomen',
            'old_province': 'oldProvince',
            'fips_code': 'fipsCode',
            'nis_code': 'nisCode',
            'greek_name': 'greekName',
            'population_density': 'populationDensity',
            'population_rural_density': 'populationRuralDensity',
            'area_code': 'areaCode',
            'gross_domestic_product_nominal_per_capita': 'grossDomesticProductNominalPerCapita',
            'unitary_authority': 'unitaryAuthority',
            'population_metro_density': 'populationMetroDensity',
            'previous_population': 'previousPopulation',
            'outskirts': 'outskirts',
            'area_urban': 'areaUrban',
            'gini_coefficient': 'giniCoefficient',
            'topic': 'topic',
            'other_name': 'otherName',
            'regional_language': 'regionalLanguage',
            'income': 'income',
            'maori_name': 'maoriName',
            'population_urban': 'populationUrban',
            'istat': 'istat',
            'touristic_site': 'touristicSite',
            'gini_coefficient_as_of': 'giniCoefficientAsOf',
            'county_seat': 'countySeat',
            'purchasing_power_parity_year': 'purchasingPowerParityYear',
            'lieutenancy_area': 'lieutenancyArea',
            'official_language': 'officialLanguage',
            'previous_population_total': 'previousPopulationTotal',
            'people_name': 'peopleName',
            'description': 'description',
            'number_of_state_deputies': 'numberOfStateDeputies',
            'purchasing_power_parity_rank': 'purchasingPowerParityRank',
            'human_development_index': 'humanDevelopmentIndex',
            'alemmanic_name': 'alemmanicName',
            'luxembourgish_name': 'luxembourgishName',
            'area_total': 'areaTotal',
            'human_development_index_as_of': 'humanDevelopmentIndexAsOf',
            'census_year': 'censusYear',
            'sharing_out': 'sharingOut',
            'department': 'department',
            'administrative_head_city': 'administrativeHeadCity',
            'ladin_name': 'ladinName',
            'international_phone_prefix': 'internationalPhonePrefix',
            'rank_area': 'rankArea',
            'gagaouze': 'gagaouze',
            'seniunija': 'seniunija',
            'kanji_name': 'kanjiName',
            'label': 'label',
            'city_since': 'citySince',
            'gnis_code': 'gnisCode',
            'deme': 'deme',
            'first_mention': 'firstMention',
            'localization_thumbnail': 'localizationThumbnail',
            'province_iso_code': 'provinceIsoCode',
            'delegation': 'delegation',
            'human_development_index_ranking_category': 'humanDevelopmentIndexRankingCategory',
            'vice_leader': 'viceLeader',
            'demographics': 'demographics'
        }

        self._city_type = city_type
        self._community_iso_code = community_iso_code
        self._anthem = anthem
        self._nation = nation
        self._arrondissement = arrondissement
        self._agglomeration = agglomeration
        self._french_name = french_name
        self._type = type
        self._moldavian_name = moldavian_name
        self._rank_population = rank_population
        self._previous_demographics = previous_demographics
        self._leader_party = leader_party
        self._police_name = police_name
        self._neighboring_municipality = neighboring_municipality
        self._population_pct_children = population_pct_children
        self._commissioner_date = commissioner_date
        self._population_total_ranking = population_total_ranking
        self._id = id
        self._sharing_out_population = sharing_out_population
        self._demographics_as_of = demographics_as_of
        self._cyrillique_name = cyrillique_name
        self._largest_settlement = largest_settlement
        self._lieutenancy = lieutenancy
        self._catholic_percentage = catholic_percentage
        self._old_district = old_district
        self._area_rural = area_rural
        self._sharing_out_area = sharing_out_area
        self._phone_prefix_name = phone_prefix_name
        self._delegate_mayor = delegate_mayor
        self._sharing_out_population_name = sharing_out_population_name
        self._gross_domestic_product_as_of = gross_domestic_product_as_of
        self._population = population
        self._senior = senior
        self._population_rural = population_rural
        self._number_of_capital_deputies = number_of_capital_deputies
        self._ceremonial_county = ceremonial_county
        self._population_year = population_year
        self._area_total_ranking = area_total_ranking
        self._number_of_federal_deputies = number_of_federal_deputies
        self._scotish_name = scotish_name
        self._leader_name = leader_name
        self._principal_area = principal_area
        self._watercourse = watercourse
        self._metropolitan_borough = metropolitan_borough
        self._per_capita_income_as_of = per_capita_income_as_of
        self._purchasing_power_parity = purchasing_power_parity
        self._barangays = barangays
        self._circle = circle
        self._occitan_name = occitan_name
        self._dissolution_year = dissolution_year
        self._previous_name = previous_name
        self._gross_domestic_product_purchasing_power_parity_per_capita = gross_domestic_product_purchasing_power_parity_per_capita
        self._leader_title = leader_title
        self._foundation = foundation
        self._apskritis = apskritis
        self._ekatte_code = ekatte_code
        self._per_capita_income = per_capita_income
        self._sharing_out_population_year = sharing_out_population_year
        self._foundation_date = foundation_date
        self._life_expectancy = life_expectancy
        self._simc_code = simc_code
        self._agglomeration_demographics = agglomeration_demographics
        self._calabrian_name = calabrian_name
        self._teryt_code = teryt_code
        self._governorate = governorate
        self._smallest_country = smallest_country
        self._council_area = council_area
        self._gross_domestic_product = gross_domestic_product
        self._vice_leader_party = vice_leader_party
        self._localization_thumbnail_caption = localization_thumbnail_caption
        self._saint = saint
        self._gnl = gnl
        self._number_of_municipalities = number_of_municipalities
        self._licence_number = licence_number
        self._unlc_code = unlc_code
        self._sicilian_name = sicilian_name
        self._department_position = department_position
        self._infant_mortality = infant_mortality
        self._gini_coefficient_ranking = gini_coefficient_ranking
        self._population_pct_men = population_pct_men
        self._area_metro = area_metro
        self._number_of_cantons = number_of_cantons
        self._hra_state = hra_state
        self._okato_code = okato_code
        self._disappearance_date = disappearance_date
        self._cca_state = cca_state
        self._protestant_percentage = protestant_percentage
        self._politic_government_department = politic_government_department
        self._ethnic_group = ethnic_group
        self._population_urban_density = population_urban_density
        self._largest_country = largest_country
        self._phone_prefix = phone_prefix
        self._zip_code = zip_code
        self._population_metro = population_metro
        self._capital = capital
        self._italian_name = italian_name
        self._dissolution_date = dissolution_date
        self._status_year = status_year
        self._founding_person = founding_person
        self._postal_code = postal_code
        self._agglomeration_area = agglomeration_area
        self._historical_region = historical_region
        self._international_phone_prefix_label = international_phone_prefix_label
        self._ist = ist
        self._borough = borough
        self._frioulan_name = frioulan_name
        self._gini_coefficient_category = gini_coefficient_category
        self._colonial_name = colonial_name
        self._largest_city = largest_city
        self._sardinian_name = sardinian_name
        self._illiteracy = illiteracy
        self._licence_number_label = licence_number_label
        self._parish = parish
        self._old_name = old_name
        self._arberisht_name = arberisht_name
        self._scots_name = scots_name
        self._term_of_office = term_of_office
        self._population_as_of = population_as_of
        self._emblem = emblem
        self._commissioner = commissioner
        self._number_of_counties = number_of_counties
        self._area = area
        self._sheading = sheading
        self._pluviometry = pluviometry
        self._german_name = german_name
        self._local_phone_prefix = local_phone_prefix
        self._population_pct_women = population_pct_women
        self._old_province = old_province
        self._fips_code = fips_code
        self._nis_code = nis_code
        self._greek_name = greek_name
        self._population_density = population_density
        self._population_rural_density = population_rural_density
        self._area_code = area_code
        self._gross_domestic_product_nominal_per_capita = gross_domestic_product_nominal_per_capita
        self._unitary_authority = unitary_authority
        self._population_metro_density = population_metro_density
        self._previous_population = previous_population
        self._outskirts = outskirts
        self._area_urban = area_urban
        self._gini_coefficient = gini_coefficient
        self._topic = topic
        self._other_name = other_name
        self._regional_language = regional_language
        self._income = income
        self._maori_name = maori_name
        self._population_urban = population_urban
        self._istat = istat
        self._touristic_site = touristic_site
        self._gini_coefficient_as_of = gini_coefficient_as_of
        self._county_seat = county_seat
        self._purchasing_power_parity_year = purchasing_power_parity_year
        self._lieutenancy_area = lieutenancy_area
        self._official_language = official_language
        self._previous_population_total = previous_population_total
        self._people_name = people_name
        self._description = description
        self._number_of_state_deputies = number_of_state_deputies
        self._purchasing_power_parity_rank = purchasing_power_parity_rank
        self._human_development_index = human_development_index
        self._alemmanic_name = alemmanic_name
        self._luxembourgish_name = luxembourgish_name
        self._area_total = area_total
        self._human_development_index_as_of = human_development_index_as_of
        self._census_year = census_year
        self._sharing_out = sharing_out
        self._department = department
        self._administrative_head_city = administrative_head_city
        self._ladin_name = ladin_name
        self._international_phone_prefix = international_phone_prefix
        self._rank_area = rank_area
        self._gagaouze = gagaouze
        self._seniunija = seniunija
        self._kanji_name = kanji_name
        self._label = label
        self._city_since = city_since
        self._gnis_code = gnis_code
        self._deme = deme
        self._first_mention = first_mention
        self._localization_thumbnail = localization_thumbnail
        self._province_iso_code = province_iso_code
        self._delegation = delegation
        self._human_development_index_ranking_category = human_development_index_ranking_category
        self._vice_leader = vice_leader
        self._demographics = demographics

    @classmethod
    def from_dict(cls, dikt) -> 'PopulatedPlace':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PopulatedPlace of this PopulatedPlace.  # noqa: E501
        :rtype: PopulatedPlace
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city_type(self):
        """Gets the city_type of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The city_type of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._city_type

    @city_type.setter
    def city_type(self, city_type):
        """Sets the city_type of this PopulatedPlace.

        Description not available  # noqa: E501

        :param city_type: The city_type of this PopulatedPlace.
        :type city_type: List[str]
        """

        self._city_type = city_type

    @property
    def community_iso_code(self):
        """Gets the community_iso_code of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The community_iso_code of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._community_iso_code

    @community_iso_code.setter
    def community_iso_code(self, community_iso_code):
        """Sets the community_iso_code of this PopulatedPlace.

        Description not available  # noqa: E501

        :param community_iso_code: The community_iso_code of this PopulatedPlace.
        :type community_iso_code: List[str]
        """

        self._community_iso_code = community_iso_code

    @property
    def anthem(self):
        """Gets the anthem of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The anthem of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._anthem

    @anthem.setter
    def anthem(self, anthem):
        """Sets the anthem of this PopulatedPlace.

        Description not available  # noqa: E501

        :param anthem: The anthem of this PopulatedPlace.
        :type anthem: List[object]
        """

        self._anthem = anthem

    @property
    def nation(self):
        """Gets the nation of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The nation of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._nation

    @nation.setter
    def nation(self, nation):
        """Sets the nation of this PopulatedPlace.

        Description not available  # noqa: E501

        :param nation: The nation of this PopulatedPlace.
        :type nation: List[str]
        """

        self._nation = nation

    @property
    def arrondissement(self):
        """Gets the arrondissement of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The arrondissement of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._arrondissement

    @arrondissement.setter
    def arrondissement(self, arrondissement):
        """Sets the arrondissement of this PopulatedPlace.

        Description not available  # noqa: E501

        :param arrondissement: The arrondissement of this PopulatedPlace.
        :type arrondissement: List[object]
        """

        self._arrondissement = arrondissement

    @property
    def agglomeration(self):
        """Gets the agglomeration of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The agglomeration of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._agglomeration

    @agglomeration.setter
    def agglomeration(self, agglomeration):
        """Sets the agglomeration of this PopulatedPlace.

        Description not available  # noqa: E501

        :param agglomeration: The agglomeration of this PopulatedPlace.
        :type agglomeration: List[object]
        """

        self._agglomeration = agglomeration

    @property
    def french_name(self):
        """Gets the french_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The french_name of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._french_name

    @french_name.setter
    def french_name(self, french_name):
        """Sets the french_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :param french_name: The french_name of this PopulatedPlace.
        :type french_name: List[str]
        """

        self._french_name = french_name

    @property
    def type(self):
        """Gets the type of this PopulatedPlace.

        type of the resource  # noqa: E501

        :return: The type of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PopulatedPlace.

        type of the resource  # noqa: E501

        :param type: The type of this PopulatedPlace.
        :type type: List[str]
        """

        self._type = type

    @property
    def moldavian_name(self):
        """Gets the moldavian_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The moldavian_name of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._moldavian_name

    @moldavian_name.setter
    def moldavian_name(self, moldavian_name):
        """Sets the moldavian_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :param moldavian_name: The moldavian_name of this PopulatedPlace.
        :type moldavian_name: List[str]
        """

        self._moldavian_name = moldavian_name

    @property
    def rank_population(self):
        """Gets the rank_population of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The rank_population of this PopulatedPlace.
        :rtype: List[int]
        """
        return self._rank_population

    @rank_population.setter
    def rank_population(self, rank_population):
        """Sets the rank_population of this PopulatedPlace.

        Description not available  # noqa: E501

        :param rank_population: The rank_population of this PopulatedPlace.
        :type rank_population: List[int]
        """

        self._rank_population = rank_population

    @property
    def previous_demographics(self):
        """Gets the previous_demographics of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The previous_demographics of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._previous_demographics

    @previous_demographics.setter
    def previous_demographics(self, previous_demographics):
        """Sets the previous_demographics of this PopulatedPlace.

        Description not available  # noqa: E501

        :param previous_demographics: The previous_demographics of this PopulatedPlace.
        :type previous_demographics: List[object]
        """

        self._previous_demographics = previous_demographics

    @property
    def leader_party(self):
        """Gets the leader_party of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The leader_party of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._leader_party

    @leader_party.setter
    def leader_party(self, leader_party):
        """Sets the leader_party of this PopulatedPlace.

        Description not available  # noqa: E501

        :param leader_party: The leader_party of this PopulatedPlace.
        :type leader_party: List[object]
        """

        self._leader_party = leader_party

    @property
    def police_name(self):
        """Gets the police_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The police_name of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._police_name

    @police_name.setter
    def police_name(self, police_name):
        """Sets the police_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :param police_name: The police_name of this PopulatedPlace.
        :type police_name: List[str]
        """

        self._police_name = police_name

    @property
    def neighboring_municipality(self):
        """Gets the neighboring_municipality of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The neighboring_municipality of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._neighboring_municipality

    @neighboring_municipality.setter
    def neighboring_municipality(self, neighboring_municipality):
        """Sets the neighboring_municipality of this PopulatedPlace.

        Description not available  # noqa: E501

        :param neighboring_municipality: The neighboring_municipality of this PopulatedPlace.
        :type neighboring_municipality: List[object]
        """

        self._neighboring_municipality = neighboring_municipality

    @property
    def population_pct_children(self):
        """Gets the population_pct_children of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The population_pct_children of this PopulatedPlace.
        :rtype: List[int]
        """
        return self._population_pct_children

    @population_pct_children.setter
    def population_pct_children(self, population_pct_children):
        """Sets the population_pct_children of this PopulatedPlace.

        Description not available  # noqa: E501

        :param population_pct_children: The population_pct_children of this PopulatedPlace.
        :type population_pct_children: List[int]
        """

        self._population_pct_children = population_pct_children

    @property
    def commissioner_date(self):
        """Gets the commissioner_date of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The commissioner_date of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._commissioner_date

    @commissioner_date.setter
    def commissioner_date(self, commissioner_date):
        """Sets the commissioner_date of this PopulatedPlace.

        Description not available  # noqa: E501

        :param commissioner_date: The commissioner_date of this PopulatedPlace.
        :type commissioner_date: List[str]
        """

        self._commissioner_date = commissioner_date

    @property
    def population_total_ranking(self):
        """Gets the population_total_ranking of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The population_total_ranking of this PopulatedPlace.
        :rtype: List[int]
        """
        return self._population_total_ranking

    @population_total_ranking.setter
    def population_total_ranking(self, population_total_ranking):
        """Sets the population_total_ranking of this PopulatedPlace.

        Description not available  # noqa: E501

        :param population_total_ranking: The population_total_ranking of this PopulatedPlace.
        :type population_total_ranking: List[int]
        """

        self._population_total_ranking = population_total_ranking

    @property
    def id(self):
        """Gets the id of this PopulatedPlace.

        identifier  # noqa: E501

        :return: The id of this PopulatedPlace.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PopulatedPlace.

        identifier  # noqa: E501

        :param id: The id of this PopulatedPlace.
        :type id: str
        """

        self._id = id

    @property
    def sharing_out_population(self):
        """Gets the sharing_out_population of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The sharing_out_population of this PopulatedPlace.
        :rtype: List[int]
        """
        return self._sharing_out_population

    @sharing_out_population.setter
    def sharing_out_population(self, sharing_out_population):
        """Sets the sharing_out_population of this PopulatedPlace.

        Description not available  # noqa: E501

        :param sharing_out_population: The sharing_out_population of this PopulatedPlace.
        :type sharing_out_population: List[int]
        """

        self._sharing_out_population = sharing_out_population

    @property
    def demographics_as_of(self):
        """Gets the demographics_as_of of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The demographics_as_of of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._demographics_as_of

    @demographics_as_of.setter
    def demographics_as_of(self, demographics_as_of):
        """Sets the demographics_as_of of this PopulatedPlace.

        Description not available  # noqa: E501

        :param demographics_as_of: The demographics_as_of of this PopulatedPlace.
        :type demographics_as_of: List[str]
        """

        self._demographics_as_of = demographics_as_of

    @property
    def cyrillique_name(self):
        """Gets the cyrillique_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The cyrillique_name of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._cyrillique_name

    @cyrillique_name.setter
    def cyrillique_name(self, cyrillique_name):
        """Sets the cyrillique_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :param cyrillique_name: The cyrillique_name of this PopulatedPlace.
        :type cyrillique_name: List[str]
        """

        self._cyrillique_name = cyrillique_name

    @property
    def largest_settlement(self):
        """Gets the largest_settlement of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The largest_settlement of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._largest_settlement

    @largest_settlement.setter
    def largest_settlement(self, largest_settlement):
        """Sets the largest_settlement of this PopulatedPlace.

        Description not available  # noqa: E501

        :param largest_settlement: The largest_settlement of this PopulatedPlace.
        :type largest_settlement: List[object]
        """

        self._largest_settlement = largest_settlement

    @property
    def lieutenancy(self):
        """Gets the lieutenancy of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The lieutenancy of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._lieutenancy

    @lieutenancy.setter
    def lieutenancy(self, lieutenancy):
        """Sets the lieutenancy of this PopulatedPlace.

        Description not available  # noqa: E501

        :param lieutenancy: The lieutenancy of this PopulatedPlace.
        :type lieutenancy: List[str]
        """

        self._lieutenancy = lieutenancy

    @property
    def catholic_percentage(self):
        """Gets the catholic_percentage of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The catholic_percentage of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._catholic_percentage

    @catholic_percentage.setter
    def catholic_percentage(self, catholic_percentage):
        """Sets the catholic_percentage of this PopulatedPlace.

        Description not available  # noqa: E501

        :param catholic_percentage: The catholic_percentage of this PopulatedPlace.
        :type catholic_percentage: List[str]
        """

        self._catholic_percentage = catholic_percentage

    @property
    def old_district(self):
        """Gets the old_district of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The old_district of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._old_district

    @old_district.setter
    def old_district(self, old_district):
        """Sets the old_district of this PopulatedPlace.

        Description not available  # noqa: E501

        :param old_district: The old_district of this PopulatedPlace.
        :type old_district: List[object]
        """

        self._old_district = old_district

    @property
    def area_rural(self):
        """Gets the area_rural of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The area_rural of this PopulatedPlace.
        :rtype: List[float]
        """
        return self._area_rural

    @area_rural.setter
    def area_rural(self, area_rural):
        """Sets the area_rural of this PopulatedPlace.

        Description not available  # noqa: E501

        :param area_rural: The area_rural of this PopulatedPlace.
        :type area_rural: List[float]
        """

        self._area_rural = area_rural

    @property
    def sharing_out_area(self):
        """Gets the sharing_out_area of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The sharing_out_area of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._sharing_out_area

    @sharing_out_area.setter
    def sharing_out_area(self, sharing_out_area):
        """Sets the sharing_out_area of this PopulatedPlace.

        Description not available  # noqa: E501

        :param sharing_out_area: The sharing_out_area of this PopulatedPlace.
        :type sharing_out_area: List[str]
        """

        self._sharing_out_area = sharing_out_area

    @property
    def phone_prefix_name(self):
        """Gets the phone_prefix_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The phone_prefix_name of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._phone_prefix_name

    @phone_prefix_name.setter
    def phone_prefix_name(self, phone_prefix_name):
        """Sets the phone_prefix_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :param phone_prefix_name: The phone_prefix_name of this PopulatedPlace.
        :type phone_prefix_name: List[str]
        """

        self._phone_prefix_name = phone_prefix_name

    @property
    def delegate_mayor(self):
        """Gets the delegate_mayor of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The delegate_mayor of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._delegate_mayor

    @delegate_mayor.setter
    def delegate_mayor(self, delegate_mayor):
        """Sets the delegate_mayor of this PopulatedPlace.

        Description not available  # noqa: E501

        :param delegate_mayor: The delegate_mayor of this PopulatedPlace.
        :type delegate_mayor: List[object]
        """

        self._delegate_mayor = delegate_mayor

    @property
    def sharing_out_population_name(self):
        """Gets the sharing_out_population_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The sharing_out_population_name of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._sharing_out_population_name

    @sharing_out_population_name.setter
    def sharing_out_population_name(self, sharing_out_population_name):
        """Sets the sharing_out_population_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :param sharing_out_population_name: The sharing_out_population_name of this PopulatedPlace.
        :type sharing_out_population_name: List[str]
        """

        self._sharing_out_population_name = sharing_out_population_name

    @property
    def gross_domestic_product_as_of(self):
        """Gets the gross_domestic_product_as_of of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The gross_domestic_product_as_of of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._gross_domestic_product_as_of

    @gross_domestic_product_as_of.setter
    def gross_domestic_product_as_of(self, gross_domestic_product_as_of):
        """Sets the gross_domestic_product_as_of of this PopulatedPlace.

        Description not available  # noqa: E501

        :param gross_domestic_product_as_of: The gross_domestic_product_as_of of this PopulatedPlace.
        :type gross_domestic_product_as_of: List[str]
        """

        self._gross_domestic_product_as_of = gross_domestic_product_as_of

    @property
    def population(self):
        """Gets the population of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The population of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._population

    @population.setter
    def population(self, population):
        """Sets the population of this PopulatedPlace.

        Description not available  # noqa: E501

        :param population: The population of this PopulatedPlace.
        :type population: List[object]
        """

        self._population = population

    @property
    def senior(self):
        """Gets the senior of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The senior of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._senior

    @senior.setter
    def senior(self, senior):
        """Sets the senior of this PopulatedPlace.

        Description not available  # noqa: E501

        :param senior: The senior of this PopulatedPlace.
        :type senior: List[str]
        """

        self._senior = senior

    @property
    def population_rural(self):
        """Gets the population_rural of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The population_rural of this PopulatedPlace.
        :rtype: List[int]
        """
        return self._population_rural

    @population_rural.setter
    def population_rural(self, population_rural):
        """Sets the population_rural of this PopulatedPlace.

        Description not available  # noqa: E501

        :param population_rural: The population_rural of this PopulatedPlace.
        :type population_rural: List[int]
        """

        self._population_rural = population_rural

    @property
    def number_of_capital_deputies(self):
        """Gets the number_of_capital_deputies of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The number_of_capital_deputies of this PopulatedPlace.
        :rtype: List[int]
        """
        return self._number_of_capital_deputies

    @number_of_capital_deputies.setter
    def number_of_capital_deputies(self, number_of_capital_deputies):
        """Sets the number_of_capital_deputies of this PopulatedPlace.

        Description not available  # noqa: E501

        :param number_of_capital_deputies: The number_of_capital_deputies of this PopulatedPlace.
        :type number_of_capital_deputies: List[int]
        """

        self._number_of_capital_deputies = number_of_capital_deputies

    @property
    def ceremonial_county(self):
        """Gets the ceremonial_county of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The ceremonial_county of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._ceremonial_county

    @ceremonial_county.setter
    def ceremonial_county(self, ceremonial_county):
        """Sets the ceremonial_county of this PopulatedPlace.

        Description not available  # noqa: E501

        :param ceremonial_county: The ceremonial_county of this PopulatedPlace.
        :type ceremonial_county: List[object]
        """

        self._ceremonial_county = ceremonial_county

    @property
    def population_year(self):
        """Gets the population_year of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The population_year of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._population_year

    @population_year.setter
    def population_year(self, population_year):
        """Sets the population_year of this PopulatedPlace.

        Description not available  # noqa: E501

        :param population_year: The population_year of this PopulatedPlace.
        :type population_year: List[str]
        """

        self._population_year = population_year

    @property
    def area_total_ranking(self):
        """Gets the area_total_ranking of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The area_total_ranking of this PopulatedPlace.
        :rtype: List[int]
        """
        return self._area_total_ranking

    @area_total_ranking.setter
    def area_total_ranking(self, area_total_ranking):
        """Sets the area_total_ranking of this PopulatedPlace.

        Description not available  # noqa: E501

        :param area_total_ranking: The area_total_ranking of this PopulatedPlace.
        :type area_total_ranking: List[int]
        """

        self._area_total_ranking = area_total_ranking

    @property
    def number_of_federal_deputies(self):
        """Gets the number_of_federal_deputies of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The number_of_federal_deputies of this PopulatedPlace.
        :rtype: List[int]
        """
        return self._number_of_federal_deputies

    @number_of_federal_deputies.setter
    def number_of_federal_deputies(self, number_of_federal_deputies):
        """Sets the number_of_federal_deputies of this PopulatedPlace.

        Description not available  # noqa: E501

        :param number_of_federal_deputies: The number_of_federal_deputies of this PopulatedPlace.
        :type number_of_federal_deputies: List[int]
        """

        self._number_of_federal_deputies = number_of_federal_deputies

    @property
    def scotish_name(self):
        """Gets the scotish_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The scotish_name of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._scotish_name

    @scotish_name.setter
    def scotish_name(self, scotish_name):
        """Sets the scotish_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :param scotish_name: The scotish_name of this PopulatedPlace.
        :type scotish_name: List[str]
        """

        self._scotish_name = scotish_name

    @property
    def leader_name(self):
        """Gets the leader_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The leader_name of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._leader_name

    @leader_name.setter
    def leader_name(self, leader_name):
        """Sets the leader_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :param leader_name: The leader_name of this PopulatedPlace.
        :type leader_name: List[object]
        """

        self._leader_name = leader_name

    @property
    def principal_area(self):
        """Gets the principal_area of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The principal_area of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._principal_area

    @principal_area.setter
    def principal_area(self, principal_area):
        """Sets the principal_area of this PopulatedPlace.

        Description not available  # noqa: E501

        :param principal_area: The principal_area of this PopulatedPlace.
        :type principal_area: List[object]
        """

        self._principal_area = principal_area

    @property
    def watercourse(self):
        """Gets the watercourse of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The watercourse of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._watercourse

    @watercourse.setter
    def watercourse(self, watercourse):
        """Sets the watercourse of this PopulatedPlace.

        Description not available  # noqa: E501

        :param watercourse: The watercourse of this PopulatedPlace.
        :type watercourse: List[str]
        """

        self._watercourse = watercourse

    @property
    def metropolitan_borough(self):
        """Gets the metropolitan_borough of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The metropolitan_borough of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._metropolitan_borough

    @metropolitan_borough.setter
    def metropolitan_borough(self, metropolitan_borough):
        """Sets the metropolitan_borough of this PopulatedPlace.

        Description not available  # noqa: E501

        :param metropolitan_borough: The metropolitan_borough of this PopulatedPlace.
        :type metropolitan_borough: List[object]
        """

        self._metropolitan_borough = metropolitan_borough

    @property
    def per_capita_income_as_of(self):
        """Gets the per_capita_income_as_of of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The per_capita_income_as_of of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._per_capita_income_as_of

    @per_capita_income_as_of.setter
    def per_capita_income_as_of(self, per_capita_income_as_of):
        """Sets the per_capita_income_as_of of this PopulatedPlace.

        Description not available  # noqa: E501

        :param per_capita_income_as_of: The per_capita_income_as_of of this PopulatedPlace.
        :type per_capita_income_as_of: List[str]
        """

        self._per_capita_income_as_of = per_capita_income_as_of

    @property
    def purchasing_power_parity(self):
        """Gets the purchasing_power_parity of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The purchasing_power_parity of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._purchasing_power_parity

    @purchasing_power_parity.setter
    def purchasing_power_parity(self, purchasing_power_parity):
        """Sets the purchasing_power_parity of this PopulatedPlace.

        Description not available  # noqa: E501

        :param purchasing_power_parity: The purchasing_power_parity of this PopulatedPlace.
        :type purchasing_power_parity: List[str]
        """

        self._purchasing_power_parity = purchasing_power_parity

    @property
    def barangays(self):
        """Gets the barangays of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The barangays of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._barangays

    @barangays.setter
    def barangays(self, barangays):
        """Sets the barangays of this PopulatedPlace.

        Description not available  # noqa: E501

        :param barangays: The barangays of this PopulatedPlace.
        :type barangays: List[str]
        """

        self._barangays = barangays

    @property
    def circle(self):
        """Gets the circle of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The circle of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._circle

    @circle.setter
    def circle(self, circle):
        """Sets the circle of this PopulatedPlace.

        Description not available  # noqa: E501

        :param circle: The circle of this PopulatedPlace.
        :type circle: List[str]
        """

        self._circle = circle

    @property
    def occitan_name(self):
        """Gets the occitan_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The occitan_name of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._occitan_name

    @occitan_name.setter
    def occitan_name(self, occitan_name):
        """Sets the occitan_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :param occitan_name: The occitan_name of this PopulatedPlace.
        :type occitan_name: List[str]
        """

        self._occitan_name = occitan_name

    @property
    def dissolution_year(self):
        """Gets the dissolution_year of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The dissolution_year of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._dissolution_year

    @dissolution_year.setter
    def dissolution_year(self, dissolution_year):
        """Sets the dissolution_year of this PopulatedPlace.

        Description not available  # noqa: E501

        :param dissolution_year: The dissolution_year of this PopulatedPlace.
        :type dissolution_year: List[str]
        """

        self._dissolution_year = dissolution_year

    @property
    def previous_name(self):
        """Gets the previous_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The previous_name of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._previous_name

    @previous_name.setter
    def previous_name(self, previous_name):
        """Sets the previous_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :param previous_name: The previous_name of this PopulatedPlace.
        :type previous_name: List[str]
        """

        self._previous_name = previous_name

    @property
    def gross_domestic_product_purchasing_power_parity_per_capita(self):
        """Gets the gross_domestic_product_purchasing_power_parity_per_capita of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The gross_domestic_product_purchasing_power_parity_per_capita of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._gross_domestic_product_purchasing_power_parity_per_capita

    @gross_domestic_product_purchasing_power_parity_per_capita.setter
    def gross_domestic_product_purchasing_power_parity_per_capita(self, gross_domestic_product_purchasing_power_parity_per_capita):
        """Sets the gross_domestic_product_purchasing_power_parity_per_capita of this PopulatedPlace.

        Description not available  # noqa: E501

        :param gross_domestic_product_purchasing_power_parity_per_capita: The gross_domestic_product_purchasing_power_parity_per_capita of this PopulatedPlace.
        :type gross_domestic_product_purchasing_power_parity_per_capita: List[object]
        """

        self._gross_domestic_product_purchasing_power_parity_per_capita = gross_domestic_product_purchasing_power_parity_per_capita

    @property
    def leader_title(self):
        """Gets the leader_title of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The leader_title of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._leader_title

    @leader_title.setter
    def leader_title(self, leader_title):
        """Sets the leader_title of this PopulatedPlace.

        Description not available  # noqa: E501

        :param leader_title: The leader_title of this PopulatedPlace.
        :type leader_title: List[str]
        """

        self._leader_title = leader_title

    @property
    def foundation(self):
        """Gets the foundation of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The foundation of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._foundation

    @foundation.setter
    def foundation(self, foundation):
        """Sets the foundation of this PopulatedPlace.

        Description not available  # noqa: E501

        :param foundation: The foundation of this PopulatedPlace.
        :type foundation: List[str]
        """

        self._foundation = foundation

    @property
    def apskritis(self):
        """Gets the apskritis of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The apskritis of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._apskritis

    @apskritis.setter
    def apskritis(self, apskritis):
        """Sets the apskritis of this PopulatedPlace.

        Description not available  # noqa: E501

        :param apskritis: The apskritis of this PopulatedPlace.
        :type apskritis: List[str]
        """

        self._apskritis = apskritis

    @property
    def ekatte_code(self):
        """Gets the ekatte_code of this PopulatedPlace.

        Indexing code used by the Bulgarian National Statistical Institute to identify populated places  # noqa: E501

        :return: The ekatte_code of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._ekatte_code

    @ekatte_code.setter
    def ekatte_code(self, ekatte_code):
        """Sets the ekatte_code of this PopulatedPlace.

        Indexing code used by the Bulgarian National Statistical Institute to identify populated places  # noqa: E501

        :param ekatte_code: The ekatte_code of this PopulatedPlace.
        :type ekatte_code: List[str]
        """

        self._ekatte_code = ekatte_code

    @property
    def per_capita_income(self):
        """Gets the per_capita_income of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The per_capita_income of this PopulatedPlace.
        :rtype: List[float]
        """
        return self._per_capita_income

    @per_capita_income.setter
    def per_capita_income(self, per_capita_income):
        """Sets the per_capita_income of this PopulatedPlace.

        Description not available  # noqa: E501

        :param per_capita_income: The per_capita_income of this PopulatedPlace.
        :type per_capita_income: List[float]
        """

        self._per_capita_income = per_capita_income

    @property
    def sharing_out_population_year(self):
        """Gets the sharing_out_population_year of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The sharing_out_population_year of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._sharing_out_population_year

    @sharing_out_population_year.setter
    def sharing_out_population_year(self, sharing_out_population_year):
        """Sets the sharing_out_population_year of this PopulatedPlace.

        Description not available  # noqa: E501

        :param sharing_out_population_year: The sharing_out_population_year of this PopulatedPlace.
        :type sharing_out_population_year: List[str]
        """

        self._sharing_out_population_year = sharing_out_population_year

    @property
    def foundation_date(self):
        """Gets the foundation_date of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The foundation_date of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._foundation_date

    @foundation_date.setter
    def foundation_date(self, foundation_date):
        """Sets the foundation_date of this PopulatedPlace.

        Description not available  # noqa: E501

        :param foundation_date: The foundation_date of this PopulatedPlace.
        :type foundation_date: List[str]
        """

        self._foundation_date = foundation_date

    @property
    def life_expectancy(self):
        """Gets the life_expectancy of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The life_expectancy of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._life_expectancy

    @life_expectancy.setter
    def life_expectancy(self, life_expectancy):
        """Sets the life_expectancy of this PopulatedPlace.

        Description not available  # noqa: E501

        :param life_expectancy: The life_expectancy of this PopulatedPlace.
        :type life_expectancy: List[str]
        """

        self._life_expectancy = life_expectancy

    @property
    def simc_code(self):
        """Gets the simc_code of this PopulatedPlace.

        indexing code used by the Polish National Official Register of the Territorial Division of the Country (TERYT) to identify various entities  # noqa: E501

        :return: The simc_code of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._simc_code

    @simc_code.setter
    def simc_code(self, simc_code):
        """Sets the simc_code of this PopulatedPlace.

        indexing code used by the Polish National Official Register of the Territorial Division of the Country (TERYT) to identify various entities  # noqa: E501

        :param simc_code: The simc_code of this PopulatedPlace.
        :type simc_code: List[object]
        """

        self._simc_code = simc_code

    @property
    def agglomeration_demographics(self):
        """Gets the agglomeration_demographics of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The agglomeration_demographics of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._agglomeration_demographics

    @agglomeration_demographics.setter
    def agglomeration_demographics(self, agglomeration_demographics):
        """Sets the agglomeration_demographics of this PopulatedPlace.

        Description not available  # noqa: E501

        :param agglomeration_demographics: The agglomeration_demographics of this PopulatedPlace.
        :type agglomeration_demographics: List[object]
        """

        self._agglomeration_demographics = agglomeration_demographics

    @property
    def calabrian_name(self):
        """Gets the calabrian_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The calabrian_name of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._calabrian_name

    @calabrian_name.setter
    def calabrian_name(self, calabrian_name):
        """Sets the calabrian_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :param calabrian_name: The calabrian_name of this PopulatedPlace.
        :type calabrian_name: List[str]
        """

        self._calabrian_name = calabrian_name

    @property
    def teryt_code(self):
        """Gets the teryt_code of this PopulatedPlace.

        indexing code used by the Polish National Official Register of the Territorial Division of the Country (TERYT) to identify various entities  # noqa: E501

        :return: The teryt_code of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._teryt_code

    @teryt_code.setter
    def teryt_code(self, teryt_code):
        """Sets the teryt_code of this PopulatedPlace.

        indexing code used by the Polish National Official Register of the Territorial Division of the Country (TERYT) to identify various entities  # noqa: E501

        :param teryt_code: The teryt_code of this PopulatedPlace.
        :type teryt_code: List[object]
        """

        self._teryt_code = teryt_code

    @property
    def governorate(self):
        """Gets the governorate of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The governorate of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._governorate

    @governorate.setter
    def governorate(self, governorate):
        """Sets the governorate of this PopulatedPlace.

        Description not available  # noqa: E501

        :param governorate: The governorate of this PopulatedPlace.
        :type governorate: List[str]
        """

        self._governorate = governorate

    @property
    def smallest_country(self):
        """Gets the smallest_country of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The smallest_country of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._smallest_country

    @smallest_country.setter
    def smallest_country(self, smallest_country):
        """Sets the smallest_country of this PopulatedPlace.

        Description not available  # noqa: E501

        :param smallest_country: The smallest_country of this PopulatedPlace.
        :type smallest_country: List[object]
        """

        self._smallest_country = smallest_country

    @property
    def council_area(self):
        """Gets the council_area of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The council_area of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._council_area

    @council_area.setter
    def council_area(self, council_area):
        """Sets the council_area of this PopulatedPlace.

        Description not available  # noqa: E501

        :param council_area: The council_area of this PopulatedPlace.
        :type council_area: List[object]
        """

        self._council_area = council_area

    @property
    def gross_domestic_product(self):
        """Gets the gross_domestic_product of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The gross_domestic_product of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._gross_domestic_product

    @gross_domestic_product.setter
    def gross_domestic_product(self, gross_domestic_product):
        """Sets the gross_domestic_product of this PopulatedPlace.

        Description not available  # noqa: E501

        :param gross_domestic_product: The gross_domestic_product of this PopulatedPlace.
        :type gross_domestic_product: List[object]
        """

        self._gross_domestic_product = gross_domestic_product

    @property
    def vice_leader_party(self):
        """Gets the vice_leader_party of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The vice_leader_party of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._vice_leader_party

    @vice_leader_party.setter
    def vice_leader_party(self, vice_leader_party):
        """Sets the vice_leader_party of this PopulatedPlace.

        Description not available  # noqa: E501

        :param vice_leader_party: The vice_leader_party of this PopulatedPlace.
        :type vice_leader_party: List[object]
        """

        self._vice_leader_party = vice_leader_party

    @property
    def localization_thumbnail_caption(self):
        """Gets the localization_thumbnail_caption of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The localization_thumbnail_caption of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._localization_thumbnail_caption

    @localization_thumbnail_caption.setter
    def localization_thumbnail_caption(self, localization_thumbnail_caption):
        """Sets the localization_thumbnail_caption of this PopulatedPlace.

        Description not available  # noqa: E501

        :param localization_thumbnail_caption: The localization_thumbnail_caption of this PopulatedPlace.
        :type localization_thumbnail_caption: List[str]
        """

        self._localization_thumbnail_caption = localization_thumbnail_caption

    @property
    def saint(self):
        """Gets the saint of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The saint of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._saint

    @saint.setter
    def saint(self, saint):
        """Sets the saint of this PopulatedPlace.

        Description not available  # noqa: E501

        :param saint: The saint of this PopulatedPlace.
        :type saint: List[object]
        """

        self._saint = saint

    @property
    def gnl(self):
        """Gets the gnl of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The gnl of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._gnl

    @gnl.setter
    def gnl(self, gnl):
        """Sets the gnl of this PopulatedPlace.

        Description not available  # noqa: E501

        :param gnl: The gnl of this PopulatedPlace.
        :type gnl: List[str]
        """

        self._gnl = gnl

    @property
    def number_of_municipalities(self):
        """Gets the number_of_municipalities of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The number_of_municipalities of this PopulatedPlace.
        :rtype: List[int]
        """
        return self._number_of_municipalities

    @number_of_municipalities.setter
    def number_of_municipalities(self, number_of_municipalities):
        """Sets the number_of_municipalities of this PopulatedPlace.

        Description not available  # noqa: E501

        :param number_of_municipalities: The number_of_municipalities of this PopulatedPlace.
        :type number_of_municipalities: List[int]
        """

        self._number_of_municipalities = number_of_municipalities

    @property
    def licence_number(self):
        """Gets the licence_number of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The licence_number of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._licence_number

    @licence_number.setter
    def licence_number(self, licence_number):
        """Sets the licence_number of this PopulatedPlace.

        Description not available  # noqa: E501

        :param licence_number: The licence_number of this PopulatedPlace.
        :type licence_number: List[str]
        """

        self._licence_number = licence_number

    @property
    def unlc_code(self):
        """Gets the unlc_code of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The unlc_code of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._unlc_code

    @unlc_code.setter
    def unlc_code(self, unlc_code):
        """Sets the unlc_code of this PopulatedPlace.

        Description not available  # noqa: E501

        :param unlc_code: The unlc_code of this PopulatedPlace.
        :type unlc_code: List[str]
        """

        self._unlc_code = unlc_code

    @property
    def sicilian_name(self):
        """Gets the sicilian_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The sicilian_name of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._sicilian_name

    @sicilian_name.setter
    def sicilian_name(self, sicilian_name):
        """Sets the sicilian_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :param sicilian_name: The sicilian_name of this PopulatedPlace.
        :type sicilian_name: List[str]
        """

        self._sicilian_name = sicilian_name

    @property
    def department_position(self):
        """Gets the department_position of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The department_position of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._department_position

    @department_position.setter
    def department_position(self, department_position):
        """Sets the department_position of this PopulatedPlace.

        Description not available  # noqa: E501

        :param department_position: The department_position of this PopulatedPlace.
        :type department_position: List[str]
        """

        self._department_position = department_position

    @property
    def infant_mortality(self):
        """Gets the infant_mortality of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The infant_mortality of this PopulatedPlace.
        :rtype: List[float]
        """
        return self._infant_mortality

    @infant_mortality.setter
    def infant_mortality(self, infant_mortality):
        """Sets the infant_mortality of this PopulatedPlace.

        Description not available  # noqa: E501

        :param infant_mortality: The infant_mortality of this PopulatedPlace.
        :type infant_mortality: List[float]
        """

        self._infant_mortality = infant_mortality

    @property
    def gini_coefficient_ranking(self):
        """Gets the gini_coefficient_ranking of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The gini_coefficient_ranking of this PopulatedPlace.
        :rtype: List[int]
        """
        return self._gini_coefficient_ranking

    @gini_coefficient_ranking.setter
    def gini_coefficient_ranking(self, gini_coefficient_ranking):
        """Sets the gini_coefficient_ranking of this PopulatedPlace.

        Description not available  # noqa: E501

        :param gini_coefficient_ranking: The gini_coefficient_ranking of this PopulatedPlace.
        :type gini_coefficient_ranking: List[int]
        """

        self._gini_coefficient_ranking = gini_coefficient_ranking

    @property
    def population_pct_men(self):
        """Gets the population_pct_men of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The population_pct_men of this PopulatedPlace.
        :rtype: List[int]
        """
        return self._population_pct_men

    @population_pct_men.setter
    def population_pct_men(self, population_pct_men):
        """Sets the population_pct_men of this PopulatedPlace.

        Description not available  # noqa: E501

        :param population_pct_men: The population_pct_men of this PopulatedPlace.
        :type population_pct_men: List[int]
        """

        self._population_pct_men = population_pct_men

    @property
    def area_metro(self):
        """Gets the area_metro of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The area_metro of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._area_metro

    @area_metro.setter
    def area_metro(self, area_metro):
        """Sets the area_metro of this PopulatedPlace.

        Description not available  # noqa: E501

        :param area_metro: The area_metro of this PopulatedPlace.
        :type area_metro: List[object]
        """

        self._area_metro = area_metro

    @property
    def number_of_cantons(self):
        """Gets the number_of_cantons of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The number_of_cantons of this PopulatedPlace.
        :rtype: List[int]
        """
        return self._number_of_cantons

    @number_of_cantons.setter
    def number_of_cantons(self, number_of_cantons):
        """Sets the number_of_cantons of this PopulatedPlace.

        Description not available  # noqa: E501

        :param number_of_cantons: The number_of_cantons of this PopulatedPlace.
        :type number_of_cantons: List[int]
        """

        self._number_of_cantons = number_of_cantons

    @property
    def hra_state(self):
        """Gets the hra_state of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The hra_state of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._hra_state

    @hra_state.setter
    def hra_state(self, hra_state):
        """Sets the hra_state of this PopulatedPlace.

        Description not available  # noqa: E501

        :param hra_state: The hra_state of this PopulatedPlace.
        :type hra_state: List[str]
        """

        self._hra_state = hra_state

    @property
    def okato_code(self):
        """Gets the okato_code of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The okato_code of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._okato_code

    @okato_code.setter
    def okato_code(self, okato_code):
        """Sets the okato_code of this PopulatedPlace.

        Description not available  # noqa: E501

        :param okato_code: The okato_code of this PopulatedPlace.
        :type okato_code: List[str]
        """

        self._okato_code = okato_code

    @property
    def disappearance_date(self):
        """Gets the disappearance_date of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The disappearance_date of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._disappearance_date

    @disappearance_date.setter
    def disappearance_date(self, disappearance_date):
        """Sets the disappearance_date of this PopulatedPlace.

        Description not available  # noqa: E501

        :param disappearance_date: The disappearance_date of this PopulatedPlace.
        :type disappearance_date: List[str]
        """

        self._disappearance_date = disappearance_date

    @property
    def cca_state(self):
        """Gets the cca_state of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The cca_state of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._cca_state

    @cca_state.setter
    def cca_state(self, cca_state):
        """Sets the cca_state of this PopulatedPlace.

        Description not available  # noqa: E501

        :param cca_state: The cca_state of this PopulatedPlace.
        :type cca_state: List[str]
        """

        self._cca_state = cca_state

    @property
    def protestant_percentage(self):
        """Gets the protestant_percentage of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The protestant_percentage of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._protestant_percentage

    @protestant_percentage.setter
    def protestant_percentage(self, protestant_percentage):
        """Sets the protestant_percentage of this PopulatedPlace.

        Description not available  # noqa: E501

        :param protestant_percentage: The protestant_percentage of this PopulatedPlace.
        :type protestant_percentage: List[str]
        """

        self._protestant_percentage = protestant_percentage

    @property
    def politic_government_department(self):
        """Gets the politic_government_department of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The politic_government_department of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._politic_government_department

    @politic_government_department.setter
    def politic_government_department(self, politic_government_department):
        """Sets the politic_government_department of this PopulatedPlace.

        Description not available  # noqa: E501

        :param politic_government_department: The politic_government_department of this PopulatedPlace.
        :type politic_government_department: List[object]
        """

        self._politic_government_department = politic_government_department

    @property
    def ethnic_group(self):
        """Gets the ethnic_group of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The ethnic_group of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._ethnic_group

    @ethnic_group.setter
    def ethnic_group(self, ethnic_group):
        """Sets the ethnic_group of this PopulatedPlace.

        Description not available  # noqa: E501

        :param ethnic_group: The ethnic_group of this PopulatedPlace.
        :type ethnic_group: List[object]
        """

        self._ethnic_group = ethnic_group

    @property
    def population_urban_density(self):
        """Gets the population_urban_density of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The population_urban_density of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._population_urban_density

    @population_urban_density.setter
    def population_urban_density(self, population_urban_density):
        """Sets the population_urban_density of this PopulatedPlace.

        Description not available  # noqa: E501

        :param population_urban_density: The population_urban_density of this PopulatedPlace.
        :type population_urban_density: List[object]
        """

        self._population_urban_density = population_urban_density

    @property
    def largest_country(self):
        """Gets the largest_country of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The largest_country of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._largest_country

    @largest_country.setter
    def largest_country(self, largest_country):
        """Sets the largest_country of this PopulatedPlace.

        Description not available  # noqa: E501

        :param largest_country: The largest_country of this PopulatedPlace.
        :type largest_country: List[object]
        """

        self._largest_country = largest_country

    @property
    def phone_prefix(self):
        """Gets the phone_prefix of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The phone_prefix of this PopulatedPlace.
        :rtype: List[int]
        """
        return self._phone_prefix

    @phone_prefix.setter
    def phone_prefix(self, phone_prefix):
        """Sets the phone_prefix of this PopulatedPlace.

        Description not available  # noqa: E501

        :param phone_prefix: The phone_prefix of this PopulatedPlace.
        :type phone_prefix: List[int]
        """

        self._phone_prefix = phone_prefix

    @property
    def zip_code(self):
        """Gets the zip_code of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The zip_code of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this PopulatedPlace.

        Description not available  # noqa: E501

        :param zip_code: The zip_code of this PopulatedPlace.
        :type zip_code: List[str]
        """

        self._zip_code = zip_code

    @property
    def population_metro(self):
        """Gets the population_metro of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The population_metro of this PopulatedPlace.
        :rtype: List[int]
        """
        return self._population_metro

    @population_metro.setter
    def population_metro(self, population_metro):
        """Sets the population_metro of this PopulatedPlace.

        Description not available  # noqa: E501

        :param population_metro: The population_metro of this PopulatedPlace.
        :type population_metro: List[int]
        """

        self._population_metro = population_metro

    @property
    def capital(self):
        """Gets the capital of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The capital of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._capital

    @capital.setter
    def capital(self, capital):
        """Sets the capital of this PopulatedPlace.

        Description not available  # noqa: E501

        :param capital: The capital of this PopulatedPlace.
        :type capital: List[object]
        """

        self._capital = capital

    @property
    def italian_name(self):
        """Gets the italian_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The italian_name of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._italian_name

    @italian_name.setter
    def italian_name(self, italian_name):
        """Sets the italian_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :param italian_name: The italian_name of this PopulatedPlace.
        :type italian_name: List[str]
        """

        self._italian_name = italian_name

    @property
    def dissolution_date(self):
        """Gets the dissolution_date of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The dissolution_date of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._dissolution_date

    @dissolution_date.setter
    def dissolution_date(self, dissolution_date):
        """Sets the dissolution_date of this PopulatedPlace.

        Description not available  # noqa: E501

        :param dissolution_date: The dissolution_date of this PopulatedPlace.
        :type dissolution_date: List[str]
        """

        self._dissolution_date = dissolution_date

    @property
    def status_year(self):
        """Gets the status_year of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The status_year of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._status_year

    @status_year.setter
    def status_year(self, status_year):
        """Sets the status_year of this PopulatedPlace.

        Description not available  # noqa: E501

        :param status_year: The status_year of this PopulatedPlace.
        :type status_year: List[str]
        """

        self._status_year = status_year

    @property
    def founding_person(self):
        """Gets the founding_person of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The founding_person of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._founding_person

    @founding_person.setter
    def founding_person(self, founding_person):
        """Sets the founding_person of this PopulatedPlace.

        Description not available  # noqa: E501

        :param founding_person: The founding_person of this PopulatedPlace.
        :type founding_person: List[object]
        """

        self._founding_person = founding_person

    @property
    def postal_code(self):
        """Gets the postal_code of this PopulatedPlace.

        A postal code (known in various countries as a post code, postcode, or ZIP code) is a series of letters and/or digits appended to a postal address for the purpose of sorting mail.  # noqa: E501

        :return: The postal_code of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this PopulatedPlace.

        A postal code (known in various countries as a post code, postcode, or ZIP code) is a series of letters and/or digits appended to a postal address for the purpose of sorting mail.  # noqa: E501

        :param postal_code: The postal_code of this PopulatedPlace.
        :type postal_code: List[str]
        """

        self._postal_code = postal_code

    @property
    def agglomeration_area(self):
        """Gets the agglomeration_area of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The agglomeration_area of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._agglomeration_area

    @agglomeration_area.setter
    def agglomeration_area(self, agglomeration_area):
        """Sets the agglomeration_area of this PopulatedPlace.

        Description not available  # noqa: E501

        :param agglomeration_area: The agglomeration_area of this PopulatedPlace.
        :type agglomeration_area: List[object]
        """

        self._agglomeration_area = agglomeration_area

    @property
    def historical_region(self):
        """Gets the historical_region of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The historical_region of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._historical_region

    @historical_region.setter
    def historical_region(self, historical_region):
        """Sets the historical_region of this PopulatedPlace.

        Description not available  # noqa: E501

        :param historical_region: The historical_region of this PopulatedPlace.
        :type historical_region: List[str]
        """

        self._historical_region = historical_region

    @property
    def international_phone_prefix_label(self):
        """Gets the international_phone_prefix_label of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The international_phone_prefix_label of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._international_phone_prefix_label

    @international_phone_prefix_label.setter
    def international_phone_prefix_label(self, international_phone_prefix_label):
        """Sets the international_phone_prefix_label of this PopulatedPlace.

        Description not available  # noqa: E501

        :param international_phone_prefix_label: The international_phone_prefix_label of this PopulatedPlace.
        :type international_phone_prefix_label: List[str]
        """

        self._international_phone_prefix_label = international_phone_prefix_label

    @property
    def ist(self):
        """Gets the ist of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The ist of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._ist

    @ist.setter
    def ist(self, ist):
        """Sets the ist of this PopulatedPlace.

        Description not available  # noqa: E501

        :param ist: The ist of this PopulatedPlace.
        :type ist: List[str]
        """

        self._ist = ist

    @property
    def borough(self):
        """Gets the borough of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The borough of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._borough

    @borough.setter
    def borough(self, borough):
        """Sets the borough of this PopulatedPlace.

        Description not available  # noqa: E501

        :param borough: The borough of this PopulatedPlace.
        :type borough: List[object]
        """

        self._borough = borough

    @property
    def frioulan_name(self):
        """Gets the frioulan_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The frioulan_name of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._frioulan_name

    @frioulan_name.setter
    def frioulan_name(self, frioulan_name):
        """Sets the frioulan_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :param frioulan_name: The frioulan_name of this PopulatedPlace.
        :type frioulan_name: List[str]
        """

        self._frioulan_name = frioulan_name

    @property
    def gini_coefficient_category(self):
        """Gets the gini_coefficient_category of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The gini_coefficient_category of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._gini_coefficient_category

    @gini_coefficient_category.setter
    def gini_coefficient_category(self, gini_coefficient_category):
        """Sets the gini_coefficient_category of this PopulatedPlace.

        Description not available  # noqa: E501

        :param gini_coefficient_category: The gini_coefficient_category of this PopulatedPlace.
        :type gini_coefficient_category: List[object]
        """

        self._gini_coefficient_category = gini_coefficient_category

    @property
    def colonial_name(self):
        """Gets the colonial_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The colonial_name of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._colonial_name

    @colonial_name.setter
    def colonial_name(self, colonial_name):
        """Sets the colonial_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :param colonial_name: The colonial_name of this PopulatedPlace.
        :type colonial_name: List[str]
        """

        self._colonial_name = colonial_name

    @property
    def largest_city(self):
        """Gets the largest_city of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The largest_city of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._largest_city

    @largest_city.setter
    def largest_city(self, largest_city):
        """Sets the largest_city of this PopulatedPlace.

        Description not available  # noqa: E501

        :param largest_city: The largest_city of this PopulatedPlace.
        :type largest_city: List[object]
        """

        self._largest_city = largest_city

    @property
    def sardinian_name(self):
        """Gets the sardinian_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The sardinian_name of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._sardinian_name

    @sardinian_name.setter
    def sardinian_name(self, sardinian_name):
        """Sets the sardinian_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :param sardinian_name: The sardinian_name of this PopulatedPlace.
        :type sardinian_name: List[str]
        """

        self._sardinian_name = sardinian_name

    @property
    def illiteracy(self):
        """Gets the illiteracy of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The illiteracy of this PopulatedPlace.
        :rtype: List[float]
        """
        return self._illiteracy

    @illiteracy.setter
    def illiteracy(self, illiteracy):
        """Sets the illiteracy of this PopulatedPlace.

        Description not available  # noqa: E501

        :param illiteracy: The illiteracy of this PopulatedPlace.
        :type illiteracy: List[float]
        """

        self._illiteracy = illiteracy

    @property
    def licence_number_label(self):
        """Gets the licence_number_label of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The licence_number_label of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._licence_number_label

    @licence_number_label.setter
    def licence_number_label(self, licence_number_label):
        """Sets the licence_number_label of this PopulatedPlace.

        Description not available  # noqa: E501

        :param licence_number_label: The licence_number_label of this PopulatedPlace.
        :type licence_number_label: List[str]
        """

        self._licence_number_label = licence_number_label

    @property
    def parish(self):
        """Gets the parish of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The parish of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._parish

    @parish.setter
    def parish(self, parish):
        """Sets the parish of this PopulatedPlace.

        Description not available  # noqa: E501

        :param parish: The parish of this PopulatedPlace.
        :type parish: List[object]
        """

        self._parish = parish

    @property
    def old_name(self):
        """Gets the old_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The old_name of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._old_name

    @old_name.setter
    def old_name(self, old_name):
        """Sets the old_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :param old_name: The old_name of this PopulatedPlace.
        :type old_name: List[str]
        """

        self._old_name = old_name

    @property
    def arberisht_name(self):
        """Gets the arberisht_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The arberisht_name of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._arberisht_name

    @arberisht_name.setter
    def arberisht_name(self, arberisht_name):
        """Sets the arberisht_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :param arberisht_name: The arberisht_name of this PopulatedPlace.
        :type arberisht_name: List[str]
        """

        self._arberisht_name = arberisht_name

    @property
    def scots_name(self):
        """Gets the scots_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The scots_name of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._scots_name

    @scots_name.setter
    def scots_name(self, scots_name):
        """Sets the scots_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :param scots_name: The scots_name of this PopulatedPlace.
        :type scots_name: List[str]
        """

        self._scots_name = scots_name

    @property
    def term_of_office(self):
        """Gets the term_of_office of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The term_of_office of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._term_of_office

    @term_of_office.setter
    def term_of_office(self, term_of_office):
        """Sets the term_of_office of this PopulatedPlace.

        Description not available  # noqa: E501

        :param term_of_office: The term_of_office of this PopulatedPlace.
        :type term_of_office: List[str]
        """

        self._term_of_office = term_of_office

    @property
    def population_as_of(self):
        """Gets the population_as_of of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The population_as_of of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._population_as_of

    @population_as_of.setter
    def population_as_of(self, population_as_of):
        """Sets the population_as_of of this PopulatedPlace.

        Description not available  # noqa: E501

        :param population_as_of: The population_as_of of this PopulatedPlace.
        :type population_as_of: List[str]
        """

        self._population_as_of = population_as_of

    @property
    def emblem(self):
        """Gets the emblem of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The emblem of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._emblem

    @emblem.setter
    def emblem(self, emblem):
        """Sets the emblem of this PopulatedPlace.

        Description not available  # noqa: E501

        :param emblem: The emblem of this PopulatedPlace.
        :type emblem: List[str]
        """

        self._emblem = emblem

    @property
    def commissioner(self):
        """Gets the commissioner of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The commissioner of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._commissioner

    @commissioner.setter
    def commissioner(self, commissioner):
        """Sets the commissioner of this PopulatedPlace.

        Description not available  # noqa: E501

        :param commissioner: The commissioner of this PopulatedPlace.
        :type commissioner: List[str]
        """

        self._commissioner = commissioner

    @property
    def number_of_counties(self):
        """Gets the number_of_counties of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The number_of_counties of this PopulatedPlace.
        :rtype: List[int]
        """
        return self._number_of_counties

    @number_of_counties.setter
    def number_of_counties(self, number_of_counties):
        """Sets the number_of_counties of this PopulatedPlace.

        Description not available  # noqa: E501

        :param number_of_counties: The number_of_counties of this PopulatedPlace.
        :type number_of_counties: List[int]
        """

        self._number_of_counties = number_of_counties

    @property
    def area(self):
        """Gets the area of this PopulatedPlace.

        The area of a owl:Thing in square metre.  # noqa: E501

        :return: The area of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this PopulatedPlace.

        The area of a owl:Thing in square metre.  # noqa: E501

        :param area: The area of this PopulatedPlace.
        :type area: List[object]
        """

        self._area = area

    @property
    def sheading(self):
        """Gets the sheading of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The sheading of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._sheading

    @sheading.setter
    def sheading(self, sheading):
        """Sets the sheading of this PopulatedPlace.

        Description not available  # noqa: E501

        :param sheading: The sheading of this PopulatedPlace.
        :type sheading: List[object]
        """

        self._sheading = sheading

    @property
    def pluviometry(self):
        """Gets the pluviometry of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The pluviometry of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._pluviometry

    @pluviometry.setter
    def pluviometry(self, pluviometry):
        """Sets the pluviometry of this PopulatedPlace.

        Description not available  # noqa: E501

        :param pluviometry: The pluviometry of this PopulatedPlace.
        :type pluviometry: List[str]
        """

        self._pluviometry = pluviometry

    @property
    def german_name(self):
        """Gets the german_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The german_name of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._german_name

    @german_name.setter
    def german_name(self, german_name):
        """Sets the german_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :param german_name: The german_name of this PopulatedPlace.
        :type german_name: List[str]
        """

        self._german_name = german_name

    @property
    def local_phone_prefix(self):
        """Gets the local_phone_prefix of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The local_phone_prefix of this PopulatedPlace.
        :rtype: List[int]
        """
        return self._local_phone_prefix

    @local_phone_prefix.setter
    def local_phone_prefix(self, local_phone_prefix):
        """Sets the local_phone_prefix of this PopulatedPlace.

        Description not available  # noqa: E501

        :param local_phone_prefix: The local_phone_prefix of this PopulatedPlace.
        :type local_phone_prefix: List[int]
        """

        self._local_phone_prefix = local_phone_prefix

    @property
    def population_pct_women(self):
        """Gets the population_pct_women of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The population_pct_women of this PopulatedPlace.
        :rtype: List[int]
        """
        return self._population_pct_women

    @population_pct_women.setter
    def population_pct_women(self, population_pct_women):
        """Sets the population_pct_women of this PopulatedPlace.

        Description not available  # noqa: E501

        :param population_pct_women: The population_pct_women of this PopulatedPlace.
        :type population_pct_women: List[int]
        """

        self._population_pct_women = population_pct_women

    @property
    def old_province(self):
        """Gets the old_province of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The old_province of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._old_province

    @old_province.setter
    def old_province(self, old_province):
        """Sets the old_province of this PopulatedPlace.

        Description not available  # noqa: E501

        :param old_province: The old_province of this PopulatedPlace.
        :type old_province: List[object]
        """

        self._old_province = old_province

    @property
    def fips_code(self):
        """Gets the fips_code of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The fips_code of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._fips_code

    @fips_code.setter
    def fips_code(self, fips_code):
        """Sets the fips_code of this PopulatedPlace.

        Description not available  # noqa: E501

        :param fips_code: The fips_code of this PopulatedPlace.
        :type fips_code: List[str]
        """

        self._fips_code = fips_code

    @property
    def nis_code(self):
        """Gets the nis_code of this PopulatedPlace.

        Indexing code used by the Belgium National Statistical Institute to identify populated places.  # noqa: E501

        :return: The nis_code of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._nis_code

    @nis_code.setter
    def nis_code(self, nis_code):
        """Sets the nis_code of this PopulatedPlace.

        Indexing code used by the Belgium National Statistical Institute to identify populated places.  # noqa: E501

        :param nis_code: The nis_code of this PopulatedPlace.
        :type nis_code: List[object]
        """

        self._nis_code = nis_code

    @property
    def greek_name(self):
        """Gets the greek_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The greek_name of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._greek_name

    @greek_name.setter
    def greek_name(self, greek_name):
        """Sets the greek_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :param greek_name: The greek_name of this PopulatedPlace.
        :type greek_name: List[str]
        """

        self._greek_name = greek_name

    @property
    def population_density(self):
        """Gets the population_density of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The population_density of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._population_density

    @population_density.setter
    def population_density(self, population_density):
        """Sets the population_density of this PopulatedPlace.

        Description not available  # noqa: E501

        :param population_density: The population_density of this PopulatedPlace.
        :type population_density: List[object]
        """

        self._population_density = population_density

    @property
    def population_rural_density(self):
        """Gets the population_rural_density of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The population_rural_density of this PopulatedPlace.
        :rtype: List[float]
        """
        return self._population_rural_density

    @population_rural_density.setter
    def population_rural_density(self, population_rural_density):
        """Sets the population_rural_density of this PopulatedPlace.

        Description not available  # noqa: E501

        :param population_rural_density: The population_rural_density of this PopulatedPlace.
        :type population_rural_density: List[float]
        """

        self._population_rural_density = population_rural_density

    @property
    def area_code(self):
        """Gets the area_code of this PopulatedPlace.

        Area code for telephone numbers.  # noqa: E501

        :return: The area_code of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._area_code

    @area_code.setter
    def area_code(self, area_code):
        """Sets the area_code of this PopulatedPlace.

        Area code for telephone numbers.  # noqa: E501

        :param area_code: The area_code of this PopulatedPlace.
        :type area_code: List[str]
        """

        self._area_code = area_code

    @property
    def gross_domestic_product_nominal_per_capita(self):
        """Gets the gross_domestic_product_nominal_per_capita of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The gross_domestic_product_nominal_per_capita of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._gross_domestic_product_nominal_per_capita

    @gross_domestic_product_nominal_per_capita.setter
    def gross_domestic_product_nominal_per_capita(self, gross_domestic_product_nominal_per_capita):
        """Sets the gross_domestic_product_nominal_per_capita of this PopulatedPlace.

        Description not available  # noqa: E501

        :param gross_domestic_product_nominal_per_capita: The gross_domestic_product_nominal_per_capita of this PopulatedPlace.
        :type gross_domestic_product_nominal_per_capita: List[object]
        """

        self._gross_domestic_product_nominal_per_capita = gross_domestic_product_nominal_per_capita

    @property
    def unitary_authority(self):
        """Gets the unitary_authority of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The unitary_authority of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._unitary_authority

    @unitary_authority.setter
    def unitary_authority(self, unitary_authority):
        """Sets the unitary_authority of this PopulatedPlace.

        Description not available  # noqa: E501

        :param unitary_authority: The unitary_authority of this PopulatedPlace.
        :type unitary_authority: List[object]
        """

        self._unitary_authority = unitary_authority

    @property
    def population_metro_density(self):
        """Gets the population_metro_density of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The population_metro_density of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._population_metro_density

    @population_metro_density.setter
    def population_metro_density(self, population_metro_density):
        """Sets the population_metro_density of this PopulatedPlace.

        Description not available  # noqa: E501

        :param population_metro_density: The population_metro_density of this PopulatedPlace.
        :type population_metro_density: List[object]
        """

        self._population_metro_density = population_metro_density

    @property
    def previous_population(self):
        """Gets the previous_population of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The previous_population of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._previous_population

    @previous_population.setter
    def previous_population(self, previous_population):
        """Sets the previous_population of this PopulatedPlace.

        Description not available  # noqa: E501

        :param previous_population: The previous_population of this PopulatedPlace.
        :type previous_population: List[object]
        """

        self._previous_population = previous_population

    @property
    def outskirts(self):
        """Gets the outskirts of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The outskirts of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._outskirts

    @outskirts.setter
    def outskirts(self, outskirts):
        """Sets the outskirts of this PopulatedPlace.

        Description not available  # noqa: E501

        :param outskirts: The outskirts of this PopulatedPlace.
        :type outskirts: List[str]
        """

        self._outskirts = outskirts

    @property
    def area_urban(self):
        """Gets the area_urban of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The area_urban of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._area_urban

    @area_urban.setter
    def area_urban(self, area_urban):
        """Sets the area_urban of this PopulatedPlace.

        Description not available  # noqa: E501

        :param area_urban: The area_urban of this PopulatedPlace.
        :type area_urban: List[object]
        """

        self._area_urban = area_urban

    @property
    def gini_coefficient(self):
        """Gets the gini_coefficient of this PopulatedPlace.

        is a measure of the inequality of a distribution. It is commonly used as a measure of inequality of income or wealth.  # noqa: E501

        :return: The gini_coefficient of this PopulatedPlace.
        :rtype: List[float]
        """
        return self._gini_coefficient

    @gini_coefficient.setter
    def gini_coefficient(self, gini_coefficient):
        """Sets the gini_coefficient of this PopulatedPlace.

        is a measure of the inequality of a distribution. It is commonly used as a measure of inequality of income or wealth.  # noqa: E501

        :param gini_coefficient: The gini_coefficient of this PopulatedPlace.
        :type gini_coefficient: List[float]
        """

        self._gini_coefficient = gini_coefficient

    @property
    def topic(self):
        """Gets the topic of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The topic of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this PopulatedPlace.

        Description not available  # noqa: E501

        :param topic: The topic of this PopulatedPlace.
        :type topic: List[str]
        """

        self._topic = topic

    @property
    def other_name(self):
        """Gets the other_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The other_name of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._other_name

    @other_name.setter
    def other_name(self, other_name):
        """Sets the other_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :param other_name: The other_name of this PopulatedPlace.
        :type other_name: List[str]
        """

        self._other_name = other_name

    @property
    def regional_language(self):
        """Gets the regional_language of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The regional_language of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._regional_language

    @regional_language.setter
    def regional_language(self, regional_language):
        """Sets the regional_language of this PopulatedPlace.

        Description not available  # noqa: E501

        :param regional_language: The regional_language of this PopulatedPlace.
        :type regional_language: List[object]
        """

        self._regional_language = regional_language

    @property
    def income(self):
        """Gets the income of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The income of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._income

    @income.setter
    def income(self, income):
        """Sets the income of this PopulatedPlace.

        Description not available  # noqa: E501

        :param income: The income of this PopulatedPlace.
        :type income: List[str]
        """

        self._income = income

    @property
    def maori_name(self):
        """Gets the maori_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The maori_name of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._maori_name

    @maori_name.setter
    def maori_name(self, maori_name):
        """Sets the maori_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :param maori_name: The maori_name of this PopulatedPlace.
        :type maori_name: List[str]
        """

        self._maori_name = maori_name

    @property
    def population_urban(self):
        """Gets the population_urban of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The population_urban of this PopulatedPlace.
        :rtype: List[int]
        """
        return self._population_urban

    @population_urban.setter
    def population_urban(self, population_urban):
        """Sets the population_urban of this PopulatedPlace.

        Description not available  # noqa: E501

        :param population_urban: The population_urban of this PopulatedPlace.
        :type population_urban: List[int]
        """

        self._population_urban = population_urban

    @property
    def istat(self):
        """Gets the istat of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The istat of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._istat

    @istat.setter
    def istat(self, istat):
        """Sets the istat of this PopulatedPlace.

        Description not available  # noqa: E501

        :param istat: The istat of this PopulatedPlace.
        :type istat: List[str]
        """

        self._istat = istat

    @property
    def touristic_site(self):
        """Gets the touristic_site of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The touristic_site of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._touristic_site

    @touristic_site.setter
    def touristic_site(self, touristic_site):
        """Sets the touristic_site of this PopulatedPlace.

        Description not available  # noqa: E501

        :param touristic_site: The touristic_site of this PopulatedPlace.
        :type touristic_site: List[object]
        """

        self._touristic_site = touristic_site

    @property
    def gini_coefficient_as_of(self):
        """Gets the gini_coefficient_as_of of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The gini_coefficient_as_of of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._gini_coefficient_as_of

    @gini_coefficient_as_of.setter
    def gini_coefficient_as_of(self, gini_coefficient_as_of):
        """Sets the gini_coefficient_as_of of this PopulatedPlace.

        Description not available  # noqa: E501

        :param gini_coefficient_as_of: The gini_coefficient_as_of of this PopulatedPlace.
        :type gini_coefficient_as_of: List[str]
        """

        self._gini_coefficient_as_of = gini_coefficient_as_of

    @property
    def county_seat(self):
        """Gets the county_seat of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The county_seat of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._county_seat

    @county_seat.setter
    def county_seat(self, county_seat):
        """Sets the county_seat of this PopulatedPlace.

        Description not available  # noqa: E501

        :param county_seat: The county_seat of this PopulatedPlace.
        :type county_seat: List[object]
        """

        self._county_seat = county_seat

    @property
    def purchasing_power_parity_year(self):
        """Gets the purchasing_power_parity_year of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The purchasing_power_parity_year of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._purchasing_power_parity_year

    @purchasing_power_parity_year.setter
    def purchasing_power_parity_year(self, purchasing_power_parity_year):
        """Sets the purchasing_power_parity_year of this PopulatedPlace.

        Description not available  # noqa: E501

        :param purchasing_power_parity_year: The purchasing_power_parity_year of this PopulatedPlace.
        :type purchasing_power_parity_year: List[str]
        """

        self._purchasing_power_parity_year = purchasing_power_parity_year

    @property
    def lieutenancy_area(self):
        """Gets the lieutenancy_area of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The lieutenancy_area of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._lieutenancy_area

    @lieutenancy_area.setter
    def lieutenancy_area(self, lieutenancy_area):
        """Sets the lieutenancy_area of this PopulatedPlace.

        Description not available  # noqa: E501

        :param lieutenancy_area: The lieutenancy_area of this PopulatedPlace.
        :type lieutenancy_area: List[object]
        """

        self._lieutenancy_area = lieutenancy_area

    @property
    def official_language(self):
        """Gets the official_language of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The official_language of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._official_language

    @official_language.setter
    def official_language(self, official_language):
        """Sets the official_language of this PopulatedPlace.

        Description not available  # noqa: E501

        :param official_language: The official_language of this PopulatedPlace.
        :type official_language: List[object]
        """

        self._official_language = official_language

    @property
    def previous_population_total(self):
        """Gets the previous_population_total of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The previous_population_total of this PopulatedPlace.
        :rtype: List[int]
        """
        return self._previous_population_total

    @previous_population_total.setter
    def previous_population_total(self, previous_population_total):
        """Sets the previous_population_total of this PopulatedPlace.

        Description not available  # noqa: E501

        :param previous_population_total: The previous_population_total of this PopulatedPlace.
        :type previous_population_total: List[int]
        """

        self._previous_population_total = previous_population_total

    @property
    def people_name(self):
        """Gets the people_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The people_name of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._people_name

    @people_name.setter
    def people_name(self, people_name):
        """Sets the people_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :param people_name: The people_name of this PopulatedPlace.
        :type people_name: List[str]
        """

        self._people_name = people_name

    @property
    def description(self):
        """Gets the description of this PopulatedPlace.

        small description  # noqa: E501

        :return: The description of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PopulatedPlace.

        small description  # noqa: E501

        :param description: The description of this PopulatedPlace.
        :type description: List[str]
        """

        self._description = description

    @property
    def number_of_state_deputies(self):
        """Gets the number_of_state_deputies of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The number_of_state_deputies of this PopulatedPlace.
        :rtype: List[int]
        """
        return self._number_of_state_deputies

    @number_of_state_deputies.setter
    def number_of_state_deputies(self, number_of_state_deputies):
        """Sets the number_of_state_deputies of this PopulatedPlace.

        Description not available  # noqa: E501

        :param number_of_state_deputies: The number_of_state_deputies of this PopulatedPlace.
        :type number_of_state_deputies: List[int]
        """

        self._number_of_state_deputies = number_of_state_deputies

    @property
    def purchasing_power_parity_rank(self):
        """Gets the purchasing_power_parity_rank of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The purchasing_power_parity_rank of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._purchasing_power_parity_rank

    @purchasing_power_parity_rank.setter
    def purchasing_power_parity_rank(self, purchasing_power_parity_rank):
        """Sets the purchasing_power_parity_rank of this PopulatedPlace.

        Description not available  # noqa: E501

        :param purchasing_power_parity_rank: The purchasing_power_parity_rank of this PopulatedPlace.
        :type purchasing_power_parity_rank: List[str]
        """

        self._purchasing_power_parity_rank = purchasing_power_parity_rank

    @property
    def human_development_index(self):
        """Gets the human_development_index of this PopulatedPlace.

        a composite statistic used to rank countries by level of \"human development\"  # noqa: E501

        :return: The human_development_index of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._human_development_index

    @human_development_index.setter
    def human_development_index(self, human_development_index):
        """Sets the human_development_index of this PopulatedPlace.

        a composite statistic used to rank countries by level of \"human development\"  # noqa: E501

        :param human_development_index: The human_development_index of this PopulatedPlace.
        :type human_development_index: List[object]
        """

        self._human_development_index = human_development_index

    @property
    def alemmanic_name(self):
        """Gets the alemmanic_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The alemmanic_name of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._alemmanic_name

    @alemmanic_name.setter
    def alemmanic_name(self, alemmanic_name):
        """Sets the alemmanic_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :param alemmanic_name: The alemmanic_name of this PopulatedPlace.
        :type alemmanic_name: List[str]
        """

        self._alemmanic_name = alemmanic_name

    @property
    def luxembourgish_name(self):
        """Gets the luxembourgish_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The luxembourgish_name of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._luxembourgish_name

    @luxembourgish_name.setter
    def luxembourgish_name(self, luxembourgish_name):
        """Sets the luxembourgish_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :param luxembourgish_name: The luxembourgish_name of this PopulatedPlace.
        :type luxembourgish_name: List[str]
        """

        self._luxembourgish_name = luxembourgish_name

    @property
    def area_total(self):
        """Gets the area_total of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The area_total of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._area_total

    @area_total.setter
    def area_total(self, area_total):
        """Sets the area_total of this PopulatedPlace.

        Description not available  # noqa: E501

        :param area_total: The area_total of this PopulatedPlace.
        :type area_total: List[object]
        """

        self._area_total = area_total

    @property
    def human_development_index_as_of(self):
        """Gets the human_development_index_as_of of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The human_development_index_as_of of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._human_development_index_as_of

    @human_development_index_as_of.setter
    def human_development_index_as_of(self, human_development_index_as_of):
        """Sets the human_development_index_as_of of this PopulatedPlace.

        Description not available  # noqa: E501

        :param human_development_index_as_of: The human_development_index_as_of of this PopulatedPlace.
        :type human_development_index_as_of: List[str]
        """

        self._human_development_index_as_of = human_development_index_as_of

    @property
    def census_year(self):
        """Gets the census_year of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The census_year of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._census_year

    @census_year.setter
    def census_year(self, census_year):
        """Sets the census_year of this PopulatedPlace.

        Description not available  # noqa: E501

        :param census_year: The census_year of this PopulatedPlace.
        :type census_year: List[str]
        """

        self._census_year = census_year

    @property
    def sharing_out(self):
        """Gets the sharing_out of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The sharing_out of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._sharing_out

    @sharing_out.setter
    def sharing_out(self, sharing_out):
        """Sets the sharing_out of this PopulatedPlace.

        Description not available  # noqa: E501

        :param sharing_out: The sharing_out of this PopulatedPlace.
        :type sharing_out: List[str]
        """

        self._sharing_out = sharing_out

    @property
    def department(self):
        """Gets the department of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The department of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this PopulatedPlace.

        Description not available  # noqa: E501

        :param department: The department of this PopulatedPlace.
        :type department: List[object]
        """

        self._department = department

    @property
    def administrative_head_city(self):
        """Gets the administrative_head_city of this PopulatedPlace.

        city where stand the administrative power  # noqa: E501

        :return: The administrative_head_city of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._administrative_head_city

    @administrative_head_city.setter
    def administrative_head_city(self, administrative_head_city):
        """Sets the administrative_head_city of this PopulatedPlace.

        city where stand the administrative power  # noqa: E501

        :param administrative_head_city: The administrative_head_city of this PopulatedPlace.
        :type administrative_head_city: List[object]
        """

        self._administrative_head_city = administrative_head_city

    @property
    def ladin_name(self):
        """Gets the ladin_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The ladin_name of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._ladin_name

    @ladin_name.setter
    def ladin_name(self, ladin_name):
        """Sets the ladin_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :param ladin_name: The ladin_name of this PopulatedPlace.
        :type ladin_name: List[str]
        """

        self._ladin_name = ladin_name

    @property
    def international_phone_prefix(self):
        """Gets the international_phone_prefix of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The international_phone_prefix of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._international_phone_prefix

    @international_phone_prefix.setter
    def international_phone_prefix(self, international_phone_prefix):
        """Sets the international_phone_prefix of this PopulatedPlace.

        Description not available  # noqa: E501

        :param international_phone_prefix: The international_phone_prefix of this PopulatedPlace.
        :type international_phone_prefix: List[str]
        """

        self._international_phone_prefix = international_phone_prefix

    @property
    def rank_area(self):
        """Gets the rank_area of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The rank_area of this PopulatedPlace.
        :rtype: List[int]
        """
        return self._rank_area

    @rank_area.setter
    def rank_area(self, rank_area):
        """Sets the rank_area of this PopulatedPlace.

        Description not available  # noqa: E501

        :param rank_area: The rank_area of this PopulatedPlace.
        :type rank_area: List[int]
        """

        self._rank_area = rank_area

    @property
    def gagaouze(self):
        """Gets the gagaouze of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The gagaouze of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._gagaouze

    @gagaouze.setter
    def gagaouze(self, gagaouze):
        """Sets the gagaouze of this PopulatedPlace.

        Description not available  # noqa: E501

        :param gagaouze: The gagaouze of this PopulatedPlace.
        :type gagaouze: List[str]
        """

        self._gagaouze = gagaouze

    @property
    def seniunija(self):
        """Gets the seniunija of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The seniunija of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._seniunija

    @seniunija.setter
    def seniunija(self, seniunija):
        """Sets the seniunija of this PopulatedPlace.

        Description not available  # noqa: E501

        :param seniunija: The seniunija of this PopulatedPlace.
        :type seniunija: List[str]
        """

        self._seniunija = seniunija

    @property
    def kanji_name(self):
        """Gets the kanji_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The kanji_name of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._kanji_name

    @kanji_name.setter
    def kanji_name(self, kanji_name):
        """Sets the kanji_name of this PopulatedPlace.

        Description not available  # noqa: E501

        :param kanji_name: The kanji_name of this PopulatedPlace.
        :type kanji_name: List[str]
        """

        self._kanji_name = kanji_name

    @property
    def label(self):
        """Gets the label of this PopulatedPlace.

        short description of the resource  # noqa: E501

        :return: The label of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this PopulatedPlace.

        short description of the resource  # noqa: E501

        :param label: The label of this PopulatedPlace.
        :type label: List[str]
        """

        self._label = label

    @property
    def city_since(self):
        """Gets the city_since of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The city_since of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._city_since

    @city_since.setter
    def city_since(self, city_since):
        """Sets the city_since of this PopulatedPlace.

        Description not available  # noqa: E501

        :param city_since: The city_since of this PopulatedPlace.
        :type city_since: List[str]
        """

        self._city_since = city_since

    @property
    def gnis_code(self):
        """Gets the gnis_code of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The gnis_code of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._gnis_code

    @gnis_code.setter
    def gnis_code(self, gnis_code):
        """Sets the gnis_code of this PopulatedPlace.

        Description not available  # noqa: E501

        :param gnis_code: The gnis_code of this PopulatedPlace.
        :type gnis_code: List[str]
        """

        self._gnis_code = gnis_code

    @property
    def deme(self):
        """Gets the deme of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The deme of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._deme

    @deme.setter
    def deme(self, deme):
        """Sets the deme of this PopulatedPlace.

        Description not available  # noqa: E501

        :param deme: The deme of this PopulatedPlace.
        :type deme: List[str]
        """

        self._deme = deme

    @property
    def first_mention(self):
        """Gets the first_mention of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The first_mention of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._first_mention

    @first_mention.setter
    def first_mention(self, first_mention):
        """Sets the first_mention of this PopulatedPlace.

        Description not available  # noqa: E501

        :param first_mention: The first_mention of this PopulatedPlace.
        :type first_mention: List[str]
        """

        self._first_mention = first_mention

    @property
    def localization_thumbnail(self):
        """Gets the localization_thumbnail of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The localization_thumbnail of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._localization_thumbnail

    @localization_thumbnail.setter
    def localization_thumbnail(self, localization_thumbnail):
        """Sets the localization_thumbnail of this PopulatedPlace.

        Description not available  # noqa: E501

        :param localization_thumbnail: The localization_thumbnail of this PopulatedPlace.
        :type localization_thumbnail: List[object]
        """

        self._localization_thumbnail = localization_thumbnail

    @property
    def province_iso_code(self):
        """Gets the province_iso_code of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The province_iso_code of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._province_iso_code

    @province_iso_code.setter
    def province_iso_code(self, province_iso_code):
        """Sets the province_iso_code of this PopulatedPlace.

        Description not available  # noqa: E501

        :param province_iso_code: The province_iso_code of this PopulatedPlace.
        :type province_iso_code: List[str]
        """

        self._province_iso_code = province_iso_code

    @property
    def delegation(self):
        """Gets the delegation of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The delegation of this PopulatedPlace.
        :rtype: List[str]
        """
        return self._delegation

    @delegation.setter
    def delegation(self, delegation):
        """Sets the delegation of this PopulatedPlace.

        Description not available  # noqa: E501

        :param delegation: The delegation of this PopulatedPlace.
        :type delegation: List[str]
        """

        self._delegation = delegation

    @property
    def human_development_index_ranking_category(self):
        """Gets the human_development_index_ranking_category of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The human_development_index_ranking_category of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._human_development_index_ranking_category

    @human_development_index_ranking_category.setter
    def human_development_index_ranking_category(self, human_development_index_ranking_category):
        """Sets the human_development_index_ranking_category of this PopulatedPlace.

        Description not available  # noqa: E501

        :param human_development_index_ranking_category: The human_development_index_ranking_category of this PopulatedPlace.
        :type human_development_index_ranking_category: List[object]
        """

        self._human_development_index_ranking_category = human_development_index_ranking_category

    @property
    def vice_leader(self):
        """Gets the vice_leader of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The vice_leader of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._vice_leader

    @vice_leader.setter
    def vice_leader(self, vice_leader):
        """Sets the vice_leader of this PopulatedPlace.

        Description not available  # noqa: E501

        :param vice_leader: The vice_leader of this PopulatedPlace.
        :type vice_leader: List[object]
        """

        self._vice_leader = vice_leader

    @property
    def demographics(self):
        """Gets the demographics of this PopulatedPlace.

        Description not available  # noqa: E501

        :return: The demographics of this PopulatedPlace.
        :rtype: List[object]
        """
        return self._demographics

    @demographics.setter
    def demographics(self, demographics):
        """Sets the demographics of this PopulatedPlace.

        Description not available  # noqa: E501

        :param demographics: The demographics of this PopulatedPlace.
        :type demographics: List[object]
        """

        self._demographics = demographics
