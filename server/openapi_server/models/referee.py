# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Referee(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, parent=None, viaf_id=None, competition_title=None, art_patron=None, hair_colour=None, tv_show=None, expedition=None, main_domain=None, nndb_id=None, discipline=None, consecration=None, salary=None, birth_name=None, spouse=None, scene=None, best_lap=None, shoe_number=None, friend=None, full_score=None, diploma=None, active_years_end_year_mgr=None, abbeychurch_blessing=None, height=None, usopen_wins=None, bust_size=None, cloth_size=None, handedness=None, philosophical_school=None, parliamentary_group=None, date_of_burial=None, mount=None, olympic_games_silver=None, nationality=None, junior_years_start_year=None, relative=None, newspaper=None, announced_from=None, military_branch=None, activity=None, ethnicity=None, state_of_origin=None, pole_position=None, season_manager=None, killed_by=None, blood_type=None, continental_tournament=None, junior_years_end_year=None, political_function=None, honours=None, olympic_games=None, hair_color=None, foot=None, measurements=None, hand=None, federation=None, circumcised=None, penis_length=None, coemperor=None, detractor=None, selibr_id=None, danse_competition=None, sex=None, sexual_orientation=None, partner=None, birth_year=None, sports_function=None, orcid_id=None, election_date=None, sport_discipline=None, collaboration=None, national_team_year=None, number_of_run=None, spouse_name=None, lah_hof=None, derived_word=None, current_team_manager=None, little_pool_record=None, bpn_id=None, free_danse_score=None, project=None, active_years=None, title_date=None, blood_group=None, school=None, death_place=None, victory_percentage_as_mgr=None, imposed_danse_competition=None, shoot=None, education_place=None, match_point=None, reign_name=None, pro_period=None, influenced_by=None, nla_id=None, cousurper=None, race_wins=None, world_tournament_bronze=None, jutsu=None, weight=None, other_media=None, alma_mater=None, imposed_danse_score=None, known_for=None, big_pool_record=None, olympic_games_wins=None, eye_colour=None, world_tournament_silver=None, architectural_movement=None, mood=None, bibsys_id=None, iihf_hof=None, free_prog_score=None, description=None, particular_sign=None, league_manager=None, junior_season=None, free_prog_competition=None, weapon=None, kind_of_criminal=None, notable_idea=None, player_status=None, other_function=None, continental_tournament_silver=None, career_station=None, resting_place_position=None, original_danse_competition=None, status_manager=None, national_tournament=None, hometown=None, dead_in_fight_place=None, continental_tournament_bronze=None, victory=None, complexion=None, citizenship=None, start=None, tessitura=None, start_career=None, label=None, birth_date=None, national_tournament_silver=None, other_activity=None, linguistics_tradition=None, national_tournament_bronze=None, escalafon=None, sibling=None, waist_size=None, olympic_games_gold=None, general_council=None, arrest_date=None, team_manager=None, birth_sign=None, artistic_function=None, age=None, college=None, education=None, movie=None, achievement=None, death_age=None, type=None, approach=None, relation=None, victory_as_mgr=None, living_place=None, copilote=None, season=None, start_wct=None, catch=None, id=None, feat=None, decoration=None, case=None, sentence=None, profession=None, retirement_date=None, world_tournament=None, wife=None, allegiance=None, active_years_start_date_mgr=None, lccn_id=None, tattoo=None, british_wins=None, hip_size=None, podium=None, seiyu=None, player_season=None, short_prog_score=None, regional_council=None, homage=None, shoe_size=None, signature=None, olympic_games_bronze=None, danse_score=None, id_number=None, short_prog_competition=None, active_years_start_year_mgr=None, wedding_parents_date=None, birth_place=None, world=None, astrological_sign=None, eye_color=None, networth=None, coalition=None, national_team_match_point=None, national_selection=None, agency=None, start_wqs=None, defeat_as_mgr=None, death_year=None, world_tournament_gold=None, pga_wins=None, board=None, rid_id=None, dead_in_fight_date=None, related_functions=None, manager_season=None, reign=None, second=None, radio=None, full_competition=None, free_score_competition=None, publication=None, opponent=None, employer=None, affair=None, body_discovered=None, buried_place=None, residence=None, usurper=None, other_occupation=None, contest=None, active_years_end_date_mgr=None, created=None, original_danse_score=None, end_career=None, note_on_resting_place=None, army=None, active_year=None, person_function=None, pro_since=None, cause_of_death=None, dubber=None, non_professional_career=None, military_function=None, patent=None, creation_christian_bishop=None, piercing=None, student=None, bad_guy=None, influenced=None, start_reign=None, university=None, gym_apparatus=None, ideology=None, conviction_date=None, media=None, bnf_id=None, pseudonym=None, temple_year=None, clothing_size=None, speciality=None, award=None, kind_of_criminal_action=None, isni_id=None, significant_project=None, leadership=None, death_date=None, special_trial=None, resting_date=None, victim=None, has_natural_bust=None, masters_wins=None, individualised_pnd=None, continental_tournament_gold=None, orientation=None, grave=None, resting_place=None, abbeychurch_blessing_charge=None, handisport=None, external_ornament=None, third=None, film_number=None, temple=None, end_reign=None, national_tournament_gold=None, death_cause=None):  # noqa: E501
        """Referee - a model defined in OpenAPI

        :param parent: The parent of this Referee.  # noqa: E501
        :type parent: List[object]
        :param viaf_id: The viaf_id of this Referee.  # noqa: E501
        :type viaf_id: List[str]
        :param competition_title: The competition_title of this Referee.  # noqa: E501
        :type competition_title: List[object]
        :param art_patron: The art_patron of this Referee.  # noqa: E501
        :type art_patron: List[object]
        :param hair_colour: The hair_colour of this Referee.  # noqa: E501
        :type hair_colour: List[str]
        :param tv_show: The tv_show of this Referee.  # noqa: E501
        :type tv_show: List[object]
        :param expedition: The expedition of this Referee.  # noqa: E501
        :type expedition: List[str]
        :param main_domain: The main_domain of this Referee.  # noqa: E501
        :type main_domain: List[object]
        :param nndb_id: The nndb_id of this Referee.  # noqa: E501
        :type nndb_id: List[str]
        :param discipline: The discipline of this Referee.  # noqa: E501
        :type discipline: List[object]
        :param consecration: The consecration of this Referee.  # noqa: E501
        :type consecration: List[str]
        :param salary: The salary of this Referee.  # noqa: E501
        :type salary: List[float]
        :param birth_name: The birth_name of this Referee.  # noqa: E501
        :type birth_name: List[str]
        :param spouse: The spouse of this Referee.  # noqa: E501
        :type spouse: List[object]
        :param scene: The scene of this Referee.  # noqa: E501
        :type scene: List[str]
        :param best_lap: The best_lap of this Referee.  # noqa: E501
        :type best_lap: List[str]
        :param shoe_number: The shoe_number of this Referee.  # noqa: E501
        :type shoe_number: List[int]
        :param friend: The friend of this Referee.  # noqa: E501
        :type friend: List[object]
        :param full_score: The full_score of this Referee.  # noqa: E501
        :type full_score: List[str]
        :param diploma: The diploma of this Referee.  # noqa: E501
        :type diploma: List[object]
        :param active_years_end_year_mgr: The active_years_end_year_mgr of this Referee.  # noqa: E501
        :type active_years_end_year_mgr: List[str]
        :param abbeychurch_blessing: The abbeychurch_blessing of this Referee.  # noqa: E501
        :type abbeychurch_blessing: List[str]
        :param height: The height of this Referee.  # noqa: E501
        :type height: List[object]
        :param usopen_wins: The usopen_wins of this Referee.  # noqa: E501
        :type usopen_wins: List[object]
        :param bust_size: The bust_size of this Referee.  # noqa: E501
        :type bust_size: List[float]
        :param cloth_size: The cloth_size of this Referee.  # noqa: E501
        :type cloth_size: List[str]
        :param handedness: The handedness of this Referee.  # noqa: E501
        :type handedness: List[object]
        :param philosophical_school: The philosophical_school of this Referee.  # noqa: E501
        :type philosophical_school: List[object]
        :param parliamentary_group: The parliamentary_group of this Referee.  # noqa: E501
        :type parliamentary_group: List[str]
        :param date_of_burial: The date_of_burial of this Referee.  # noqa: E501
        :type date_of_burial: List[str]
        :param mount: The mount of this Referee.  # noqa: E501
        :type mount: List[str]
        :param olympic_games_silver: The olympic_games_silver of this Referee.  # noqa: E501
        :type olympic_games_silver: List[int]
        :param nationality: The nationality of this Referee.  # noqa: E501
        :type nationality: List[object]
        :param junior_years_start_year: The junior_years_start_year of this Referee.  # noqa: E501
        :type junior_years_start_year: List[str]
        :param relative: The relative of this Referee.  # noqa: E501
        :type relative: List[object]
        :param newspaper: The newspaper of this Referee.  # noqa: E501
        :type newspaper: List[object]
        :param announced_from: The announced_from of this Referee.  # noqa: E501
        :type announced_from: List[object]
        :param military_branch: The military_branch of this Referee.  # noqa: E501
        :type military_branch: List[object]
        :param activity: The activity of this Referee.  # noqa: E501
        :type activity: List[object]
        :param ethnicity: The ethnicity of this Referee.  # noqa: E501
        :type ethnicity: List[object]
        :param state_of_origin: The state_of_origin of this Referee.  # noqa: E501
        :type state_of_origin: List[object]
        :param pole_position: The pole_position of this Referee.  # noqa: E501
        :type pole_position: List[int]
        :param season_manager: The season_manager of this Referee.  # noqa: E501
        :type season_manager: List[str]
        :param killed_by: The killed_by of this Referee.  # noqa: E501
        :type killed_by: List[str]
        :param blood_type: The blood_type of this Referee.  # noqa: E501
        :type blood_type: List[object]
        :param continental_tournament: The continental_tournament of this Referee.  # noqa: E501
        :type continental_tournament: List[object]
        :param junior_years_end_year: The junior_years_end_year of this Referee.  # noqa: E501
        :type junior_years_end_year: List[str]
        :param political_function: The political_function of this Referee.  # noqa: E501
        :type political_function: List[str]
        :param honours: The honours of this Referee.  # noqa: E501
        :type honours: List[object]
        :param olympic_games: The olympic_games of this Referee.  # noqa: E501
        :type olympic_games: List[object]
        :param hair_color: The hair_color of this Referee.  # noqa: E501
        :type hair_color: List[object]
        :param foot: The foot of this Referee.  # noqa: E501
        :type foot: List[str]
        :param measurements: The measurements of this Referee.  # noqa: E501
        :type measurements: List[str]
        :param hand: The hand of this Referee.  # noqa: E501
        :type hand: List[object]
        :param federation: The federation of this Referee.  # noqa: E501
        :type federation: List[object]
        :param circumcised: The circumcised of this Referee.  # noqa: E501
        :type circumcised: List[str]
        :param penis_length: The penis_length of this Referee.  # noqa: E501
        :type penis_length: List[str]
        :param coemperor: The coemperor of this Referee.  # noqa: E501
        :type coemperor: List[object]
        :param detractor: The detractor of this Referee.  # noqa: E501
        :type detractor: List[object]
        :param selibr_id: The selibr_id of this Referee.  # noqa: E501
        :type selibr_id: List[str]
        :param danse_competition: The danse_competition of this Referee.  # noqa: E501
        :type danse_competition: List[str]
        :param sex: The sex of this Referee.  # noqa: E501
        :type sex: List[str]
        :param sexual_orientation: The sexual_orientation of this Referee.  # noqa: E501
        :type sexual_orientation: List[object]
        :param partner: The partner of this Referee.  # noqa: E501
        :type partner: List[object]
        :param birth_year: The birth_year of this Referee.  # noqa: E501
        :type birth_year: List[str]
        :param sports_function: The sports_function of this Referee.  # noqa: E501
        :type sports_function: List[str]
        :param orcid_id: The orcid_id of this Referee.  # noqa: E501
        :type orcid_id: List[str]
        :param election_date: The election_date of this Referee.  # noqa: E501
        :type election_date: List[str]
        :param sport_discipline: The sport_discipline of this Referee.  # noqa: E501
        :type sport_discipline: List[object]
        :param collaboration: The collaboration of this Referee.  # noqa: E501
        :type collaboration: List[object]
        :param national_team_year: The national_team_year of this Referee.  # noqa: E501
        :type national_team_year: List[str]
        :param number_of_run: The number_of_run of this Referee.  # noqa: E501
        :type number_of_run: List[int]
        :param spouse_name: The spouse_name of this Referee.  # noqa: E501
        :type spouse_name: List[str]
        :param lah_hof: The lah_hof of this Referee.  # noqa: E501
        :type lah_hof: List[str]
        :param derived_word: The derived_word of this Referee.  # noqa: E501
        :type derived_word: List[str]
        :param current_team_manager: The current_team_manager of this Referee.  # noqa: E501
        :type current_team_manager: List[object]
        :param little_pool_record: The little_pool_record of this Referee.  # noqa: E501
        :type little_pool_record: List[str]
        :param bpn_id: The bpn_id of this Referee.  # noqa: E501
        :type bpn_id: List[str]
        :param free_danse_score: The free_danse_score of this Referee.  # noqa: E501
        :type free_danse_score: List[str]
        :param project: The project of this Referee.  # noqa: E501
        :type project: List[object]
        :param active_years: The active_years of this Referee.  # noqa: E501
        :type active_years: List[object]
        :param title_date: The title_date of this Referee.  # noqa: E501
        :type title_date: List[str]
        :param blood_group: The blood_group of this Referee.  # noqa: E501
        :type blood_group: List[str]
        :param school: The school of this Referee.  # noqa: E501
        :type school: List[object]
        :param death_place: The death_place of this Referee.  # noqa: E501
        :type death_place: List[object]
        :param victory_percentage_as_mgr: The victory_percentage_as_mgr of this Referee.  # noqa: E501
        :type victory_percentage_as_mgr: List[float]
        :param imposed_danse_competition: The imposed_danse_competition of this Referee.  # noqa: E501
        :type imposed_danse_competition: List[str]
        :param shoot: The shoot of this Referee.  # noqa: E501
        :type shoot: List[str]
        :param education_place: The education_place of this Referee.  # noqa: E501
        :type education_place: List[object]
        :param match_point: The match_point of this Referee.  # noqa: E501
        :type match_point: List[str]
        :param reign_name: The reign_name of this Referee.  # noqa: E501
        :type reign_name: List[str]
        :param pro_period: The pro_period of this Referee.  # noqa: E501
        :type pro_period: List[str]
        :param influenced_by: The influenced_by of this Referee.  # noqa: E501
        :type influenced_by: List[object]
        :param nla_id: The nla_id of this Referee.  # noqa: E501
        :type nla_id: List[str]
        :param cousurper: The cousurper of this Referee.  # noqa: E501
        :type cousurper: List[object]
        :param race_wins: The race_wins of this Referee.  # noqa: E501
        :type race_wins: List[int]
        :param world_tournament_bronze: The world_tournament_bronze of this Referee.  # noqa: E501
        :type world_tournament_bronze: List[int]
        :param jutsu: The jutsu of this Referee.  # noqa: E501
        :type jutsu: List[str]
        :param weight: The weight of this Referee.  # noqa: E501
        :type weight: List[object]
        :param other_media: The other_media of this Referee.  # noqa: E501
        :type other_media: List[object]
        :param alma_mater: The alma_mater of this Referee.  # noqa: E501
        :type alma_mater: List[object]
        :param imposed_danse_score: The imposed_danse_score of this Referee.  # noqa: E501
        :type imposed_danse_score: List[str]
        :param known_for: The known_for of this Referee.  # noqa: E501
        :type known_for: List[object]
        :param big_pool_record: The big_pool_record of this Referee.  # noqa: E501
        :type big_pool_record: List[str]
        :param olympic_games_wins: The olympic_games_wins of this Referee.  # noqa: E501
        :type olympic_games_wins: List[str]
        :param eye_colour: The eye_colour of this Referee.  # noqa: E501
        :type eye_colour: List[str]
        :param world_tournament_silver: The world_tournament_silver of this Referee.  # noqa: E501
        :type world_tournament_silver: List[int]
        :param architectural_movement: The architectural_movement of this Referee.  # noqa: E501
        :type architectural_movement: List[str]
        :param mood: The mood of this Referee.  # noqa: E501
        :type mood: List[str]
        :param bibsys_id: The bibsys_id of this Referee.  # noqa: E501
        :type bibsys_id: List[str]
        :param iihf_hof: The iihf_hof of this Referee.  # noqa: E501
        :type iihf_hof: List[str]
        :param free_prog_score: The free_prog_score of this Referee.  # noqa: E501
        :type free_prog_score: List[str]
        :param description: The description of this Referee.  # noqa: E501
        :type description: List[str]
        :param particular_sign: The particular_sign of this Referee.  # noqa: E501
        :type particular_sign: List[str]
        :param league_manager: The league_manager of this Referee.  # noqa: E501
        :type league_manager: List[object]
        :param junior_season: The junior_season of this Referee.  # noqa: E501
        :type junior_season: List[object]
        :param free_prog_competition: The free_prog_competition of this Referee.  # noqa: E501
        :type free_prog_competition: List[str]
        :param weapon: The weapon of this Referee.  # noqa: E501
        :type weapon: List[object]
        :param kind_of_criminal: The kind_of_criminal of this Referee.  # noqa: E501
        :type kind_of_criminal: List[str]
        :param notable_idea: The notable_idea of this Referee.  # noqa: E501
        :type notable_idea: List[object]
        :param player_status: The player_status of this Referee.  # noqa: E501
        :type player_status: List[str]
        :param other_function: The other_function of this Referee.  # noqa: E501
        :type other_function: List[object]
        :param continental_tournament_silver: The continental_tournament_silver of this Referee.  # noqa: E501
        :type continental_tournament_silver: List[int]
        :param career_station: The career_station of this Referee.  # noqa: E501
        :type career_station: List[object]
        :param resting_place_position: The resting_place_position of this Referee.  # noqa: E501
        :type resting_place_position: List[object]
        :param original_danse_competition: The original_danse_competition of this Referee.  # noqa: E501
        :type original_danse_competition: List[str]
        :param status_manager: The status_manager of this Referee.  # noqa: E501
        :type status_manager: List[str]
        :param national_tournament: The national_tournament of this Referee.  # noqa: E501
        :type national_tournament: List[object]
        :param hometown: The hometown of this Referee.  # noqa: E501
        :type hometown: List[object]
        :param dead_in_fight_place: The dead_in_fight_place of this Referee.  # noqa: E501
        :type dead_in_fight_place: List[str]
        :param continental_tournament_bronze: The continental_tournament_bronze of this Referee.  # noqa: E501
        :type continental_tournament_bronze: List[int]
        :param victory: The victory of this Referee.  # noqa: E501
        :type victory: List[int]
        :param complexion: The complexion of this Referee.  # noqa: E501
        :type complexion: List[object]
        :param citizenship: The citizenship of this Referee.  # noqa: E501
        :type citizenship: List[object]
        :param start: The start of this Referee.  # noqa: E501
        :type start: List[int]
        :param tessitura: The tessitura of this Referee.  # noqa: E501
        :type tessitura: List[str]
        :param start_career: The start_career of this Referee.  # noqa: E501
        :type start_career: List[str]
        :param label: The label of this Referee.  # noqa: E501
        :type label: List[str]
        :param birth_date: The birth_date of this Referee.  # noqa: E501
        :type birth_date: List[str]
        :param national_tournament_silver: The national_tournament_silver of this Referee.  # noqa: E501
        :type national_tournament_silver: List[int]
        :param other_activity: The other_activity of this Referee.  # noqa: E501
        :type other_activity: List[str]
        :param linguistics_tradition: The linguistics_tradition of this Referee.  # noqa: E501
        :type linguistics_tradition: List[object]
        :param national_tournament_bronze: The national_tournament_bronze of this Referee.  # noqa: E501
        :type national_tournament_bronze: List[int]
        :param escalafon: The escalafon of this Referee.  # noqa: E501
        :type escalafon: List[str]
        :param sibling: The sibling of this Referee.  # noqa: E501
        :type sibling: List[object]
        :param waist_size: The waist_size of this Referee.  # noqa: E501
        :type waist_size: List[float]
        :param olympic_games_gold: The olympic_games_gold of this Referee.  # noqa: E501
        :type olympic_games_gold: List[int]
        :param general_council: The general_council of this Referee.  # noqa: E501
        :type general_council: List[object]
        :param arrest_date: The arrest_date of this Referee.  # noqa: E501
        :type arrest_date: List[str]
        :param team_manager: The team_manager of this Referee.  # noqa: E501
        :type team_manager: List[object]
        :param birth_sign: The birth_sign of this Referee.  # noqa: E501
        :type birth_sign: List[object]
        :param artistic_function: The artistic_function of this Referee.  # noqa: E501
        :type artistic_function: List[str]
        :param age: The age of this Referee.  # noqa: E501
        :type age: List[int]
        :param college: The college of this Referee.  # noqa: E501
        :type college: List[object]
        :param education: The education of this Referee.  # noqa: E501
        :type education: List[object]
        :param movie: The movie of this Referee.  # noqa: E501
        :type movie: List[object]
        :param achievement: The achievement of this Referee.  # noqa: E501
        :type achievement: List[object]
        :param death_age: The death_age of this Referee.  # noqa: E501
        :type death_age: List[int]
        :param type: The type of this Referee.  # noqa: E501
        :type type: List[str]
        :param approach: The approach of this Referee.  # noqa: E501
        :type approach: List[object]
        :param relation: The relation of this Referee.  # noqa: E501
        :type relation: List[object]
        :param victory_as_mgr: The victory_as_mgr of this Referee.  # noqa: E501
        :type victory_as_mgr: List[int]
        :param living_place: The living_place of this Referee.  # noqa: E501
        :type living_place: List[object]
        :param copilote: The copilote of this Referee.  # noqa: E501
        :type copilote: List[object]
        :param season: The season of this Referee.  # noqa: E501
        :type season: List[object]
        :param start_wct: The start_wct of this Referee.  # noqa: E501
        :type start_wct: List[str]
        :param catch: The catch of this Referee.  # noqa: E501
        :type catch: List[str]
        :param id: The id of this Referee.  # noqa: E501
        :type id: str
        :param feat: The feat of this Referee.  # noqa: E501
        :type feat: List[str]
        :param decoration: The decoration of this Referee.  # noqa: E501
        :type decoration: List[object]
        :param case: The case of this Referee.  # noqa: E501
        :type case: List[str]
        :param sentence: The sentence of this Referee.  # noqa: E501
        :type sentence: List[str]
        :param profession: The profession of this Referee.  # noqa: E501
        :type profession: List[object]
        :param retirement_date: The retirement_date of this Referee.  # noqa: E501
        :type retirement_date: List[str]
        :param world_tournament: The world_tournament of this Referee.  # noqa: E501
        :type world_tournament: List[object]
        :param wife: The wife of this Referee.  # noqa: E501
        :type wife: List[object]
        :param allegiance: The allegiance of this Referee.  # noqa: E501
        :type allegiance: List[str]
        :param active_years_start_date_mgr: The active_years_start_date_mgr of this Referee.  # noqa: E501
        :type active_years_start_date_mgr: List[str]
        :param lccn_id: The lccn_id of this Referee.  # noqa: E501
        :type lccn_id: List[str]
        :param tattoo: The tattoo of this Referee.  # noqa: E501
        :type tattoo: List[str]
        :param british_wins: The british_wins of this Referee.  # noqa: E501
        :type british_wins: List[object]
        :param hip_size: The hip_size of this Referee.  # noqa: E501
        :type hip_size: List[float]
        :param podium: The podium of this Referee.  # noqa: E501
        :type podium: List[int]
        :param seiyu: The seiyu of this Referee.  # noqa: E501
        :type seiyu: List[object]
        :param player_season: The player_season of this Referee.  # noqa: E501
        :type player_season: List[object]
        :param short_prog_score: The short_prog_score of this Referee.  # noqa: E501
        :type short_prog_score: List[str]
        :param regional_council: The regional_council of this Referee.  # noqa: E501
        :type regional_council: List[object]
        :param homage: The homage of this Referee.  # noqa: E501
        :type homage: List[str]
        :param shoe_size: The shoe_size of this Referee.  # noqa: E501
        :type shoe_size: List[str]
        :param signature: The signature of this Referee.  # noqa: E501
        :type signature: List[str]
        :param olympic_games_bronze: The olympic_games_bronze of this Referee.  # noqa: E501
        :type olympic_games_bronze: List[int]
        :param danse_score: The danse_score of this Referee.  # noqa: E501
        :type danse_score: List[str]
        :param id_number: The id_number of this Referee.  # noqa: E501
        :type id_number: List[int]
        :param short_prog_competition: The short_prog_competition of this Referee.  # noqa: E501
        :type short_prog_competition: List[str]
        :param active_years_start_year_mgr: The active_years_start_year_mgr of this Referee.  # noqa: E501
        :type active_years_start_year_mgr: List[str]
        :param wedding_parents_date: The wedding_parents_date of this Referee.  # noqa: E501
        :type wedding_parents_date: List[str]
        :param birth_place: The birth_place of this Referee.  # noqa: E501
        :type birth_place: List[object]
        :param world: The world of this Referee.  # noqa: E501
        :type world: List[object]
        :param astrological_sign: The astrological_sign of this Referee.  # noqa: E501
        :type astrological_sign: List[object]
        :param eye_color: The eye_color of this Referee.  # noqa: E501
        :type eye_color: List[object]
        :param networth: The networth of this Referee.  # noqa: E501
        :type networth: List[float]
        :param coalition: The coalition of this Referee.  # noqa: E501
        :type coalition: List[str]
        :param national_team_match_point: The national_team_match_point of this Referee.  # noqa: E501
        :type national_team_match_point: List[str]
        :param national_selection: The national_selection of this Referee.  # noqa: E501
        :type national_selection: List[object]
        :param agency: The agency of this Referee.  # noqa: E501
        :type agency: List[object]
        :param start_wqs: The start_wqs of this Referee.  # noqa: E501
        :type start_wqs: List[str]
        :param defeat_as_mgr: The defeat_as_mgr of this Referee.  # noqa: E501
        :type defeat_as_mgr: List[int]
        :param death_year: The death_year of this Referee.  # noqa: E501
        :type death_year: List[str]
        :param world_tournament_gold: The world_tournament_gold of this Referee.  # noqa: E501
        :type world_tournament_gold: List[int]
        :param pga_wins: The pga_wins of this Referee.  # noqa: E501
        :type pga_wins: List[object]
        :param board: The board of this Referee.  # noqa: E501
        :type board: List[object]
        :param rid_id: The rid_id of this Referee.  # noqa: E501
        :type rid_id: List[str]
        :param dead_in_fight_date: The dead_in_fight_date of this Referee.  # noqa: E501
        :type dead_in_fight_date: List[str]
        :param related_functions: The related_functions of this Referee.  # noqa: E501
        :type related_functions: List[object]
        :param manager_season: The manager_season of this Referee.  # noqa: E501
        :type manager_season: List[object]
        :param reign: The reign of this Referee.  # noqa: E501
        :type reign: List[str]
        :param second: The second of this Referee.  # noqa: E501
        :type second: List[int]
        :param radio: The radio of this Referee.  # noqa: E501
        :type radio: List[object]
        :param full_competition: The full_competition of this Referee.  # noqa: E501
        :type full_competition: List[str]
        :param free_score_competition: The free_score_competition of this Referee.  # noqa: E501
        :type free_score_competition: List[str]
        :param publication: The publication of this Referee.  # noqa: E501
        :type publication: List[str]
        :param opponent: The opponent of this Referee.  # noqa: E501
        :type opponent: List[object]
        :param employer: The employer of this Referee.  # noqa: E501
        :type employer: List[object]
        :param affair: The affair of this Referee.  # noqa: E501
        :type affair: List[str]
        :param body_discovered: The body_discovered of this Referee.  # noqa: E501
        :type body_discovered: List[object]
        :param buried_place: The buried_place of this Referee.  # noqa: E501
        :type buried_place: List[object]
        :param residence: The residence of this Referee.  # noqa: E501
        :type residence: List[object]
        :param usurper: The usurper of this Referee.  # noqa: E501
        :type usurper: List[object]
        :param other_occupation: The other_occupation of this Referee.  # noqa: E501
        :type other_occupation: List[object]
        :param contest: The contest of this Referee.  # noqa: E501
        :type contest: List[object]
        :param active_years_end_date_mgr: The active_years_end_date_mgr of this Referee.  # noqa: E501
        :type active_years_end_date_mgr: List[str]
        :param created: The created of this Referee.  # noqa: E501
        :type created: List[object]
        :param original_danse_score: The original_danse_score of this Referee.  # noqa: E501
        :type original_danse_score: List[str]
        :param end_career: The end_career of this Referee.  # noqa: E501
        :type end_career: List[str]
        :param note_on_resting_place: The note_on_resting_place of this Referee.  # noqa: E501
        :type note_on_resting_place: List[str]
        :param army: The army of this Referee.  # noqa: E501
        :type army: List[str]
        :param active_year: The active_year of this Referee.  # noqa: E501
        :type active_year: List[str]
        :param person_function: The person_function of this Referee.  # noqa: E501
        :type person_function: List[object]
        :param pro_since: The pro_since of this Referee.  # noqa: E501
        :type pro_since: List[str]
        :param cause_of_death: The cause_of_death of this Referee.  # noqa: E501
        :type cause_of_death: List[str]
        :param dubber: The dubber of this Referee.  # noqa: E501
        :type dubber: List[object]
        :param non_professional_career: The non_professional_career of this Referee.  # noqa: E501
        :type non_professional_career: List[str]
        :param military_function: The military_function of this Referee.  # noqa: E501
        :type military_function: List[str]
        :param patent: The patent of this Referee.  # noqa: E501
        :type patent: List[object]
        :param creation_christian_bishop: The creation_christian_bishop of this Referee.  # noqa: E501
        :type creation_christian_bishop: List[str]
        :param piercing: The piercing of this Referee.  # noqa: E501
        :type piercing: List[str]
        :param student: The student of this Referee.  # noqa: E501
        :type student: List[object]
        :param bad_guy: The bad_guy of this Referee.  # noqa: E501
        :type bad_guy: List[str]
        :param influenced: The influenced of this Referee.  # noqa: E501
        :type influenced: List[object]
        :param start_reign: The start_reign of this Referee.  # noqa: E501
        :type start_reign: List[object]
        :param university: The university of this Referee.  # noqa: E501
        :type university: List[object]
        :param gym_apparatus: The gym_apparatus of this Referee.  # noqa: E501
        :type gym_apparatus: List[object]
        :param ideology: The ideology of this Referee.  # noqa: E501
        :type ideology: List[object]
        :param conviction_date: The conviction_date of this Referee.  # noqa: E501
        :type conviction_date: List[str]
        :param media: The media of this Referee.  # noqa: E501
        :type media: List[object]
        :param bnf_id: The bnf_id of this Referee.  # noqa: E501
        :type bnf_id: List[str]
        :param pseudonym: The pseudonym of this Referee.  # noqa: E501
        :type pseudonym: List[str]
        :param temple_year: The temple_year of this Referee.  # noqa: E501
        :type temple_year: List[str]
        :param clothing_size: The clothing_size of this Referee.  # noqa: E501
        :type clothing_size: List[str]
        :param speciality: The speciality of this Referee.  # noqa: E501
        :type speciality: List[str]
        :param award: The award of this Referee.  # noqa: E501
        :type award: List[object]
        :param kind_of_criminal_action: The kind_of_criminal_action of this Referee.  # noqa: E501
        :type kind_of_criminal_action: List[str]
        :param isni_id: The isni_id of this Referee.  # noqa: E501
        :type isni_id: List[str]
        :param significant_project: The significant_project of this Referee.  # noqa: E501
        :type significant_project: List[object]
        :param leadership: The leadership of this Referee.  # noqa: E501
        :type leadership: List[str]
        :param death_date: The death_date of this Referee.  # noqa: E501
        :type death_date: List[str]
        :param special_trial: The special_trial of this Referee.  # noqa: E501
        :type special_trial: List[int]
        :param resting_date: The resting_date of this Referee.  # noqa: E501
        :type resting_date: List[str]
        :param victim: The victim of this Referee.  # noqa: E501
        :type victim: List[str]
        :param has_natural_bust: The has_natural_bust of this Referee.  # noqa: E501
        :type has_natural_bust: List[str]
        :param masters_wins: The masters_wins of this Referee.  # noqa: E501
        :type masters_wins: List[object]
        :param individualised_pnd: The individualised_pnd of this Referee.  # noqa: E501
        :type individualised_pnd: List[int]
        :param continental_tournament_gold: The continental_tournament_gold of this Referee.  # noqa: E501
        :type continental_tournament_gold: List[int]
        :param orientation: The orientation of this Referee.  # noqa: E501
        :type orientation: List[str]
        :param grave: The grave of this Referee.  # noqa: E501
        :type grave: List[str]
        :param resting_place: The resting_place of this Referee.  # noqa: E501
        :type resting_place: List[object]
        :param abbeychurch_blessing_charge: The abbeychurch_blessing_charge of this Referee.  # noqa: E501
        :type abbeychurch_blessing_charge: List[str]
        :param handisport: The handisport of this Referee.  # noqa: E501
        :type handisport: List[str]
        :param external_ornament: The external_ornament of this Referee.  # noqa: E501
        :type external_ornament: List[str]
        :param third: The third of this Referee.  # noqa: E501
        :type third: List[int]
        :param film_number: The film_number of this Referee.  # noqa: E501
        :type film_number: List[int]
        :param temple: The temple of this Referee.  # noqa: E501
        :type temple: List[str]
        :param end_reign: The end_reign of this Referee.  # noqa: E501
        :type end_reign: List[object]
        :param national_tournament_gold: The national_tournament_gold of this Referee.  # noqa: E501
        :type national_tournament_gold: List[int]
        :param death_cause: The death_cause of this Referee.  # noqa: E501
        :type death_cause: List[object]
        """


        self.openapi_types = {
            'parent': List[object],
            'viaf_id': List[str],
            'competition_title': List[object],
            'art_patron': List[object],
            'hair_colour': List[str],
            'tv_show': List[object],
            'expedition': List[str],
            'main_domain': List[object],
            'nndb_id': List[str],
            'discipline': List[object],
            'consecration': List[str],
            'salary': List[float],
            'birth_name': List[str],
            'spouse': List[object],
            'scene': List[str],
            'best_lap': List[str],
            'shoe_number': List[int],
            'friend': List[object],
            'full_score': List[str],
            'diploma': List[object],
            'active_years_end_year_mgr': List[str],
            'abbeychurch_blessing': List[str],
            'height': List[object],
            'usopen_wins': List[object],
            'bust_size': List[float],
            'cloth_size': List[str],
            'handedness': List[object],
            'philosophical_school': List[object],
            'parliamentary_group': List[str],
            'date_of_burial': List[str],
            'mount': List[str],
            'olympic_games_silver': List[int],
            'nationality': List[object],
            'junior_years_start_year': List[str],
            'relative': List[object],
            'newspaper': List[object],
            'announced_from': List[object],
            'military_branch': List[object],
            'activity': List[object],
            'ethnicity': List[object],
            'state_of_origin': List[object],
            'pole_position': List[int],
            'season_manager': List[str],
            'killed_by': List[str],
            'blood_type': List[object],
            'continental_tournament': List[object],
            'junior_years_end_year': List[str],
            'political_function': List[str],
            'honours': List[object],
            'olympic_games': List[object],
            'hair_color': List[object],
            'foot': List[str],
            'measurements': List[str],
            'hand': List[object],
            'federation': List[object],
            'circumcised': List[str],
            'penis_length': List[str],
            'coemperor': List[object],
            'detractor': List[object],
            'selibr_id': List[str],
            'danse_competition': List[str],
            'sex': List[str],
            'sexual_orientation': List[object],
            'partner': List[object],
            'birth_year': List[str],
            'sports_function': List[str],
            'orcid_id': List[str],
            'election_date': List[str],
            'sport_discipline': List[object],
            'collaboration': List[object],
            'national_team_year': List[str],
            'number_of_run': List[int],
            'spouse_name': List[str],
            'lah_hof': List[str],
            'derived_word': List[str],
            'current_team_manager': List[object],
            'little_pool_record': List[str],
            'bpn_id': List[str],
            'free_danse_score': List[str],
            'project': List[object],
            'active_years': List[object],
            'title_date': List[str],
            'blood_group': List[str],
            'school': List[object],
            'death_place': List[object],
            'victory_percentage_as_mgr': List[float],
            'imposed_danse_competition': List[str],
            'shoot': List[str],
            'education_place': List[object],
            'match_point': List[str],
            'reign_name': List[str],
            'pro_period': List[str],
            'influenced_by': List[object],
            'nla_id': List[str],
            'cousurper': List[object],
            'race_wins': List[int],
            'world_tournament_bronze': List[int],
            'jutsu': List[str],
            'weight': List[object],
            'other_media': List[object],
            'alma_mater': List[object],
            'imposed_danse_score': List[str],
            'known_for': List[object],
            'big_pool_record': List[str],
            'olympic_games_wins': List[str],
            'eye_colour': List[str],
            'world_tournament_silver': List[int],
            'architectural_movement': List[str],
            'mood': List[str],
            'bibsys_id': List[str],
            'iihf_hof': List[str],
            'free_prog_score': List[str],
            'description': List[str],
            'particular_sign': List[str],
            'league_manager': List[object],
            'junior_season': List[object],
            'free_prog_competition': List[str],
            'weapon': List[object],
            'kind_of_criminal': List[str],
            'notable_idea': List[object],
            'player_status': List[str],
            'other_function': List[object],
            'continental_tournament_silver': List[int],
            'career_station': List[object],
            'resting_place_position': List[object],
            'original_danse_competition': List[str],
            'status_manager': List[str],
            'national_tournament': List[object],
            'hometown': List[object],
            'dead_in_fight_place': List[str],
            'continental_tournament_bronze': List[int],
            'victory': List[int],
            'complexion': List[object],
            'citizenship': List[object],
            'start': List[int],
            'tessitura': List[str],
            'start_career': List[str],
            'label': List[str],
            'birth_date': List[str],
            'national_tournament_silver': List[int],
            'other_activity': List[str],
            'linguistics_tradition': List[object],
            'national_tournament_bronze': List[int],
            'escalafon': List[str],
            'sibling': List[object],
            'waist_size': List[float],
            'olympic_games_gold': List[int],
            'general_council': List[object],
            'arrest_date': List[str],
            'team_manager': List[object],
            'birth_sign': List[object],
            'artistic_function': List[str],
            'age': List[int],
            'college': List[object],
            'education': List[object],
            'movie': List[object],
            'achievement': List[object],
            'death_age': List[int],
            'type': List[str],
            'approach': List[object],
            'relation': List[object],
            'victory_as_mgr': List[int],
            'living_place': List[object],
            'copilote': List[object],
            'season': List[object],
            'start_wct': List[str],
            'catch': List[str],
            'id': str,
            'feat': List[str],
            'decoration': List[object],
            'case': List[str],
            'sentence': List[str],
            'profession': List[object],
            'retirement_date': List[str],
            'world_tournament': List[object],
            'wife': List[object],
            'allegiance': List[str],
            'active_years_start_date_mgr': List[str],
            'lccn_id': List[str],
            'tattoo': List[str],
            'british_wins': List[object],
            'hip_size': List[float],
            'podium': List[int],
            'seiyu': List[object],
            'player_season': List[object],
            'short_prog_score': List[str],
            'regional_council': List[object],
            'homage': List[str],
            'shoe_size': List[str],
            'signature': List[str],
            'olympic_games_bronze': List[int],
            'danse_score': List[str],
            'id_number': List[int],
            'short_prog_competition': List[str],
            'active_years_start_year_mgr': List[str],
            'wedding_parents_date': List[str],
            'birth_place': List[object],
            'world': List[object],
            'astrological_sign': List[object],
            'eye_color': List[object],
            'networth': List[float],
            'coalition': List[str],
            'national_team_match_point': List[str],
            'national_selection': List[object],
            'agency': List[object],
            'start_wqs': List[str],
            'defeat_as_mgr': List[int],
            'death_year': List[str],
            'world_tournament_gold': List[int],
            'pga_wins': List[object],
            'board': List[object],
            'rid_id': List[str],
            'dead_in_fight_date': List[str],
            'related_functions': List[object],
            'manager_season': List[object],
            'reign': List[str],
            'second': List[int],
            'radio': List[object],
            'full_competition': List[str],
            'free_score_competition': List[str],
            'publication': List[str],
            'opponent': List[object],
            'employer': List[object],
            'affair': List[str],
            'body_discovered': List[object],
            'buried_place': List[object],
            'residence': List[object],
            'usurper': List[object],
            'other_occupation': List[object],
            'contest': List[object],
            'active_years_end_date_mgr': List[str],
            'created': List[object],
            'original_danse_score': List[str],
            'end_career': List[str],
            'note_on_resting_place': List[str],
            'army': List[str],
            'active_year': List[str],
            'person_function': List[object],
            'pro_since': List[str],
            'cause_of_death': List[str],
            'dubber': List[object],
            'non_professional_career': List[str],
            'military_function': List[str],
            'patent': List[object],
            'creation_christian_bishop': List[str],
            'piercing': List[str],
            'student': List[object],
            'bad_guy': List[str],
            'influenced': List[object],
            'start_reign': List[object],
            'university': List[object],
            'gym_apparatus': List[object],
            'ideology': List[object],
            'conviction_date': List[str],
            'media': List[object],
            'bnf_id': List[str],
            'pseudonym': List[str],
            'temple_year': List[str],
            'clothing_size': List[str],
            'speciality': List[str],
            'award': List[object],
            'kind_of_criminal_action': List[str],
            'isni_id': List[str],
            'significant_project': List[object],
            'leadership': List[str],
            'death_date': List[str],
            'special_trial': List[int],
            'resting_date': List[str],
            'victim': List[str],
            'has_natural_bust': List[str],
            'masters_wins': List[object],
            'individualised_pnd': List[int],
            'continental_tournament_gold': List[int],
            'orientation': List[str],
            'grave': List[str],
            'resting_place': List[object],
            'abbeychurch_blessing_charge': List[str],
            'handisport': List[str],
            'external_ornament': List[str],
            'third': List[int],
            'film_number': List[int],
            'temple': List[str],
            'end_reign': List[object],
            'national_tournament_gold': List[int],
            'death_cause': List[object]
        }

        self.attribute_map = {
            'parent': 'parent',
            'viaf_id': 'viafId',
            'competition_title': 'competitionTitle',
            'art_patron': 'artPatron',
            'hair_colour': 'hairColour',
            'tv_show': 'tvShow',
            'expedition': 'expedition',
            'main_domain': 'mainDomain',
            'nndb_id': 'nndbId',
            'discipline': 'discipline',
            'consecration': 'consecration',
            'salary': 'salary',
            'birth_name': 'birthName',
            'spouse': 'spouse',
            'scene': 'scene',
            'best_lap': 'bestLap',
            'shoe_number': 'shoeNumber',
            'friend': 'friend',
            'full_score': 'fullScore',
            'diploma': 'diploma',
            'active_years_end_year_mgr': 'activeYearsEndYearMgr',
            'abbeychurch_blessing': 'abbeychurchBlessing',
            'height': 'height',
            'usopen_wins': 'usopenWins',
            'bust_size': 'bustSize',
            'cloth_size': 'clothSize',
            'handedness': 'handedness',
            'philosophical_school': 'philosophicalSchool',
            'parliamentary_group': 'parliamentaryGroup',
            'date_of_burial': 'dateOfBurial',
            'mount': 'mount',
            'olympic_games_silver': 'olympicGamesSilver',
            'nationality': 'nationality',
            'junior_years_start_year': 'juniorYearsStartYear',
            'relative': 'relative',
            'newspaper': 'newspaper',
            'announced_from': 'announcedFrom',
            'military_branch': 'militaryBranch',
            'activity': 'activity',
            'ethnicity': 'ethnicity',
            'state_of_origin': 'stateOfOrigin',
            'pole_position': 'polePosition',
            'season_manager': 'seasonManager',
            'killed_by': 'killedBy',
            'blood_type': 'bloodType',
            'continental_tournament': 'continentalTournament',
            'junior_years_end_year': 'juniorYearsEndYear',
            'political_function': 'politicalFunction',
            'honours': 'honours',
            'olympic_games': 'olympicGames',
            'hair_color': 'hairColor',
            'foot': 'foot',
            'measurements': 'measurements',
            'hand': 'hand',
            'federation': 'federation',
            'circumcised': 'circumcised',
            'penis_length': 'penisLength',
            'coemperor': 'coemperor',
            'detractor': 'detractor',
            'selibr_id': 'selibrId',
            'danse_competition': 'danseCompetition',
            'sex': 'sex',
            'sexual_orientation': 'sexualOrientation',
            'partner': 'partner',
            'birth_year': 'birthYear',
            'sports_function': 'sportsFunction',
            'orcid_id': 'orcidId',
            'election_date': 'electionDate',
            'sport_discipline': 'sportDiscipline',
            'collaboration': 'collaboration',
            'national_team_year': 'nationalTeamYear',
            'number_of_run': 'numberOfRun',
            'spouse_name': 'spouseName',
            'lah_hof': 'lahHof',
            'derived_word': 'derivedWord',
            'current_team_manager': 'currentTeamManager',
            'little_pool_record': 'littlePoolRecord',
            'bpn_id': 'bpnId',
            'free_danse_score': 'freeDanseScore',
            'project': 'project',
            'active_years': 'activeYears',
            'title_date': 'titleDate',
            'blood_group': 'bloodGroup',
            'school': 'school',
            'death_place': 'deathPlace',
            'victory_percentage_as_mgr': 'victoryPercentageAsMgr',
            'imposed_danse_competition': 'imposedDanseCompetition',
            'shoot': 'shoot',
            'education_place': 'educationPlace',
            'match_point': 'matchPoint',
            'reign_name': 'reignName',
            'pro_period': 'proPeriod',
            'influenced_by': 'influencedBy',
            'nla_id': 'nlaId',
            'cousurper': 'cousurper',
            'race_wins': 'raceWins',
            'world_tournament_bronze': 'worldTournamentBronze',
            'jutsu': 'jutsu',
            'weight': 'weight',
            'other_media': 'otherMedia',
            'alma_mater': 'almaMater',
            'imposed_danse_score': 'imposedDanseScore',
            'known_for': 'knownFor',
            'big_pool_record': 'bigPoolRecord',
            'olympic_games_wins': 'olympicGamesWins',
            'eye_colour': 'eyeColour',
            'world_tournament_silver': 'worldTournamentSilver',
            'architectural_movement': 'architecturalMovement',
            'mood': 'mood',
            'bibsys_id': 'bibsysId',
            'iihf_hof': 'iihfHof',
            'free_prog_score': 'freeProgScore',
            'description': 'description',
            'particular_sign': 'particularSign',
            'league_manager': 'leagueManager',
            'junior_season': 'juniorSeason',
            'free_prog_competition': 'freeProgCompetition',
            'weapon': 'weapon',
            'kind_of_criminal': 'kindOfCriminal',
            'notable_idea': 'notableIdea',
            'player_status': 'playerStatus',
            'other_function': 'otherFunction',
            'continental_tournament_silver': 'continentalTournamentSilver',
            'career_station': 'careerStation',
            'resting_place_position': 'restingPlacePosition',
            'original_danse_competition': 'originalDanseCompetition',
            'status_manager': 'statusManager',
            'national_tournament': 'nationalTournament',
            'hometown': 'hometown',
            'dead_in_fight_place': 'deadInFightPlace',
            'continental_tournament_bronze': 'continentalTournamentBronze',
            'victory': 'victory',
            'complexion': 'complexion',
            'citizenship': 'citizenship',
            'start': 'start',
            'tessitura': 'tessitura',
            'start_career': 'startCareer',
            'label': 'label',
            'birth_date': 'birthDate',
            'national_tournament_silver': 'nationalTournamentSilver',
            'other_activity': 'otherActivity',
            'linguistics_tradition': 'linguisticsTradition',
            'national_tournament_bronze': 'nationalTournamentBronze',
            'escalafon': 'escalafon',
            'sibling': 'sibling',
            'waist_size': 'waistSize',
            'olympic_games_gold': 'olympicGamesGold',
            'general_council': 'generalCouncil',
            'arrest_date': 'arrestDate',
            'team_manager': 'teamManager',
            'birth_sign': 'birthSign',
            'artistic_function': 'artisticFunction',
            'age': 'age',
            'college': 'college',
            'education': 'education',
            'movie': 'movie',
            'achievement': 'achievement',
            'death_age': 'deathAge',
            'type': 'type',
            'approach': 'approach',
            'relation': 'relation',
            'victory_as_mgr': 'victoryAsMgr',
            'living_place': 'livingPlace',
            'copilote': 'copilote',
            'season': 'season',
            'start_wct': 'startWct',
            'catch': 'catch',
            'id': 'id',
            'feat': 'feat',
            'decoration': 'decoration',
            'case': 'case',
            'sentence': 'sentence',
            'profession': 'profession',
            'retirement_date': 'retirementDate',
            'world_tournament': 'worldTournament',
            'wife': 'wife',
            'allegiance': 'allegiance',
            'active_years_start_date_mgr': 'activeYearsStartDateMgr',
            'lccn_id': 'lccnId',
            'tattoo': 'tattoo',
            'british_wins': 'britishWins',
            'hip_size': 'hipSize',
            'podium': 'podium',
            'seiyu': 'seiyu',
            'player_season': 'playerSeason',
            'short_prog_score': 'shortProgScore',
            'regional_council': 'regionalCouncil',
            'homage': 'homage',
            'shoe_size': 'shoeSize',
            'signature': 'signature',
            'olympic_games_bronze': 'olympicGamesBronze',
            'danse_score': 'danseScore',
            'id_number': 'idNumber',
            'short_prog_competition': 'shortProgCompetition',
            'active_years_start_year_mgr': 'activeYearsStartYearMgr',
            'wedding_parents_date': 'weddingParentsDate',
            'birth_place': 'birthPlace',
            'world': 'world',
            'astrological_sign': 'astrologicalSign',
            'eye_color': 'eyeColor',
            'networth': 'networth',
            'coalition': 'coalition',
            'national_team_match_point': 'nationalTeamMatchPoint',
            'national_selection': 'nationalSelection',
            'agency': 'agency',
            'start_wqs': 'startWqs',
            'defeat_as_mgr': 'defeatAsMgr',
            'death_year': 'deathYear',
            'world_tournament_gold': 'worldTournamentGold',
            'pga_wins': 'pgaWins',
            'board': 'board',
            'rid_id': 'ridId',
            'dead_in_fight_date': 'deadInFightDate',
            'related_functions': 'relatedFunctions',
            'manager_season': 'managerSeason',
            'reign': 'reign',
            'second': 'second',
            'radio': 'radio',
            'full_competition': 'fullCompetition',
            'free_score_competition': 'freeScoreCompetition',
            'publication': 'publication',
            'opponent': 'opponent',
            'employer': 'employer',
            'affair': 'affair',
            'body_discovered': 'bodyDiscovered',
            'buried_place': 'buriedPlace',
            'residence': 'residence',
            'usurper': 'usurper',
            'other_occupation': 'otherOccupation',
            'contest': 'contest',
            'active_years_end_date_mgr': 'activeYearsEndDateMgr',
            'created': 'created',
            'original_danse_score': 'originalDanseScore',
            'end_career': 'endCareer',
            'note_on_resting_place': 'noteOnRestingPlace',
            'army': 'army',
            'active_year': 'activeYear',
            'person_function': 'personFunction',
            'pro_since': 'proSince',
            'cause_of_death': 'causeOfDeath',
            'dubber': 'dubber',
            'non_professional_career': 'nonProfessionalCareer',
            'military_function': 'militaryFunction',
            'patent': 'patent',
            'creation_christian_bishop': 'creationChristianBishop',
            'piercing': 'piercing',
            'student': 'student',
            'bad_guy': 'badGuy',
            'influenced': 'influenced',
            'start_reign': 'startReign',
            'university': 'university',
            'gym_apparatus': 'gymApparatus',
            'ideology': 'ideology',
            'conviction_date': 'convictionDate',
            'media': 'media',
            'bnf_id': 'bnfId',
            'pseudonym': 'pseudonym',
            'temple_year': 'templeYear',
            'clothing_size': 'clothingSize',
            'speciality': 'speciality',
            'award': 'award',
            'kind_of_criminal_action': 'kindOfCriminalAction',
            'isni_id': 'isniId',
            'significant_project': 'significantProject',
            'leadership': 'leadership',
            'death_date': 'deathDate',
            'special_trial': 'specialTrial',
            'resting_date': 'restingDate',
            'victim': 'victim',
            'has_natural_bust': 'hasNaturalBust',
            'masters_wins': 'mastersWins',
            'individualised_pnd': 'individualisedPnd',
            'continental_tournament_gold': 'continentalTournamentGold',
            'orientation': 'orientation',
            'grave': 'grave',
            'resting_place': 'restingPlace',
            'abbeychurch_blessing_charge': 'abbeychurchBlessingCharge',
            'handisport': 'handisport',
            'external_ornament': 'externalOrnament',
            'third': 'third',
            'film_number': 'filmNumber',
            'temple': 'temple',
            'end_reign': 'endReign',
            'national_tournament_gold': 'nationalTournamentGold',
            'death_cause': 'deathCause'
        }

        self._parent = parent
        self._viaf_id = viaf_id
        self._competition_title = competition_title
        self._art_patron = art_patron
        self._hair_colour = hair_colour
        self._tv_show = tv_show
        self._expedition = expedition
        self._main_domain = main_domain
        self._nndb_id = nndb_id
        self._discipline = discipline
        self._consecration = consecration
        self._salary = salary
        self._birth_name = birth_name
        self._spouse = spouse
        self._scene = scene
        self._best_lap = best_lap
        self._shoe_number = shoe_number
        self._friend = friend
        self._full_score = full_score
        self._diploma = diploma
        self._active_years_end_year_mgr = active_years_end_year_mgr
        self._abbeychurch_blessing = abbeychurch_blessing
        self._height = height
        self._usopen_wins = usopen_wins
        self._bust_size = bust_size
        self._cloth_size = cloth_size
        self._handedness = handedness
        self._philosophical_school = philosophical_school
        self._parliamentary_group = parliamentary_group
        self._date_of_burial = date_of_burial
        self._mount = mount
        self._olympic_games_silver = olympic_games_silver
        self._nationality = nationality
        self._junior_years_start_year = junior_years_start_year
        self._relative = relative
        self._newspaper = newspaper
        self._announced_from = announced_from
        self._military_branch = military_branch
        self._activity = activity
        self._ethnicity = ethnicity
        self._state_of_origin = state_of_origin
        self._pole_position = pole_position
        self._season_manager = season_manager
        self._killed_by = killed_by
        self._blood_type = blood_type
        self._continental_tournament = continental_tournament
        self._junior_years_end_year = junior_years_end_year
        self._political_function = political_function
        self._honours = honours
        self._olympic_games = olympic_games
        self._hair_color = hair_color
        self._foot = foot
        self._measurements = measurements
        self._hand = hand
        self._federation = federation
        self._circumcised = circumcised
        self._penis_length = penis_length
        self._coemperor = coemperor
        self._detractor = detractor
        self._selibr_id = selibr_id
        self._danse_competition = danse_competition
        self._sex = sex
        self._sexual_orientation = sexual_orientation
        self._partner = partner
        self._birth_year = birth_year
        self._sports_function = sports_function
        self._orcid_id = orcid_id
        self._election_date = election_date
        self._sport_discipline = sport_discipline
        self._collaboration = collaboration
        self._national_team_year = national_team_year
        self._number_of_run = number_of_run
        self._spouse_name = spouse_name
        self._lah_hof = lah_hof
        self._derived_word = derived_word
        self._current_team_manager = current_team_manager
        self._little_pool_record = little_pool_record
        self._bpn_id = bpn_id
        self._free_danse_score = free_danse_score
        self._project = project
        self._active_years = active_years
        self._title_date = title_date
        self._blood_group = blood_group
        self._school = school
        self._death_place = death_place
        self._victory_percentage_as_mgr = victory_percentage_as_mgr
        self._imposed_danse_competition = imposed_danse_competition
        self._shoot = shoot
        self._education_place = education_place
        self._match_point = match_point
        self._reign_name = reign_name
        self._pro_period = pro_period
        self._influenced_by = influenced_by
        self._nla_id = nla_id
        self._cousurper = cousurper
        self._race_wins = race_wins
        self._world_tournament_bronze = world_tournament_bronze
        self._jutsu = jutsu
        self._weight = weight
        self._other_media = other_media
        self._alma_mater = alma_mater
        self._imposed_danse_score = imposed_danse_score
        self._known_for = known_for
        self._big_pool_record = big_pool_record
        self._olympic_games_wins = olympic_games_wins
        self._eye_colour = eye_colour
        self._world_tournament_silver = world_tournament_silver
        self._architectural_movement = architectural_movement
        self._mood = mood
        self._bibsys_id = bibsys_id
        self._iihf_hof = iihf_hof
        self._free_prog_score = free_prog_score
        self._description = description
        self._particular_sign = particular_sign
        self._league_manager = league_manager
        self._junior_season = junior_season
        self._free_prog_competition = free_prog_competition
        self._weapon = weapon
        self._kind_of_criminal = kind_of_criminal
        self._notable_idea = notable_idea
        self._player_status = player_status
        self._other_function = other_function
        self._continental_tournament_silver = continental_tournament_silver
        self._career_station = career_station
        self._resting_place_position = resting_place_position
        self._original_danse_competition = original_danse_competition
        self._status_manager = status_manager
        self._national_tournament = national_tournament
        self._hometown = hometown
        self._dead_in_fight_place = dead_in_fight_place
        self._continental_tournament_bronze = continental_tournament_bronze
        self._victory = victory
        self._complexion = complexion
        self._citizenship = citizenship
        self._start = start
        self._tessitura = tessitura
        self._start_career = start_career
        self._label = label
        self._birth_date = birth_date
        self._national_tournament_silver = national_tournament_silver
        self._other_activity = other_activity
        self._linguistics_tradition = linguistics_tradition
        self._national_tournament_bronze = national_tournament_bronze
        self._escalafon = escalafon
        self._sibling = sibling
        self._waist_size = waist_size
        self._olympic_games_gold = olympic_games_gold
        self._general_council = general_council
        self._arrest_date = arrest_date
        self._team_manager = team_manager
        self._birth_sign = birth_sign
        self._artistic_function = artistic_function
        self._age = age
        self._college = college
        self._education = education
        self._movie = movie
        self._achievement = achievement
        self._death_age = death_age
        self._type = type
        self._approach = approach
        self._relation = relation
        self._victory_as_mgr = victory_as_mgr
        self._living_place = living_place
        self._copilote = copilote
        self._season = season
        self._start_wct = start_wct
        self._catch = catch
        self._id = id
        self._feat = feat
        self._decoration = decoration
        self._case = case
        self._sentence = sentence
        self._profession = profession
        self._retirement_date = retirement_date
        self._world_tournament = world_tournament
        self._wife = wife
        self._allegiance = allegiance
        self._active_years_start_date_mgr = active_years_start_date_mgr
        self._lccn_id = lccn_id
        self._tattoo = tattoo
        self._british_wins = british_wins
        self._hip_size = hip_size
        self._podium = podium
        self._seiyu = seiyu
        self._player_season = player_season
        self._short_prog_score = short_prog_score
        self._regional_council = regional_council
        self._homage = homage
        self._shoe_size = shoe_size
        self._signature = signature
        self._olympic_games_bronze = olympic_games_bronze
        self._danse_score = danse_score
        self._id_number = id_number
        self._short_prog_competition = short_prog_competition
        self._active_years_start_year_mgr = active_years_start_year_mgr
        self._wedding_parents_date = wedding_parents_date
        self._birth_place = birth_place
        self._world = world
        self._astrological_sign = astrological_sign
        self._eye_color = eye_color
        self._networth = networth
        self._coalition = coalition
        self._national_team_match_point = national_team_match_point
        self._national_selection = national_selection
        self._agency = agency
        self._start_wqs = start_wqs
        self._defeat_as_mgr = defeat_as_mgr
        self._death_year = death_year
        self._world_tournament_gold = world_tournament_gold
        self._pga_wins = pga_wins
        self._board = board
        self._rid_id = rid_id
        self._dead_in_fight_date = dead_in_fight_date
        self._related_functions = related_functions
        self._manager_season = manager_season
        self._reign = reign
        self._second = second
        self._radio = radio
        self._full_competition = full_competition
        self._free_score_competition = free_score_competition
        self._publication = publication
        self._opponent = opponent
        self._employer = employer
        self._affair = affair
        self._body_discovered = body_discovered
        self._buried_place = buried_place
        self._residence = residence
        self._usurper = usurper
        self._other_occupation = other_occupation
        self._contest = contest
        self._active_years_end_date_mgr = active_years_end_date_mgr
        self._created = created
        self._original_danse_score = original_danse_score
        self._end_career = end_career
        self._note_on_resting_place = note_on_resting_place
        self._army = army
        self._active_year = active_year
        self._person_function = person_function
        self._pro_since = pro_since
        self._cause_of_death = cause_of_death
        self._dubber = dubber
        self._non_professional_career = non_professional_career
        self._military_function = military_function
        self._patent = patent
        self._creation_christian_bishop = creation_christian_bishop
        self._piercing = piercing
        self._student = student
        self._bad_guy = bad_guy
        self._influenced = influenced
        self._start_reign = start_reign
        self._university = university
        self._gym_apparatus = gym_apparatus
        self._ideology = ideology
        self._conviction_date = conviction_date
        self._media = media
        self._bnf_id = bnf_id
        self._pseudonym = pseudonym
        self._temple_year = temple_year
        self._clothing_size = clothing_size
        self._speciality = speciality
        self._award = award
        self._kind_of_criminal_action = kind_of_criminal_action
        self._isni_id = isni_id
        self._significant_project = significant_project
        self._leadership = leadership
        self._death_date = death_date
        self._special_trial = special_trial
        self._resting_date = resting_date
        self._victim = victim
        self._has_natural_bust = has_natural_bust
        self._masters_wins = masters_wins
        self._individualised_pnd = individualised_pnd
        self._continental_tournament_gold = continental_tournament_gold
        self._orientation = orientation
        self._grave = grave
        self._resting_place = resting_place
        self._abbeychurch_blessing_charge = abbeychurch_blessing_charge
        self._handisport = handisport
        self._external_ornament = external_ornament
        self._third = third
        self._film_number = film_number
        self._temple = temple
        self._end_reign = end_reign
        self._national_tournament_gold = national_tournament_gold
        self._death_cause = death_cause

    @classmethod
    def from_dict(cls, dikt) -> 'Referee':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Referee of this Referee.  # noqa: E501
        :rtype: Referee
        """
        return util.deserialize_model(dikt, cls)

    @property
    def parent(self):
        """Gets the parent of this Referee.

        Description not available  # noqa: E501

        :return: The parent of this Referee.
        :rtype: List[object]
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this Referee.

        Description not available  # noqa: E501

        :param parent: The parent of this Referee.
        :type parent: List[object]
        """

        self._parent = parent

    @property
    def viaf_id(self):
        """Gets the viaf_id of this Referee.

        International authority data from the Online Computer Library Center (OCLC)  # noqa: E501

        :return: The viaf_id of this Referee.
        :rtype: List[str]
        """
        return self._viaf_id

    @viaf_id.setter
    def viaf_id(self, viaf_id):
        """Sets the viaf_id of this Referee.

        International authority data from the Online Computer Library Center (OCLC)  # noqa: E501

        :param viaf_id: The viaf_id of this Referee.
        :type viaf_id: List[str]
        """

        self._viaf_id = viaf_id

    @property
    def competition_title(self):
        """Gets the competition_title of this Referee.

        Description not available  # noqa: E501

        :return: The competition_title of this Referee.
        :rtype: List[object]
        """
        return self._competition_title

    @competition_title.setter
    def competition_title(self, competition_title):
        """Sets the competition_title of this Referee.

        Description not available  # noqa: E501

        :param competition_title: The competition_title of this Referee.
        :type competition_title: List[object]
        """

        self._competition_title = competition_title

    @property
    def art_patron(self):
        """Gets the art_patron of this Referee.

        An influential, wealthy person who supported an artist, craftsman, a scholar or a noble.. See also  # noqa: E501

        :return: The art_patron of this Referee.
        :rtype: List[object]
        """
        return self._art_patron

    @art_patron.setter
    def art_patron(self, art_patron):
        """Sets the art_patron of this Referee.

        An influential, wealthy person who supported an artist, craftsman, a scholar or a noble.. See also  # noqa: E501

        :param art_patron: The art_patron of this Referee.
        :type art_patron: List[object]
        """

        self._art_patron = art_patron

    @property
    def hair_colour(self):
        """Gets the hair_colour of this Referee.

        Description not available  # noqa: E501

        :return: The hair_colour of this Referee.
        :rtype: List[str]
        """
        return self._hair_colour

    @hair_colour.setter
    def hair_colour(self, hair_colour):
        """Sets the hair_colour of this Referee.

        Description not available  # noqa: E501

        :param hair_colour: The hair_colour of this Referee.
        :type hair_colour: List[str]
        """

        self._hair_colour = hair_colour

    @property
    def tv_show(self):
        """Gets the tv_show of this Referee.

        Description not available  # noqa: E501

        :return: The tv_show of this Referee.
        :rtype: List[object]
        """
        return self._tv_show

    @tv_show.setter
    def tv_show(self, tv_show):
        """Sets the tv_show of this Referee.

        Description not available  # noqa: E501

        :param tv_show: The tv_show of this Referee.
        :type tv_show: List[object]
        """

        self._tv_show = tv_show

    @property
    def expedition(self):
        """Gets the expedition of this Referee.

        Description not available  # noqa: E501

        :return: The expedition of this Referee.
        :rtype: List[str]
        """
        return self._expedition

    @expedition.setter
    def expedition(self, expedition):
        """Sets the expedition of this Referee.

        Description not available  # noqa: E501

        :param expedition: The expedition of this Referee.
        :type expedition: List[str]
        """

        self._expedition = expedition

    @property
    def main_domain(self):
        """Gets the main_domain of this Referee.

        Description not available  # noqa: E501

        :return: The main_domain of this Referee.
        :rtype: List[object]
        """
        return self._main_domain

    @main_domain.setter
    def main_domain(self, main_domain):
        """Sets the main_domain of this Referee.

        Description not available  # noqa: E501

        :param main_domain: The main_domain of this Referee.
        :type main_domain: List[object]
        """

        self._main_domain = main_domain

    @property
    def nndb_id(self):
        """Gets the nndb_id of this Referee.

        Description not available  # noqa: E501

        :return: The nndb_id of this Referee.
        :rtype: List[str]
        """
        return self._nndb_id

    @nndb_id.setter
    def nndb_id(self, nndb_id):
        """Sets the nndb_id of this Referee.

        Description not available  # noqa: E501

        :param nndb_id: The nndb_id of this Referee.
        :type nndb_id: List[str]
        """

        self._nndb_id = nndb_id

    @property
    def discipline(self):
        """Gets the discipline of this Referee.

        Description not available  # noqa: E501

        :return: The discipline of this Referee.
        :rtype: List[object]
        """
        return self._discipline

    @discipline.setter
    def discipline(self, discipline):
        """Sets the discipline of this Referee.

        Description not available  # noqa: E501

        :param discipline: The discipline of this Referee.
        :type discipline: List[object]
        """

        self._discipline = discipline

    @property
    def consecration(self):
        """Gets the consecration of this Referee.

        Description not available  # noqa: E501

        :return: The consecration of this Referee.
        :rtype: List[str]
        """
        return self._consecration

    @consecration.setter
    def consecration(self, consecration):
        """Sets the consecration of this Referee.

        Description not available  # noqa: E501

        :param consecration: The consecration of this Referee.
        :type consecration: List[str]
        """

        self._consecration = consecration

    @property
    def salary(self):
        """Gets the salary of this Referee.

        Description not available  # noqa: E501

        :return: The salary of this Referee.
        :rtype: List[float]
        """
        return self._salary

    @salary.setter
    def salary(self, salary):
        """Sets the salary of this Referee.

        Description not available  # noqa: E501

        :param salary: The salary of this Referee.
        :type salary: List[float]
        """

        self._salary = salary

    @property
    def birth_name(self):
        """Gets the birth_name of this Referee.

        Description not available  # noqa: E501

        :return: The birth_name of this Referee.
        :rtype: List[str]
        """
        return self._birth_name

    @birth_name.setter
    def birth_name(self, birth_name):
        """Sets the birth_name of this Referee.

        Description not available  # noqa: E501

        :param birth_name: The birth_name of this Referee.
        :type birth_name: List[str]
        """

        self._birth_name = birth_name

    @property
    def spouse(self):
        """Gets the spouse of this Referee.

        the person they are married to  # noqa: E501

        :return: The spouse of this Referee.
        :rtype: List[object]
        """
        return self._spouse

    @spouse.setter
    def spouse(self, spouse):
        """Sets the spouse of this Referee.

        the person they are married to  # noqa: E501

        :param spouse: The spouse of this Referee.
        :type spouse: List[object]
        """

        self._spouse = spouse

    @property
    def scene(self):
        """Gets the scene of this Referee.

        Description not available  # noqa: E501

        :return: The scene of this Referee.
        :rtype: List[str]
        """
        return self._scene

    @scene.setter
    def scene(self, scene):
        """Sets the scene of this Referee.

        Description not available  # noqa: E501

        :param scene: The scene of this Referee.
        :type scene: List[str]
        """

        self._scene = scene

    @property
    def best_lap(self):
        """Gets the best_lap of this Referee.

        Description not available  # noqa: E501

        :return: The best_lap of this Referee.
        :rtype: List[str]
        """
        return self._best_lap

    @best_lap.setter
    def best_lap(self, best_lap):
        """Sets the best_lap of this Referee.

        Description not available  # noqa: E501

        :param best_lap: The best_lap of this Referee.
        :type best_lap: List[str]
        """

        self._best_lap = best_lap

    @property
    def shoe_number(self):
        """Gets the shoe_number of this Referee.

        Description not available  # noqa: E501

        :return: The shoe_number of this Referee.
        :rtype: List[int]
        """
        return self._shoe_number

    @shoe_number.setter
    def shoe_number(self, shoe_number):
        """Sets the shoe_number of this Referee.

        Description not available  # noqa: E501

        :param shoe_number: The shoe_number of this Referee.
        :type shoe_number: List[int]
        """

        self._shoe_number = shoe_number

    @property
    def friend(self):
        """Gets the friend of this Referee.

        Description not available  # noqa: E501

        :return: The friend of this Referee.
        :rtype: List[object]
        """
        return self._friend

    @friend.setter
    def friend(self, friend):
        """Sets the friend of this Referee.

        Description not available  # noqa: E501

        :param friend: The friend of this Referee.
        :type friend: List[object]
        """

        self._friend = friend

    @property
    def full_score(self):
        """Gets the full_score of this Referee.

        Description not available  # noqa: E501

        :return: The full_score of this Referee.
        :rtype: List[str]
        """
        return self._full_score

    @full_score.setter
    def full_score(self, full_score):
        """Sets the full_score of this Referee.

        Description not available  # noqa: E501

        :param full_score: The full_score of this Referee.
        :type full_score: List[str]
        """

        self._full_score = full_score

    @property
    def diploma(self):
        """Gets the diploma of this Referee.

        Description not available  # noqa: E501

        :return: The diploma of this Referee.
        :rtype: List[object]
        """
        return self._diploma

    @diploma.setter
    def diploma(self, diploma):
        """Sets the diploma of this Referee.

        Description not available  # noqa: E501

        :param diploma: The diploma of this Referee.
        :type diploma: List[object]
        """

        self._diploma = diploma

    @property
    def active_years_end_year_mgr(self):
        """Gets the active_years_end_year_mgr of this Referee.

        Description not available  # noqa: E501

        :return: The active_years_end_year_mgr of this Referee.
        :rtype: List[str]
        """
        return self._active_years_end_year_mgr

    @active_years_end_year_mgr.setter
    def active_years_end_year_mgr(self, active_years_end_year_mgr):
        """Sets the active_years_end_year_mgr of this Referee.

        Description not available  # noqa: E501

        :param active_years_end_year_mgr: The active_years_end_year_mgr of this Referee.
        :type active_years_end_year_mgr: List[str]
        """

        self._active_years_end_year_mgr = active_years_end_year_mgr

    @property
    def abbeychurch_blessing(self):
        """Gets the abbeychurch_blessing of this Referee.

        Description not available  # noqa: E501

        :return: The abbeychurch_blessing of this Referee.
        :rtype: List[str]
        """
        return self._abbeychurch_blessing

    @abbeychurch_blessing.setter
    def abbeychurch_blessing(self, abbeychurch_blessing):
        """Sets the abbeychurch_blessing of this Referee.

        Description not available  # noqa: E501

        :param abbeychurch_blessing: The abbeychurch_blessing of this Referee.
        :type abbeychurch_blessing: List[str]
        """

        self._abbeychurch_blessing = abbeychurch_blessing

    @property
    def height(self):
        """Gets the height of this Referee.

        Description not available  # noqa: E501

        :return: The height of this Referee.
        :rtype: List[object]
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Referee.

        Description not available  # noqa: E501

        :param height: The height of this Referee.
        :type height: List[object]
        """

        self._height = height

    @property
    def usopen_wins(self):
        """Gets the usopen_wins of this Referee.

        Description not available  # noqa: E501

        :return: The usopen_wins of this Referee.
        :rtype: List[object]
        """
        return self._usopen_wins

    @usopen_wins.setter
    def usopen_wins(self, usopen_wins):
        """Sets the usopen_wins of this Referee.

        Description not available  # noqa: E501

        :param usopen_wins: The usopen_wins of this Referee.
        :type usopen_wins: List[object]
        """

        self._usopen_wins = usopen_wins

    @property
    def bust_size(self):
        """Gets the bust_size of this Referee.

        Description not available  # noqa: E501

        :return: The bust_size of this Referee.
        :rtype: List[float]
        """
        return self._bust_size

    @bust_size.setter
    def bust_size(self, bust_size):
        """Sets the bust_size of this Referee.

        Description not available  # noqa: E501

        :param bust_size: The bust_size of this Referee.
        :type bust_size: List[float]
        """

        self._bust_size = bust_size

    @property
    def cloth_size(self):
        """Gets the cloth_size of this Referee.

        Description not available  # noqa: E501

        :return: The cloth_size of this Referee.
        :rtype: List[str]
        """
        return self._cloth_size

    @cloth_size.setter
    def cloth_size(self, cloth_size):
        """Sets the cloth_size of this Referee.

        Description not available  # noqa: E501

        :param cloth_size: The cloth_size of this Referee.
        :type cloth_size: List[str]
        """

        self._cloth_size = cloth_size

    @property
    def handedness(self):
        """Gets the handedness of this Referee.

        an attribute of humans defined by their unequal distribution of fine motor skill between the left and right hands.  # noqa: E501

        :return: The handedness of this Referee.
        :rtype: List[object]
        """
        return self._handedness

    @handedness.setter
    def handedness(self, handedness):
        """Sets the handedness of this Referee.

        an attribute of humans defined by their unequal distribution of fine motor skill between the left and right hands.  # noqa: E501

        :param handedness: The handedness of this Referee.
        :type handedness: List[object]
        """

        self._handedness = handedness

    @property
    def philosophical_school(self):
        """Gets the philosophical_school of this Referee.

        Description not available  # noqa: E501

        :return: The philosophical_school of this Referee.
        :rtype: List[object]
        """
        return self._philosophical_school

    @philosophical_school.setter
    def philosophical_school(self, philosophical_school):
        """Sets the philosophical_school of this Referee.

        Description not available  # noqa: E501

        :param philosophical_school: The philosophical_school of this Referee.
        :type philosophical_school: List[object]
        """

        self._philosophical_school = philosophical_school

    @property
    def parliamentary_group(self):
        """Gets the parliamentary_group of this Referee.

        Description not available  # noqa: E501

        :return: The parliamentary_group of this Referee.
        :rtype: List[str]
        """
        return self._parliamentary_group

    @parliamentary_group.setter
    def parliamentary_group(self, parliamentary_group):
        """Sets the parliamentary_group of this Referee.

        Description not available  # noqa: E501

        :param parliamentary_group: The parliamentary_group of this Referee.
        :type parliamentary_group: List[str]
        """

        self._parliamentary_group = parliamentary_group

    @property
    def date_of_burial(self):
        """Gets the date_of_burial of this Referee.

        Description not available  # noqa: E501

        :return: The date_of_burial of this Referee.
        :rtype: List[str]
        """
        return self._date_of_burial

    @date_of_burial.setter
    def date_of_burial(self, date_of_burial):
        """Sets the date_of_burial of this Referee.

        Description not available  # noqa: E501

        :param date_of_burial: The date_of_burial of this Referee.
        :type date_of_burial: List[str]
        """

        self._date_of_burial = date_of_burial

    @property
    def mount(self):
        """Gets the mount of this Referee.

        Description not available  # noqa: E501

        :return: The mount of this Referee.
        :rtype: List[str]
        """
        return self._mount

    @mount.setter
    def mount(self, mount):
        """Sets the mount of this Referee.

        Description not available  # noqa: E501

        :param mount: The mount of this Referee.
        :type mount: List[str]
        """

        self._mount = mount

    @property
    def olympic_games_silver(self):
        """Gets the olympic_games_silver of this Referee.

        Description not available  # noqa: E501

        :return: The olympic_games_silver of this Referee.
        :rtype: List[int]
        """
        return self._olympic_games_silver

    @olympic_games_silver.setter
    def olympic_games_silver(self, olympic_games_silver):
        """Sets the olympic_games_silver of this Referee.

        Description not available  # noqa: E501

        :param olympic_games_silver: The olympic_games_silver of this Referee.
        :type olympic_games_silver: List[int]
        """

        self._olympic_games_silver = olympic_games_silver

    @property
    def nationality(self):
        """Gets the nationality of this Referee.

        Description not available  # noqa: E501

        :return: The nationality of this Referee.
        :rtype: List[object]
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality):
        """Sets the nationality of this Referee.

        Description not available  # noqa: E501

        :param nationality: The nationality of this Referee.
        :type nationality: List[object]
        """

        self._nationality = nationality

    @property
    def junior_years_start_year(self):
        """Gets the junior_years_start_year of this Referee.

        Description not available  # noqa: E501

        :return: The junior_years_start_year of this Referee.
        :rtype: List[str]
        """
        return self._junior_years_start_year

    @junior_years_start_year.setter
    def junior_years_start_year(self, junior_years_start_year):
        """Sets the junior_years_start_year of this Referee.

        Description not available  # noqa: E501

        :param junior_years_start_year: The junior_years_start_year of this Referee.
        :type junior_years_start_year: List[str]
        """

        self._junior_years_start_year = junior_years_start_year

    @property
    def relative(self):
        """Gets the relative of this Referee.

        Description not available  # noqa: E501

        :return: The relative of this Referee.
        :rtype: List[object]
        """
        return self._relative

    @relative.setter
    def relative(self, relative):
        """Sets the relative of this Referee.

        Description not available  # noqa: E501

        :param relative: The relative of this Referee.
        :type relative: List[object]
        """

        self._relative = relative

    @property
    def newspaper(self):
        """Gets the newspaper of this Referee.

        Description not available  # noqa: E501

        :return: The newspaper of this Referee.
        :rtype: List[object]
        """
        return self._newspaper

    @newspaper.setter
    def newspaper(self, newspaper):
        """Sets the newspaper of this Referee.

        Description not available  # noqa: E501

        :param newspaper: The newspaper of this Referee.
        :type newspaper: List[object]
        """

        self._newspaper = newspaper

    @property
    def announced_from(self):
        """Gets the announced_from of this Referee.

        Description not available  # noqa: E501

        :return: The announced_from of this Referee.
        :rtype: List[object]
        """
        return self._announced_from

    @announced_from.setter
    def announced_from(self, announced_from):
        """Sets the announced_from of this Referee.

        Description not available  # noqa: E501

        :param announced_from: The announced_from of this Referee.
        :type announced_from: List[object]
        """

        self._announced_from = announced_from

    @property
    def military_branch(self):
        """Gets the military_branch of this Referee.

        The service branch (Army, Navy, etc.) a person is part of.  # noqa: E501

        :return: The military_branch of this Referee.
        :rtype: List[object]
        """
        return self._military_branch

    @military_branch.setter
    def military_branch(self, military_branch):
        """Sets the military_branch of this Referee.

        The service branch (Army, Navy, etc.) a person is part of.  # noqa: E501

        :param military_branch: The military_branch of this Referee.
        :type military_branch: List[object]
        """

        self._military_branch = military_branch

    @property
    def activity(self):
        """Gets the activity of this Referee.

        Description not available  # noqa: E501

        :return: The activity of this Referee.
        :rtype: List[object]
        """
        return self._activity

    @activity.setter
    def activity(self, activity):
        """Sets the activity of this Referee.

        Description not available  # noqa: E501

        :param activity: The activity of this Referee.
        :type activity: List[object]
        """

        self._activity = activity

    @property
    def ethnicity(self):
        """Gets the ethnicity of this Referee.

        Μία ορισμένη κοινωνική κατηγορία ανθρώπων που έχουν κοινή καταγωγή ή εμπειρίες.  # noqa: E501

        :return: The ethnicity of this Referee.
        :rtype: List[object]
        """
        return self._ethnicity

    @ethnicity.setter
    def ethnicity(self, ethnicity):
        """Sets the ethnicity of this Referee.

        Μία ορισμένη κοινωνική κατηγορία ανθρώπων που έχουν κοινή καταγωγή ή εμπειρίες.  # noqa: E501

        :param ethnicity: The ethnicity of this Referee.
        :type ethnicity: List[object]
        """

        self._ethnicity = ethnicity

    @property
    def state_of_origin(self):
        """Gets the state_of_origin of this Referee.

        Description not available  # noqa: E501

        :return: The state_of_origin of this Referee.
        :rtype: List[object]
        """
        return self._state_of_origin

    @state_of_origin.setter
    def state_of_origin(self, state_of_origin):
        """Sets the state_of_origin of this Referee.

        Description not available  # noqa: E501

        :param state_of_origin: The state_of_origin of this Referee.
        :type state_of_origin: List[object]
        """

        self._state_of_origin = state_of_origin

    @property
    def pole_position(self):
        """Gets the pole_position of this Referee.

        Description not available  # noqa: E501

        :return: The pole_position of this Referee.
        :rtype: List[int]
        """
        return self._pole_position

    @pole_position.setter
    def pole_position(self, pole_position):
        """Sets the pole_position of this Referee.

        Description not available  # noqa: E501

        :param pole_position: The pole_position of this Referee.
        :type pole_position: List[int]
        """

        self._pole_position = pole_position

    @property
    def season_manager(self):
        """Gets the season_manager of this Referee.

        Description not available  # noqa: E501

        :return: The season_manager of this Referee.
        :rtype: List[str]
        """
        return self._season_manager

    @season_manager.setter
    def season_manager(self, season_manager):
        """Sets the season_manager of this Referee.

        Description not available  # noqa: E501

        :param season_manager: The season_manager of this Referee.
        :type season_manager: List[str]
        """

        self._season_manager = season_manager

    @property
    def killed_by(self):
        """Gets the killed_by of this Referee.

        Description not available  # noqa: E501

        :return: The killed_by of this Referee.
        :rtype: List[str]
        """
        return self._killed_by

    @killed_by.setter
    def killed_by(self, killed_by):
        """Sets the killed_by of this Referee.

        Description not available  # noqa: E501

        :param killed_by: The killed_by of this Referee.
        :type killed_by: List[str]
        """

        self._killed_by = killed_by

    @property
    def blood_type(self):
        """Gets the blood_type of this Referee.

        Description not available  # noqa: E501

        :return: The blood_type of this Referee.
        :rtype: List[object]
        """
        return self._blood_type

    @blood_type.setter
    def blood_type(self, blood_type):
        """Sets the blood_type of this Referee.

        Description not available  # noqa: E501

        :param blood_type: The blood_type of this Referee.
        :type blood_type: List[object]
        """

        self._blood_type = blood_type

    @property
    def continental_tournament(self):
        """Gets the continental_tournament of this Referee.

        Description not available  # noqa: E501

        :return: The continental_tournament of this Referee.
        :rtype: List[object]
        """
        return self._continental_tournament

    @continental_tournament.setter
    def continental_tournament(self, continental_tournament):
        """Sets the continental_tournament of this Referee.

        Description not available  # noqa: E501

        :param continental_tournament: The continental_tournament of this Referee.
        :type continental_tournament: List[object]
        """

        self._continental_tournament = continental_tournament

    @property
    def junior_years_end_year(self):
        """Gets the junior_years_end_year of this Referee.

        Description not available  # noqa: E501

        :return: The junior_years_end_year of this Referee.
        :rtype: List[str]
        """
        return self._junior_years_end_year

    @junior_years_end_year.setter
    def junior_years_end_year(self, junior_years_end_year):
        """Sets the junior_years_end_year of this Referee.

        Description not available  # noqa: E501

        :param junior_years_end_year: The junior_years_end_year of this Referee.
        :type junior_years_end_year: List[str]
        """

        self._junior_years_end_year = junior_years_end_year

    @property
    def political_function(self):
        """Gets the political_function of this Referee.

        Description not available  # noqa: E501

        :return: The political_function of this Referee.
        :rtype: List[str]
        """
        return self._political_function

    @political_function.setter
    def political_function(self, political_function):
        """Sets the political_function of this Referee.

        Description not available  # noqa: E501

        :param political_function: The political_function of this Referee.
        :type political_function: List[str]
        """

        self._political_function = political_function

    @property
    def honours(self):
        """Gets the honours of this Referee.

        Description not available  # noqa: E501

        :return: The honours of this Referee.
        :rtype: List[object]
        """
        return self._honours

    @honours.setter
    def honours(self, honours):
        """Sets the honours of this Referee.

        Description not available  # noqa: E501

        :param honours: The honours of this Referee.
        :type honours: List[object]
        """

        self._honours = honours

    @property
    def olympic_games(self):
        """Gets the olympic_games of this Referee.

        Description not available  # noqa: E501

        :return: The olympic_games of this Referee.
        :rtype: List[object]
        """
        return self._olympic_games

    @olympic_games.setter
    def olympic_games(self, olympic_games):
        """Sets the olympic_games of this Referee.

        Description not available  # noqa: E501

        :param olympic_games: The olympic_games of this Referee.
        :type olympic_games: List[object]
        """

        self._olympic_games = olympic_games

    @property
    def hair_color(self):
        """Gets the hair_color of this Referee.

        Description not available  # noqa: E501

        :return: The hair_color of this Referee.
        :rtype: List[object]
        """
        return self._hair_color

    @hair_color.setter
    def hair_color(self, hair_color):
        """Sets the hair_color of this Referee.

        Description not available  # noqa: E501

        :param hair_color: The hair_color of this Referee.
        :type hair_color: List[object]
        """

        self._hair_color = hair_color

    @property
    def foot(self):
        """Gets the foot of this Referee.

        Description not available  # noqa: E501

        :return: The foot of this Referee.
        :rtype: List[str]
        """
        return self._foot

    @foot.setter
    def foot(self, foot):
        """Sets the foot of this Referee.

        Description not available  # noqa: E501

        :param foot: The foot of this Referee.
        :type foot: List[str]
        """

        self._foot = foot

    @property
    def measurements(self):
        """Gets the measurements of this Referee.

        Description not available  # noqa: E501

        :return: The measurements of this Referee.
        :rtype: List[str]
        """
        return self._measurements

    @measurements.setter
    def measurements(self, measurements):
        """Sets the measurements of this Referee.

        Description not available  # noqa: E501

        :param measurements: The measurements of this Referee.
        :type measurements: List[str]
        """

        self._measurements = measurements

    @property
    def hand(self):
        """Gets the hand of this Referee.

        Description not available  # noqa: E501

        :return: The hand of this Referee.
        :rtype: List[object]
        """
        return self._hand

    @hand.setter
    def hand(self, hand):
        """Sets the hand of this Referee.

        Description not available  # noqa: E501

        :param hand: The hand of this Referee.
        :type hand: List[object]
        """

        self._hand = hand

    @property
    def federation(self):
        """Gets the federation of this Referee.

        Description not available  # noqa: E501

        :return: The federation of this Referee.
        :rtype: List[object]
        """
        return self._federation

    @federation.setter
    def federation(self, federation):
        """Sets the federation of this Referee.

        Description not available  # noqa: E501

        :param federation: The federation of this Referee.
        :type federation: List[object]
        """

        self._federation = federation

    @property
    def circumcised(self):
        """Gets the circumcised of this Referee.

        Description not available  # noqa: E501

        :return: The circumcised of this Referee.
        :rtype: List[str]
        """
        return self._circumcised

    @circumcised.setter
    def circumcised(self, circumcised):
        """Sets the circumcised of this Referee.

        Description not available  # noqa: E501

        :param circumcised: The circumcised of this Referee.
        :type circumcised: List[str]
        """

        self._circumcised = circumcised

    @property
    def penis_length(self):
        """Gets the penis_length of this Referee.

        Description not available  # noqa: E501

        :return: The penis_length of this Referee.
        :rtype: List[str]
        """
        return self._penis_length

    @penis_length.setter
    def penis_length(self, penis_length):
        """Sets the penis_length of this Referee.

        Description not available  # noqa: E501

        :param penis_length: The penis_length of this Referee.
        :type penis_length: List[str]
        """

        self._penis_length = penis_length

    @property
    def coemperor(self):
        """Gets the coemperor of this Referee.

        Description not available  # noqa: E501

        :return: The coemperor of this Referee.
        :rtype: List[object]
        """
        return self._coemperor

    @coemperor.setter
    def coemperor(self, coemperor):
        """Sets the coemperor of this Referee.

        Description not available  # noqa: E501

        :param coemperor: The coemperor of this Referee.
        :type coemperor: List[object]
        """

        self._coemperor = coemperor

    @property
    def detractor(self):
        """Gets the detractor of this Referee.

        Description not available  # noqa: E501

        :return: The detractor of this Referee.
        :rtype: List[object]
        """
        return self._detractor

    @detractor.setter
    def detractor(self, detractor):
        """Sets the detractor of this Referee.

        Description not available  # noqa: E501

        :param detractor: The detractor of this Referee.
        :type detractor: List[object]
        """

        self._detractor = detractor

    @property
    def selibr_id(self):
        """Gets the selibr_id of this Referee.

        Authority data from the National Library of Sweden  # noqa: E501

        :return: The selibr_id of this Referee.
        :rtype: List[str]
        """
        return self._selibr_id

    @selibr_id.setter
    def selibr_id(self, selibr_id):
        """Sets the selibr_id of this Referee.

        Authority data from the National Library of Sweden  # noqa: E501

        :param selibr_id: The selibr_id of this Referee.
        :type selibr_id: List[str]
        """

        self._selibr_id = selibr_id

    @property
    def danse_competition(self):
        """Gets the danse_competition of this Referee.

        Description not available  # noqa: E501

        :return: The danse_competition of this Referee.
        :rtype: List[str]
        """
        return self._danse_competition

    @danse_competition.setter
    def danse_competition(self, danse_competition):
        """Sets the danse_competition of this Referee.

        Description not available  # noqa: E501

        :param danse_competition: The danse_competition of this Referee.
        :type danse_competition: List[str]
        """

        self._danse_competition = danse_competition

    @property
    def sex(self):
        """Gets the sex of this Referee.

        Description not available  # noqa: E501

        :return: The sex of this Referee.
        :rtype: List[str]
        """
        return self._sex

    @sex.setter
    def sex(self, sex):
        """Sets the sex of this Referee.

        Description not available  # noqa: E501

        :param sex: The sex of this Referee.
        :type sex: List[str]
        """

        self._sex = sex

    @property
    def sexual_orientation(self):
        """Gets the sexual_orientation of this Referee.

        Description not available  # noqa: E501

        :return: The sexual_orientation of this Referee.
        :rtype: List[object]
        """
        return self._sexual_orientation

    @sexual_orientation.setter
    def sexual_orientation(self, sexual_orientation):
        """Sets the sexual_orientation of this Referee.

        Description not available  # noqa: E501

        :param sexual_orientation: The sexual_orientation of this Referee.
        :type sexual_orientation: List[object]
        """

        self._sexual_orientation = sexual_orientation

    @property
    def partner(self):
        """Gets the partner of this Referee.

        Description not available  # noqa: E501

        :return: The partner of this Referee.
        :rtype: List[object]
        """
        return self._partner

    @partner.setter
    def partner(self, partner):
        """Sets the partner of this Referee.

        Description not available  # noqa: E501

        :param partner: The partner of this Referee.
        :type partner: List[object]
        """

        self._partner = partner

    @property
    def birth_year(self):
        """Gets the birth_year of this Referee.

        Description not available  # noqa: E501

        :return: The birth_year of this Referee.
        :rtype: List[str]
        """
        return self._birth_year

    @birth_year.setter
    def birth_year(self, birth_year):
        """Sets the birth_year of this Referee.

        Description not available  # noqa: E501

        :param birth_year: The birth_year of this Referee.
        :type birth_year: List[str]
        """

        self._birth_year = birth_year

    @property
    def sports_function(self):
        """Gets the sports_function of this Referee.

        Description not available  # noqa: E501

        :return: The sports_function of this Referee.
        :rtype: List[str]
        """
        return self._sports_function

    @sports_function.setter
    def sports_function(self, sports_function):
        """Sets the sports_function of this Referee.

        Description not available  # noqa: E501

        :param sports_function: The sports_function of this Referee.
        :type sports_function: List[str]
        """

        self._sports_function = sports_function

    @property
    def orcid_id(self):
        """Gets the orcid_id of this Referee.

        Authority data on researchers, academics, etc. The ID range has been defined as a subset of the forthcoming ISNI range.  # noqa: E501

        :return: The orcid_id of this Referee.
        :rtype: List[str]
        """
        return self._orcid_id

    @orcid_id.setter
    def orcid_id(self, orcid_id):
        """Sets the orcid_id of this Referee.

        Authority data on researchers, academics, etc. The ID range has been defined as a subset of the forthcoming ISNI range.  # noqa: E501

        :param orcid_id: The orcid_id of this Referee.
        :type orcid_id: List[str]
        """

        self._orcid_id = orcid_id

    @property
    def election_date(self):
        """Gets the election_date of this Referee.

        Description not available  # noqa: E501

        :return: The election_date of this Referee.
        :rtype: List[str]
        """
        return self._election_date

    @election_date.setter
    def election_date(self, election_date):
        """Sets the election_date of this Referee.

        Description not available  # noqa: E501

        :param election_date: The election_date of this Referee.
        :type election_date: List[str]
        """

        self._election_date = election_date

    @property
    def sport_discipline(self):
        """Gets the sport_discipline of this Referee.

        the sport discipline the athlete practices, e.g. Diving, or that a board member of a sporting club is focussing at  # noqa: E501

        :return: The sport_discipline of this Referee.
        :rtype: List[object]
        """
        return self._sport_discipline

    @sport_discipline.setter
    def sport_discipline(self, sport_discipline):
        """Sets the sport_discipline of this Referee.

        the sport discipline the athlete practices, e.g. Diving, or that a board member of a sporting club is focussing at  # noqa: E501

        :param sport_discipline: The sport_discipline of this Referee.
        :type sport_discipline: List[object]
        """

        self._sport_discipline = sport_discipline

    @property
    def collaboration(self):
        """Gets the collaboration of this Referee.

        Description not available  # noqa: E501

        :return: The collaboration of this Referee.
        :rtype: List[object]
        """
        return self._collaboration

    @collaboration.setter
    def collaboration(self, collaboration):
        """Sets the collaboration of this Referee.

        Description not available  # noqa: E501

        :param collaboration: The collaboration of this Referee.
        :type collaboration: List[object]
        """

        self._collaboration = collaboration

    @property
    def national_team_year(self):
        """Gets the national_team_year of this Referee.

        Description not available  # noqa: E501

        :return: The national_team_year of this Referee.
        :rtype: List[str]
        """
        return self._national_team_year

    @national_team_year.setter
    def national_team_year(self, national_team_year):
        """Sets the national_team_year of this Referee.

        Description not available  # noqa: E501

        :param national_team_year: The national_team_year of this Referee.
        :type national_team_year: List[str]
        """

        self._national_team_year = national_team_year

    @property
    def number_of_run(self):
        """Gets the number_of_run of this Referee.

        Description not available  # noqa: E501

        :return: The number_of_run of this Referee.
        :rtype: List[int]
        """
        return self._number_of_run

    @number_of_run.setter
    def number_of_run(self, number_of_run):
        """Sets the number_of_run of this Referee.

        Description not available  # noqa: E501

        :param number_of_run: The number_of_run of this Referee.
        :type number_of_run: List[int]
        """

        self._number_of_run = number_of_run

    @property
    def spouse_name(self):
        """Gets the spouse_name of this Referee.

        Description not available  # noqa: E501

        :return: The spouse_name of this Referee.
        :rtype: List[str]
        """
        return self._spouse_name

    @spouse_name.setter
    def spouse_name(self, spouse_name):
        """Sets the spouse_name of this Referee.

        Description not available  # noqa: E501

        :param spouse_name: The spouse_name of this Referee.
        :type spouse_name: List[str]
        """

        self._spouse_name = spouse_name

    @property
    def lah_hof(self):
        """Gets the lah_hof of this Referee.

        Description not available  # noqa: E501

        :return: The lah_hof of this Referee.
        :rtype: List[str]
        """
        return self._lah_hof

    @lah_hof.setter
    def lah_hof(self, lah_hof):
        """Sets the lah_hof of this Referee.

        Description not available  # noqa: E501

        :param lah_hof: The lah_hof of this Referee.
        :type lah_hof: List[str]
        """

        self._lah_hof = lah_hof

    @property
    def derived_word(self):
        """Gets the derived_word of this Referee.

        Description not available  # noqa: E501

        :return: The derived_word of this Referee.
        :rtype: List[str]
        """
        return self._derived_word

    @derived_word.setter
    def derived_word(self, derived_word):
        """Sets the derived_word of this Referee.

        Description not available  # noqa: E501

        :param derived_word: The derived_word of this Referee.
        :type derived_word: List[str]
        """

        self._derived_word = derived_word

    @property
    def current_team_manager(self):
        """Gets the current_team_manager of this Referee.

        Description not available  # noqa: E501

        :return: The current_team_manager of this Referee.
        :rtype: List[object]
        """
        return self._current_team_manager

    @current_team_manager.setter
    def current_team_manager(self, current_team_manager):
        """Sets the current_team_manager of this Referee.

        Description not available  # noqa: E501

        :param current_team_manager: The current_team_manager of this Referee.
        :type current_team_manager: List[object]
        """

        self._current_team_manager = current_team_manager

    @property
    def little_pool_record(self):
        """Gets the little_pool_record of this Referee.

        Description not available  # noqa: E501

        :return: The little_pool_record of this Referee.
        :rtype: List[str]
        """
        return self._little_pool_record

    @little_pool_record.setter
    def little_pool_record(self, little_pool_record):
        """Sets the little_pool_record of this Referee.

        Description not available  # noqa: E501

        :param little_pool_record: The little_pool_record of this Referee.
        :type little_pool_record: List[str]
        """

        self._little_pool_record = little_pool_record

    @property
    def bpn_id(self):
        """Gets the bpn_id of this Referee.

        Dutch project with material for 40,000 digitized biographies, including former colonies of the Netherlands.  # noqa: E501

        :return: The bpn_id of this Referee.
        :rtype: List[str]
        """
        return self._bpn_id

    @bpn_id.setter
    def bpn_id(self, bpn_id):
        """Sets the bpn_id of this Referee.

        Dutch project with material for 40,000 digitized biographies, including former colonies of the Netherlands.  # noqa: E501

        :param bpn_id: The bpn_id of this Referee.
        :type bpn_id: List[str]
        """

        self._bpn_id = bpn_id

    @property
    def free_danse_score(self):
        """Gets the free_danse_score of this Referee.

        Description not available  # noqa: E501

        :return: The free_danse_score of this Referee.
        :rtype: List[str]
        """
        return self._free_danse_score

    @free_danse_score.setter
    def free_danse_score(self, free_danse_score):
        """Sets the free_danse_score of this Referee.

        Description not available  # noqa: E501

        :param free_danse_score: The free_danse_score of this Referee.
        :type free_danse_score: List[str]
        """

        self._free_danse_score = free_danse_score

    @property
    def project(self):
        """Gets the project of this Referee.

        Description not available  # noqa: E501

        :return: The project of this Referee.
        :rtype: List[object]
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this Referee.

        Description not available  # noqa: E501

        :param project: The project of this Referee.
        :type project: List[object]
        """

        self._project = project

    @property
    def active_years(self):
        """Gets the active_years of this Referee.

        Description not available  # noqa: E501

        :return: The active_years of this Referee.
        :rtype: List[object]
        """
        return self._active_years

    @active_years.setter
    def active_years(self, active_years):
        """Sets the active_years of this Referee.

        Description not available  # noqa: E501

        :param active_years: The active_years of this Referee.
        :type active_years: List[object]
        """

        self._active_years = active_years

    @property
    def title_date(self):
        """Gets the title_date of this Referee.

        Description not available  # noqa: E501

        :return: The title_date of this Referee.
        :rtype: List[str]
        """
        return self._title_date

    @title_date.setter
    def title_date(self, title_date):
        """Sets the title_date of this Referee.

        Description not available  # noqa: E501

        :param title_date: The title_date of this Referee.
        :type title_date: List[str]
        """

        self._title_date = title_date

    @property
    def blood_group(self):
        """Gets the blood_group of this Referee.

        Description not available  # noqa: E501

        :return: The blood_group of this Referee.
        :rtype: List[str]
        """
        return self._blood_group

    @blood_group.setter
    def blood_group(self, blood_group):
        """Sets the blood_group of this Referee.

        Description not available  # noqa: E501

        :param blood_group: The blood_group of this Referee.
        :type blood_group: List[str]
        """

        self._blood_group = blood_group

    @property
    def school(self):
        """Gets the school of this Referee.

        school a person goes or went to  # noqa: E501

        :return: The school of this Referee.
        :rtype: List[object]
        """
        return self._school

    @school.setter
    def school(self, school):
        """Sets the school of this Referee.

        school a person goes or went to  # noqa: E501

        :param school: The school of this Referee.
        :type school: List[object]
        """

        self._school = school

    @property
    def death_place(self):
        """Gets the death_place of this Referee.

        the place where they died  # noqa: E501

        :return: The death_place of this Referee.
        :rtype: List[object]
        """
        return self._death_place

    @death_place.setter
    def death_place(self, death_place):
        """Sets the death_place of this Referee.

        the place where they died  # noqa: E501

        :param death_place: The death_place of this Referee.
        :type death_place: List[object]
        """

        self._death_place = death_place

    @property
    def victory_percentage_as_mgr(self):
        """Gets the victory_percentage_as_mgr of this Referee.

        Description not available  # noqa: E501

        :return: The victory_percentage_as_mgr of this Referee.
        :rtype: List[float]
        """
        return self._victory_percentage_as_mgr

    @victory_percentage_as_mgr.setter
    def victory_percentage_as_mgr(self, victory_percentage_as_mgr):
        """Sets the victory_percentage_as_mgr of this Referee.

        Description not available  # noqa: E501

        :param victory_percentage_as_mgr: The victory_percentage_as_mgr of this Referee.
        :type victory_percentage_as_mgr: List[float]
        """

        self._victory_percentage_as_mgr = victory_percentage_as_mgr

    @property
    def imposed_danse_competition(self):
        """Gets the imposed_danse_competition of this Referee.

        Description not available  # noqa: E501

        :return: The imposed_danse_competition of this Referee.
        :rtype: List[str]
        """
        return self._imposed_danse_competition

    @imposed_danse_competition.setter
    def imposed_danse_competition(self, imposed_danse_competition):
        """Sets the imposed_danse_competition of this Referee.

        Description not available  # noqa: E501

        :param imposed_danse_competition: The imposed_danse_competition of this Referee.
        :type imposed_danse_competition: List[str]
        """

        self._imposed_danse_competition = imposed_danse_competition

    @property
    def shoot(self):
        """Gets the shoot of this Referee.

        Description not available  # noqa: E501

        :return: The shoot of this Referee.
        :rtype: List[str]
        """
        return self._shoot

    @shoot.setter
    def shoot(self, shoot):
        """Sets the shoot of this Referee.

        Description not available  # noqa: E501

        :param shoot: The shoot of this Referee.
        :type shoot: List[str]
        """

        self._shoot = shoot

    @property
    def education_place(self):
        """Gets the education_place of this Referee.

        Description not available  # noqa: E501

        :return: The education_place of this Referee.
        :rtype: List[object]
        """
        return self._education_place

    @education_place.setter
    def education_place(self, education_place):
        """Sets the education_place of this Referee.

        Description not available  # noqa: E501

        :param education_place: The education_place of this Referee.
        :type education_place: List[object]
        """

        self._education_place = education_place

    @property
    def match_point(self):
        """Gets the match_point of this Referee.

        Description not available  # noqa: E501

        :return: The match_point of this Referee.
        :rtype: List[str]
        """
        return self._match_point

    @match_point.setter
    def match_point(self, match_point):
        """Sets the match_point of this Referee.

        Description not available  # noqa: E501

        :param match_point: The match_point of this Referee.
        :type match_point: List[str]
        """

        self._match_point = match_point

    @property
    def reign_name(self):
        """Gets the reign_name of this Referee.

        Description not available  # noqa: E501

        :return: The reign_name of this Referee.
        :rtype: List[str]
        """
        return self._reign_name

    @reign_name.setter
    def reign_name(self, reign_name):
        """Sets the reign_name of this Referee.

        Description not available  # noqa: E501

        :param reign_name: The reign_name of this Referee.
        :type reign_name: List[str]
        """

        self._reign_name = reign_name

    @property
    def pro_period(self):
        """Gets the pro_period of this Referee.

        Description not available  # noqa: E501

        :return: The pro_period of this Referee.
        :rtype: List[str]
        """
        return self._pro_period

    @pro_period.setter
    def pro_period(self, pro_period):
        """Sets the pro_period of this Referee.

        Description not available  # noqa: E501

        :param pro_period: The pro_period of this Referee.
        :type pro_period: List[str]
        """

        self._pro_period = pro_period

    @property
    def influenced_by(self):
        """Gets the influenced_by of this Referee.

        Description not available  # noqa: E501

        :return: The influenced_by of this Referee.
        :rtype: List[object]
        """
        return self._influenced_by

    @influenced_by.setter
    def influenced_by(self, influenced_by):
        """Sets the influenced_by of this Referee.

        Description not available  # noqa: E501

        :param influenced_by: The influenced_by of this Referee.
        :type influenced_by: List[object]
        """

        self._influenced_by = influenced_by

    @property
    def nla_id(self):
        """Gets the nla_id of this Referee.

        NLA Trove’s People and Organisation view allows the discovery of biographical and other contextual information about people and organisations. Search also available via VIAF.  # noqa: E501

        :return: The nla_id of this Referee.
        :rtype: List[str]
        """
        return self._nla_id

    @nla_id.setter
    def nla_id(self, nla_id):
        """Sets the nla_id of this Referee.

        NLA Trove’s People and Organisation view allows the discovery of biographical and other contextual information about people and organisations. Search also available via VIAF.  # noqa: E501

        :param nla_id: The nla_id of this Referee.
        :type nla_id: List[str]
        """

        self._nla_id = nla_id

    @property
    def cousurper(self):
        """Gets the cousurper of this Referee.

        Description not available  # noqa: E501

        :return: The cousurper of this Referee.
        :rtype: List[object]
        """
        return self._cousurper

    @cousurper.setter
    def cousurper(self, cousurper):
        """Sets the cousurper of this Referee.

        Description not available  # noqa: E501

        :param cousurper: The cousurper of this Referee.
        :type cousurper: List[object]
        """

        self._cousurper = cousurper

    @property
    def race_wins(self):
        """Gets the race_wins of this Referee.

        Description not available  # noqa: E501

        :return: The race_wins of this Referee.
        :rtype: List[int]
        """
        return self._race_wins

    @race_wins.setter
    def race_wins(self, race_wins):
        """Sets the race_wins of this Referee.

        Description not available  # noqa: E501

        :param race_wins: The race_wins of this Referee.
        :type race_wins: List[int]
        """

        self._race_wins = race_wins

    @property
    def world_tournament_bronze(self):
        """Gets the world_tournament_bronze of this Referee.

        Description not available  # noqa: E501

        :return: The world_tournament_bronze of this Referee.
        :rtype: List[int]
        """
        return self._world_tournament_bronze

    @world_tournament_bronze.setter
    def world_tournament_bronze(self, world_tournament_bronze):
        """Sets the world_tournament_bronze of this Referee.

        Description not available  # noqa: E501

        :param world_tournament_bronze: The world_tournament_bronze of this Referee.
        :type world_tournament_bronze: List[int]
        """

        self._world_tournament_bronze = world_tournament_bronze

    @property
    def jutsu(self):
        """Gets the jutsu of this Referee.

        Description not available  # noqa: E501

        :return: The jutsu of this Referee.
        :rtype: List[str]
        """
        return self._jutsu

    @jutsu.setter
    def jutsu(self, jutsu):
        """Sets the jutsu of this Referee.

        Description not available  # noqa: E501

        :param jutsu: The jutsu of this Referee.
        :type jutsu: List[str]
        """

        self._jutsu = jutsu

    @property
    def weight(self):
        """Gets the weight of this Referee.

        Description not available  # noqa: E501

        :return: The weight of this Referee.
        :rtype: List[object]
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this Referee.

        Description not available  # noqa: E501

        :param weight: The weight of this Referee.
        :type weight: List[object]
        """

        self._weight = weight

    @property
    def other_media(self):
        """Gets the other_media of this Referee.

        Description not available  # noqa: E501

        :return: The other_media of this Referee.
        :rtype: List[object]
        """
        return self._other_media

    @other_media.setter
    def other_media(self, other_media):
        """Sets the other_media of this Referee.

        Description not available  # noqa: E501

        :param other_media: The other_media of this Referee.
        :type other_media: List[object]
        """

        self._other_media = other_media

    @property
    def alma_mater(self):
        """Gets the alma_mater of this Referee.

        schools that they attended  # noqa: E501

        :return: The alma_mater of this Referee.
        :rtype: List[object]
        """
        return self._alma_mater

    @alma_mater.setter
    def alma_mater(self, alma_mater):
        """Sets the alma_mater of this Referee.

        schools that they attended  # noqa: E501

        :param alma_mater: The alma_mater of this Referee.
        :type alma_mater: List[object]
        """

        self._alma_mater = alma_mater

    @property
    def imposed_danse_score(self):
        """Gets the imposed_danse_score of this Referee.

        Description not available  # noqa: E501

        :return: The imposed_danse_score of this Referee.
        :rtype: List[str]
        """
        return self._imposed_danse_score

    @imposed_danse_score.setter
    def imposed_danse_score(self, imposed_danse_score):
        """Sets the imposed_danse_score of this Referee.

        Description not available  # noqa: E501

        :param imposed_danse_score: The imposed_danse_score of this Referee.
        :type imposed_danse_score: List[str]
        """

        self._imposed_danse_score = imposed_danse_score

    @property
    def known_for(self):
        """Gets the known_for of this Referee.

        Description not available  # noqa: E501

        :return: The known_for of this Referee.
        :rtype: List[object]
        """
        return self._known_for

    @known_for.setter
    def known_for(self, known_for):
        """Sets the known_for of this Referee.

        Description not available  # noqa: E501

        :param known_for: The known_for of this Referee.
        :type known_for: List[object]
        """

        self._known_for = known_for

    @property
    def big_pool_record(self):
        """Gets the big_pool_record of this Referee.

        Description not available  # noqa: E501

        :return: The big_pool_record of this Referee.
        :rtype: List[str]
        """
        return self._big_pool_record

    @big_pool_record.setter
    def big_pool_record(self, big_pool_record):
        """Sets the big_pool_record of this Referee.

        Description not available  # noqa: E501

        :param big_pool_record: The big_pool_record of this Referee.
        :type big_pool_record: List[str]
        """

        self._big_pool_record = big_pool_record

    @property
    def olympic_games_wins(self):
        """Gets the olympic_games_wins of this Referee.

        Description not available  # noqa: E501

        :return: The olympic_games_wins of this Referee.
        :rtype: List[str]
        """
        return self._olympic_games_wins

    @olympic_games_wins.setter
    def olympic_games_wins(self, olympic_games_wins):
        """Sets the olympic_games_wins of this Referee.

        Description not available  # noqa: E501

        :param olympic_games_wins: The olympic_games_wins of this Referee.
        :type olympic_games_wins: List[str]
        """

        self._olympic_games_wins = olympic_games_wins

    @property
    def eye_colour(self):
        """Gets the eye_colour of this Referee.

        Description not available  # noqa: E501

        :return: The eye_colour of this Referee.
        :rtype: List[str]
        """
        return self._eye_colour

    @eye_colour.setter
    def eye_colour(self, eye_colour):
        """Sets the eye_colour of this Referee.

        Description not available  # noqa: E501

        :param eye_colour: The eye_colour of this Referee.
        :type eye_colour: List[str]
        """

        self._eye_colour = eye_colour

    @property
    def world_tournament_silver(self):
        """Gets the world_tournament_silver of this Referee.

        Description not available  # noqa: E501

        :return: The world_tournament_silver of this Referee.
        :rtype: List[int]
        """
        return self._world_tournament_silver

    @world_tournament_silver.setter
    def world_tournament_silver(self, world_tournament_silver):
        """Sets the world_tournament_silver of this Referee.

        Description not available  # noqa: E501

        :param world_tournament_silver: The world_tournament_silver of this Referee.
        :type world_tournament_silver: List[int]
        """

        self._world_tournament_silver = world_tournament_silver

    @property
    def architectural_movement(self):
        """Gets the architectural_movement of this Referee.

        Description not available  # noqa: E501

        :return: The architectural_movement of this Referee.
        :rtype: List[str]
        """
        return self._architectural_movement

    @architectural_movement.setter
    def architectural_movement(self, architectural_movement):
        """Sets the architectural_movement of this Referee.

        Description not available  # noqa: E501

        :param architectural_movement: The architectural_movement of this Referee.
        :type architectural_movement: List[str]
        """

        self._architectural_movement = architectural_movement

    @property
    def mood(self):
        """Gets the mood of this Referee.

        Description not available  # noqa: E501

        :return: The mood of this Referee.
        :rtype: List[str]
        """
        return self._mood

    @mood.setter
    def mood(self, mood):
        """Sets the mood of this Referee.

        Description not available  # noqa: E501

        :param mood: The mood of this Referee.
        :type mood: List[str]
        """

        self._mood = mood

    @property
    def bibsys_id(self):
        """Gets the bibsys_id of this Referee.

        BIBSYS is a supplier of library and information systems for all Norwegian university Libraries, the National Library of Norway, college libraries, and a number of research libraries and institutions.  # noqa: E501

        :return: The bibsys_id of this Referee.
        :rtype: List[str]
        """
        return self._bibsys_id

    @bibsys_id.setter
    def bibsys_id(self, bibsys_id):
        """Sets the bibsys_id of this Referee.

        BIBSYS is a supplier of library and information systems for all Norwegian university Libraries, the National Library of Norway, college libraries, and a number of research libraries and institutions.  # noqa: E501

        :param bibsys_id: The bibsys_id of this Referee.
        :type bibsys_id: List[str]
        """

        self._bibsys_id = bibsys_id

    @property
    def iihf_hof(self):
        """Gets the iihf_hof of this Referee.

        Description not available  # noqa: E501

        :return: The iihf_hof of this Referee.
        :rtype: List[str]
        """
        return self._iihf_hof

    @iihf_hof.setter
    def iihf_hof(self, iihf_hof):
        """Sets the iihf_hof of this Referee.

        Description not available  # noqa: E501

        :param iihf_hof: The iihf_hof of this Referee.
        :type iihf_hof: List[str]
        """

        self._iihf_hof = iihf_hof

    @property
    def free_prog_score(self):
        """Gets the free_prog_score of this Referee.

        Description not available  # noqa: E501

        :return: The free_prog_score of this Referee.
        :rtype: List[str]
        """
        return self._free_prog_score

    @free_prog_score.setter
    def free_prog_score(self, free_prog_score):
        """Sets the free_prog_score of this Referee.

        Description not available  # noqa: E501

        :param free_prog_score: The free_prog_score of this Referee.
        :type free_prog_score: List[str]
        """

        self._free_prog_score = free_prog_score

    @property
    def description(self):
        """Gets the description of this Referee.

        small description  # noqa: E501

        :return: The description of this Referee.
        :rtype: List[str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Referee.

        small description  # noqa: E501

        :param description: The description of this Referee.
        :type description: List[str]
        """

        self._description = description

    @property
    def particular_sign(self):
        """Gets the particular_sign of this Referee.

        Description not available  # noqa: E501

        :return: The particular_sign of this Referee.
        :rtype: List[str]
        """
        return self._particular_sign

    @particular_sign.setter
    def particular_sign(self, particular_sign):
        """Sets the particular_sign of this Referee.

        Description not available  # noqa: E501

        :param particular_sign: The particular_sign of this Referee.
        :type particular_sign: List[str]
        """

        self._particular_sign = particular_sign

    @property
    def league_manager(self):
        """Gets the league_manager of this Referee.

        Description not available  # noqa: E501

        :return: The league_manager of this Referee.
        :rtype: List[object]
        """
        return self._league_manager

    @league_manager.setter
    def league_manager(self, league_manager):
        """Sets the league_manager of this Referee.

        Description not available  # noqa: E501

        :param league_manager: The league_manager of this Referee.
        :type league_manager: List[object]
        """

        self._league_manager = league_manager

    @property
    def junior_season(self):
        """Gets the junior_season of this Referee.

        Description not available  # noqa: E501

        :return: The junior_season of this Referee.
        :rtype: List[object]
        """
        return self._junior_season

    @junior_season.setter
    def junior_season(self, junior_season):
        """Sets the junior_season of this Referee.

        Description not available  # noqa: E501

        :param junior_season: The junior_season of this Referee.
        :type junior_season: List[object]
        """

        self._junior_season = junior_season

    @property
    def free_prog_competition(self):
        """Gets the free_prog_competition of this Referee.

        Description not available  # noqa: E501

        :return: The free_prog_competition of this Referee.
        :rtype: List[str]
        """
        return self._free_prog_competition

    @free_prog_competition.setter
    def free_prog_competition(self, free_prog_competition):
        """Sets the free_prog_competition of this Referee.

        Description not available  # noqa: E501

        :param free_prog_competition: The free_prog_competition of this Referee.
        :type free_prog_competition: List[str]
        """

        self._free_prog_competition = free_prog_competition

    @property
    def weapon(self):
        """Gets the weapon of this Referee.

        Description not available  # noqa: E501

        :return: The weapon of this Referee.
        :rtype: List[object]
        """
        return self._weapon

    @weapon.setter
    def weapon(self, weapon):
        """Sets the weapon of this Referee.

        Description not available  # noqa: E501

        :param weapon: The weapon of this Referee.
        :type weapon: List[object]
        """

        self._weapon = weapon

    @property
    def kind_of_criminal(self):
        """Gets the kind_of_criminal of this Referee.

        Description not available  # noqa: E501

        :return: The kind_of_criminal of this Referee.
        :rtype: List[str]
        """
        return self._kind_of_criminal

    @kind_of_criminal.setter
    def kind_of_criminal(self, kind_of_criminal):
        """Sets the kind_of_criminal of this Referee.

        Description not available  # noqa: E501

        :param kind_of_criminal: The kind_of_criminal of this Referee.
        :type kind_of_criminal: List[str]
        """

        self._kind_of_criminal = kind_of_criminal

    @property
    def notable_idea(self):
        """Gets the notable_idea of this Referee.

        Description not available  # noqa: E501

        :return: The notable_idea of this Referee.
        :rtype: List[object]
        """
        return self._notable_idea

    @notable_idea.setter
    def notable_idea(self, notable_idea):
        """Sets the notable_idea of this Referee.

        Description not available  # noqa: E501

        :param notable_idea: The notable_idea of this Referee.
        :type notable_idea: List[object]
        """

        self._notable_idea = notable_idea

    @property
    def player_status(self):
        """Gets the player_status of this Referee.

        Description not available  # noqa: E501

        :return: The player_status of this Referee.
        :rtype: List[str]
        """
        return self._player_status

    @player_status.setter
    def player_status(self, player_status):
        """Sets the player_status of this Referee.

        Description not available  # noqa: E501

        :param player_status: The player_status of this Referee.
        :type player_status: List[str]
        """

        self._player_status = player_status

    @property
    def other_function(self):
        """Gets the other_function of this Referee.

        Description not available  # noqa: E501

        :return: The other_function of this Referee.
        :rtype: List[object]
        """
        return self._other_function

    @other_function.setter
    def other_function(self, other_function):
        """Sets the other_function of this Referee.

        Description not available  # noqa: E501

        :param other_function: The other_function of this Referee.
        :type other_function: List[object]
        """

        self._other_function = other_function

    @property
    def continental_tournament_silver(self):
        """Gets the continental_tournament_silver of this Referee.

        Description not available  # noqa: E501

        :return: The continental_tournament_silver of this Referee.
        :rtype: List[int]
        """
        return self._continental_tournament_silver

    @continental_tournament_silver.setter
    def continental_tournament_silver(self, continental_tournament_silver):
        """Sets the continental_tournament_silver of this Referee.

        Description not available  # noqa: E501

        :param continental_tournament_silver: The continental_tournament_silver of this Referee.
        :type continental_tournament_silver: List[int]
        """

        self._continental_tournament_silver = continental_tournament_silver

    @property
    def career_station(self):
        """Gets the career_station of this Referee.

        this property links to a step in the career of a person, e.g. a soccer player, holding information on the time span, matches and goals he or she achieved at a club.  # noqa: E501

        :return: The career_station of this Referee.
        :rtype: List[object]
        """
        return self._career_station

    @career_station.setter
    def career_station(self, career_station):
        """Sets the career_station of this Referee.

        this property links to a step in the career of a person, e.g. a soccer player, holding information on the time span, matches and goals he or she achieved at a club.  # noqa: E501

        :param career_station: The career_station of this Referee.
        :type career_station: List[object]
        """

        self._career_station = career_station

    @property
    def resting_place_position(self):
        """Gets the resting_place_position of this Referee.

        Description not available  # noqa: E501

        :return: The resting_place_position of this Referee.
        :rtype: List[object]
        """
        return self._resting_place_position

    @resting_place_position.setter
    def resting_place_position(self, resting_place_position):
        """Sets the resting_place_position of this Referee.

        Description not available  # noqa: E501

        :param resting_place_position: The resting_place_position of this Referee.
        :type resting_place_position: List[object]
        """

        self._resting_place_position = resting_place_position

    @property
    def original_danse_competition(self):
        """Gets the original_danse_competition of this Referee.

        Description not available  # noqa: E501

        :return: The original_danse_competition of this Referee.
        :rtype: List[str]
        """
        return self._original_danse_competition

    @original_danse_competition.setter
    def original_danse_competition(self, original_danse_competition):
        """Sets the original_danse_competition of this Referee.

        Description not available  # noqa: E501

        :param original_danse_competition: The original_danse_competition of this Referee.
        :type original_danse_competition: List[str]
        """

        self._original_danse_competition = original_danse_competition

    @property
    def status_manager(self):
        """Gets the status_manager of this Referee.

        Description not available  # noqa: E501

        :return: The status_manager of this Referee.
        :rtype: List[str]
        """
        return self._status_manager

    @status_manager.setter
    def status_manager(self, status_manager):
        """Sets the status_manager of this Referee.

        Description not available  # noqa: E501

        :param status_manager: The status_manager of this Referee.
        :type status_manager: List[str]
        """

        self._status_manager = status_manager

    @property
    def national_tournament(self):
        """Gets the national_tournament of this Referee.

        Description not available  # noqa: E501

        :return: The national_tournament of this Referee.
        :rtype: List[object]
        """
        return self._national_tournament

    @national_tournament.setter
    def national_tournament(self, national_tournament):
        """Sets the national_tournament of this Referee.

        Description not available  # noqa: E501

        :param national_tournament: The national_tournament of this Referee.
        :type national_tournament: List[object]
        """

        self._national_tournament = national_tournament

    @property
    def hometown(self):
        """Gets the hometown of this Referee.

        Description not available  # noqa: E501

        :return: The hometown of this Referee.
        :rtype: List[object]
        """
        return self._hometown

    @hometown.setter
    def hometown(self, hometown):
        """Sets the hometown of this Referee.

        Description not available  # noqa: E501

        :param hometown: The hometown of this Referee.
        :type hometown: List[object]
        """

        self._hometown = hometown

    @property
    def dead_in_fight_place(self):
        """Gets the dead_in_fight_place of this Referee.

        Description not available  # noqa: E501

        :return: The dead_in_fight_place of this Referee.
        :rtype: List[str]
        """
        return self._dead_in_fight_place

    @dead_in_fight_place.setter
    def dead_in_fight_place(self, dead_in_fight_place):
        """Sets the dead_in_fight_place of this Referee.

        Description not available  # noqa: E501

        :param dead_in_fight_place: The dead_in_fight_place of this Referee.
        :type dead_in_fight_place: List[str]
        """

        self._dead_in_fight_place = dead_in_fight_place

    @property
    def continental_tournament_bronze(self):
        """Gets the continental_tournament_bronze of this Referee.

        Description not available  # noqa: E501

        :return: The continental_tournament_bronze of this Referee.
        :rtype: List[int]
        """
        return self._continental_tournament_bronze

    @continental_tournament_bronze.setter
    def continental_tournament_bronze(self, continental_tournament_bronze):
        """Sets the continental_tournament_bronze of this Referee.

        Description not available  # noqa: E501

        :param continental_tournament_bronze: The continental_tournament_bronze of this Referee.
        :type continental_tournament_bronze: List[int]
        """

        self._continental_tournament_bronze = continental_tournament_bronze

    @property
    def victory(self):
        """Gets the victory of this Referee.

        Description not available  # noqa: E501

        :return: The victory of this Referee.
        :rtype: List[int]
        """
        return self._victory

    @victory.setter
    def victory(self, victory):
        """Sets the victory of this Referee.

        Description not available  # noqa: E501

        :param victory: The victory of this Referee.
        :type victory: List[int]
        """

        self._victory = victory

    @property
    def complexion(self):
        """Gets the complexion of this Referee.

        Description not available  # noqa: E501

        :return: The complexion of this Referee.
        :rtype: List[object]
        """
        return self._complexion

    @complexion.setter
    def complexion(self, complexion):
        """Sets the complexion of this Referee.

        Description not available  # noqa: E501

        :param complexion: The complexion of this Referee.
        :type complexion: List[object]
        """

        self._complexion = complexion

    @property
    def citizenship(self):
        """Gets the citizenship of this Referee.

        Description not available  # noqa: E501

        :return: The citizenship of this Referee.
        :rtype: List[object]
        """
        return self._citizenship

    @citizenship.setter
    def citizenship(self, citizenship):
        """Sets the citizenship of this Referee.

        Description not available  # noqa: E501

        :param citizenship: The citizenship of this Referee.
        :type citizenship: List[object]
        """

        self._citizenship = citizenship

    @property
    def start(self):
        """Gets the start of this Referee.

        Description not available  # noqa: E501

        :return: The start of this Referee.
        :rtype: List[int]
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this Referee.

        Description not available  # noqa: E501

        :param start: The start of this Referee.
        :type start: List[int]
        """

        self._start = start

    @property
    def tessitura(self):
        """Gets the tessitura of this Referee.

        Description not available  # noqa: E501

        :return: The tessitura of this Referee.
        :rtype: List[str]
        """
        return self._tessitura

    @tessitura.setter
    def tessitura(self, tessitura):
        """Sets the tessitura of this Referee.

        Description not available  # noqa: E501

        :param tessitura: The tessitura of this Referee.
        :type tessitura: List[str]
        """

        self._tessitura = tessitura

    @property
    def start_career(self):
        """Gets the start_career of this Referee.

        Description not available  # noqa: E501

        :return: The start_career of this Referee.
        :rtype: List[str]
        """
        return self._start_career

    @start_career.setter
    def start_career(self, start_career):
        """Sets the start_career of this Referee.

        Description not available  # noqa: E501

        :param start_career: The start_career of this Referee.
        :type start_career: List[str]
        """

        self._start_career = start_career

    @property
    def label(self):
        """Gets the label of this Referee.

        short description of the resource  # noqa: E501

        :return: The label of this Referee.
        :rtype: List[str]
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Referee.

        short description of the resource  # noqa: E501

        :param label: The label of this Referee.
        :type label: List[str]
        """

        self._label = label

    @property
    def birth_date(self):
        """Gets the birth_date of this Referee.

        Description not available  # noqa: E501

        :return: The birth_date of this Referee.
        :rtype: List[str]
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date):
        """Sets the birth_date of this Referee.

        Description not available  # noqa: E501

        :param birth_date: The birth_date of this Referee.
        :type birth_date: List[str]
        """

        self._birth_date = birth_date

    @property
    def national_tournament_silver(self):
        """Gets the national_tournament_silver of this Referee.

        Description not available  # noqa: E501

        :return: The national_tournament_silver of this Referee.
        :rtype: List[int]
        """
        return self._national_tournament_silver

    @national_tournament_silver.setter
    def national_tournament_silver(self, national_tournament_silver):
        """Sets the national_tournament_silver of this Referee.

        Description not available  # noqa: E501

        :param national_tournament_silver: The national_tournament_silver of this Referee.
        :type national_tournament_silver: List[int]
        """

        self._national_tournament_silver = national_tournament_silver

    @property
    def other_activity(self):
        """Gets the other_activity of this Referee.

        Description not available  # noqa: E501

        :return: The other_activity of this Referee.
        :rtype: List[str]
        """
        return self._other_activity

    @other_activity.setter
    def other_activity(self, other_activity):
        """Sets the other_activity of this Referee.

        Description not available  # noqa: E501

        :param other_activity: The other_activity of this Referee.
        :type other_activity: List[str]
        """

        self._other_activity = other_activity

    @property
    def linguistics_tradition(self):
        """Gets the linguistics_tradition of this Referee.

        Description not available  # noqa: E501

        :return: The linguistics_tradition of this Referee.
        :rtype: List[object]
        """
        return self._linguistics_tradition

    @linguistics_tradition.setter
    def linguistics_tradition(self, linguistics_tradition):
        """Sets the linguistics_tradition of this Referee.

        Description not available  # noqa: E501

        :param linguistics_tradition: The linguistics_tradition of this Referee.
        :type linguistics_tradition: List[object]
        """

        self._linguistics_tradition = linguistics_tradition

    @property
    def national_tournament_bronze(self):
        """Gets the national_tournament_bronze of this Referee.

        Description not available  # noqa: E501

        :return: The national_tournament_bronze of this Referee.
        :rtype: List[int]
        """
        return self._national_tournament_bronze

    @national_tournament_bronze.setter
    def national_tournament_bronze(self, national_tournament_bronze):
        """Sets the national_tournament_bronze of this Referee.

        Description not available  # noqa: E501

        :param national_tournament_bronze: The national_tournament_bronze of this Referee.
        :type national_tournament_bronze: List[int]
        """

        self._national_tournament_bronze = national_tournament_bronze

    @property
    def escalafon(self):
        """Gets the escalafon of this Referee.

        Description not available  # noqa: E501

        :return: The escalafon of this Referee.
        :rtype: List[str]
        """
        return self._escalafon

    @escalafon.setter
    def escalafon(self, escalafon):
        """Sets the escalafon of this Referee.

        Description not available  # noqa: E501

        :param escalafon: The escalafon of this Referee.
        :type escalafon: List[str]
        """

        self._escalafon = escalafon

    @property
    def sibling(self):
        """Gets the sibling of this Referee.

        Description not available  # noqa: E501

        :return: The sibling of this Referee.
        :rtype: List[object]
        """
        return self._sibling

    @sibling.setter
    def sibling(self, sibling):
        """Sets the sibling of this Referee.

        Description not available  # noqa: E501

        :param sibling: The sibling of this Referee.
        :type sibling: List[object]
        """

        self._sibling = sibling

    @property
    def waist_size(self):
        """Gets the waist_size of this Referee.

        Description not available  # noqa: E501

        :return: The waist_size of this Referee.
        :rtype: List[float]
        """
        return self._waist_size

    @waist_size.setter
    def waist_size(self, waist_size):
        """Sets the waist_size of this Referee.

        Description not available  # noqa: E501

        :param waist_size: The waist_size of this Referee.
        :type waist_size: List[float]
        """

        self._waist_size = waist_size

    @property
    def olympic_games_gold(self):
        """Gets the olympic_games_gold of this Referee.

        Description not available  # noqa: E501

        :return: The olympic_games_gold of this Referee.
        :rtype: List[int]
        """
        return self._olympic_games_gold

    @olympic_games_gold.setter
    def olympic_games_gold(self, olympic_games_gold):
        """Sets the olympic_games_gold of this Referee.

        Description not available  # noqa: E501

        :param olympic_games_gold: The olympic_games_gold of this Referee.
        :type olympic_games_gold: List[int]
        """

        self._olympic_games_gold = olympic_games_gold

    @property
    def general_council(self):
        """Gets the general_council of this Referee.

        Description not available  # noqa: E501

        :return: The general_council of this Referee.
        :rtype: List[object]
        """
        return self._general_council

    @general_council.setter
    def general_council(self, general_council):
        """Sets the general_council of this Referee.

        Description not available  # noqa: E501

        :param general_council: The general_council of this Referee.
        :type general_council: List[object]
        """

        self._general_council = general_council

    @property
    def arrest_date(self):
        """Gets the arrest_date of this Referee.

        Description not available  # noqa: E501

        :return: The arrest_date of this Referee.
        :rtype: List[str]
        """
        return self._arrest_date

    @arrest_date.setter
    def arrest_date(self, arrest_date):
        """Sets the arrest_date of this Referee.

        Description not available  # noqa: E501

        :param arrest_date: The arrest_date of this Referee.
        :type arrest_date: List[str]
        """

        self._arrest_date = arrest_date

    @property
    def team_manager(self):
        """Gets the team_manager of this Referee.

        Description not available  # noqa: E501

        :return: The team_manager of this Referee.
        :rtype: List[object]
        """
        return self._team_manager

    @team_manager.setter
    def team_manager(self, team_manager):
        """Sets the team_manager of this Referee.

        Description not available  # noqa: E501

        :param team_manager: The team_manager of this Referee.
        :type team_manager: List[object]
        """

        self._team_manager = team_manager

    @property
    def birth_sign(self):
        """Gets the birth_sign of this Referee.

        Description not available  # noqa: E501

        :return: The birth_sign of this Referee.
        :rtype: List[object]
        """
        return self._birth_sign

    @birth_sign.setter
    def birth_sign(self, birth_sign):
        """Sets the birth_sign of this Referee.

        Description not available  # noqa: E501

        :param birth_sign: The birth_sign of this Referee.
        :type birth_sign: List[object]
        """

        self._birth_sign = birth_sign

    @property
    def artistic_function(self):
        """Gets the artistic_function of this Referee.

        Description not available  # noqa: E501

        :return: The artistic_function of this Referee.
        :rtype: List[str]
        """
        return self._artistic_function

    @artistic_function.setter
    def artistic_function(self, artistic_function):
        """Sets the artistic_function of this Referee.

        Description not available  # noqa: E501

        :param artistic_function: The artistic_function of this Referee.
        :type artistic_function: List[str]
        """

        self._artistic_function = artistic_function

    @property
    def age(self):
        """Gets the age of this Referee.

        Description not available  # noqa: E501

        :return: The age of this Referee.
        :rtype: List[int]
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this Referee.

        Description not available  # noqa: E501

        :param age: The age of this Referee.
        :type age: List[int]
        """

        self._age = age

    @property
    def college(self):
        """Gets the college of this Referee.

        Description not available  # noqa: E501

        :return: The college of this Referee.
        :rtype: List[object]
        """
        return self._college

    @college.setter
    def college(self, college):
        """Sets the college of this Referee.

        Description not available  # noqa: E501

        :param college: The college of this Referee.
        :type college: List[object]
        """

        self._college = college

    @property
    def education(self):
        """Gets the education of this Referee.

        Description not available  # noqa: E501

        :return: The education of this Referee.
        :rtype: List[object]
        """
        return self._education

    @education.setter
    def education(self, education):
        """Sets the education of this Referee.

        Description not available  # noqa: E501

        :param education: The education of this Referee.
        :type education: List[object]
        """

        self._education = education

    @property
    def movie(self):
        """Gets the movie of this Referee.

        Description not available  # noqa: E501

        :return: The movie of this Referee.
        :rtype: List[object]
        """
        return self._movie

    @movie.setter
    def movie(self, movie):
        """Sets the movie of this Referee.

        Description not available  # noqa: E501

        :param movie: The movie of this Referee.
        :type movie: List[object]
        """

        self._movie = movie

    @property
    def achievement(self):
        """Gets the achievement of this Referee.

        Description not available  # noqa: E501

        :return: The achievement of this Referee.
        :rtype: List[object]
        """
        return self._achievement

    @achievement.setter
    def achievement(self, achievement):
        """Sets the achievement of this Referee.

        Description not available  # noqa: E501

        :param achievement: The achievement of this Referee.
        :type achievement: List[object]
        """

        self._achievement = achievement

    @property
    def death_age(self):
        """Gets the death_age of this Referee.

        Description not available  # noqa: E501

        :return: The death_age of this Referee.
        :rtype: List[int]
        """
        return self._death_age

    @death_age.setter
    def death_age(self, death_age):
        """Sets the death_age of this Referee.

        Description not available  # noqa: E501

        :param death_age: The death_age of this Referee.
        :type death_age: List[int]
        """

        self._death_age = death_age

    @property
    def type(self):
        """Gets the type of this Referee.

        type of the resource  # noqa: E501

        :return: The type of this Referee.
        :rtype: List[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Referee.

        type of the resource  # noqa: E501

        :param type: The type of this Referee.
        :type type: List[str]
        """

        self._type = type

    @property
    def approach(self):
        """Gets the approach of this Referee.

        Description not available  # noqa: E501

        :return: The approach of this Referee.
        :rtype: List[object]
        """
        return self._approach

    @approach.setter
    def approach(self, approach):
        """Sets the approach of this Referee.

        Description not available  # noqa: E501

        :param approach: The approach of this Referee.
        :type approach: List[object]
        """

        self._approach = approach

    @property
    def relation(self):
        """Gets the relation of this Referee.

        Description not available  # noqa: E501

        :return: The relation of this Referee.
        :rtype: List[object]
        """
        return self._relation

    @relation.setter
    def relation(self, relation):
        """Sets the relation of this Referee.

        Description not available  # noqa: E501

        :param relation: The relation of this Referee.
        :type relation: List[object]
        """

        self._relation = relation

    @property
    def victory_as_mgr(self):
        """Gets the victory_as_mgr of this Referee.

        Description not available  # noqa: E501

        :return: The victory_as_mgr of this Referee.
        :rtype: List[int]
        """
        return self._victory_as_mgr

    @victory_as_mgr.setter
    def victory_as_mgr(self, victory_as_mgr):
        """Sets the victory_as_mgr of this Referee.

        Description not available  # noqa: E501

        :param victory_as_mgr: The victory_as_mgr of this Referee.
        :type victory_as_mgr: List[int]
        """

        self._victory_as_mgr = victory_as_mgr

    @property
    def living_place(self):
        """Gets the living_place of this Referee.

        Description not available  # noqa: E501

        :return: The living_place of this Referee.
        :rtype: List[object]
        """
        return self._living_place

    @living_place.setter
    def living_place(self, living_place):
        """Sets the living_place of this Referee.

        Description not available  # noqa: E501

        :param living_place: The living_place of this Referee.
        :type living_place: List[object]
        """

        self._living_place = living_place

    @property
    def copilote(self):
        """Gets the copilote of this Referee.

        Description not available  # noqa: E501

        :return: The copilote of this Referee.
        :rtype: List[object]
        """
        return self._copilote

    @copilote.setter
    def copilote(self, copilote):
        """Sets the copilote of this Referee.

        Description not available  # noqa: E501

        :param copilote: The copilote of this Referee.
        :type copilote: List[object]
        """

        self._copilote = copilote

    @property
    def season(self):
        """Gets the season of this Referee.

        Description not available  # noqa: E501

        :return: The season of this Referee.
        :rtype: List[object]
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this Referee.

        Description not available  # noqa: E501

        :param season: The season of this Referee.
        :type season: List[object]
        """

        self._season = season

    @property
    def start_wct(self):
        """Gets the start_wct of this Referee.

        Description not available  # noqa: E501

        :return: The start_wct of this Referee.
        :rtype: List[str]
        """
        return self._start_wct

    @start_wct.setter
    def start_wct(self, start_wct):
        """Sets the start_wct of this Referee.

        Description not available  # noqa: E501

        :param start_wct: The start_wct of this Referee.
        :type start_wct: List[str]
        """

        self._start_wct = start_wct

    @property
    def catch(self):
        """Gets the catch of this Referee.

        Description not available  # noqa: E501

        :return: The catch of this Referee.
        :rtype: List[str]
        """
        return self._catch

    @catch.setter
    def catch(self, catch):
        """Sets the catch of this Referee.

        Description not available  # noqa: E501

        :param catch: The catch of this Referee.
        :type catch: List[str]
        """

        self._catch = catch

    @property
    def id(self):
        """Gets the id of this Referee.

        identifier  # noqa: E501

        :return: The id of this Referee.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Referee.

        identifier  # noqa: E501

        :param id: The id of this Referee.
        :type id: str
        """

        self._id = id

    @property
    def feat(self):
        """Gets the feat of this Referee.

        Description not available  # noqa: E501

        :return: The feat of this Referee.
        :rtype: List[str]
        """
        return self._feat

    @feat.setter
    def feat(self, feat):
        """Sets the feat of this Referee.

        Description not available  # noqa: E501

        :param feat: The feat of this Referee.
        :type feat: List[str]
        """

        self._feat = feat

    @property
    def decoration(self):
        """Gets the decoration of this Referee.

        Description not available  # noqa: E501

        :return: The decoration of this Referee.
        :rtype: List[object]
        """
        return self._decoration

    @decoration.setter
    def decoration(self, decoration):
        """Sets the decoration of this Referee.

        Description not available  # noqa: E501

        :param decoration: The decoration of this Referee.
        :type decoration: List[object]
        """

        self._decoration = decoration

    @property
    def case(self):
        """Gets the case of this Referee.

        Description not available  # noqa: E501

        :return: The case of this Referee.
        :rtype: List[str]
        """
        return self._case

    @case.setter
    def case(self, case):
        """Sets the case of this Referee.

        Description not available  # noqa: E501

        :param case: The case of this Referee.
        :type case: List[str]
        """

        self._case = case

    @property
    def sentence(self):
        """Gets the sentence of this Referee.

        Description not available  # noqa: E501

        :return: The sentence of this Referee.
        :rtype: List[str]
        """
        return self._sentence

    @sentence.setter
    def sentence(self, sentence):
        """Sets the sentence of this Referee.

        Description not available  # noqa: E501

        :param sentence: The sentence of this Referee.
        :type sentence: List[str]
        """

        self._sentence = sentence

    @property
    def profession(self):
        """Gets the profession of this Referee.

        Description not available  # noqa: E501

        :return: The profession of this Referee.
        :rtype: List[object]
        """
        return self._profession

    @profession.setter
    def profession(self, profession):
        """Sets the profession of this Referee.

        Description not available  # noqa: E501

        :param profession: The profession of this Referee.
        :type profession: List[object]
        """

        self._profession = profession

    @property
    def retirement_date(self):
        """Gets the retirement_date of this Referee.

        Description not available  # noqa: E501

        :return: The retirement_date of this Referee.
        :rtype: List[str]
        """
        return self._retirement_date

    @retirement_date.setter
    def retirement_date(self, retirement_date):
        """Sets the retirement_date of this Referee.

        Description not available  # noqa: E501

        :param retirement_date: The retirement_date of this Referee.
        :type retirement_date: List[str]
        """

        self._retirement_date = retirement_date

    @property
    def world_tournament(self):
        """Gets the world_tournament of this Referee.

        Description not available  # noqa: E501

        :return: The world_tournament of this Referee.
        :rtype: List[object]
        """
        return self._world_tournament

    @world_tournament.setter
    def world_tournament(self, world_tournament):
        """Sets the world_tournament of this Referee.

        Description not available  # noqa: E501

        :param world_tournament: The world_tournament of this Referee.
        :type world_tournament: List[object]
        """

        self._world_tournament = world_tournament

    @property
    def wife(self):
        """Gets the wife of this Referee.

        Description not available  # noqa: E501

        :return: The wife of this Referee.
        :rtype: List[object]
        """
        return self._wife

    @wife.setter
    def wife(self, wife):
        """Sets the wife of this Referee.

        Description not available  # noqa: E501

        :param wife: The wife of this Referee.
        :type wife: List[object]
        """

        self._wife = wife

    @property
    def allegiance(self):
        """Gets the allegiance of this Referee.

        The country or other power the person served. Multiple countries may be indicated together with the corresponding dates. This field should not be used to indicate a particular service branch, which is better indicated by the branch field.  # noqa: E501

        :return: The allegiance of this Referee.
        :rtype: List[str]
        """
        return self._allegiance

    @allegiance.setter
    def allegiance(self, allegiance):
        """Sets the allegiance of this Referee.

        The country or other power the person served. Multiple countries may be indicated together with the corresponding dates. This field should not be used to indicate a particular service branch, which is better indicated by the branch field.  # noqa: E501

        :param allegiance: The allegiance of this Referee.
        :type allegiance: List[str]
        """

        self._allegiance = allegiance

    @property
    def active_years_start_date_mgr(self):
        """Gets the active_years_start_date_mgr of this Referee.

        Description not available  # noqa: E501

        :return: The active_years_start_date_mgr of this Referee.
        :rtype: List[str]
        """
        return self._active_years_start_date_mgr

    @active_years_start_date_mgr.setter
    def active_years_start_date_mgr(self, active_years_start_date_mgr):
        """Sets the active_years_start_date_mgr of this Referee.

        Description not available  # noqa: E501

        :param active_years_start_date_mgr: The active_years_start_date_mgr of this Referee.
        :type active_years_start_date_mgr: List[str]
        """

        self._active_years_start_date_mgr = active_years_start_date_mgr

    @property
    def lccn_id(self):
        """Gets the lccn_id of this Referee.

        Library of Congress Control Number  # noqa: E501

        :return: The lccn_id of this Referee.
        :rtype: List[str]
        """
        return self._lccn_id

    @lccn_id.setter
    def lccn_id(self, lccn_id):
        """Sets the lccn_id of this Referee.

        Library of Congress Control Number  # noqa: E501

        :param lccn_id: The lccn_id of this Referee.
        :type lccn_id: List[str]
        """

        self._lccn_id = lccn_id

    @property
    def tattoo(self):
        """Gets the tattoo of this Referee.

        Description not available  # noqa: E501

        :return: The tattoo of this Referee.
        :rtype: List[str]
        """
        return self._tattoo

    @tattoo.setter
    def tattoo(self, tattoo):
        """Sets the tattoo of this Referee.

        Description not available  # noqa: E501

        :param tattoo: The tattoo of this Referee.
        :type tattoo: List[str]
        """

        self._tattoo = tattoo

    @property
    def british_wins(self):
        """Gets the british_wins of this Referee.

        Description not available  # noqa: E501

        :return: The british_wins of this Referee.
        :rtype: List[object]
        """
        return self._british_wins

    @british_wins.setter
    def british_wins(self, british_wins):
        """Sets the british_wins of this Referee.

        Description not available  # noqa: E501

        :param british_wins: The british_wins of this Referee.
        :type british_wins: List[object]
        """

        self._british_wins = british_wins

    @property
    def hip_size(self):
        """Gets the hip_size of this Referee.

        Description not available  # noqa: E501

        :return: The hip_size of this Referee.
        :rtype: List[float]
        """
        return self._hip_size

    @hip_size.setter
    def hip_size(self, hip_size):
        """Sets the hip_size of this Referee.

        Description not available  # noqa: E501

        :param hip_size: The hip_size of this Referee.
        :type hip_size: List[float]
        """

        self._hip_size = hip_size

    @property
    def podium(self):
        """Gets the podium of this Referee.

        Description not available  # noqa: E501

        :return: The podium of this Referee.
        :rtype: List[int]
        """
        return self._podium

    @podium.setter
    def podium(self, podium):
        """Sets the podium of this Referee.

        Description not available  # noqa: E501

        :param podium: The podium of this Referee.
        :type podium: List[int]
        """

        self._podium = podium

    @property
    def seiyu(self):
        """Gets the seiyu of this Referee.

        Description not available  # noqa: E501

        :return: The seiyu of this Referee.
        :rtype: List[object]
        """
        return self._seiyu

    @seiyu.setter
    def seiyu(self, seiyu):
        """Sets the seiyu of this Referee.

        Description not available  # noqa: E501

        :param seiyu: The seiyu of this Referee.
        :type seiyu: List[object]
        """

        self._seiyu = seiyu

    @property
    def player_season(self):
        """Gets the player_season of this Referee.

        Description not available  # noqa: E501

        :return: The player_season of this Referee.
        :rtype: List[object]
        """
        return self._player_season

    @player_season.setter
    def player_season(self, player_season):
        """Sets the player_season of this Referee.

        Description not available  # noqa: E501

        :param player_season: The player_season of this Referee.
        :type player_season: List[object]
        """

        self._player_season = player_season

    @property
    def short_prog_score(self):
        """Gets the short_prog_score of this Referee.

        Description not available  # noqa: E501

        :return: The short_prog_score of this Referee.
        :rtype: List[str]
        """
        return self._short_prog_score

    @short_prog_score.setter
    def short_prog_score(self, short_prog_score):
        """Sets the short_prog_score of this Referee.

        Description not available  # noqa: E501

        :param short_prog_score: The short_prog_score of this Referee.
        :type short_prog_score: List[str]
        """

        self._short_prog_score = short_prog_score

    @property
    def regional_council(self):
        """Gets the regional_council of this Referee.

        Description not available  # noqa: E501

        :return: The regional_council of this Referee.
        :rtype: List[object]
        """
        return self._regional_council

    @regional_council.setter
    def regional_council(self, regional_council):
        """Sets the regional_council of this Referee.

        Description not available  # noqa: E501

        :param regional_council: The regional_council of this Referee.
        :type regional_council: List[object]
        """

        self._regional_council = regional_council

    @property
    def homage(self):
        """Gets the homage of this Referee.

        Description not available  # noqa: E501

        :return: The homage of this Referee.
        :rtype: List[str]
        """
        return self._homage

    @homage.setter
    def homage(self, homage):
        """Sets the homage of this Referee.

        Description not available  # noqa: E501

        :param homage: The homage of this Referee.
        :type homage: List[str]
        """

        self._homage = homage

    @property
    def shoe_size(self):
        """Gets the shoe_size of this Referee.

        Description not available  # noqa: E501

        :return: The shoe_size of this Referee.
        :rtype: List[str]
        """
        return self._shoe_size

    @shoe_size.setter
    def shoe_size(self, shoe_size):
        """Sets the shoe_size of this Referee.

        Description not available  # noqa: E501

        :param shoe_size: The shoe_size of this Referee.
        :type shoe_size: List[str]
        """

        self._shoe_size = shoe_size

    @property
    def signature(self):
        """Gets the signature of this Referee.

        Description not available  # noqa: E501

        :return: The signature of this Referee.
        :rtype: List[str]
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this Referee.

        Description not available  # noqa: E501

        :param signature: The signature of this Referee.
        :type signature: List[str]
        """

        self._signature = signature

    @property
    def olympic_games_bronze(self):
        """Gets the olympic_games_bronze of this Referee.

        Description not available  # noqa: E501

        :return: The olympic_games_bronze of this Referee.
        :rtype: List[int]
        """
        return self._olympic_games_bronze

    @olympic_games_bronze.setter
    def olympic_games_bronze(self, olympic_games_bronze):
        """Sets the olympic_games_bronze of this Referee.

        Description not available  # noqa: E501

        :param olympic_games_bronze: The olympic_games_bronze of this Referee.
        :type olympic_games_bronze: List[int]
        """

        self._olympic_games_bronze = olympic_games_bronze

    @property
    def danse_score(self):
        """Gets the danse_score of this Referee.

        Description not available  # noqa: E501

        :return: The danse_score of this Referee.
        :rtype: List[str]
        """
        return self._danse_score

    @danse_score.setter
    def danse_score(self, danse_score):
        """Sets the danse_score of this Referee.

        Description not available  # noqa: E501

        :param danse_score: The danse_score of this Referee.
        :type danse_score: List[str]
        """

        self._danse_score = danse_score

    @property
    def id_number(self):
        """Gets the id_number of this Referee.

        Description not available  # noqa: E501

        :return: The id_number of this Referee.
        :rtype: List[int]
        """
        return self._id_number

    @id_number.setter
    def id_number(self, id_number):
        """Sets the id_number of this Referee.

        Description not available  # noqa: E501

        :param id_number: The id_number of this Referee.
        :type id_number: List[int]
        """

        self._id_number = id_number

    @property
    def short_prog_competition(self):
        """Gets the short_prog_competition of this Referee.

        Description not available  # noqa: E501

        :return: The short_prog_competition of this Referee.
        :rtype: List[str]
        """
        return self._short_prog_competition

    @short_prog_competition.setter
    def short_prog_competition(self, short_prog_competition):
        """Sets the short_prog_competition of this Referee.

        Description not available  # noqa: E501

        :param short_prog_competition: The short_prog_competition of this Referee.
        :type short_prog_competition: List[str]
        """

        self._short_prog_competition = short_prog_competition

    @property
    def active_years_start_year_mgr(self):
        """Gets the active_years_start_year_mgr of this Referee.

        Description not available  # noqa: E501

        :return: The active_years_start_year_mgr of this Referee.
        :rtype: List[str]
        """
        return self._active_years_start_year_mgr

    @active_years_start_year_mgr.setter
    def active_years_start_year_mgr(self, active_years_start_year_mgr):
        """Sets the active_years_start_year_mgr of this Referee.

        Description not available  # noqa: E501

        :param active_years_start_year_mgr: The active_years_start_year_mgr of this Referee.
        :type active_years_start_year_mgr: List[str]
        """

        self._active_years_start_year_mgr = active_years_start_year_mgr

    @property
    def wedding_parents_date(self):
        """Gets the wedding_parents_date of this Referee.

        Description not available  # noqa: E501

        :return: The wedding_parents_date of this Referee.
        :rtype: List[str]
        """
        return self._wedding_parents_date

    @wedding_parents_date.setter
    def wedding_parents_date(self, wedding_parents_date):
        """Sets the wedding_parents_date of this Referee.

        Description not available  # noqa: E501

        :param wedding_parents_date: The wedding_parents_date of this Referee.
        :type wedding_parents_date: List[str]
        """

        self._wedding_parents_date = wedding_parents_date

    @property
    def birth_place(self):
        """Gets the birth_place of this Referee.

        where the person was born  # noqa: E501

        :return: The birth_place of this Referee.
        :rtype: List[object]
        """
        return self._birth_place

    @birth_place.setter
    def birth_place(self, birth_place):
        """Sets the birth_place of this Referee.

        where the person was born  # noqa: E501

        :param birth_place: The birth_place of this Referee.
        :type birth_place: List[object]
        """

        self._birth_place = birth_place

    @property
    def world(self):
        """Gets the world of this Referee.

        Description not available  # noqa: E501

        :return: The world of this Referee.
        :rtype: List[object]
        """
        return self._world

    @world.setter
    def world(self, world):
        """Sets the world of this Referee.

        Description not available  # noqa: E501

        :param world: The world of this Referee.
        :type world: List[object]
        """

        self._world = world

    @property
    def astrological_sign(self):
        """Gets the astrological_sign of this Referee.

        Description not available  # noqa: E501

        :return: The astrological_sign of this Referee.
        :rtype: List[object]
        """
        return self._astrological_sign

    @astrological_sign.setter
    def astrological_sign(self, astrological_sign):
        """Sets the astrological_sign of this Referee.

        Description not available  # noqa: E501

        :param astrological_sign: The astrological_sign of this Referee.
        :type astrological_sign: List[object]
        """

        self._astrological_sign = astrological_sign

    @property
    def eye_color(self):
        """Gets the eye_color of this Referee.

        Description not available  # noqa: E501

        :return: The eye_color of this Referee.
        :rtype: List[object]
        """
        return self._eye_color

    @eye_color.setter
    def eye_color(self, eye_color):
        """Sets the eye_color of this Referee.

        Description not available  # noqa: E501

        :param eye_color: The eye_color of this Referee.
        :type eye_color: List[object]
        """

        self._eye_color = eye_color

    @property
    def networth(self):
        """Gets the networth of this Referee.

        Description not available  # noqa: E501

        :return: The networth of this Referee.
        :rtype: List[float]
        """
        return self._networth

    @networth.setter
    def networth(self, networth):
        """Sets the networth of this Referee.

        Description not available  # noqa: E501

        :param networth: The networth of this Referee.
        :type networth: List[float]
        """

        self._networth = networth

    @property
    def coalition(self):
        """Gets the coalition of this Referee.

        Παλαιότερα ο συνασπισμός χρησιμοποιούνταν ως στρατιωτικός όρος που υποδήλωνε την όμορη παράταξη πολεμιστών κατά την οποία ο κάθε στρατιώτης προφύλασσε τον διπλανό του με την ασπίδα του.  # noqa: E501

        :return: The coalition of this Referee.
        :rtype: List[str]
        """
        return self._coalition

    @coalition.setter
    def coalition(self, coalition):
        """Sets the coalition of this Referee.

        Παλαιότερα ο συνασπισμός χρησιμοποιούνταν ως στρατιωτικός όρος που υποδήλωνε την όμορη παράταξη πολεμιστών κατά την οποία ο κάθε στρατιώτης προφύλασσε τον διπλανό του με την ασπίδα του.  # noqa: E501

        :param coalition: The coalition of this Referee.
        :type coalition: List[str]
        """

        self._coalition = coalition

    @property
    def national_team_match_point(self):
        """Gets the national_team_match_point of this Referee.

        Description not available  # noqa: E501

        :return: The national_team_match_point of this Referee.
        :rtype: List[str]
        """
        return self._national_team_match_point

    @national_team_match_point.setter
    def national_team_match_point(self, national_team_match_point):
        """Sets the national_team_match_point of this Referee.

        Description not available  # noqa: E501

        :param national_team_match_point: The national_team_match_point of this Referee.
        :type national_team_match_point: List[str]
        """

        self._national_team_match_point = national_team_match_point

    @property
    def national_selection(self):
        """Gets the national_selection of this Referee.

        Description not available  # noqa: E501

        :return: The national_selection of this Referee.
        :rtype: List[object]
        """
        return self._national_selection

    @national_selection.setter
    def national_selection(self, national_selection):
        """Sets the national_selection of this Referee.

        Description not available  # noqa: E501

        :param national_selection: The national_selection of this Referee.
        :type national_selection: List[object]
        """

        self._national_selection = national_selection

    @property
    def agency(self):
        """Gets the agency of this Referee.

        Description not available  # noqa: E501

        :return: The agency of this Referee.
        :rtype: List[object]
        """
        return self._agency

    @agency.setter
    def agency(self, agency):
        """Sets the agency of this Referee.

        Description not available  # noqa: E501

        :param agency: The agency of this Referee.
        :type agency: List[object]
        """

        self._agency = agency

    @property
    def start_wqs(self):
        """Gets the start_wqs of this Referee.

        Description not available  # noqa: E501

        :return: The start_wqs of this Referee.
        :rtype: List[str]
        """
        return self._start_wqs

    @start_wqs.setter
    def start_wqs(self, start_wqs):
        """Sets the start_wqs of this Referee.

        Description not available  # noqa: E501

        :param start_wqs: The start_wqs of this Referee.
        :type start_wqs: List[str]
        """

        self._start_wqs = start_wqs

    @property
    def defeat_as_mgr(self):
        """Gets the defeat_as_mgr of this Referee.

        Description not available  # noqa: E501

        :return: The defeat_as_mgr of this Referee.
        :rtype: List[int]
        """
        return self._defeat_as_mgr

    @defeat_as_mgr.setter
    def defeat_as_mgr(self, defeat_as_mgr):
        """Sets the defeat_as_mgr of this Referee.

        Description not available  # noqa: E501

        :param defeat_as_mgr: The defeat_as_mgr of this Referee.
        :type defeat_as_mgr: List[int]
        """

        self._defeat_as_mgr = defeat_as_mgr

    @property
    def death_year(self):
        """Gets the death_year of this Referee.

        Description not available  # noqa: E501

        :return: The death_year of this Referee.
        :rtype: List[str]
        """
        return self._death_year

    @death_year.setter
    def death_year(self, death_year):
        """Sets the death_year of this Referee.

        Description not available  # noqa: E501

        :param death_year: The death_year of this Referee.
        :type death_year: List[str]
        """

        self._death_year = death_year

    @property
    def world_tournament_gold(self):
        """Gets the world_tournament_gold of this Referee.

        Description not available  # noqa: E501

        :return: The world_tournament_gold of this Referee.
        :rtype: List[int]
        """
        return self._world_tournament_gold

    @world_tournament_gold.setter
    def world_tournament_gold(self, world_tournament_gold):
        """Sets the world_tournament_gold of this Referee.

        Description not available  # noqa: E501

        :param world_tournament_gold: The world_tournament_gold of this Referee.
        :type world_tournament_gold: List[int]
        """

        self._world_tournament_gold = world_tournament_gold

    @property
    def pga_wins(self):
        """Gets the pga_wins of this Referee.

        Description not available  # noqa: E501

        :return: The pga_wins of this Referee.
        :rtype: List[object]
        """
        return self._pga_wins

    @pga_wins.setter
    def pga_wins(self, pga_wins):
        """Sets the pga_wins of this Referee.

        Description not available  # noqa: E501

        :param pga_wins: The pga_wins of this Referee.
        :type pga_wins: List[object]
        """

        self._pga_wins = pga_wins

    @property
    def board(self):
        """Gets the board of this Referee.

        Description not available  # noqa: E501

        :return: The board of this Referee.
        :rtype: List[object]
        """
        return self._board

    @board.setter
    def board(self, board):
        """Sets the board of this Referee.

        Description not available  # noqa: E501

        :param board: The board of this Referee.
        :type board: List[object]
        """

        self._board = board

    @property
    def rid_id(self):
        """Gets the rid_id of this Referee.

        An identifying system for scientific authors. The system was introduced in January 2008 by Thomson Reuters. The combined use of the Digital Object Identifier with the ResearcherID allows for a unique association of authors and scientific articles.  # noqa: E501

        :return: The rid_id of this Referee.
        :rtype: List[str]
        """
        return self._rid_id

    @rid_id.setter
    def rid_id(self, rid_id):
        """Sets the rid_id of this Referee.

        An identifying system for scientific authors. The system was introduced in January 2008 by Thomson Reuters. The combined use of the Digital Object Identifier with the ResearcherID allows for a unique association of authors and scientific articles.  # noqa: E501

        :param rid_id: The rid_id of this Referee.
        :type rid_id: List[str]
        """

        self._rid_id = rid_id

    @property
    def dead_in_fight_date(self):
        """Gets the dead_in_fight_date of this Referee.

        Description not available  # noqa: E501

        :return: The dead_in_fight_date of this Referee.
        :rtype: List[str]
        """
        return self._dead_in_fight_date

    @dead_in_fight_date.setter
    def dead_in_fight_date(self, dead_in_fight_date):
        """Sets the dead_in_fight_date of this Referee.

        Description not available  # noqa: E501

        :param dead_in_fight_date: The dead_in_fight_date of this Referee.
        :type dead_in_fight_date: List[str]
        """

        self._dead_in_fight_date = dead_in_fight_date

    @property
    def related_functions(self):
        """Gets the related_functions of this Referee.

        This property is to accommodate the list field that contains a list of related personFunctions a person holds or has held  # noqa: E501

        :return: The related_functions of this Referee.
        :rtype: List[object]
        """
        return self._related_functions

    @related_functions.setter
    def related_functions(self, related_functions):
        """Sets the related_functions of this Referee.

        This property is to accommodate the list field that contains a list of related personFunctions a person holds or has held  # noqa: E501

        :param related_functions: The related_functions of this Referee.
        :type related_functions: List[object]
        """

        self._related_functions = related_functions

    @property
    def manager_season(self):
        """Gets the manager_season of this Referee.

        Description not available  # noqa: E501

        :return: The manager_season of this Referee.
        :rtype: List[object]
        """
        return self._manager_season

    @manager_season.setter
    def manager_season(self, manager_season):
        """Sets the manager_season of this Referee.

        Description not available  # noqa: E501

        :param manager_season: The manager_season of this Referee.
        :type manager_season: List[object]
        """

        self._manager_season = manager_season

    @property
    def reign(self):
        """Gets the reign of this Referee.

        Description not available  # noqa: E501

        :return: The reign of this Referee.
        :rtype: List[str]
        """
        return self._reign

    @reign.setter
    def reign(self, reign):
        """Sets the reign of this Referee.

        Description not available  # noqa: E501

        :param reign: The reign of this Referee.
        :type reign: List[str]
        """

        self._reign = reign

    @property
    def second(self):
        """Gets the second of this Referee.

        Description not available  # noqa: E501

        :return: The second of this Referee.
        :rtype: List[int]
        """
        return self._second

    @second.setter
    def second(self, second):
        """Sets the second of this Referee.

        Description not available  # noqa: E501

        :param second: The second of this Referee.
        :type second: List[int]
        """

        self._second = second

    @property
    def radio(self):
        """Gets the radio of this Referee.

        To ραδιόφωνο είναι η συσκευή που λειτουργεί ως \"ραδιοδέκτης - μετατροπέας\" όπου λαμβάνοντας τις ραδιοφωνικές εκπομπές των ραδιοφωνικών σταθμών τις μετατρέπει σε ήχο.  # noqa: E501

        :return: The radio of this Referee.
        :rtype: List[object]
        """
        return self._radio

    @radio.setter
    def radio(self, radio):
        """Sets the radio of this Referee.

        To ραδιόφωνο είναι η συσκευή που λειτουργεί ως \"ραδιοδέκτης - μετατροπέας\" όπου λαμβάνοντας τις ραδιοφωνικές εκπομπές των ραδιοφωνικών σταθμών τις μετατρέπει σε ήχο.  # noqa: E501

        :param radio: The radio of this Referee.
        :type radio: List[object]
        """

        self._radio = radio

    @property
    def full_competition(self):
        """Gets the full_competition of this Referee.

        Description not available  # noqa: E501

        :return: The full_competition of this Referee.
        :rtype: List[str]
        """
        return self._full_competition

    @full_competition.setter
    def full_competition(self, full_competition):
        """Sets the full_competition of this Referee.

        Description not available  # noqa: E501

        :param full_competition: The full_competition of this Referee.
        :type full_competition: List[str]
        """

        self._full_competition = full_competition

    @property
    def free_score_competition(self):
        """Gets the free_score_competition of this Referee.

        Description not available  # noqa: E501

        :return: The free_score_competition of this Referee.
        :rtype: List[str]
        """
        return self._free_score_competition

    @free_score_competition.setter
    def free_score_competition(self, free_score_competition):
        """Sets the free_score_competition of this Referee.

        Description not available  # noqa: E501

        :param free_score_competition: The free_score_competition of this Referee.
        :type free_score_competition: List[str]
        """

        self._free_score_competition = free_score_competition

    @property
    def publication(self):
        """Gets the publication of this Referee.

        Description not available  # noqa: E501

        :return: The publication of this Referee.
        :rtype: List[str]
        """
        return self._publication

    @publication.setter
    def publication(self, publication):
        """Sets the publication of this Referee.

        Description not available  # noqa: E501

        :param publication: The publication of this Referee.
        :type publication: List[str]
        """

        self._publication = publication

    @property
    def opponent(self):
        """Gets the opponent of this Referee.

        Description not available  # noqa: E501

        :return: The opponent of this Referee.
        :rtype: List[object]
        """
        return self._opponent

    @opponent.setter
    def opponent(self, opponent):
        """Sets the opponent of this Referee.

        Description not available  # noqa: E501

        :param opponent: The opponent of this Referee.
        :type opponent: List[object]
        """

        self._opponent = opponent

    @property
    def employer(self):
        """Gets the employer of this Referee.

        Description not available  # noqa: E501

        :return: The employer of this Referee.
        :rtype: List[object]
        """
        return self._employer

    @employer.setter
    def employer(self, employer):
        """Sets the employer of this Referee.

        Description not available  # noqa: E501

        :param employer: The employer of this Referee.
        :type employer: List[object]
        """

        self._employer = employer

    @property
    def affair(self):
        """Gets the affair of this Referee.

        Description not available  # noqa: E501

        :return: The affair of this Referee.
        :rtype: List[str]
        """
        return self._affair

    @affair.setter
    def affair(self, affair):
        """Sets the affair of this Referee.

        Description not available  # noqa: E501

        :param affair: The affair of this Referee.
        :type affair: List[str]
        """

        self._affair = affair

    @property
    def body_discovered(self):
        """Gets the body_discovered of this Referee.

        Description not available  # noqa: E501

        :return: The body_discovered of this Referee.
        :rtype: List[object]
        """
        return self._body_discovered

    @body_discovered.setter
    def body_discovered(self, body_discovered):
        """Sets the body_discovered of this Referee.

        Description not available  # noqa: E501

        :param body_discovered: The body_discovered of this Referee.
        :type body_discovered: List[object]
        """

        self._body_discovered = body_discovered

    @property
    def buried_place(self):
        """Gets the buried_place of this Referee.

        The place where the person has been buried.  # noqa: E501

        :return: The buried_place of this Referee.
        :rtype: List[object]
        """
        return self._buried_place

    @buried_place.setter
    def buried_place(self, buried_place):
        """Sets the buried_place of this Referee.

        The place where the person has been buried.  # noqa: E501

        :param buried_place: The buried_place of this Referee.
        :type buried_place: List[object]
        """

        self._buried_place = buried_place

    @property
    def residence(self):
        """Gets the residence of this Referee.

        Place of residence of a person.  # noqa: E501

        :return: The residence of this Referee.
        :rtype: List[object]
        """
        return self._residence

    @residence.setter
    def residence(self, residence):
        """Sets the residence of this Referee.

        Place of residence of a person.  # noqa: E501

        :param residence: The residence of this Referee.
        :type residence: List[object]
        """

        self._residence = residence

    @property
    def usurper(self):
        """Gets the usurper of this Referee.

        Description not available  # noqa: E501

        :return: The usurper of this Referee.
        :rtype: List[object]
        """
        return self._usurper

    @usurper.setter
    def usurper(self, usurper):
        """Sets the usurper of this Referee.

        Description not available  # noqa: E501

        :param usurper: The usurper of this Referee.
        :type usurper: List[object]
        """

        self._usurper = usurper

    @property
    def other_occupation(self):
        """Gets the other_occupation of this Referee.

        Description not available  # noqa: E501

        :return: The other_occupation of this Referee.
        :rtype: List[object]
        """
        return self._other_occupation

    @other_occupation.setter
    def other_occupation(self, other_occupation):
        """Sets the other_occupation of this Referee.

        Description not available  # noqa: E501

        :param other_occupation: The other_occupation of this Referee.
        :type other_occupation: List[object]
        """

        self._other_occupation = other_occupation

    @property
    def contest(self):
        """Gets the contest of this Referee.

        Description not available  # noqa: E501

        :return: The contest of this Referee.
        :rtype: List[object]
        """
        return self._contest

    @contest.setter
    def contest(self, contest):
        """Sets the contest of this Referee.

        Description not available  # noqa: E501

        :param contest: The contest of this Referee.
        :type contest: List[object]
        """

        self._contest = contest

    @property
    def active_years_end_date_mgr(self):
        """Gets the active_years_end_date_mgr of this Referee.

        Description not available  # noqa: E501

        :return: The active_years_end_date_mgr of this Referee.
        :rtype: List[str]
        """
        return self._active_years_end_date_mgr

    @active_years_end_date_mgr.setter
    def active_years_end_date_mgr(self, active_years_end_date_mgr):
        """Sets the active_years_end_date_mgr of this Referee.

        Description not available  # noqa: E501

        :param active_years_end_date_mgr: The active_years_end_date_mgr of this Referee.
        :type active_years_end_date_mgr: List[str]
        """

        self._active_years_end_date_mgr = active_years_end_date_mgr

    @property
    def created(self):
        """Gets the created of this Referee.

        Description not available  # noqa: E501

        :return: The created of this Referee.
        :rtype: List[object]
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Referee.

        Description not available  # noqa: E501

        :param created: The created of this Referee.
        :type created: List[object]
        """

        self._created = created

    @property
    def original_danse_score(self):
        """Gets the original_danse_score of this Referee.

        Description not available  # noqa: E501

        :return: The original_danse_score of this Referee.
        :rtype: List[str]
        """
        return self._original_danse_score

    @original_danse_score.setter
    def original_danse_score(self, original_danse_score):
        """Sets the original_danse_score of this Referee.

        Description not available  # noqa: E501

        :param original_danse_score: The original_danse_score of this Referee.
        :type original_danse_score: List[str]
        """

        self._original_danse_score = original_danse_score

    @property
    def end_career(self):
        """Gets the end_career of this Referee.

        Description not available  # noqa: E501

        :return: The end_career of this Referee.
        :rtype: List[str]
        """
        return self._end_career

    @end_career.setter
    def end_career(self, end_career):
        """Sets the end_career of this Referee.

        Description not available  # noqa: E501

        :param end_career: The end_career of this Referee.
        :type end_career: List[str]
        """

        self._end_career = end_career

    @property
    def note_on_resting_place(self):
        """Gets the note_on_resting_place of this Referee.

        Description not available  # noqa: E501

        :return: The note_on_resting_place of this Referee.
        :rtype: List[str]
        """
        return self._note_on_resting_place

    @note_on_resting_place.setter
    def note_on_resting_place(self, note_on_resting_place):
        """Sets the note_on_resting_place of this Referee.

        Description not available  # noqa: E501

        :param note_on_resting_place: The note_on_resting_place of this Referee.
        :type note_on_resting_place: List[str]
        """

        self._note_on_resting_place = note_on_resting_place

    @property
    def army(self):
        """Gets the army of this Referee.

        Ένας στρατός αποτελεί τις επίγειες ένοπλες δυνάμεις ενός έθνους  # noqa: E501

        :return: The army of this Referee.
        :rtype: List[str]
        """
        return self._army

    @army.setter
    def army(self, army):
        """Sets the army of this Referee.

        Ένας στρατός αποτελεί τις επίγειες ένοπλες δυνάμεις ενός έθνους  # noqa: E501

        :param army: The army of this Referee.
        :type army: List[str]
        """

        self._army = army

    @property
    def active_year(self):
        """Gets the active_year of this Referee.

        Description not available  # noqa: E501

        :return: The active_year of this Referee.
        :rtype: List[str]
        """
        return self._active_year

    @active_year.setter
    def active_year(self, active_year):
        """Sets the active_year of this Referee.

        Description not available  # noqa: E501

        :param active_year: The active_year of this Referee.
        :type active_year: List[str]
        """

        self._active_year = active_year

    @property
    def person_function(self):
        """Gets the person_function of this Referee.

        Description not available  # noqa: E501

        :return: The person_function of this Referee.
        :rtype: List[object]
        """
        return self._person_function

    @person_function.setter
    def person_function(self, person_function):
        """Sets the person_function of this Referee.

        Description not available  # noqa: E501

        :param person_function: The person_function of this Referee.
        :type person_function: List[object]
        """

        self._person_function = person_function

    @property
    def pro_since(self):
        """Gets the pro_since of this Referee.

        Description not available  # noqa: E501

        :return: The pro_since of this Referee.
        :rtype: List[str]
        """
        return self._pro_since

    @pro_since.setter
    def pro_since(self, pro_since):
        """Sets the pro_since of this Referee.

        Description not available  # noqa: E501

        :param pro_since: The pro_since of this Referee.
        :type pro_since: List[str]
        """

        self._pro_since = pro_since

    @property
    def cause_of_death(self):
        """Gets the cause_of_death of this Referee.

        Description not available  # noqa: E501

        :return: The cause_of_death of this Referee.
        :rtype: List[str]
        """
        return self._cause_of_death

    @cause_of_death.setter
    def cause_of_death(self, cause_of_death):
        """Sets the cause_of_death of this Referee.

        Description not available  # noqa: E501

        :param cause_of_death: The cause_of_death of this Referee.
        :type cause_of_death: List[str]
        """

        self._cause_of_death = cause_of_death

    @property
    def dubber(self):
        """Gets the dubber of this Referee.

        the person who dubs another person e.g. an actor or a fictional character in movies  # noqa: E501

        :return: The dubber of this Referee.
        :rtype: List[object]
        """
        return self._dubber

    @dubber.setter
    def dubber(self, dubber):
        """Sets the dubber of this Referee.

        the person who dubs another person e.g. an actor or a fictional character in movies  # noqa: E501

        :param dubber: The dubber of this Referee.
        :type dubber: List[object]
        """

        self._dubber = dubber

    @property
    def non_professional_career(self):
        """Gets the non_professional_career of this Referee.

        Description not available  # noqa: E501

        :return: The non_professional_career of this Referee.
        :rtype: List[str]
        """
        return self._non_professional_career

    @non_professional_career.setter
    def non_professional_career(self, non_professional_career):
        """Sets the non_professional_career of this Referee.

        Description not available  # noqa: E501

        :param non_professional_career: The non_professional_career of this Referee.
        :type non_professional_career: List[str]
        """

        self._non_professional_career = non_professional_career

    @property
    def military_function(self):
        """Gets the military_function of this Referee.

        Description not available  # noqa: E501

        :return: The military_function of this Referee.
        :rtype: List[str]
        """
        return self._military_function

    @military_function.setter
    def military_function(self, military_function):
        """Sets the military_function of this Referee.

        Description not available  # noqa: E501

        :param military_function: The military_function of this Referee.
        :type military_function: List[str]
        """

        self._military_function = military_function

    @property
    def patent(self):
        """Gets the patent of this Referee.

        Description not available  # noqa: E501

        :return: The patent of this Referee.
        :rtype: List[object]
        """
        return self._patent

    @patent.setter
    def patent(self, patent):
        """Sets the patent of this Referee.

        Description not available  # noqa: E501

        :param patent: The patent of this Referee.
        :type patent: List[object]
        """

        self._patent = patent

    @property
    def creation_christian_bishop(self):
        """Gets the creation_christian_bishop of this Referee.

        Description not available  # noqa: E501

        :return: The creation_christian_bishop of this Referee.
        :rtype: List[str]
        """
        return self._creation_christian_bishop

    @creation_christian_bishop.setter
    def creation_christian_bishop(self, creation_christian_bishop):
        """Sets the creation_christian_bishop of this Referee.

        Description not available  # noqa: E501

        :param creation_christian_bishop: The creation_christian_bishop of this Referee.
        :type creation_christian_bishop: List[str]
        """

        self._creation_christian_bishop = creation_christian_bishop

    @property
    def piercing(self):
        """Gets the piercing of this Referee.

        Description not available  # noqa: E501

        :return: The piercing of this Referee.
        :rtype: List[str]
        """
        return self._piercing

    @piercing.setter
    def piercing(self, piercing):
        """Sets the piercing of this Referee.

        Description not available  # noqa: E501

        :param piercing: The piercing of this Referee.
        :type piercing: List[str]
        """

        self._piercing = piercing

    @property
    def student(self):
        """Gets the student of this Referee.

        Description not available  # noqa: E501

        :return: The student of this Referee.
        :rtype: List[object]
        """
        return self._student

    @student.setter
    def student(self, student):
        """Sets the student of this Referee.

        Description not available  # noqa: E501

        :param student: The student of this Referee.
        :type student: List[object]
        """

        self._student = student

    @property
    def bad_guy(self):
        """Gets the bad_guy of this Referee.

        Description not available  # noqa: E501

        :return: The bad_guy of this Referee.
        :rtype: List[str]
        """
        return self._bad_guy

    @bad_guy.setter
    def bad_guy(self, bad_guy):
        """Sets the bad_guy of this Referee.

        Description not available  # noqa: E501

        :param bad_guy: The bad_guy of this Referee.
        :type bad_guy: List[str]
        """

        self._bad_guy = bad_guy

    @property
    def influenced(self):
        """Gets the influenced of this Referee.

        Description not available  # noqa: E501

        :return: The influenced of this Referee.
        :rtype: List[object]
        """
        return self._influenced

    @influenced.setter
    def influenced(self, influenced):
        """Sets the influenced of this Referee.

        Description not available  # noqa: E501

        :param influenced: The influenced of this Referee.
        :type influenced: List[object]
        """

        self._influenced = influenced

    @property
    def start_reign(self):
        """Gets the start_reign of this Referee.

        Description not available  # noqa: E501

        :return: The start_reign of this Referee.
        :rtype: List[object]
        """
        return self._start_reign

    @start_reign.setter
    def start_reign(self, start_reign):
        """Sets the start_reign of this Referee.

        Description not available  # noqa: E501

        :param start_reign: The start_reign of this Referee.
        :type start_reign: List[object]
        """

        self._start_reign = start_reign

    @property
    def university(self):
        """Gets the university of this Referee.

        university a person goes or went to.  # noqa: E501

        :return: The university of this Referee.
        :rtype: List[object]
        """
        return self._university

    @university.setter
    def university(self, university):
        """Sets the university of this Referee.

        university a person goes or went to.  # noqa: E501

        :param university: The university of this Referee.
        :type university: List[object]
        """

        self._university = university

    @property
    def gym_apparatus(self):
        """Gets the gym_apparatus of this Referee.

        Description not available  # noqa: E501

        :return: The gym_apparatus of this Referee.
        :rtype: List[object]
        """
        return self._gym_apparatus

    @gym_apparatus.setter
    def gym_apparatus(self, gym_apparatus):
        """Sets the gym_apparatus of this Referee.

        Description not available  # noqa: E501

        :param gym_apparatus: The gym_apparatus of this Referee.
        :type gym_apparatus: List[object]
        """

        self._gym_apparatus = gym_apparatus

    @property
    def ideology(self):
        """Gets the ideology of this Referee.

        Description not available  # noqa: E501

        :return: The ideology of this Referee.
        :rtype: List[object]
        """
        return self._ideology

    @ideology.setter
    def ideology(self, ideology):
        """Sets the ideology of this Referee.

        Description not available  # noqa: E501

        :param ideology: The ideology of this Referee.
        :type ideology: List[object]
        """

        self._ideology = ideology

    @property
    def conviction_date(self):
        """Gets the conviction_date of this Referee.

        Description not available  # noqa: E501

        :return: The conviction_date of this Referee.
        :rtype: List[str]
        """
        return self._conviction_date

    @conviction_date.setter
    def conviction_date(self, conviction_date):
        """Sets the conviction_date of this Referee.

        Description not available  # noqa: E501

        :param conviction_date: The conviction_date of this Referee.
        :type conviction_date: List[str]
        """

        self._conviction_date = conviction_date

    @property
    def media(self):
        """Gets the media of this Referee.

        Description not available  # noqa: E501

        :return: The media of this Referee.
        :rtype: List[object]
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this Referee.

        Description not available  # noqa: E501

        :param media: The media of this Referee.
        :type media: List[object]
        """

        self._media = media

    @property
    def bnf_id(self):
        """Gets the bnf_id of this Referee.

        Authority data of people listed in the general catalogue of the National Library of France  # noqa: E501

        :return: The bnf_id of this Referee.
        :rtype: List[str]
        """
        return self._bnf_id

    @bnf_id.setter
    def bnf_id(self, bnf_id):
        """Sets the bnf_id of this Referee.

        Authority data of people listed in the general catalogue of the National Library of France  # noqa: E501

        :param bnf_id: The bnf_id of this Referee.
        :type bnf_id: List[str]
        """

        self._bnf_id = bnf_id

    @property
    def pseudonym(self):
        """Gets the pseudonym of this Referee.

        Description not available  # noqa: E501

        :return: The pseudonym of this Referee.
        :rtype: List[str]
        """
        return self._pseudonym

    @pseudonym.setter
    def pseudonym(self, pseudonym):
        """Sets the pseudonym of this Referee.

        Description not available  # noqa: E501

        :param pseudonym: The pseudonym of this Referee.
        :type pseudonym: List[str]
        """

        self._pseudonym = pseudonym

    @property
    def temple_year(self):
        """Gets the temple_year of this Referee.

        Description not available  # noqa: E501

        :return: The temple_year of this Referee.
        :rtype: List[str]
        """
        return self._temple_year

    @temple_year.setter
    def temple_year(self, temple_year):
        """Sets the temple_year of this Referee.

        Description not available  # noqa: E501

        :param temple_year: The temple_year of this Referee.
        :type temple_year: List[str]
        """

        self._temple_year = temple_year

    @property
    def clothing_size(self):
        """Gets the clothing_size of this Referee.

        Description not available  # noqa: E501

        :return: The clothing_size of this Referee.
        :rtype: List[str]
        """
        return self._clothing_size

    @clothing_size.setter
    def clothing_size(self, clothing_size):
        """Sets the clothing_size of this Referee.

        Description not available  # noqa: E501

        :param clothing_size: The clothing_size of this Referee.
        :type clothing_size: List[str]
        """

        self._clothing_size = clothing_size

    @property
    def speciality(self):
        """Gets the speciality of this Referee.

        Description not available  # noqa: E501

        :return: The speciality of this Referee.
        :rtype: List[str]
        """
        return self._speciality

    @speciality.setter
    def speciality(self, speciality):
        """Sets the speciality of this Referee.

        Description not available  # noqa: E501

        :param speciality: The speciality of this Referee.
        :type speciality: List[str]
        """

        self._speciality = speciality

    @property
    def award(self):
        """Gets the award of this Referee.

        Description not available  # noqa: E501

        :return: The award of this Referee.
        :rtype: List[object]
        """
        return self._award

    @award.setter
    def award(self, award):
        """Sets the award of this Referee.

        Description not available  # noqa: E501

        :param award: The award of this Referee.
        :type award: List[object]
        """

        self._award = award

    @property
    def kind_of_criminal_action(self):
        """Gets the kind_of_criminal_action of this Referee.

        Description not available  # noqa: E501

        :return: The kind_of_criminal_action of this Referee.
        :rtype: List[str]
        """
        return self._kind_of_criminal_action

    @kind_of_criminal_action.setter
    def kind_of_criminal_action(self, kind_of_criminal_action):
        """Sets the kind_of_criminal_action of this Referee.

        Description not available  # noqa: E501

        :param kind_of_criminal_action: The kind_of_criminal_action of this Referee.
        :type kind_of_criminal_action: List[str]
        """

        self._kind_of_criminal_action = kind_of_criminal_action

    @property
    def isni_id(self):
        """Gets the isni_id of this Referee.

        ISNI is a method for uniquely identifying the public identities of contributors to media content such as books, TV programmes, and newspaper articles.  # noqa: E501

        :return: The isni_id of this Referee.
        :rtype: List[str]
        """
        return self._isni_id

    @isni_id.setter
    def isni_id(self, isni_id):
        """Sets the isni_id of this Referee.

        ISNI is a method for uniquely identifying the public identities of contributors to media content such as books, TV programmes, and newspaper articles.  # noqa: E501

        :param isni_id: The isni_id of this Referee.
        :type isni_id: List[str]
        """

        self._isni_id = isni_id

    @property
    def significant_project(self):
        """Gets the significant_project of this Referee.

        A siginificant artifact constructed by the person.  # noqa: E501

        :return: The significant_project of this Referee.
        :rtype: List[object]
        """
        return self._significant_project

    @significant_project.setter
    def significant_project(self, significant_project):
        """Sets the significant_project of this Referee.

        A siginificant artifact constructed by the person.  # noqa: E501

        :param significant_project: The significant_project of this Referee.
        :type significant_project: List[object]
        """

        self._significant_project = significant_project

    @property
    def leadership(self):
        """Gets the leadership of this Referee.

        Description not available  # noqa: E501

        :return: The leadership of this Referee.
        :rtype: List[str]
        """
        return self._leadership

    @leadership.setter
    def leadership(self, leadership):
        """Sets the leadership of this Referee.

        Description not available  # noqa: E501

        :param leadership: The leadership of this Referee.
        :type leadership: List[str]
        """

        self._leadership = leadership

    @property
    def death_date(self):
        """Gets the death_date of this Referee.

        Description not available  # noqa: E501

        :return: The death_date of this Referee.
        :rtype: List[str]
        """
        return self._death_date

    @death_date.setter
    def death_date(self, death_date):
        """Sets the death_date of this Referee.

        Description not available  # noqa: E501

        :param death_date: The death_date of this Referee.
        :type death_date: List[str]
        """

        self._death_date = death_date

    @property
    def special_trial(self):
        """Gets the special_trial of this Referee.

        Description not available  # noqa: E501

        :return: The special_trial of this Referee.
        :rtype: List[int]
        """
        return self._special_trial

    @special_trial.setter
    def special_trial(self, special_trial):
        """Sets the special_trial of this Referee.

        Description not available  # noqa: E501

        :param special_trial: The special_trial of this Referee.
        :type special_trial: List[int]
        """

        self._special_trial = special_trial

    @property
    def resting_date(self):
        """Gets the resting_date of this Referee.

        Description not available  # noqa: E501

        :return: The resting_date of this Referee.
        :rtype: List[str]
        """
        return self._resting_date

    @resting_date.setter
    def resting_date(self, resting_date):
        """Sets the resting_date of this Referee.

        Description not available  # noqa: E501

        :param resting_date: The resting_date of this Referee.
        :type resting_date: List[str]
        """

        self._resting_date = resting_date

    @property
    def victim(self):
        """Gets the victim of this Referee.

        Description not available  # noqa: E501

        :return: The victim of this Referee.
        :rtype: List[str]
        """
        return self._victim

    @victim.setter
    def victim(self, victim):
        """Sets the victim of this Referee.

        Description not available  # noqa: E501

        :param victim: The victim of this Referee.
        :type victim: List[str]
        """

        self._victim = victim

    @property
    def has_natural_bust(self):
        """Gets the has_natural_bust of this Referee.

        Description not available  # noqa: E501

        :return: The has_natural_bust of this Referee.
        :rtype: List[str]
        """
        return self._has_natural_bust

    @has_natural_bust.setter
    def has_natural_bust(self, has_natural_bust):
        """Sets the has_natural_bust of this Referee.

        Description not available  # noqa: E501

        :param has_natural_bust: The has_natural_bust of this Referee.
        :type has_natural_bust: List[str]
        """

        self._has_natural_bust = has_natural_bust

    @property
    def masters_wins(self):
        """Gets the masters_wins of this Referee.

        Description not available  # noqa: E501

        :return: The masters_wins of this Referee.
        :rtype: List[object]
        """
        return self._masters_wins

    @masters_wins.setter
    def masters_wins(self, masters_wins):
        """Sets the masters_wins of this Referee.

        Description not available  # noqa: E501

        :param masters_wins: The masters_wins of this Referee.
        :type masters_wins: List[object]
        """

        self._masters_wins = masters_wins

    @property
    def individualised_pnd(self):
        """Gets the individualised_pnd of this Referee.

        PND (Personennamendatei) data about a person. PND is published by the German National Library. For each person there is a record with her/his name, birth and occupation connected with a unique identifier, the PND number.  # noqa: E501

        :return: The individualised_pnd of this Referee.
        :rtype: List[int]
        """
        return self._individualised_pnd

    @individualised_pnd.setter
    def individualised_pnd(self, individualised_pnd):
        """Sets the individualised_pnd of this Referee.

        PND (Personennamendatei) data about a person. PND is published by the German National Library. For each person there is a record with her/his name, birth and occupation connected with a unique identifier, the PND number.  # noqa: E501

        :param individualised_pnd: The individualised_pnd of this Referee.
        :type individualised_pnd: List[int]
        """

        self._individualised_pnd = individualised_pnd

    @property
    def continental_tournament_gold(self):
        """Gets the continental_tournament_gold of this Referee.

        Description not available  # noqa: E501

        :return: The continental_tournament_gold of this Referee.
        :rtype: List[int]
        """
        return self._continental_tournament_gold

    @continental_tournament_gold.setter
    def continental_tournament_gold(self, continental_tournament_gold):
        """Sets the continental_tournament_gold of this Referee.

        Description not available  # noqa: E501

        :param continental_tournament_gold: The continental_tournament_gold of this Referee.
        :type continental_tournament_gold: List[int]
        """

        self._continental_tournament_gold = continental_tournament_gold

    @property
    def orientation(self):
        """Gets the orientation of this Referee.

        Description not available  # noqa: E501

        :return: The orientation of this Referee.
        :rtype: List[str]
        """
        return self._orientation

    @orientation.setter
    def orientation(self, orientation):
        """Sets the orientation of this Referee.

        Description not available  # noqa: E501

        :param orientation: The orientation of this Referee.
        :type orientation: List[str]
        """

        self._orientation = orientation

    @property
    def grave(self):
        """Gets the grave of this Referee.

        Description not available  # noqa: E501

        :return: The grave of this Referee.
        :rtype: List[str]
        """
        return self._grave

    @grave.setter
    def grave(self, grave):
        """Sets the grave of this Referee.

        Description not available  # noqa: E501

        :param grave: The grave of this Referee.
        :type grave: List[str]
        """

        self._grave = grave

    @property
    def resting_place(self):
        """Gets the resting_place of this Referee.

        Description not available  # noqa: E501

        :return: The resting_place of this Referee.
        :rtype: List[object]
        """
        return self._resting_place

    @resting_place.setter
    def resting_place(self, resting_place):
        """Sets the resting_place of this Referee.

        Description not available  # noqa: E501

        :param resting_place: The resting_place of this Referee.
        :type resting_place: List[object]
        """

        self._resting_place = resting_place

    @property
    def abbeychurch_blessing_charge(self):
        """Gets the abbeychurch_blessing_charge of this Referee.

        Description not available  # noqa: E501

        :return: The abbeychurch_blessing_charge of this Referee.
        :rtype: List[str]
        """
        return self._abbeychurch_blessing_charge

    @abbeychurch_blessing_charge.setter
    def abbeychurch_blessing_charge(self, abbeychurch_blessing_charge):
        """Sets the abbeychurch_blessing_charge of this Referee.

        Description not available  # noqa: E501

        :param abbeychurch_blessing_charge: The abbeychurch_blessing_charge of this Referee.
        :type abbeychurch_blessing_charge: List[str]
        """

        self._abbeychurch_blessing_charge = abbeychurch_blessing_charge

    @property
    def handisport(self):
        """Gets the handisport of this Referee.

        Description not available  # noqa: E501

        :return: The handisport of this Referee.
        :rtype: List[str]
        """
        return self._handisport

    @handisport.setter
    def handisport(self, handisport):
        """Sets the handisport of this Referee.

        Description not available  # noqa: E501

        :param handisport: The handisport of this Referee.
        :type handisport: List[str]
        """

        self._handisport = handisport

    @property
    def external_ornament(self):
        """Gets the external_ornament of this Referee.

        Description not available  # noqa: E501

        :return: The external_ornament of this Referee.
        :rtype: List[str]
        """
        return self._external_ornament

    @external_ornament.setter
    def external_ornament(self, external_ornament):
        """Sets the external_ornament of this Referee.

        Description not available  # noqa: E501

        :param external_ornament: The external_ornament of this Referee.
        :type external_ornament: List[str]
        """

        self._external_ornament = external_ornament

    @property
    def third(self):
        """Gets the third of this Referee.

        Description not available  # noqa: E501

        :return: The third of this Referee.
        :rtype: List[int]
        """
        return self._third

    @third.setter
    def third(self, third):
        """Sets the third of this Referee.

        Description not available  # noqa: E501

        :param third: The third of this Referee.
        :type third: List[int]
        """

        self._third = third

    @property
    def film_number(self):
        """Gets the film_number of this Referee.

        Description not available  # noqa: E501

        :return: The film_number of this Referee.
        :rtype: List[int]
        """
        return self._film_number

    @film_number.setter
    def film_number(self, film_number):
        """Sets the film_number of this Referee.

        Description not available  # noqa: E501

        :param film_number: The film_number of this Referee.
        :type film_number: List[int]
        """

        self._film_number = film_number

    @property
    def temple(self):
        """Gets the temple of this Referee.

        Description not available  # noqa: E501

        :return: The temple of this Referee.
        :rtype: List[str]
        """
        return self._temple

    @temple.setter
    def temple(self, temple):
        """Sets the temple of this Referee.

        Description not available  # noqa: E501

        :param temple: The temple of this Referee.
        :type temple: List[str]
        """

        self._temple = temple

    @property
    def end_reign(self):
        """Gets the end_reign of this Referee.

        Description not available  # noqa: E501

        :return: The end_reign of this Referee.
        :rtype: List[object]
        """
        return self._end_reign

    @end_reign.setter
    def end_reign(self, end_reign):
        """Sets the end_reign of this Referee.

        Description not available  # noqa: E501

        :param end_reign: The end_reign of this Referee.
        :type end_reign: List[object]
        """

        self._end_reign = end_reign

    @property
    def national_tournament_gold(self):
        """Gets the national_tournament_gold of this Referee.

        Description not available  # noqa: E501

        :return: The national_tournament_gold of this Referee.
        :rtype: List[int]
        """
        return self._national_tournament_gold

    @national_tournament_gold.setter
    def national_tournament_gold(self, national_tournament_gold):
        """Sets the national_tournament_gold of this Referee.

        Description not available  # noqa: E501

        :param national_tournament_gold: The national_tournament_gold of this Referee.
        :type national_tournament_gold: List[int]
        """

        self._national_tournament_gold = national_tournament_gold

    @property
    def death_cause(self):
        """Gets the death_cause of this Referee.

        Description not available  # noqa: E501

        :return: The death_cause of this Referee.
        :rtype: List[object]
        """
        return self._death_cause

    @death_cause.setter
    def death_cause(self, death_cause):
        """Sets the death_cause of this Referee.

        Description not available  # noqa: E501

        :param death_cause: The death_cause of this Referee.
        :type death_cause: List[object]
        """

        self._death_cause = death_cause
