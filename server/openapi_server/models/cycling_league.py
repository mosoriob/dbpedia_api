# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class CyclingLeague(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, viaf_id=None, leader_function=None, art_patron=None, manager_season=None, secretary_general=None, number_of_locations=None, discipline=None, type=None, revenue=None, affiliation=None, season=None, id=None, nla_id=None, chairperson=None, region_served=None, superintendent=None, formation_date=None, number_of_employees=None, extinction_date=None, player_season=None, endowment=None, number_of_teams=None, slogan=None, regional_council=None, location_city=None, number_of_volunteers=None, ideology=None, description=None, membership=None, ceo=None, formation_year=None, junior_season=None, headquarter=None, extinction_year=None, child_organisation=None, honours=None, parent_organisation=None, organisation_member=None, number_of_staff=None, product=None, hometown=None, foundation_place=None, national_selection=None, current_season=None, label=None, legal_form=None, general_council=None, trustee=None, age=None, main_organ=None):  # noqa: E501
        """CyclingLeague - a model defined in OpenAPI

        :param viaf_id: The viaf_id of this CyclingLeague.  # noqa: E501
        :type viaf_id: List[str]
        :param leader_function: The leader_function of this CyclingLeague.  # noqa: E501
        :type leader_function: List[object]
        :param art_patron: The art_patron of this CyclingLeague.  # noqa: E501
        :type art_patron: List[object]
        :param manager_season: The manager_season of this CyclingLeague.  # noqa: E501
        :type manager_season: List[object]
        :param secretary_general: The secretary_general of this CyclingLeague.  # noqa: E501
        :type secretary_general: List[object]
        :param number_of_locations: The number_of_locations of this CyclingLeague.  # noqa: E501
        :type number_of_locations: List[int]
        :param discipline: The discipline of this CyclingLeague.  # noqa: E501
        :type discipline: List[object]
        :param type: The type of this CyclingLeague.  # noqa: E501
        :type type: List[str]
        :param revenue: The revenue of this CyclingLeague.  # noqa: E501
        :type revenue: List[float]
        :param affiliation: The affiliation of this CyclingLeague.  # noqa: E501
        :type affiliation: List[object]
        :param season: The season of this CyclingLeague.  # noqa: E501
        :type season: List[object]
        :param id: The id of this CyclingLeague.  # noqa: E501
        :type id: str
        :param nla_id: The nla_id of this CyclingLeague.  # noqa: E501
        :type nla_id: List[str]
        :param chairperson: The chairperson of this CyclingLeague.  # noqa: E501
        :type chairperson: List[object]
        :param region_served: The region_served of this CyclingLeague.  # noqa: E501
        :type region_served: List[object]
        :param superintendent: The superintendent of this CyclingLeague.  # noqa: E501
        :type superintendent: List[object]
        :param formation_date: The formation_date of this CyclingLeague.  # noqa: E501
        :type formation_date: List[str]
        :param number_of_employees: The number_of_employees of this CyclingLeague.  # noqa: E501
        :type number_of_employees: List[int]
        :param extinction_date: The extinction_date of this CyclingLeague.  # noqa: E501
        :type extinction_date: List[str]
        :param player_season: The player_season of this CyclingLeague.  # noqa: E501
        :type player_season: List[object]
        :param endowment: The endowment of this CyclingLeague.  # noqa: E501
        :type endowment: List[float]
        :param number_of_teams: The number_of_teams of this CyclingLeague.  # noqa: E501
        :type number_of_teams: List[int]
        :param slogan: The slogan of this CyclingLeague.  # noqa: E501
        :type slogan: List[str]
        :param regional_council: The regional_council of this CyclingLeague.  # noqa: E501
        :type regional_council: List[object]
        :param location_city: The location_city of this CyclingLeague.  # noqa: E501
        :type location_city: List[object]
        :param number_of_volunteers: The number_of_volunteers of this CyclingLeague.  # noqa: E501
        :type number_of_volunteers: List[int]
        :param ideology: The ideology of this CyclingLeague.  # noqa: E501
        :type ideology: List[object]
        :param description: The description of this CyclingLeague.  # noqa: E501
        :type description: List[str]
        :param membership: The membership of this CyclingLeague.  # noqa: E501
        :type membership: List[str]
        :param ceo: The ceo of this CyclingLeague.  # noqa: E501
        :type ceo: List[object]
        :param formation_year: The formation_year of this CyclingLeague.  # noqa: E501
        :type formation_year: List[str]
        :param junior_season: The junior_season of this CyclingLeague.  # noqa: E501
        :type junior_season: List[object]
        :param headquarter: The headquarter of this CyclingLeague.  # noqa: E501
        :type headquarter: List[object]
        :param extinction_year: The extinction_year of this CyclingLeague.  # noqa: E501
        :type extinction_year: List[str]
        :param child_organisation: The child_organisation of this CyclingLeague.  # noqa: E501
        :type child_organisation: List[object]
        :param honours: The honours of this CyclingLeague.  # noqa: E501
        :type honours: List[object]
        :param parent_organisation: The parent_organisation of this CyclingLeague.  # noqa: E501
        :type parent_organisation: List[object]
        :param organisation_member: The organisation_member of this CyclingLeague.  # noqa: E501
        :type organisation_member: List[object]
        :param number_of_staff: The number_of_staff of this CyclingLeague.  # noqa: E501
        :type number_of_staff: List[int]
        :param product: The product of this CyclingLeague.  # noqa: E501
        :type product: List[object]
        :param hometown: The hometown of this CyclingLeague.  # noqa: E501
        :type hometown: List[object]
        :param foundation_place: The foundation_place of this CyclingLeague.  # noqa: E501
        :type foundation_place: List[object]
        :param national_selection: The national_selection of this CyclingLeague.  # noqa: E501
        :type national_selection: List[object]
        :param current_season: The current_season of this CyclingLeague.  # noqa: E501
        :type current_season: List[str]
        :param label: The label of this CyclingLeague.  # noqa: E501
        :type label: List[str]
        :param legal_form: The legal_form of this CyclingLeague.  # noqa: E501
        :type legal_form: List[object]
        :param general_council: The general_council of this CyclingLeague.  # noqa: E501
        :type general_council: List[object]
        :param trustee: The trustee of this CyclingLeague.  # noqa: E501
        :type trustee: List[object]
        :param age: The age of this CyclingLeague.  # noqa: E501
        :type age: List[int]
        :param main_organ: The main_organ of this CyclingLeague.  # noqa: E501
        :type main_organ: List[object]
        """


        self.openapi_types = {
            'viaf_id': List[str],
            'leader_function': List[object],
            'art_patron': List[object],
            'manager_season': List[object],
            'secretary_general': List[object],
            'number_of_locations': List[int],
            'discipline': List[object],
            'type': List[str],
            'revenue': List[float],
            'affiliation': List[object],
            'season': List[object],
            'id': str,
            'nla_id': List[str],
            'chairperson': List[object],
            'region_served': List[object],
            'superintendent': List[object],
            'formation_date': List[str],
            'number_of_employees': List[int],
            'extinction_date': List[str],
            'player_season': List[object],
            'endowment': List[float],
            'number_of_teams': List[int],
            'slogan': List[str],
            'regional_council': List[object],
            'location_city': List[object],
            'number_of_volunteers': List[int],
            'ideology': List[object],
            'description': List[str],
            'membership': List[str],
            'ceo': List[object],
            'formation_year': List[str],
            'junior_season': List[object],
            'headquarter': List[object],
            'extinction_year': List[str],
            'child_organisation': List[object],
            'honours': List[object],
            'parent_organisation': List[object],
            'organisation_member': List[object],
            'number_of_staff': List[int],
            'product': List[object],
            'hometown': List[object],
            'foundation_place': List[object],
            'national_selection': List[object],
            'current_season': List[str],
            'label': List[str],
            'legal_form': List[object],
            'general_council': List[object],
            'trustee': List[object],
            'age': List[int],
            'main_organ': List[object]
        }

        self.attribute_map = {
            'viaf_id': 'viafId',
            'leader_function': 'leaderFunction',
            'art_patron': 'artPatron',
            'manager_season': 'managerSeason',
            'secretary_general': 'secretaryGeneral',
            'number_of_locations': 'numberOfLocations',
            'discipline': 'discipline',
            'type': 'type',
            'revenue': 'revenue',
            'affiliation': 'affiliation',
            'season': 'season',
            'id': 'id',
            'nla_id': 'nlaId',
            'chairperson': 'chairperson',
            'region_served': 'regionServed',
            'superintendent': 'superintendent',
            'formation_date': 'formationDate',
            'number_of_employees': 'numberOfEmployees',
            'extinction_date': 'extinctionDate',
            'player_season': 'playerSeason',
            'endowment': 'endowment',
            'number_of_teams': 'numberOfTeams',
            'slogan': 'slogan',
            'regional_council': 'regionalCouncil',
            'location_city': 'locationCity',
            'number_of_volunteers': 'numberOfVolunteers',
            'ideology': 'ideology',
            'description': 'description',
            'membership': 'membership',
            'ceo': 'ceo',
            'formation_year': 'formationYear',
            'junior_season': 'juniorSeason',
            'headquarter': 'headquarter',
            'extinction_year': 'extinctionYear',
            'child_organisation': 'childOrganisation',
            'honours': 'honours',
            'parent_organisation': 'parentOrganisation',
            'organisation_member': 'organisationMember',
            'number_of_staff': 'numberOfStaff',
            'product': 'product',
            'hometown': 'hometown',
            'foundation_place': 'foundationPlace',
            'national_selection': 'nationalSelection',
            'current_season': 'currentSeason',
            'label': 'label',
            'legal_form': 'legalForm',
            'general_council': 'generalCouncil',
            'trustee': 'trustee',
            'age': 'age',
            'main_organ': 'mainOrgan'
        }

        self._viaf_id = viaf_id
        self._leader_function = leader_function
        self._art_patron = art_patron
        self._manager_season = manager_season
        self._secretary_general = secretary_general
        self._number_of_locations = number_of_locations
        self._discipline = discipline
        self._type = type
        self._revenue = revenue
        self._affiliation = affiliation
        self._season = season
        self._id = id
        self._nla_id = nla_id
        self._chairperson = chairperson
        self._region_served = region_served
        self._superintendent = superintendent
        self._formation_date = formation_date
        self._number_of_employees = number_of_employees
        self._extinction_date = extinction_date
        self._player_season = player_season
        self._endowment = endowment
        self._number_of_teams = number_of_teams
        self._slogan = slogan
        self._regional_council = regional_council
        self._location_city = location_city
        self._number_of_volunteers = number_of_volunteers
        self._ideology = ideology
        self._description = description
        self._membership = membership
        self._ceo = ceo
        self._formation_year = formation_year
        self._junior_season = junior_season
        self._headquarter = headquarter
        self._extinction_year = extinction_year
        self._child_organisation = child_organisation
        self._honours = honours
        self._parent_organisation = parent_organisation
        self._organisation_member = organisation_member
        self._number_of_staff = number_of_staff
        self._product = product
        self._hometown = hometown
        self._foundation_place = foundation_place
        self._national_selection = national_selection
        self._current_season = current_season
        self._label = label
        self._legal_form = legal_form
        self._general_council = general_council
        self._trustee = trustee
        self._age = age
        self._main_organ = main_organ

    @classmethod
    def from_dict(cls, dikt) -> 'CyclingLeague':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CyclingLeague of this CyclingLeague.  # noqa: E501
        :rtype: CyclingLeague
        """
        return util.deserialize_model(dikt, cls)

    @property
    def viaf_id(self):
        """Gets the viaf_id of this CyclingLeague.

        International authority data from the Online Computer Library Center (OCLC)  # noqa: E501

        :return: The viaf_id of this CyclingLeague.
        :rtype: List[str]
        """
        return self._viaf_id

    @viaf_id.setter
    def viaf_id(self, viaf_id):
        """Sets the viaf_id of this CyclingLeague.

        International authority data from the Online Computer Library Center (OCLC)  # noqa: E501

        :param viaf_id: The viaf_id of this CyclingLeague.
        :type viaf_id: List[str]
        """

        self._viaf_id = viaf_id

    @property
    def leader_function(self):
        """Gets the leader_function of this CyclingLeague.

        Description not available  # noqa: E501

        :return: The leader_function of this CyclingLeague.
        :rtype: List[object]
        """
        return self._leader_function

    @leader_function.setter
    def leader_function(self, leader_function):
        """Sets the leader_function of this CyclingLeague.

        Description not available  # noqa: E501

        :param leader_function: The leader_function of this CyclingLeague.
        :type leader_function: List[object]
        """

        self._leader_function = leader_function

    @property
    def art_patron(self):
        """Gets the art_patron of this CyclingLeague.

        An influential, wealthy person who supported an artist, craftsman, a scholar or a noble.. See also  # noqa: E501

        :return: The art_patron of this CyclingLeague.
        :rtype: List[object]
        """
        return self._art_patron

    @art_patron.setter
    def art_patron(self, art_patron):
        """Sets the art_patron of this CyclingLeague.

        An influential, wealthy person who supported an artist, craftsman, a scholar or a noble.. See also  # noqa: E501

        :param art_patron: The art_patron of this CyclingLeague.
        :type art_patron: List[object]
        """

        self._art_patron = art_patron

    @property
    def manager_season(self):
        """Gets the manager_season of this CyclingLeague.

        Description not available  # noqa: E501

        :return: The manager_season of this CyclingLeague.
        :rtype: List[object]
        """
        return self._manager_season

    @manager_season.setter
    def manager_season(self, manager_season):
        """Sets the manager_season of this CyclingLeague.

        Description not available  # noqa: E501

        :param manager_season: The manager_season of this CyclingLeague.
        :type manager_season: List[object]
        """

        self._manager_season = manager_season

    @property
    def secretary_general(self):
        """Gets the secretary_general of this CyclingLeague.

        Description not available  # noqa: E501

        :return: The secretary_general of this CyclingLeague.
        :rtype: List[object]
        """
        return self._secretary_general

    @secretary_general.setter
    def secretary_general(self, secretary_general):
        """Sets the secretary_general of this CyclingLeague.

        Description not available  # noqa: E501

        :param secretary_general: The secretary_general of this CyclingLeague.
        :type secretary_general: List[object]
        """

        self._secretary_general = secretary_general

    @property
    def number_of_locations(self):
        """Gets the number_of_locations of this CyclingLeague.

        Description not available  # noqa: E501

        :return: The number_of_locations of this CyclingLeague.
        :rtype: List[int]
        """
        return self._number_of_locations

    @number_of_locations.setter
    def number_of_locations(self, number_of_locations):
        """Sets the number_of_locations of this CyclingLeague.

        Description not available  # noqa: E501

        :param number_of_locations: The number_of_locations of this CyclingLeague.
        :type number_of_locations: List[int]
        """

        self._number_of_locations = number_of_locations

    @property
    def discipline(self):
        """Gets the discipline of this CyclingLeague.

        Description not available  # noqa: E501

        :return: The discipline of this CyclingLeague.
        :rtype: List[object]
        """
        return self._discipline

    @discipline.setter
    def discipline(self, discipline):
        """Sets the discipline of this CyclingLeague.

        Description not available  # noqa: E501

        :param discipline: The discipline of this CyclingLeague.
        :type discipline: List[object]
        """

        self._discipline = discipline

    @property
    def type(self):
        """Gets the type of this CyclingLeague.

        type of the resource  # noqa: E501

        :return: The type of this CyclingLeague.
        :rtype: List[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CyclingLeague.

        type of the resource  # noqa: E501

        :param type: The type of this CyclingLeague.
        :type type: List[str]
        """

        self._type = type

    @property
    def revenue(self):
        """Gets the revenue of this CyclingLeague.

        Description not available  # noqa: E501

        :return: The revenue of this CyclingLeague.
        :rtype: List[float]
        """
        return self._revenue

    @revenue.setter
    def revenue(self, revenue):
        """Sets the revenue of this CyclingLeague.

        Description not available  # noqa: E501

        :param revenue: The revenue of this CyclingLeague.
        :type revenue: List[float]
        """

        self._revenue = revenue

    @property
    def affiliation(self):
        """Gets the affiliation of this CyclingLeague.

        Description not available  # noqa: E501

        :return: The affiliation of this CyclingLeague.
        :rtype: List[object]
        """
        return self._affiliation

    @affiliation.setter
    def affiliation(self, affiliation):
        """Sets the affiliation of this CyclingLeague.

        Description not available  # noqa: E501

        :param affiliation: The affiliation of this CyclingLeague.
        :type affiliation: List[object]
        """

        self._affiliation = affiliation

    @property
    def season(self):
        """Gets the season of this CyclingLeague.

        Description not available  # noqa: E501

        :return: The season of this CyclingLeague.
        :rtype: List[object]
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this CyclingLeague.

        Description not available  # noqa: E501

        :param season: The season of this CyclingLeague.
        :type season: List[object]
        """

        self._season = season

    @property
    def id(self):
        """Gets the id of this CyclingLeague.

        identifier  # noqa: E501

        :return: The id of this CyclingLeague.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CyclingLeague.

        identifier  # noqa: E501

        :param id: The id of this CyclingLeague.
        :type id: str
        """

        self._id = id

    @property
    def nla_id(self):
        """Gets the nla_id of this CyclingLeague.

        NLA Trove’s People and Organisation view allows the discovery of biographical and other contextual information about people and organisations. Search also available via VIAF.  # noqa: E501

        :return: The nla_id of this CyclingLeague.
        :rtype: List[str]
        """
        return self._nla_id

    @nla_id.setter
    def nla_id(self, nla_id):
        """Sets the nla_id of this CyclingLeague.

        NLA Trove’s People and Organisation view allows the discovery of biographical and other contextual information about people and organisations. Search also available via VIAF.  # noqa: E501

        :param nla_id: The nla_id of this CyclingLeague.
        :type nla_id: List[str]
        """

        self._nla_id = nla_id

    @property
    def chairperson(self):
        """Gets the chairperson of this CyclingLeague.

        Description not available  # noqa: E501

        :return: The chairperson of this CyclingLeague.
        :rtype: List[object]
        """
        return self._chairperson

    @chairperson.setter
    def chairperson(self, chairperson):
        """Sets the chairperson of this CyclingLeague.

        Description not available  # noqa: E501

        :param chairperson: The chairperson of this CyclingLeague.
        :type chairperson: List[object]
        """

        self._chairperson = chairperson

    @property
    def region_served(self):
        """Gets the region_served of this CyclingLeague.

        Description not available  # noqa: E501

        :return: The region_served of this CyclingLeague.
        :rtype: List[object]
        """
        return self._region_served

    @region_served.setter
    def region_served(self, region_served):
        """Sets the region_served of this CyclingLeague.

        Description not available  # noqa: E501

        :param region_served: The region_served of this CyclingLeague.
        :type region_served: List[object]
        """

        self._region_served = region_served

    @property
    def superintendent(self):
        """Gets the superintendent of this CyclingLeague.

        Description not available  # noqa: E501

        :return: The superintendent of this CyclingLeague.
        :rtype: List[object]
        """
        return self._superintendent

    @superintendent.setter
    def superintendent(self, superintendent):
        """Sets the superintendent of this CyclingLeague.

        Description not available  # noqa: E501

        :param superintendent: The superintendent of this CyclingLeague.
        :type superintendent: List[object]
        """

        self._superintendent = superintendent

    @property
    def formation_date(self):
        """Gets the formation_date of this CyclingLeague.

        Description not available  # noqa: E501

        :return: The formation_date of this CyclingLeague.
        :rtype: List[str]
        """
        return self._formation_date

    @formation_date.setter
    def formation_date(self, formation_date):
        """Sets the formation_date of this CyclingLeague.

        Description not available  # noqa: E501

        :param formation_date: The formation_date of this CyclingLeague.
        :type formation_date: List[str]
        """

        self._formation_date = formation_date

    @property
    def number_of_employees(self):
        """Gets the number_of_employees of this CyclingLeague.

        Description not available  # noqa: E501

        :return: The number_of_employees of this CyclingLeague.
        :rtype: List[int]
        """
        return self._number_of_employees

    @number_of_employees.setter
    def number_of_employees(self, number_of_employees):
        """Sets the number_of_employees of this CyclingLeague.

        Description not available  # noqa: E501

        :param number_of_employees: The number_of_employees of this CyclingLeague.
        :type number_of_employees: List[int]
        """

        self._number_of_employees = number_of_employees

    @property
    def extinction_date(self):
        """Gets the extinction_date of this CyclingLeague.

        Description not available  # noqa: E501

        :return: The extinction_date of this CyclingLeague.
        :rtype: List[str]
        """
        return self._extinction_date

    @extinction_date.setter
    def extinction_date(self, extinction_date):
        """Sets the extinction_date of this CyclingLeague.

        Description not available  # noqa: E501

        :param extinction_date: The extinction_date of this CyclingLeague.
        :type extinction_date: List[str]
        """

        self._extinction_date = extinction_date

    @property
    def player_season(self):
        """Gets the player_season of this CyclingLeague.

        Description not available  # noqa: E501

        :return: The player_season of this CyclingLeague.
        :rtype: List[object]
        """
        return self._player_season

    @player_season.setter
    def player_season(self, player_season):
        """Sets the player_season of this CyclingLeague.

        Description not available  # noqa: E501

        :param player_season: The player_season of this CyclingLeague.
        :type player_season: List[object]
        """

        self._player_season = player_season

    @property
    def endowment(self):
        """Gets the endowment of this CyclingLeague.

        Description not available  # noqa: E501

        :return: The endowment of this CyclingLeague.
        :rtype: List[float]
        """
        return self._endowment

    @endowment.setter
    def endowment(self, endowment):
        """Sets the endowment of this CyclingLeague.

        Description not available  # noqa: E501

        :param endowment: The endowment of this CyclingLeague.
        :type endowment: List[float]
        """

        self._endowment = endowment

    @property
    def number_of_teams(self):
        """Gets the number_of_teams of this CyclingLeague.

        Description not available  # noqa: E501

        :return: The number_of_teams of this CyclingLeague.
        :rtype: List[int]
        """
        return self._number_of_teams

    @number_of_teams.setter
    def number_of_teams(self, number_of_teams):
        """Sets the number_of_teams of this CyclingLeague.

        Description not available  # noqa: E501

        :param number_of_teams: The number_of_teams of this CyclingLeague.
        :type number_of_teams: List[int]
        """

        self._number_of_teams = number_of_teams

    @property
    def slogan(self):
        """Gets the slogan of this CyclingLeague.

        Description not available  # noqa: E501

        :return: The slogan of this CyclingLeague.
        :rtype: List[str]
        """
        return self._slogan

    @slogan.setter
    def slogan(self, slogan):
        """Sets the slogan of this CyclingLeague.

        Description not available  # noqa: E501

        :param slogan: The slogan of this CyclingLeague.
        :type slogan: List[str]
        """

        self._slogan = slogan

    @property
    def regional_council(self):
        """Gets the regional_council of this CyclingLeague.

        Description not available  # noqa: E501

        :return: The regional_council of this CyclingLeague.
        :rtype: List[object]
        """
        return self._regional_council

    @regional_council.setter
    def regional_council(self, regional_council):
        """Sets the regional_council of this CyclingLeague.

        Description not available  # noqa: E501

        :param regional_council: The regional_council of this CyclingLeague.
        :type regional_council: List[object]
        """

        self._regional_council = regional_council

    @property
    def location_city(self):
        """Gets the location_city of this CyclingLeague.

        City the thing is located.  # noqa: E501

        :return: The location_city of this CyclingLeague.
        :rtype: List[object]
        """
        return self._location_city

    @location_city.setter
    def location_city(self, location_city):
        """Sets the location_city of this CyclingLeague.

        City the thing is located.  # noqa: E501

        :param location_city: The location_city of this CyclingLeague.
        :type location_city: List[object]
        """

        self._location_city = location_city

    @property
    def number_of_volunteers(self):
        """Gets the number_of_volunteers of this CyclingLeague.

        Description not available  # noqa: E501

        :return: The number_of_volunteers of this CyclingLeague.
        :rtype: List[int]
        """
        return self._number_of_volunteers

    @number_of_volunteers.setter
    def number_of_volunteers(self, number_of_volunteers):
        """Sets the number_of_volunteers of this CyclingLeague.

        Description not available  # noqa: E501

        :param number_of_volunteers: The number_of_volunteers of this CyclingLeague.
        :type number_of_volunteers: List[int]
        """

        self._number_of_volunteers = number_of_volunteers

    @property
    def ideology(self):
        """Gets the ideology of this CyclingLeague.

        Description not available  # noqa: E501

        :return: The ideology of this CyclingLeague.
        :rtype: List[object]
        """
        return self._ideology

    @ideology.setter
    def ideology(self, ideology):
        """Sets the ideology of this CyclingLeague.

        Description not available  # noqa: E501

        :param ideology: The ideology of this CyclingLeague.
        :type ideology: List[object]
        """

        self._ideology = ideology

    @property
    def description(self):
        """Gets the description of this CyclingLeague.

        small description  # noqa: E501

        :return: The description of this CyclingLeague.
        :rtype: List[str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CyclingLeague.

        small description  # noqa: E501

        :param description: The description of this CyclingLeague.
        :type description: List[str]
        """

        self._description = description

    @property
    def membership(self):
        """Gets the membership of this CyclingLeague.

        Description not available  # noqa: E501

        :return: The membership of this CyclingLeague.
        :rtype: List[str]
        """
        return self._membership

    @membership.setter
    def membership(self, membership):
        """Sets the membership of this CyclingLeague.

        Description not available  # noqa: E501

        :param membership: The membership of this CyclingLeague.
        :type membership: List[str]
        """

        self._membership = membership

    @property
    def ceo(self):
        """Gets the ceo of this CyclingLeague.

        Description not available  # noqa: E501

        :return: The ceo of this CyclingLeague.
        :rtype: List[object]
        """
        return self._ceo

    @ceo.setter
    def ceo(self, ceo):
        """Sets the ceo of this CyclingLeague.

        Description not available  # noqa: E501

        :param ceo: The ceo of this CyclingLeague.
        :type ceo: List[object]
        """

        self._ceo = ceo

    @property
    def formation_year(self):
        """Gets the formation_year of this CyclingLeague.

        Description not available  # noqa: E501

        :return: The formation_year of this CyclingLeague.
        :rtype: List[str]
        """
        return self._formation_year

    @formation_year.setter
    def formation_year(self, formation_year):
        """Sets the formation_year of this CyclingLeague.

        Description not available  # noqa: E501

        :param formation_year: The formation_year of this CyclingLeague.
        :type formation_year: List[str]
        """

        self._formation_year = formation_year

    @property
    def junior_season(self):
        """Gets the junior_season of this CyclingLeague.

        Description not available  # noqa: E501

        :return: The junior_season of this CyclingLeague.
        :rtype: List[object]
        """
        return self._junior_season

    @junior_season.setter
    def junior_season(self, junior_season):
        """Sets the junior_season of this CyclingLeague.

        Description not available  # noqa: E501

        :param junior_season: The junior_season of this CyclingLeague.
        :type junior_season: List[object]
        """

        self._junior_season = junior_season

    @property
    def headquarter(self):
        """Gets the headquarter of this CyclingLeague.

        Description not available  # noqa: E501

        :return: The headquarter of this CyclingLeague.
        :rtype: List[object]
        """
        return self._headquarter

    @headquarter.setter
    def headquarter(self, headquarter):
        """Sets the headquarter of this CyclingLeague.

        Description not available  # noqa: E501

        :param headquarter: The headquarter of this CyclingLeague.
        :type headquarter: List[object]
        """

        self._headquarter = headquarter

    @property
    def extinction_year(self):
        """Gets the extinction_year of this CyclingLeague.

        Description not available  # noqa: E501

        :return: The extinction_year of this CyclingLeague.
        :rtype: List[str]
        """
        return self._extinction_year

    @extinction_year.setter
    def extinction_year(self, extinction_year):
        """Sets the extinction_year of this CyclingLeague.

        Description not available  # noqa: E501

        :param extinction_year: The extinction_year of this CyclingLeague.
        :type extinction_year: List[str]
        """

        self._extinction_year = extinction_year

    @property
    def child_organisation(self):
        """Gets the child_organisation of this CyclingLeague.

        Description not available  # noqa: E501

        :return: The child_organisation of this CyclingLeague.
        :rtype: List[object]
        """
        return self._child_organisation

    @child_organisation.setter
    def child_organisation(self, child_organisation):
        """Sets the child_organisation of this CyclingLeague.

        Description not available  # noqa: E501

        :param child_organisation: The child_organisation of this CyclingLeague.
        :type child_organisation: List[object]
        """

        self._child_organisation = child_organisation

    @property
    def honours(self):
        """Gets the honours of this CyclingLeague.

        Description not available  # noqa: E501

        :return: The honours of this CyclingLeague.
        :rtype: List[object]
        """
        return self._honours

    @honours.setter
    def honours(self, honours):
        """Sets the honours of this CyclingLeague.

        Description not available  # noqa: E501

        :param honours: The honours of this CyclingLeague.
        :type honours: List[object]
        """

        self._honours = honours

    @property
    def parent_organisation(self):
        """Gets the parent_organisation of this CyclingLeague.

        Description not available  # noqa: E501

        :return: The parent_organisation of this CyclingLeague.
        :rtype: List[object]
        """
        return self._parent_organisation

    @parent_organisation.setter
    def parent_organisation(self, parent_organisation):
        """Sets the parent_organisation of this CyclingLeague.

        Description not available  # noqa: E501

        :param parent_organisation: The parent_organisation of this CyclingLeague.
        :type parent_organisation: List[object]
        """

        self._parent_organisation = parent_organisation

    @property
    def organisation_member(self):
        """Gets the organisation_member of this CyclingLeague.

        Identify the members of an organisation.  # noqa: E501

        :return: The organisation_member of this CyclingLeague.
        :rtype: List[object]
        """
        return self._organisation_member

    @organisation_member.setter
    def organisation_member(self, organisation_member):
        """Sets the organisation_member of this CyclingLeague.

        Identify the members of an organisation.  # noqa: E501

        :param organisation_member: The organisation_member of this CyclingLeague.
        :type organisation_member: List[object]
        """

        self._organisation_member = organisation_member

    @property
    def number_of_staff(self):
        """Gets the number_of_staff of this CyclingLeague.

        Description not available  # noqa: E501

        :return: The number_of_staff of this CyclingLeague.
        :rtype: List[int]
        """
        return self._number_of_staff

    @number_of_staff.setter
    def number_of_staff(self, number_of_staff):
        """Sets the number_of_staff of this CyclingLeague.

        Description not available  # noqa: E501

        :param number_of_staff: The number_of_staff of this CyclingLeague.
        :type number_of_staff: List[int]
        """

        self._number_of_staff = number_of_staff

    @property
    def product(self):
        """Gets the product of this CyclingLeague.

        Description not available  # noqa: E501

        :return: The product of this CyclingLeague.
        :rtype: List[object]
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this CyclingLeague.

        Description not available  # noqa: E501

        :param product: The product of this CyclingLeague.
        :type product: List[object]
        """

        self._product = product

    @property
    def hometown(self):
        """Gets the hometown of this CyclingLeague.

        Description not available  # noqa: E501

        :return: The hometown of this CyclingLeague.
        :rtype: List[object]
        """
        return self._hometown

    @hometown.setter
    def hometown(self, hometown):
        """Sets the hometown of this CyclingLeague.

        Description not available  # noqa: E501

        :param hometown: The hometown of this CyclingLeague.
        :type hometown: List[object]
        """

        self._hometown = hometown

    @property
    def foundation_place(self):
        """Gets the foundation_place of this CyclingLeague.

        Description not available  # noqa: E501

        :return: The foundation_place of this CyclingLeague.
        :rtype: List[object]
        """
        return self._foundation_place

    @foundation_place.setter
    def foundation_place(self, foundation_place):
        """Sets the foundation_place of this CyclingLeague.

        Description not available  # noqa: E501

        :param foundation_place: The foundation_place of this CyclingLeague.
        :type foundation_place: List[object]
        """

        self._foundation_place = foundation_place

    @property
    def national_selection(self):
        """Gets the national_selection of this CyclingLeague.

        Description not available  # noqa: E501

        :return: The national_selection of this CyclingLeague.
        :rtype: List[object]
        """
        return self._national_selection

    @national_selection.setter
    def national_selection(self, national_selection):
        """Sets the national_selection of this CyclingLeague.

        Description not available  # noqa: E501

        :param national_selection: The national_selection of this CyclingLeague.
        :type national_selection: List[object]
        """

        self._national_selection = national_selection

    @property
    def current_season(self):
        """Gets the current_season of this CyclingLeague.

        Description not available  # noqa: E501

        :return: The current_season of this CyclingLeague.
        :rtype: List[str]
        """
        return self._current_season

    @current_season.setter
    def current_season(self, current_season):
        """Sets the current_season of this CyclingLeague.

        Description not available  # noqa: E501

        :param current_season: The current_season of this CyclingLeague.
        :type current_season: List[str]
        """

        self._current_season = current_season

    @property
    def label(self):
        """Gets the label of this CyclingLeague.

        short description of the resource  # noqa: E501

        :return: The label of this CyclingLeague.
        :rtype: List[str]
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this CyclingLeague.

        short description of the resource  # noqa: E501

        :param label: The label of this CyclingLeague.
        :type label: List[str]
        """

        self._label = label

    @property
    def legal_form(self):
        """Gets the legal_form of this CyclingLeague.

        There are many types of business entity defined in the legal systems of various countries. These include corporations, cooperatives, partnerships, sole traders, limited liability company and other specialized types of organization.  # noqa: E501

        :return: The legal_form of this CyclingLeague.
        :rtype: List[object]
        """
        return self._legal_form

    @legal_form.setter
    def legal_form(self, legal_form):
        """Sets the legal_form of this CyclingLeague.

        There are many types of business entity defined in the legal systems of various countries. These include corporations, cooperatives, partnerships, sole traders, limited liability company and other specialized types of organization.  # noqa: E501

        :param legal_form: The legal_form of this CyclingLeague.
        :type legal_form: List[object]
        """

        self._legal_form = legal_form

    @property
    def general_council(self):
        """Gets the general_council of this CyclingLeague.

        Description not available  # noqa: E501

        :return: The general_council of this CyclingLeague.
        :rtype: List[object]
        """
        return self._general_council

    @general_council.setter
    def general_council(self, general_council):
        """Sets the general_council of this CyclingLeague.

        Description not available  # noqa: E501

        :param general_council: The general_council of this CyclingLeague.
        :type general_council: List[object]
        """

        self._general_council = general_council

    @property
    def trustee(self):
        """Gets the trustee of this CyclingLeague.

        Description not available  # noqa: E501

        :return: The trustee of this CyclingLeague.
        :rtype: List[object]
        """
        return self._trustee

    @trustee.setter
    def trustee(self, trustee):
        """Sets the trustee of this CyclingLeague.

        Description not available  # noqa: E501

        :param trustee: The trustee of this CyclingLeague.
        :type trustee: List[object]
        """

        self._trustee = trustee

    @property
    def age(self):
        """Gets the age of this CyclingLeague.

        Description not available  # noqa: E501

        :return: The age of this CyclingLeague.
        :rtype: List[int]
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this CyclingLeague.

        Description not available  # noqa: E501

        :param age: The age of this CyclingLeague.
        :type age: List[int]
        """

        self._age = age

    @property
    def main_organ(self):
        """Gets the main_organ of this CyclingLeague.

        Description not available  # noqa: E501

        :return: The main_organ of this CyclingLeague.
        :rtype: List[object]
        """
        return self._main_organ

    @main_organ.setter
    def main_organ(self, main_organ):
        """Sets the main_organ of this CyclingLeague.

        Description not available  # noqa: E501

        :param main_organ: The main_organ of this CyclingLeague.
        :type main_organ: List[object]
        """

        self._main_organ = main_organ
