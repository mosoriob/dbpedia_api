# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class MusicGenre(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, music_fusion_genre=None, music_subgenre=None, description=None, derivative=None, id=None, label=None, type=None, stylistic_origin=None):  # noqa: E501
        """MusicGenre - a model defined in OpenAPI

        :param music_fusion_genre: The music_fusion_genre of this MusicGenre.  # noqa: E501
        :type music_fusion_genre: List[object]
        :param music_subgenre: The music_subgenre of this MusicGenre.  # noqa: E501
        :type music_subgenre: List[object]
        :param description: The description of this MusicGenre.  # noqa: E501
        :type description: List[str]
        :param derivative: The derivative of this MusicGenre.  # noqa: E501
        :type derivative: List[object]
        :param id: The id of this MusicGenre.  # noqa: E501
        :type id: str
        :param label: The label of this MusicGenre.  # noqa: E501
        :type label: List[str]
        :param type: The type of this MusicGenre.  # noqa: E501
        :type type: List[str]
        :param stylistic_origin: The stylistic_origin of this MusicGenre.  # noqa: E501
        :type stylistic_origin: List[object]
        """


        self.openapi_types = {
            'music_fusion_genre': List[object],
            'music_subgenre': List[object],
            'description': List[str],
            'derivative': List[object],
            'id': str,
            'label': List[str],
            'type': List[str],
            'stylistic_origin': List[object]
        }

        self.attribute_map = {
            'music_fusion_genre': 'musicFusionGenre',
            'music_subgenre': 'musicSubgenre',
            'description': 'description',
            'derivative': 'derivative',
            'id': 'id',
            'label': 'label',
            'type': 'type',
            'stylistic_origin': 'stylisticOrigin'
        }

        self._music_fusion_genre = music_fusion_genre
        self._music_subgenre = music_subgenre
        self._description = description
        self._derivative = derivative
        self._id = id
        self._label = label
        self._type = type
        self._stylistic_origin = stylistic_origin

    @classmethod
    def from_dict(cls, dikt) -> 'MusicGenre':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MusicGenre of this MusicGenre.  # noqa: E501
        :rtype: MusicGenre
        """
        return util.deserialize_model(dikt, cls)

    @property
    def music_fusion_genre(self):
        """Gets the music_fusion_genre of this MusicGenre.

        Description not available  # noqa: E501

        :return: The music_fusion_genre of this MusicGenre.
        :rtype: List[object]
        """
        return self._music_fusion_genre

    @music_fusion_genre.setter
    def music_fusion_genre(self, music_fusion_genre):
        """Sets the music_fusion_genre of this MusicGenre.

        Description not available  # noqa: E501

        :param music_fusion_genre: The music_fusion_genre of this MusicGenre.
        :type music_fusion_genre: List[object]
        """

        self._music_fusion_genre = music_fusion_genre

    @property
    def music_subgenre(self):
        """Gets the music_subgenre of this MusicGenre.

        Description not available  # noqa: E501

        :return: The music_subgenre of this MusicGenre.
        :rtype: List[object]
        """
        return self._music_subgenre

    @music_subgenre.setter
    def music_subgenre(self, music_subgenre):
        """Sets the music_subgenre of this MusicGenre.

        Description not available  # noqa: E501

        :param music_subgenre: The music_subgenre of this MusicGenre.
        :type music_subgenre: List[object]
        """

        self._music_subgenre = music_subgenre

    @property
    def description(self):
        """Gets the description of this MusicGenre.

        small description  # noqa: E501

        :return: The description of this MusicGenre.
        :rtype: List[str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MusicGenre.

        small description  # noqa: E501

        :param description: The description of this MusicGenre.
        :type description: List[str]
        """

        self._description = description

    @property
    def derivative(self):
        """Gets the derivative of this MusicGenre.

        Description not available  # noqa: E501

        :return: The derivative of this MusicGenre.
        :rtype: List[object]
        """
        return self._derivative

    @derivative.setter
    def derivative(self, derivative):
        """Sets the derivative of this MusicGenre.

        Description not available  # noqa: E501

        :param derivative: The derivative of this MusicGenre.
        :type derivative: List[object]
        """

        self._derivative = derivative

    @property
    def id(self):
        """Gets the id of this MusicGenre.

        identifier  # noqa: E501

        :return: The id of this MusicGenre.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MusicGenre.

        identifier  # noqa: E501

        :param id: The id of this MusicGenre.
        :type id: str
        """

        self._id = id

    @property
    def label(self):
        """Gets the label of this MusicGenre.

        short description of the resource  # noqa: E501

        :return: The label of this MusicGenre.
        :rtype: List[str]
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this MusicGenre.

        short description of the resource  # noqa: E501

        :param label: The label of this MusicGenre.
        :type label: List[str]
        """

        self._label = label

    @property
    def type(self):
        """Gets the type of this MusicGenre.

        type of the resource  # noqa: E501

        :return: The type of this MusicGenre.
        :rtype: List[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MusicGenre.

        type of the resource  # noqa: E501

        :param type: The type of this MusicGenre.
        :type type: List[str]
        """

        self._type = type

    @property
    def stylistic_origin(self):
        """Gets the stylistic_origin of this MusicGenre.

        Description not available  # noqa: E501

        :return: The stylistic_origin of this MusicGenre.
        :rtype: List[object]
        """
        return self._stylistic_origin

    @stylistic_origin.setter
    def stylistic_origin(self, stylistic_origin):
        """Sets the stylistic_origin of this MusicGenre.

        Description not available  # noqa: E501

        :param stylistic_origin: The stylistic_origin of this MusicGenre.
        :type stylistic_origin: List[object]
        """

        self._stylistic_origin = stylistic_origin
