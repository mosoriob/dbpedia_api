# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Deity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, viaf_id=None, hometown=None, national_selection=None, art_patron=None, manager_season=None, ideology=None, description=None, label=None, discipline=None, type=None, junior_season=None, general_council=None, player_season=None, season=None, honours=None, id=None, regional_council=None, age=None, nla_id=None):  # noqa: E501
        """Deity - a model defined in OpenAPI

        :param viaf_id: The viaf_id of this Deity.  # noqa: E501
        :type viaf_id: List[str]
        :param hometown: The hometown of this Deity.  # noqa: E501
        :type hometown: List[object]
        :param national_selection: The national_selection of this Deity.  # noqa: E501
        :type national_selection: List[object]
        :param art_patron: The art_patron of this Deity.  # noqa: E501
        :type art_patron: List[object]
        :param manager_season: The manager_season of this Deity.  # noqa: E501
        :type manager_season: List[object]
        :param ideology: The ideology of this Deity.  # noqa: E501
        :type ideology: List[object]
        :param description: The description of this Deity.  # noqa: E501
        :type description: List[str]
        :param label: The label of this Deity.  # noqa: E501
        :type label: List[str]
        :param discipline: The discipline of this Deity.  # noqa: E501
        :type discipline: List[object]
        :param type: The type of this Deity.  # noqa: E501
        :type type: List[str]
        :param junior_season: The junior_season of this Deity.  # noqa: E501
        :type junior_season: List[object]
        :param general_council: The general_council of this Deity.  # noqa: E501
        :type general_council: List[object]
        :param player_season: The player_season of this Deity.  # noqa: E501
        :type player_season: List[object]
        :param season: The season of this Deity.  # noqa: E501
        :type season: List[object]
        :param honours: The honours of this Deity.  # noqa: E501
        :type honours: List[object]
        :param id: The id of this Deity.  # noqa: E501
        :type id: str
        :param regional_council: The regional_council of this Deity.  # noqa: E501
        :type regional_council: List[object]
        :param age: The age of this Deity.  # noqa: E501
        :type age: List[int]
        :param nla_id: The nla_id of this Deity.  # noqa: E501
        :type nla_id: List[str]
        """


        self.openapi_types = {
            'viaf_id': List[str],
            'hometown': List[object],
            'national_selection': List[object],
            'art_patron': List[object],
            'manager_season': List[object],
            'ideology': List[object],
            'description': List[str],
            'label': List[str],
            'discipline': List[object],
            'type': List[str],
            'junior_season': List[object],
            'general_council': List[object],
            'player_season': List[object],
            'season': List[object],
            'honours': List[object],
            'id': str,
            'regional_council': List[object],
            'age': List[int],
            'nla_id': List[str]
        }

        self.attribute_map = {
            'viaf_id': 'viafId',
            'hometown': 'hometown',
            'national_selection': 'nationalSelection',
            'art_patron': 'artPatron',
            'manager_season': 'managerSeason',
            'ideology': 'ideology',
            'description': 'description',
            'label': 'label',
            'discipline': 'discipline',
            'type': 'type',
            'junior_season': 'juniorSeason',
            'general_council': 'generalCouncil',
            'player_season': 'playerSeason',
            'season': 'season',
            'honours': 'honours',
            'id': 'id',
            'regional_council': 'regionalCouncil',
            'age': 'age',
            'nla_id': 'nlaId'
        }

        self._viaf_id = viaf_id
        self._hometown = hometown
        self._national_selection = national_selection
        self._art_patron = art_patron
        self._manager_season = manager_season
        self._ideology = ideology
        self._description = description
        self._label = label
        self._discipline = discipline
        self._type = type
        self._junior_season = junior_season
        self._general_council = general_council
        self._player_season = player_season
        self._season = season
        self._honours = honours
        self._id = id
        self._regional_council = regional_council
        self._age = age
        self._nla_id = nla_id

    @classmethod
    def from_dict(cls, dikt) -> 'Deity':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Deity of this Deity.  # noqa: E501
        :rtype: Deity
        """
        return util.deserialize_model(dikt, cls)

    @property
    def viaf_id(self):
        """Gets the viaf_id of this Deity.

        International authority data from the Online Computer Library Center (OCLC)  # noqa: E501

        :return: The viaf_id of this Deity.
        :rtype: List[str]
        """
        return self._viaf_id

    @viaf_id.setter
    def viaf_id(self, viaf_id):
        """Sets the viaf_id of this Deity.

        International authority data from the Online Computer Library Center (OCLC)  # noqa: E501

        :param viaf_id: The viaf_id of this Deity.
        :type viaf_id: List[str]
        """

        self._viaf_id = viaf_id

    @property
    def hometown(self):
        """Gets the hometown of this Deity.

        Description not available  # noqa: E501

        :return: The hometown of this Deity.
        :rtype: List[object]
        """
        return self._hometown

    @hometown.setter
    def hometown(self, hometown):
        """Sets the hometown of this Deity.

        Description not available  # noqa: E501

        :param hometown: The hometown of this Deity.
        :type hometown: List[object]
        """

        self._hometown = hometown

    @property
    def national_selection(self):
        """Gets the national_selection of this Deity.

        Description not available  # noqa: E501

        :return: The national_selection of this Deity.
        :rtype: List[object]
        """
        return self._national_selection

    @national_selection.setter
    def national_selection(self, national_selection):
        """Sets the national_selection of this Deity.

        Description not available  # noqa: E501

        :param national_selection: The national_selection of this Deity.
        :type national_selection: List[object]
        """

        self._national_selection = national_selection

    @property
    def art_patron(self):
        """Gets the art_patron of this Deity.

        An influential, wealthy person who supported an artist, craftsman, a scholar or a noble.. See also  # noqa: E501

        :return: The art_patron of this Deity.
        :rtype: List[object]
        """
        return self._art_patron

    @art_patron.setter
    def art_patron(self, art_patron):
        """Sets the art_patron of this Deity.

        An influential, wealthy person who supported an artist, craftsman, a scholar or a noble.. See also  # noqa: E501

        :param art_patron: The art_patron of this Deity.
        :type art_patron: List[object]
        """

        self._art_patron = art_patron

    @property
    def manager_season(self):
        """Gets the manager_season of this Deity.

        Description not available  # noqa: E501

        :return: The manager_season of this Deity.
        :rtype: List[object]
        """
        return self._manager_season

    @manager_season.setter
    def manager_season(self, manager_season):
        """Sets the manager_season of this Deity.

        Description not available  # noqa: E501

        :param manager_season: The manager_season of this Deity.
        :type manager_season: List[object]
        """

        self._manager_season = manager_season

    @property
    def ideology(self):
        """Gets the ideology of this Deity.

        Description not available  # noqa: E501

        :return: The ideology of this Deity.
        :rtype: List[object]
        """
        return self._ideology

    @ideology.setter
    def ideology(self, ideology):
        """Sets the ideology of this Deity.

        Description not available  # noqa: E501

        :param ideology: The ideology of this Deity.
        :type ideology: List[object]
        """

        self._ideology = ideology

    @property
    def description(self):
        """Gets the description of this Deity.

        small description  # noqa: E501

        :return: The description of this Deity.
        :rtype: List[str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Deity.

        small description  # noqa: E501

        :param description: The description of this Deity.
        :type description: List[str]
        """

        self._description = description

    @property
    def label(self):
        """Gets the label of this Deity.

        short description of the resource  # noqa: E501

        :return: The label of this Deity.
        :rtype: List[str]
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Deity.

        short description of the resource  # noqa: E501

        :param label: The label of this Deity.
        :type label: List[str]
        """

        self._label = label

    @property
    def discipline(self):
        """Gets the discipline of this Deity.

        Description not available  # noqa: E501

        :return: The discipline of this Deity.
        :rtype: List[object]
        """
        return self._discipline

    @discipline.setter
    def discipline(self, discipline):
        """Sets the discipline of this Deity.

        Description not available  # noqa: E501

        :param discipline: The discipline of this Deity.
        :type discipline: List[object]
        """

        self._discipline = discipline

    @property
    def type(self):
        """Gets the type of this Deity.

        type of the resource  # noqa: E501

        :return: The type of this Deity.
        :rtype: List[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Deity.

        type of the resource  # noqa: E501

        :param type: The type of this Deity.
        :type type: List[str]
        """

        self._type = type

    @property
    def junior_season(self):
        """Gets the junior_season of this Deity.

        Description not available  # noqa: E501

        :return: The junior_season of this Deity.
        :rtype: List[object]
        """
        return self._junior_season

    @junior_season.setter
    def junior_season(self, junior_season):
        """Sets the junior_season of this Deity.

        Description not available  # noqa: E501

        :param junior_season: The junior_season of this Deity.
        :type junior_season: List[object]
        """

        self._junior_season = junior_season

    @property
    def general_council(self):
        """Gets the general_council of this Deity.

        Description not available  # noqa: E501

        :return: The general_council of this Deity.
        :rtype: List[object]
        """
        return self._general_council

    @general_council.setter
    def general_council(self, general_council):
        """Sets the general_council of this Deity.

        Description not available  # noqa: E501

        :param general_council: The general_council of this Deity.
        :type general_council: List[object]
        """

        self._general_council = general_council

    @property
    def player_season(self):
        """Gets the player_season of this Deity.

        Description not available  # noqa: E501

        :return: The player_season of this Deity.
        :rtype: List[object]
        """
        return self._player_season

    @player_season.setter
    def player_season(self, player_season):
        """Sets the player_season of this Deity.

        Description not available  # noqa: E501

        :param player_season: The player_season of this Deity.
        :type player_season: List[object]
        """

        self._player_season = player_season

    @property
    def season(self):
        """Gets the season of this Deity.

        Description not available  # noqa: E501

        :return: The season of this Deity.
        :rtype: List[object]
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this Deity.

        Description not available  # noqa: E501

        :param season: The season of this Deity.
        :type season: List[object]
        """

        self._season = season

    @property
    def honours(self):
        """Gets the honours of this Deity.

        Description not available  # noqa: E501

        :return: The honours of this Deity.
        :rtype: List[object]
        """
        return self._honours

    @honours.setter
    def honours(self, honours):
        """Sets the honours of this Deity.

        Description not available  # noqa: E501

        :param honours: The honours of this Deity.
        :type honours: List[object]
        """

        self._honours = honours

    @property
    def id(self):
        """Gets the id of this Deity.

        identifier  # noqa: E501

        :return: The id of this Deity.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Deity.

        identifier  # noqa: E501

        :param id: The id of this Deity.
        :type id: str
        """

        self._id = id

    @property
    def regional_council(self):
        """Gets the regional_council of this Deity.

        Description not available  # noqa: E501

        :return: The regional_council of this Deity.
        :rtype: List[object]
        """
        return self._regional_council

    @regional_council.setter
    def regional_council(self, regional_council):
        """Sets the regional_council of this Deity.

        Description not available  # noqa: E501

        :param regional_council: The regional_council of this Deity.
        :type regional_council: List[object]
        """

        self._regional_council = regional_council

    @property
    def age(self):
        """Gets the age of this Deity.

        Description not available  # noqa: E501

        :return: The age of this Deity.
        :rtype: List[int]
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this Deity.

        Description not available  # noqa: E501

        :param age: The age of this Deity.
        :type age: List[int]
        """

        self._age = age

    @property
    def nla_id(self):
        """Gets the nla_id of this Deity.

        NLA Trove’s People and Organisation view allows the discovery of biographical and other contextual information about people and organisations. Search also available via VIAF.  # noqa: E501

        :return: The nla_id of this Deity.
        :rtype: List[str]
        """
        return self._nla_id

    @nla_id.setter
    def nla_id(self, nla_id):
        """Sets the nla_id of this Deity.

        NLA Trove’s People and Organisation view allows the discovery of biographical and other contextual information about people and organisations. Search also available via VIAF.  # noqa: E501

        :param nla_id: The nla_id of this Deity.
        :type nla_id: List[str]
        """

        self._nla_id = nla_id
