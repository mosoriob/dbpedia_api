# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Bone(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, branch_to=None, vein=None, gray_page=None, mesh_number=None, organ_system=None, mesh_name=None, description=None, label=None, drains_to=None, artery=None, type=None, branch_from=None, drains_from=None, lymph=None, dorlands_prefix=None, nerve=None, dorlands_suffix=None, precursor=None, id=None, gray_subject=None):  # noqa: E501
        """Bone - a model defined in OpenAPI

        :param branch_to: The branch_to of this Bone.  # noqa: E501
        :type branch_to: List[object]
        :param vein: The vein of this Bone.  # noqa: E501
        :type vein: List[object]
        :param gray_page: The gray_page of this Bone.  # noqa: E501
        :type gray_page: List[int]
        :param mesh_number: The mesh_number of this Bone.  # noqa: E501
        :type mesh_number: List[str]
        :param organ_system: The organ_system of this Bone.  # noqa: E501
        :type organ_system: List[object]
        :param mesh_name: The mesh_name of this Bone.  # noqa: E501
        :type mesh_name: List[str]
        :param description: The description of this Bone.  # noqa: E501
        :type description: List[str]
        :param label: The label of this Bone.  # noqa: E501
        :type label: List[str]
        :param drains_to: The drains_to of this Bone.  # noqa: E501
        :type drains_to: List[object]
        :param artery: The artery of this Bone.  # noqa: E501
        :type artery: List[object]
        :param type: The type of this Bone.  # noqa: E501
        :type type: List[str]
        :param branch_from: The branch_from of this Bone.  # noqa: E501
        :type branch_from: List[object]
        :param drains_from: The drains_from of this Bone.  # noqa: E501
        :type drains_from: List[object]
        :param lymph: The lymph of this Bone.  # noqa: E501
        :type lymph: List[object]
        :param dorlands_prefix: The dorlands_prefix of this Bone.  # noqa: E501
        :type dorlands_prefix: List[str]
        :param nerve: The nerve of this Bone.  # noqa: E501
        :type nerve: List[object]
        :param dorlands_suffix: The dorlands_suffix of this Bone.  # noqa: E501
        :type dorlands_suffix: List[str]
        :param precursor: The precursor of this Bone.  # noqa: E501
        :type precursor: List[object]
        :param id: The id of this Bone.  # noqa: E501
        :type id: str
        :param gray_subject: The gray_subject of this Bone.  # noqa: E501
        :type gray_subject: List[int]
        """


        self.openapi_types = {
            'branch_to': List[object],
            'vein': List[object],
            'gray_page': List[int],
            'mesh_number': List[str],
            'organ_system': List[object],
            'mesh_name': List[str],
            'description': List[str],
            'label': List[str],
            'drains_to': List[object],
            'artery': List[object],
            'type': List[str],
            'branch_from': List[object],
            'drains_from': List[object],
            'lymph': List[object],
            'dorlands_prefix': List[str],
            'nerve': List[object],
            'dorlands_suffix': List[str],
            'precursor': List[object],
            'id': str,
            'gray_subject': List[int]
        }

        self.attribute_map = {
            'branch_to': 'branchTo',
            'vein': 'vein',
            'gray_page': 'grayPage',
            'mesh_number': 'meshNumber',
            'organ_system': 'organSystem',
            'mesh_name': 'meshName',
            'description': 'description',
            'label': 'label',
            'drains_to': 'drainsTo',
            'artery': 'artery',
            'type': 'type',
            'branch_from': 'branchFrom',
            'drains_from': 'drainsFrom',
            'lymph': 'lymph',
            'dorlands_prefix': 'dorlandsPrefix',
            'nerve': 'nerve',
            'dorlands_suffix': 'dorlandsSuffix',
            'precursor': 'precursor',
            'id': 'id',
            'gray_subject': 'graySubject'
        }

        self._branch_to = branch_to
        self._vein = vein
        self._gray_page = gray_page
        self._mesh_number = mesh_number
        self._organ_system = organ_system
        self._mesh_name = mesh_name
        self._description = description
        self._label = label
        self._drains_to = drains_to
        self._artery = artery
        self._type = type
        self._branch_from = branch_from
        self._drains_from = drains_from
        self._lymph = lymph
        self._dorlands_prefix = dorlands_prefix
        self._nerve = nerve
        self._dorlands_suffix = dorlands_suffix
        self._precursor = precursor
        self._id = id
        self._gray_subject = gray_subject

    @classmethod
    def from_dict(cls, dikt) -> 'Bone':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Bone of this Bone.  # noqa: E501
        :rtype: Bone
        """
        return util.deserialize_model(dikt, cls)

    @property
    def branch_to(self):
        """Gets the branch_to of this Bone.

        Description not available  # noqa: E501

        :return: The branch_to of this Bone.
        :rtype: List[object]
        """
        return self._branch_to

    @branch_to.setter
    def branch_to(self, branch_to):
        """Sets the branch_to of this Bone.

        Description not available  # noqa: E501

        :param branch_to: The branch_to of this Bone.
        :type branch_to: List[object]
        """

        self._branch_to = branch_to

    @property
    def vein(self):
        """Gets the vein of this Bone.

        Description not available  # noqa: E501

        :return: The vein of this Bone.
        :rtype: List[object]
        """
        return self._vein

    @vein.setter
    def vein(self, vein):
        """Sets the vein of this Bone.

        Description not available  # noqa: E501

        :param vein: The vein of this Bone.
        :type vein: List[object]
        """

        self._vein = vein

    @property
    def gray_page(self):
        """Gets the gray_page of this Bone.

        Refers to the famous 1918 edition of Gray's Anatomy.  # noqa: E501

        :return: The gray_page of this Bone.
        :rtype: List[int]
        """
        return self._gray_page

    @gray_page.setter
    def gray_page(self, gray_page):
        """Sets the gray_page of this Bone.

        Refers to the famous 1918 edition of Gray's Anatomy.  # noqa: E501

        :param gray_page: The gray_page of this Bone.
        :type gray_page: List[int]
        """

        self._gray_page = gray_page

    @property
    def mesh_number(self):
        """Gets the mesh_number of this Bone.

        Description not available  # noqa: E501

        :return: The mesh_number of this Bone.
        :rtype: List[str]
        """
        return self._mesh_number

    @mesh_number.setter
    def mesh_number(self, mesh_number):
        """Sets the mesh_number of this Bone.

        Description not available  # noqa: E501

        :param mesh_number: The mesh_number of this Bone.
        :type mesh_number: List[str]
        """

        self._mesh_number = mesh_number

    @property
    def organ_system(self):
        """Gets the organ_system of this Bone.

        the organ system that a anatomical structure belongs to  # noqa: E501

        :return: The organ_system of this Bone.
        :rtype: List[object]
        """
        return self._organ_system

    @organ_system.setter
    def organ_system(self, organ_system):
        """Sets the organ_system of this Bone.

        the organ system that a anatomical structure belongs to  # noqa: E501

        :param organ_system: The organ_system of this Bone.
        :type organ_system: List[object]
        """

        self._organ_system = organ_system

    @property
    def mesh_name(self):
        """Gets the mesh_name of this Bone.

        Description not available  # noqa: E501

        :return: The mesh_name of this Bone.
        :rtype: List[str]
        """
        return self._mesh_name

    @mesh_name.setter
    def mesh_name(self, mesh_name):
        """Sets the mesh_name of this Bone.

        Description not available  # noqa: E501

        :param mesh_name: The mesh_name of this Bone.
        :type mesh_name: List[str]
        """

        self._mesh_name = mesh_name

    @property
    def description(self):
        """Gets the description of this Bone.

        small description  # noqa: E501

        :return: The description of this Bone.
        :rtype: List[str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Bone.

        small description  # noqa: E501

        :param description: The description of this Bone.
        :type description: List[str]
        """

        self._description = description

    @property
    def label(self):
        """Gets the label of this Bone.

        short description of the resource  # noqa: E501

        :return: The label of this Bone.
        :rtype: List[str]
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Bone.

        short description of the resource  # noqa: E501

        :param label: The label of this Bone.
        :type label: List[str]
        """

        self._label = label

    @property
    def drains_to(self):
        """Gets the drains_to of this Bone.

        Description not available  # noqa: E501

        :return: The drains_to of this Bone.
        :rtype: List[object]
        """
        return self._drains_to

    @drains_to.setter
    def drains_to(self, drains_to):
        """Sets the drains_to of this Bone.

        Description not available  # noqa: E501

        :param drains_to: The drains_to of this Bone.
        :type drains_to: List[object]
        """

        self._drains_to = drains_to

    @property
    def artery(self):
        """Gets the artery of this Bone.

        Description not available  # noqa: E501

        :return: The artery of this Bone.
        :rtype: List[object]
        """
        return self._artery

    @artery.setter
    def artery(self, artery):
        """Sets the artery of this Bone.

        Description not available  # noqa: E501

        :param artery: The artery of this Bone.
        :type artery: List[object]
        """

        self._artery = artery

    @property
    def type(self):
        """Gets the type of this Bone.

        type of the resource  # noqa: E501

        :return: The type of this Bone.
        :rtype: List[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Bone.

        type of the resource  # noqa: E501

        :param type: The type of this Bone.
        :type type: List[str]
        """

        self._type = type

    @property
    def branch_from(self):
        """Gets the branch_from of this Bone.

        Description not available  # noqa: E501

        :return: The branch_from of this Bone.
        :rtype: List[object]
        """
        return self._branch_from

    @branch_from.setter
    def branch_from(self, branch_from):
        """Sets the branch_from of this Bone.

        Description not available  # noqa: E501

        :param branch_from: The branch_from of this Bone.
        :type branch_from: List[object]
        """

        self._branch_from = branch_from

    @property
    def drains_from(self):
        """Gets the drains_from of this Bone.

        Description not available  # noqa: E501

        :return: The drains_from of this Bone.
        :rtype: List[object]
        """
        return self._drains_from

    @drains_from.setter
    def drains_from(self, drains_from):
        """Sets the drains_from of this Bone.

        Description not available  # noqa: E501

        :param drains_from: The drains_from of this Bone.
        :type drains_from: List[object]
        """

        self._drains_from = drains_from

    @property
    def lymph(self):
        """Gets the lymph of this Bone.

        Description not available  # noqa: E501

        :return: The lymph of this Bone.
        :rtype: List[object]
        """
        return self._lymph

    @lymph.setter
    def lymph(self, lymph):
        """Sets the lymph of this Bone.

        Description not available  # noqa: E501

        :param lymph: The lymph of this Bone.
        :type lymph: List[object]
        """

        self._lymph = lymph

    @property
    def dorlands_prefix(self):
        """Gets the dorlands_prefix of this Bone.

        Description not available  # noqa: E501

        :return: The dorlands_prefix of this Bone.
        :rtype: List[str]
        """
        return self._dorlands_prefix

    @dorlands_prefix.setter
    def dorlands_prefix(self, dorlands_prefix):
        """Sets the dorlands_prefix of this Bone.

        Description not available  # noqa: E501

        :param dorlands_prefix: The dorlands_prefix of this Bone.
        :type dorlands_prefix: List[str]
        """

        self._dorlands_prefix = dorlands_prefix

    @property
    def nerve(self):
        """Gets the nerve of this Bone.

        Description not available  # noqa: E501

        :return: The nerve of this Bone.
        :rtype: List[object]
        """
        return self._nerve

    @nerve.setter
    def nerve(self, nerve):
        """Sets the nerve of this Bone.

        Description not available  # noqa: E501

        :param nerve: The nerve of this Bone.
        :type nerve: List[object]
        """

        self._nerve = nerve

    @property
    def dorlands_suffix(self):
        """Gets the dorlands_suffix of this Bone.

        Description not available  # noqa: E501

        :return: The dorlands_suffix of this Bone.
        :rtype: List[str]
        """
        return self._dorlands_suffix

    @dorlands_suffix.setter
    def dorlands_suffix(self, dorlands_suffix):
        """Sets the dorlands_suffix of this Bone.

        Description not available  # noqa: E501

        :param dorlands_suffix: The dorlands_suffix of this Bone.
        :type dorlands_suffix: List[str]
        """

        self._dorlands_suffix = dorlands_suffix

    @property
    def precursor(self):
        """Gets the precursor of this Bone.

        Description not available  # noqa: E501

        :return: The precursor of this Bone.
        :rtype: List[object]
        """
        return self._precursor

    @precursor.setter
    def precursor(self, precursor):
        """Sets the precursor of this Bone.

        Description not available  # noqa: E501

        :param precursor: The precursor of this Bone.
        :type precursor: List[object]
        """

        self._precursor = precursor

    @property
    def id(self):
        """Gets the id of this Bone.

        identifier  # noqa: E501

        :return: The id of this Bone.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Bone.

        identifier  # noqa: E501

        :param id: The id of this Bone.
        :type id: str
        """

        self._id = id

    @property
    def gray_subject(self):
        """Gets the gray_subject of this Bone.

        Refers to the famous 1918 edition of Gray's Anatomy.  # noqa: E501

        :return: The gray_subject of this Bone.
        :rtype: List[int]
        """
        return self._gray_subject

    @gray_subject.setter
    def gray_subject(self, gray_subject):
        """Sets the gray_subject of this Bone.

        Refers to the famous 1918 edition of Gray's Anatomy.  # noqa: E501

        :param gray_subject: The gray_subject of this Bone.
        :type gray_subject: List[int]
        """

        self._gray_subject = gray_subject
