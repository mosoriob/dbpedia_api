# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class RecordLabel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, viaf_id=None, leader_function=None, art_patron=None, manager_season=None, secretary_general=None, number_of_locations=None, discipline=None, type=None, equity=None, revenue=None, assets=None, affiliation=None, grounds_for_liquidation=None, season=None, id=None, nla_id=None, stock_exchange=None, chairperson=None, region_served=None, superintendent=None, internationally=None, formation_date=None, subsidiary=None, number_of_employees=None, extinction_date=None, player_season=None, registration=None, endowment=None, slogan=None, regional_council=None, location_city=None, fate=None, number_of_volunteers=None, production=None, ideology=None, description=None, distributing_label=None, industry=None, membership=None, ceo=None, distributing_company=None, formation_year=None, junior_season=None, code_stock_exchange=None, headquarter=None, extinction_year=None, child_organisation=None, honours=None, parent_organisation=None, organisation_member=None, operating_income=None, number_of_staff=None, product=None, hometown=None, foundation_place=None, national_selection=None, asset_under_management=None, label=None, legal_form=None, market_capitalisation=None, service=None, general_council=None, net_income=None, trustee=None, age=None, main_organ=None):  # noqa: E501
        """RecordLabel - a model defined in OpenAPI

        :param viaf_id: The viaf_id of this RecordLabel.  # noqa: E501
        :type viaf_id: List[str]
        :param leader_function: The leader_function of this RecordLabel.  # noqa: E501
        :type leader_function: List[object]
        :param art_patron: The art_patron of this RecordLabel.  # noqa: E501
        :type art_patron: List[object]
        :param manager_season: The manager_season of this RecordLabel.  # noqa: E501
        :type manager_season: List[object]
        :param secretary_general: The secretary_general of this RecordLabel.  # noqa: E501
        :type secretary_general: List[object]
        :param number_of_locations: The number_of_locations of this RecordLabel.  # noqa: E501
        :type number_of_locations: List[int]
        :param discipline: The discipline of this RecordLabel.  # noqa: E501
        :type discipline: List[object]
        :param type: The type of this RecordLabel.  # noqa: E501
        :type type: List[str]
        :param equity: The equity of this RecordLabel.  # noqa: E501
        :type equity: List[float]
        :param revenue: The revenue of this RecordLabel.  # noqa: E501
        :type revenue: List[float]
        :param assets: The assets of this RecordLabel.  # noqa: E501
        :type assets: List[float]
        :param affiliation: The affiliation of this RecordLabel.  # noqa: E501
        :type affiliation: List[object]
        :param grounds_for_liquidation: The grounds_for_liquidation of this RecordLabel.  # noqa: E501
        :type grounds_for_liquidation: List[str]
        :param season: The season of this RecordLabel.  # noqa: E501
        :type season: List[object]
        :param id: The id of this RecordLabel.  # noqa: E501
        :type id: str
        :param nla_id: The nla_id of this RecordLabel.  # noqa: E501
        :type nla_id: List[str]
        :param stock_exchange: The stock_exchange of this RecordLabel.  # noqa: E501
        :type stock_exchange: List[str]
        :param chairperson: The chairperson of this RecordLabel.  # noqa: E501
        :type chairperson: List[object]
        :param region_served: The region_served of this RecordLabel.  # noqa: E501
        :type region_served: List[object]
        :param superintendent: The superintendent of this RecordLabel.  # noqa: E501
        :type superintendent: List[object]
        :param internationally: The internationally of this RecordLabel.  # noqa: E501
        :type internationally: List[bool]
        :param formation_date: The formation_date of this RecordLabel.  # noqa: E501
        :type formation_date: List[str]
        :param subsidiary: The subsidiary of this RecordLabel.  # noqa: E501
        :type subsidiary: List[object]
        :param number_of_employees: The number_of_employees of this RecordLabel.  # noqa: E501
        :type number_of_employees: List[int]
        :param extinction_date: The extinction_date of this RecordLabel.  # noqa: E501
        :type extinction_date: List[str]
        :param player_season: The player_season of this RecordLabel.  # noqa: E501
        :type player_season: List[object]
        :param registration: The registration of this RecordLabel.  # noqa: E501
        :type registration: List[str]
        :param endowment: The endowment of this RecordLabel.  # noqa: E501
        :type endowment: List[float]
        :param slogan: The slogan of this RecordLabel.  # noqa: E501
        :type slogan: List[str]
        :param regional_council: The regional_council of this RecordLabel.  # noqa: E501
        :type regional_council: List[object]
        :param location_city: The location_city of this RecordLabel.  # noqa: E501
        :type location_city: List[object]
        :param fate: The fate of this RecordLabel.  # noqa: E501
        :type fate: List[str]
        :param number_of_volunteers: The number_of_volunteers of this RecordLabel.  # noqa: E501
        :type number_of_volunteers: List[int]
        :param production: The production of this RecordLabel.  # noqa: E501
        :type production: List[int]
        :param ideology: The ideology of this RecordLabel.  # noqa: E501
        :type ideology: List[object]
        :param description: The description of this RecordLabel.  # noqa: E501
        :type description: List[str]
        :param distributing_label: The distributing_label of this RecordLabel.  # noqa: E501
        :type distributing_label: List[object]
        :param industry: The industry of this RecordLabel.  # noqa: E501
        :type industry: List[object]
        :param membership: The membership of this RecordLabel.  # noqa: E501
        :type membership: List[str]
        :param ceo: The ceo of this RecordLabel.  # noqa: E501
        :type ceo: List[object]
        :param distributing_company: The distributing_company of this RecordLabel.  # noqa: E501
        :type distributing_company: List[object]
        :param formation_year: The formation_year of this RecordLabel.  # noqa: E501
        :type formation_year: List[str]
        :param junior_season: The junior_season of this RecordLabel.  # noqa: E501
        :type junior_season: List[object]
        :param code_stock_exchange: The code_stock_exchange of this RecordLabel.  # noqa: E501
        :type code_stock_exchange: List[str]
        :param headquarter: The headquarter of this RecordLabel.  # noqa: E501
        :type headquarter: List[object]
        :param extinction_year: The extinction_year of this RecordLabel.  # noqa: E501
        :type extinction_year: List[str]
        :param child_organisation: The child_organisation of this RecordLabel.  # noqa: E501
        :type child_organisation: List[object]
        :param honours: The honours of this RecordLabel.  # noqa: E501
        :type honours: List[object]
        :param parent_organisation: The parent_organisation of this RecordLabel.  # noqa: E501
        :type parent_organisation: List[object]
        :param organisation_member: The organisation_member of this RecordLabel.  # noqa: E501
        :type organisation_member: List[object]
        :param operating_income: The operating_income of this RecordLabel.  # noqa: E501
        :type operating_income: List[float]
        :param number_of_staff: The number_of_staff of this RecordLabel.  # noqa: E501
        :type number_of_staff: List[int]
        :param product: The product of this RecordLabel.  # noqa: E501
        :type product: List[object]
        :param hometown: The hometown of this RecordLabel.  # noqa: E501
        :type hometown: List[object]
        :param foundation_place: The foundation_place of this RecordLabel.  # noqa: E501
        :type foundation_place: List[object]
        :param national_selection: The national_selection of this RecordLabel.  # noqa: E501
        :type national_selection: List[object]
        :param asset_under_management: The asset_under_management of this RecordLabel.  # noqa: E501
        :type asset_under_management: List[float]
        :param label: The label of this RecordLabel.  # noqa: E501
        :type label: List[str]
        :param legal_form: The legal_form of this RecordLabel.  # noqa: E501
        :type legal_form: List[object]
        :param market_capitalisation: The market_capitalisation of this RecordLabel.  # noqa: E501
        :type market_capitalisation: List[float]
        :param service: The service of this RecordLabel.  # noqa: E501
        :type service: List[object]
        :param general_council: The general_council of this RecordLabel.  # noqa: E501
        :type general_council: List[object]
        :param net_income: The net_income of this RecordLabel.  # noqa: E501
        :type net_income: List[float]
        :param trustee: The trustee of this RecordLabel.  # noqa: E501
        :type trustee: List[object]
        :param age: The age of this RecordLabel.  # noqa: E501
        :type age: List[int]
        :param main_organ: The main_organ of this RecordLabel.  # noqa: E501
        :type main_organ: List[object]
        """


        self.openapi_types = {
            'viaf_id': List[str],
            'leader_function': List[object],
            'art_patron': List[object],
            'manager_season': List[object],
            'secretary_general': List[object],
            'number_of_locations': List[int],
            'discipline': List[object],
            'type': List[str],
            'equity': List[float],
            'revenue': List[float],
            'assets': List[float],
            'affiliation': List[object],
            'grounds_for_liquidation': List[str],
            'season': List[object],
            'id': str,
            'nla_id': List[str],
            'stock_exchange': List[str],
            'chairperson': List[object],
            'region_served': List[object],
            'superintendent': List[object],
            'internationally': List[bool],
            'formation_date': List[str],
            'subsidiary': List[object],
            'number_of_employees': List[int],
            'extinction_date': List[str],
            'player_season': List[object],
            'registration': List[str],
            'endowment': List[float],
            'slogan': List[str],
            'regional_council': List[object],
            'location_city': List[object],
            'fate': List[str],
            'number_of_volunteers': List[int],
            'production': List[int],
            'ideology': List[object],
            'description': List[str],
            'distributing_label': List[object],
            'industry': List[object],
            'membership': List[str],
            'ceo': List[object],
            'distributing_company': List[object],
            'formation_year': List[str],
            'junior_season': List[object],
            'code_stock_exchange': List[str],
            'headquarter': List[object],
            'extinction_year': List[str],
            'child_organisation': List[object],
            'honours': List[object],
            'parent_organisation': List[object],
            'organisation_member': List[object],
            'operating_income': List[float],
            'number_of_staff': List[int],
            'product': List[object],
            'hometown': List[object],
            'foundation_place': List[object],
            'national_selection': List[object],
            'asset_under_management': List[float],
            'label': List[str],
            'legal_form': List[object],
            'market_capitalisation': List[float],
            'service': List[object],
            'general_council': List[object],
            'net_income': List[float],
            'trustee': List[object],
            'age': List[int],
            'main_organ': List[object]
        }

        self.attribute_map = {
            'viaf_id': 'viafId',
            'leader_function': 'leaderFunction',
            'art_patron': 'artPatron',
            'manager_season': 'managerSeason',
            'secretary_general': 'secretaryGeneral',
            'number_of_locations': 'numberOfLocations',
            'discipline': 'discipline',
            'type': 'type',
            'equity': 'equity',
            'revenue': 'revenue',
            'assets': 'assets',
            'affiliation': 'affiliation',
            'grounds_for_liquidation': 'groundsForLiquidation',
            'season': 'season',
            'id': 'id',
            'nla_id': 'nlaId',
            'stock_exchange': 'stockExchange',
            'chairperson': 'chairperson',
            'region_served': 'regionServed',
            'superintendent': 'superintendent',
            'internationally': 'internationally',
            'formation_date': 'formationDate',
            'subsidiary': 'subsidiary',
            'number_of_employees': 'numberOfEmployees',
            'extinction_date': 'extinctionDate',
            'player_season': 'playerSeason',
            'registration': 'registration',
            'endowment': 'endowment',
            'slogan': 'slogan',
            'regional_council': 'regionalCouncil',
            'location_city': 'locationCity',
            'fate': 'fate',
            'number_of_volunteers': 'numberOfVolunteers',
            'production': 'production',
            'ideology': 'ideology',
            'description': 'description',
            'distributing_label': 'distributingLabel',
            'industry': 'industry',
            'membership': 'membership',
            'ceo': 'ceo',
            'distributing_company': 'distributingCompany',
            'formation_year': 'formationYear',
            'junior_season': 'juniorSeason',
            'code_stock_exchange': 'codeStockExchange',
            'headquarter': 'headquarter',
            'extinction_year': 'extinctionYear',
            'child_organisation': 'childOrganisation',
            'honours': 'honours',
            'parent_organisation': 'parentOrganisation',
            'organisation_member': 'organisationMember',
            'operating_income': 'operatingIncome',
            'number_of_staff': 'numberOfStaff',
            'product': 'product',
            'hometown': 'hometown',
            'foundation_place': 'foundationPlace',
            'national_selection': 'nationalSelection',
            'asset_under_management': 'assetUnderManagement',
            'label': 'label',
            'legal_form': 'legalForm',
            'market_capitalisation': 'marketCapitalisation',
            'service': 'service',
            'general_council': 'generalCouncil',
            'net_income': 'netIncome',
            'trustee': 'trustee',
            'age': 'age',
            'main_organ': 'mainOrgan'
        }

        self._viaf_id = viaf_id
        self._leader_function = leader_function
        self._art_patron = art_patron
        self._manager_season = manager_season
        self._secretary_general = secretary_general
        self._number_of_locations = number_of_locations
        self._discipline = discipline
        self._type = type
        self._equity = equity
        self._revenue = revenue
        self._assets = assets
        self._affiliation = affiliation
        self._grounds_for_liquidation = grounds_for_liquidation
        self._season = season
        self._id = id
        self._nla_id = nla_id
        self._stock_exchange = stock_exchange
        self._chairperson = chairperson
        self._region_served = region_served
        self._superintendent = superintendent
        self._internationally = internationally
        self._formation_date = formation_date
        self._subsidiary = subsidiary
        self._number_of_employees = number_of_employees
        self._extinction_date = extinction_date
        self._player_season = player_season
        self._registration = registration
        self._endowment = endowment
        self._slogan = slogan
        self._regional_council = regional_council
        self._location_city = location_city
        self._fate = fate
        self._number_of_volunteers = number_of_volunteers
        self._production = production
        self._ideology = ideology
        self._description = description
        self._distributing_label = distributing_label
        self._industry = industry
        self._membership = membership
        self._ceo = ceo
        self._distributing_company = distributing_company
        self._formation_year = formation_year
        self._junior_season = junior_season
        self._code_stock_exchange = code_stock_exchange
        self._headquarter = headquarter
        self._extinction_year = extinction_year
        self._child_organisation = child_organisation
        self._honours = honours
        self._parent_organisation = parent_organisation
        self._organisation_member = organisation_member
        self._operating_income = operating_income
        self._number_of_staff = number_of_staff
        self._product = product
        self._hometown = hometown
        self._foundation_place = foundation_place
        self._national_selection = national_selection
        self._asset_under_management = asset_under_management
        self._label = label
        self._legal_form = legal_form
        self._market_capitalisation = market_capitalisation
        self._service = service
        self._general_council = general_council
        self._net_income = net_income
        self._trustee = trustee
        self._age = age
        self._main_organ = main_organ

    @classmethod
    def from_dict(cls, dikt) -> 'RecordLabel':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RecordLabel of this RecordLabel.  # noqa: E501
        :rtype: RecordLabel
        """
        return util.deserialize_model(dikt, cls)

    @property
    def viaf_id(self):
        """Gets the viaf_id of this RecordLabel.

        International authority data from the Online Computer Library Center (OCLC)  # noqa: E501

        :return: The viaf_id of this RecordLabel.
        :rtype: List[str]
        """
        return self._viaf_id

    @viaf_id.setter
    def viaf_id(self, viaf_id):
        """Sets the viaf_id of this RecordLabel.

        International authority data from the Online Computer Library Center (OCLC)  # noqa: E501

        :param viaf_id: The viaf_id of this RecordLabel.
        :type viaf_id: List[str]
        """

        self._viaf_id = viaf_id

    @property
    def leader_function(self):
        """Gets the leader_function of this RecordLabel.

        Description not available  # noqa: E501

        :return: The leader_function of this RecordLabel.
        :rtype: List[object]
        """
        return self._leader_function

    @leader_function.setter
    def leader_function(self, leader_function):
        """Sets the leader_function of this RecordLabel.

        Description not available  # noqa: E501

        :param leader_function: The leader_function of this RecordLabel.
        :type leader_function: List[object]
        """

        self._leader_function = leader_function

    @property
    def art_patron(self):
        """Gets the art_patron of this RecordLabel.

        An influential, wealthy person who supported an artist, craftsman, a scholar or a noble.. See also  # noqa: E501

        :return: The art_patron of this RecordLabel.
        :rtype: List[object]
        """
        return self._art_patron

    @art_patron.setter
    def art_patron(self, art_patron):
        """Sets the art_patron of this RecordLabel.

        An influential, wealthy person who supported an artist, craftsman, a scholar or a noble.. See also  # noqa: E501

        :param art_patron: The art_patron of this RecordLabel.
        :type art_patron: List[object]
        """

        self._art_patron = art_patron

    @property
    def manager_season(self):
        """Gets the manager_season of this RecordLabel.

        Description not available  # noqa: E501

        :return: The manager_season of this RecordLabel.
        :rtype: List[object]
        """
        return self._manager_season

    @manager_season.setter
    def manager_season(self, manager_season):
        """Sets the manager_season of this RecordLabel.

        Description not available  # noqa: E501

        :param manager_season: The manager_season of this RecordLabel.
        :type manager_season: List[object]
        """

        self._manager_season = manager_season

    @property
    def secretary_general(self):
        """Gets the secretary_general of this RecordLabel.

        Description not available  # noqa: E501

        :return: The secretary_general of this RecordLabel.
        :rtype: List[object]
        """
        return self._secretary_general

    @secretary_general.setter
    def secretary_general(self, secretary_general):
        """Sets the secretary_general of this RecordLabel.

        Description not available  # noqa: E501

        :param secretary_general: The secretary_general of this RecordLabel.
        :type secretary_general: List[object]
        """

        self._secretary_general = secretary_general

    @property
    def number_of_locations(self):
        """Gets the number_of_locations of this RecordLabel.

        Description not available  # noqa: E501

        :return: The number_of_locations of this RecordLabel.
        :rtype: List[int]
        """
        return self._number_of_locations

    @number_of_locations.setter
    def number_of_locations(self, number_of_locations):
        """Sets the number_of_locations of this RecordLabel.

        Description not available  # noqa: E501

        :param number_of_locations: The number_of_locations of this RecordLabel.
        :type number_of_locations: List[int]
        """

        self._number_of_locations = number_of_locations

    @property
    def discipline(self):
        """Gets the discipline of this RecordLabel.

        Description not available  # noqa: E501

        :return: The discipline of this RecordLabel.
        :rtype: List[object]
        """
        return self._discipline

    @discipline.setter
    def discipline(self, discipline):
        """Sets the discipline of this RecordLabel.

        Description not available  # noqa: E501

        :param discipline: The discipline of this RecordLabel.
        :type discipline: List[object]
        """

        self._discipline = discipline

    @property
    def type(self):
        """Gets the type of this RecordLabel.

        type of the resource  # noqa: E501

        :return: The type of this RecordLabel.
        :rtype: List[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RecordLabel.

        type of the resource  # noqa: E501

        :param type: The type of this RecordLabel.
        :type type: List[str]
        """

        self._type = type

    @property
    def equity(self):
        """Gets the equity of this RecordLabel.

        Description not available  # noqa: E501

        :return: The equity of this RecordLabel.
        :rtype: List[float]
        """
        return self._equity

    @equity.setter
    def equity(self, equity):
        """Sets the equity of this RecordLabel.

        Description not available  # noqa: E501

        :param equity: The equity of this RecordLabel.
        :type equity: List[float]
        """

        self._equity = equity

    @property
    def revenue(self):
        """Gets the revenue of this RecordLabel.

        Description not available  # noqa: E501

        :return: The revenue of this RecordLabel.
        :rtype: List[float]
        """
        return self._revenue

    @revenue.setter
    def revenue(self, revenue):
        """Sets the revenue of this RecordLabel.

        Description not available  # noqa: E501

        :param revenue: The revenue of this RecordLabel.
        :type revenue: List[float]
        """

        self._revenue = revenue

    @property
    def assets(self):
        """Gets the assets of this RecordLabel.

        Assets and liabilities are part of a companis balance sheet. In financial accounting, assets are economic resources. Anything tangible or intangible that is capable of being owned or controlled to produce value and that is held to have positive economic value is considered an asset.  # noqa: E501

        :return: The assets of this RecordLabel.
        :rtype: List[float]
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this RecordLabel.

        Assets and liabilities are part of a companis balance sheet. In financial accounting, assets are economic resources. Anything tangible or intangible that is capable of being owned or controlled to produce value and that is held to have positive economic value is considered an asset.  # noqa: E501

        :param assets: The assets of this RecordLabel.
        :type assets: List[float]
        """

        self._assets = assets

    @property
    def affiliation(self):
        """Gets the affiliation of this RecordLabel.

        Description not available  # noqa: E501

        :return: The affiliation of this RecordLabel.
        :rtype: List[object]
        """
        return self._affiliation

    @affiliation.setter
    def affiliation(self, affiliation):
        """Sets the affiliation of this RecordLabel.

        Description not available  # noqa: E501

        :param affiliation: The affiliation of this RecordLabel.
        :type affiliation: List[object]
        """

        self._affiliation = affiliation

    @property
    def grounds_for_liquidation(self):
        """Gets the grounds_for_liquidation of this RecordLabel.

        Description not available  # noqa: E501

        :return: The grounds_for_liquidation of this RecordLabel.
        :rtype: List[str]
        """
        return self._grounds_for_liquidation

    @grounds_for_liquidation.setter
    def grounds_for_liquidation(self, grounds_for_liquidation):
        """Sets the grounds_for_liquidation of this RecordLabel.

        Description not available  # noqa: E501

        :param grounds_for_liquidation: The grounds_for_liquidation of this RecordLabel.
        :type grounds_for_liquidation: List[str]
        """

        self._grounds_for_liquidation = grounds_for_liquidation

    @property
    def season(self):
        """Gets the season of this RecordLabel.

        Description not available  # noqa: E501

        :return: The season of this RecordLabel.
        :rtype: List[object]
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this RecordLabel.

        Description not available  # noqa: E501

        :param season: The season of this RecordLabel.
        :type season: List[object]
        """

        self._season = season

    @property
    def id(self):
        """Gets the id of this RecordLabel.

        identifier  # noqa: E501

        :return: The id of this RecordLabel.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RecordLabel.

        identifier  # noqa: E501

        :param id: The id of this RecordLabel.
        :type id: str
        """

        self._id = id

    @property
    def nla_id(self):
        """Gets the nla_id of this RecordLabel.

        NLA Trove’s People and Organisation view allows the discovery of biographical and other contextual information about people and organisations. Search also available via VIAF.  # noqa: E501

        :return: The nla_id of this RecordLabel.
        :rtype: List[str]
        """
        return self._nla_id

    @nla_id.setter
    def nla_id(self, nla_id):
        """Sets the nla_id of this RecordLabel.

        NLA Trove’s People and Organisation view allows the discovery of biographical and other contextual information about people and organisations. Search also available via VIAF.  # noqa: E501

        :param nla_id: The nla_id of this RecordLabel.
        :type nla_id: List[str]
        """

        self._nla_id = nla_id

    @property
    def stock_exchange(self):
        """Gets the stock_exchange of this RecordLabel.

        Description not available  # noqa: E501

        :return: The stock_exchange of this RecordLabel.
        :rtype: List[str]
        """
        return self._stock_exchange

    @stock_exchange.setter
    def stock_exchange(self, stock_exchange):
        """Sets the stock_exchange of this RecordLabel.

        Description not available  # noqa: E501

        :param stock_exchange: The stock_exchange of this RecordLabel.
        :type stock_exchange: List[str]
        """

        self._stock_exchange = stock_exchange

    @property
    def chairperson(self):
        """Gets the chairperson of this RecordLabel.

        Description not available  # noqa: E501

        :return: The chairperson of this RecordLabel.
        :rtype: List[object]
        """
        return self._chairperson

    @chairperson.setter
    def chairperson(self, chairperson):
        """Sets the chairperson of this RecordLabel.

        Description not available  # noqa: E501

        :param chairperson: The chairperson of this RecordLabel.
        :type chairperson: List[object]
        """

        self._chairperson = chairperson

    @property
    def region_served(self):
        """Gets the region_served of this RecordLabel.

        Description not available  # noqa: E501

        :return: The region_served of this RecordLabel.
        :rtype: List[object]
        """
        return self._region_served

    @region_served.setter
    def region_served(self, region_served):
        """Sets the region_served of this RecordLabel.

        Description not available  # noqa: E501

        :param region_served: The region_served of this RecordLabel.
        :type region_served: List[object]
        """

        self._region_served = region_served

    @property
    def superintendent(self):
        """Gets the superintendent of this RecordLabel.

        Description not available  # noqa: E501

        :return: The superintendent of this RecordLabel.
        :rtype: List[object]
        """
        return self._superintendent

    @superintendent.setter
    def superintendent(self, superintendent):
        """Sets the superintendent of this RecordLabel.

        Description not available  # noqa: E501

        :param superintendent: The superintendent of this RecordLabel.
        :type superintendent: List[object]
        """

        self._superintendent = superintendent

    @property
    def internationally(self):
        """Gets the internationally of this RecordLabel.

        Description not available  # noqa: E501

        :return: The internationally of this RecordLabel.
        :rtype: List[bool]
        """
        return self._internationally

    @internationally.setter
    def internationally(self, internationally):
        """Sets the internationally of this RecordLabel.

        Description not available  # noqa: E501

        :param internationally: The internationally of this RecordLabel.
        :type internationally: List[bool]
        """

        self._internationally = internationally

    @property
    def formation_date(self):
        """Gets the formation_date of this RecordLabel.

        Description not available  # noqa: E501

        :return: The formation_date of this RecordLabel.
        :rtype: List[str]
        """
        return self._formation_date

    @formation_date.setter
    def formation_date(self, formation_date):
        """Sets the formation_date of this RecordLabel.

        Description not available  # noqa: E501

        :param formation_date: The formation_date of this RecordLabel.
        :type formation_date: List[str]
        """

        self._formation_date = formation_date

    @property
    def subsidiary(self):
        """Gets the subsidiary of this RecordLabel.

        Description not available  # noqa: E501

        :return: The subsidiary of this RecordLabel.
        :rtype: List[object]
        """
        return self._subsidiary

    @subsidiary.setter
    def subsidiary(self, subsidiary):
        """Sets the subsidiary of this RecordLabel.

        Description not available  # noqa: E501

        :param subsidiary: The subsidiary of this RecordLabel.
        :type subsidiary: List[object]
        """

        self._subsidiary = subsidiary

    @property
    def number_of_employees(self):
        """Gets the number_of_employees of this RecordLabel.

        Description not available  # noqa: E501

        :return: The number_of_employees of this RecordLabel.
        :rtype: List[int]
        """
        return self._number_of_employees

    @number_of_employees.setter
    def number_of_employees(self, number_of_employees):
        """Sets the number_of_employees of this RecordLabel.

        Description not available  # noqa: E501

        :param number_of_employees: The number_of_employees of this RecordLabel.
        :type number_of_employees: List[int]
        """

        self._number_of_employees = number_of_employees

    @property
    def extinction_date(self):
        """Gets the extinction_date of this RecordLabel.

        Description not available  # noqa: E501

        :return: The extinction_date of this RecordLabel.
        :rtype: List[str]
        """
        return self._extinction_date

    @extinction_date.setter
    def extinction_date(self, extinction_date):
        """Sets the extinction_date of this RecordLabel.

        Description not available  # noqa: E501

        :param extinction_date: The extinction_date of this RecordLabel.
        :type extinction_date: List[str]
        """

        self._extinction_date = extinction_date

    @property
    def player_season(self):
        """Gets the player_season of this RecordLabel.

        Description not available  # noqa: E501

        :return: The player_season of this RecordLabel.
        :rtype: List[object]
        """
        return self._player_season

    @player_season.setter
    def player_season(self, player_season):
        """Sets the player_season of this RecordLabel.

        Description not available  # noqa: E501

        :param player_season: The player_season of this RecordLabel.
        :type player_season: List[object]
        """

        self._player_season = player_season

    @property
    def registration(self):
        """Gets the registration of this RecordLabel.

        Description not available  # noqa: E501

        :return: The registration of this RecordLabel.
        :rtype: List[str]
        """
        return self._registration

    @registration.setter
    def registration(self, registration):
        """Sets the registration of this RecordLabel.

        Description not available  # noqa: E501

        :param registration: The registration of this RecordLabel.
        :type registration: List[str]
        """

        self._registration = registration

    @property
    def endowment(self):
        """Gets the endowment of this RecordLabel.

        Description not available  # noqa: E501

        :return: The endowment of this RecordLabel.
        :rtype: List[float]
        """
        return self._endowment

    @endowment.setter
    def endowment(self, endowment):
        """Sets the endowment of this RecordLabel.

        Description not available  # noqa: E501

        :param endowment: The endowment of this RecordLabel.
        :type endowment: List[float]
        """

        self._endowment = endowment

    @property
    def slogan(self):
        """Gets the slogan of this RecordLabel.

        Description not available  # noqa: E501

        :return: The slogan of this RecordLabel.
        :rtype: List[str]
        """
        return self._slogan

    @slogan.setter
    def slogan(self, slogan):
        """Sets the slogan of this RecordLabel.

        Description not available  # noqa: E501

        :param slogan: The slogan of this RecordLabel.
        :type slogan: List[str]
        """

        self._slogan = slogan

    @property
    def regional_council(self):
        """Gets the regional_council of this RecordLabel.

        Description not available  # noqa: E501

        :return: The regional_council of this RecordLabel.
        :rtype: List[object]
        """
        return self._regional_council

    @regional_council.setter
    def regional_council(self, regional_council):
        """Sets the regional_council of this RecordLabel.

        Description not available  # noqa: E501

        :param regional_council: The regional_council of this RecordLabel.
        :type regional_council: List[object]
        """

        self._regional_council = regional_council

    @property
    def location_city(self):
        """Gets the location_city of this RecordLabel.

        City the thing is located.  # noqa: E501

        :return: The location_city of this RecordLabel.
        :rtype: List[object]
        """
        return self._location_city

    @location_city.setter
    def location_city(self, location_city):
        """Sets the location_city of this RecordLabel.

        City the thing is located.  # noqa: E501

        :param location_city: The location_city of this RecordLabel.
        :type location_city: List[object]
        """

        self._location_city = location_city

    @property
    def fate(self):
        """Gets the fate of this RecordLabel.

        Description not available  # noqa: E501

        :return: The fate of this RecordLabel.
        :rtype: List[str]
        """
        return self._fate

    @fate.setter
    def fate(self, fate):
        """Sets the fate of this RecordLabel.

        Description not available  # noqa: E501

        :param fate: The fate of this RecordLabel.
        :type fate: List[str]
        """

        self._fate = fate

    @property
    def number_of_volunteers(self):
        """Gets the number_of_volunteers of this RecordLabel.

        Description not available  # noqa: E501

        :return: The number_of_volunteers of this RecordLabel.
        :rtype: List[int]
        """
        return self._number_of_volunteers

    @number_of_volunteers.setter
    def number_of_volunteers(self, number_of_volunteers):
        """Sets the number_of_volunteers of this RecordLabel.

        Description not available  # noqa: E501

        :param number_of_volunteers: The number_of_volunteers of this RecordLabel.
        :type number_of_volunteers: List[int]
        """

        self._number_of_volunteers = number_of_volunteers

    @property
    def production(self):
        """Gets the production of this RecordLabel.

        Description not available  # noqa: E501

        :return: The production of this RecordLabel.
        :rtype: List[int]
        """
        return self._production

    @production.setter
    def production(self, production):
        """Sets the production of this RecordLabel.

        Description not available  # noqa: E501

        :param production: The production of this RecordLabel.
        :type production: List[int]
        """

        self._production = production

    @property
    def ideology(self):
        """Gets the ideology of this RecordLabel.

        Description not available  # noqa: E501

        :return: The ideology of this RecordLabel.
        :rtype: List[object]
        """
        return self._ideology

    @ideology.setter
    def ideology(self, ideology):
        """Sets the ideology of this RecordLabel.

        Description not available  # noqa: E501

        :param ideology: The ideology of this RecordLabel.
        :type ideology: List[object]
        """

        self._ideology = ideology

    @property
    def description(self):
        """Gets the description of this RecordLabel.

        small description  # noqa: E501

        :return: The description of this RecordLabel.
        :rtype: List[str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RecordLabel.

        small description  # noqa: E501

        :param description: The description of this RecordLabel.
        :type description: List[str]
        """

        self._description = description

    @property
    def distributing_label(self):
        """Gets the distributing_label of this RecordLabel.

        Description not available  # noqa: E501

        :return: The distributing_label of this RecordLabel.
        :rtype: List[object]
        """
        return self._distributing_label

    @distributing_label.setter
    def distributing_label(self, distributing_label):
        """Sets the distributing_label of this RecordLabel.

        Description not available  # noqa: E501

        :param distributing_label: The distributing_label of this RecordLabel.
        :type distributing_label: List[object]
        """

        self._distributing_label = distributing_label

    @property
    def industry(self):
        """Gets the industry of this RecordLabel.

        Description not available  # noqa: E501

        :return: The industry of this RecordLabel.
        :rtype: List[object]
        """
        return self._industry

    @industry.setter
    def industry(self, industry):
        """Sets the industry of this RecordLabel.

        Description not available  # noqa: E501

        :param industry: The industry of this RecordLabel.
        :type industry: List[object]
        """

        self._industry = industry

    @property
    def membership(self):
        """Gets the membership of this RecordLabel.

        Description not available  # noqa: E501

        :return: The membership of this RecordLabel.
        :rtype: List[str]
        """
        return self._membership

    @membership.setter
    def membership(self, membership):
        """Sets the membership of this RecordLabel.

        Description not available  # noqa: E501

        :param membership: The membership of this RecordLabel.
        :type membership: List[str]
        """

        self._membership = membership

    @property
    def ceo(self):
        """Gets the ceo of this RecordLabel.

        Description not available  # noqa: E501

        :return: The ceo of this RecordLabel.
        :rtype: List[object]
        """
        return self._ceo

    @ceo.setter
    def ceo(self, ceo):
        """Sets the ceo of this RecordLabel.

        Description not available  # noqa: E501

        :param ceo: The ceo of this RecordLabel.
        :type ceo: List[object]
        """

        self._ceo = ceo

    @property
    def distributing_company(self):
        """Gets the distributing_company of this RecordLabel.

        Description not available  # noqa: E501

        :return: The distributing_company of this RecordLabel.
        :rtype: List[object]
        """
        return self._distributing_company

    @distributing_company.setter
    def distributing_company(self, distributing_company):
        """Sets the distributing_company of this RecordLabel.

        Description not available  # noqa: E501

        :param distributing_company: The distributing_company of this RecordLabel.
        :type distributing_company: List[object]
        """

        self._distributing_company = distributing_company

    @property
    def formation_year(self):
        """Gets the formation_year of this RecordLabel.

        Description not available  # noqa: E501

        :return: The formation_year of this RecordLabel.
        :rtype: List[str]
        """
        return self._formation_year

    @formation_year.setter
    def formation_year(self, formation_year):
        """Sets the formation_year of this RecordLabel.

        Description not available  # noqa: E501

        :param formation_year: The formation_year of this RecordLabel.
        :type formation_year: List[str]
        """

        self._formation_year = formation_year

    @property
    def junior_season(self):
        """Gets the junior_season of this RecordLabel.

        Description not available  # noqa: E501

        :return: The junior_season of this RecordLabel.
        :rtype: List[object]
        """
        return self._junior_season

    @junior_season.setter
    def junior_season(self, junior_season):
        """Sets the junior_season of this RecordLabel.

        Description not available  # noqa: E501

        :param junior_season: The junior_season of this RecordLabel.
        :type junior_season: List[object]
        """

        self._junior_season = junior_season

    @property
    def code_stock_exchange(self):
        """Gets the code_stock_exchange of this RecordLabel.

        Description not available  # noqa: E501

        :return: The code_stock_exchange of this RecordLabel.
        :rtype: List[str]
        """
        return self._code_stock_exchange

    @code_stock_exchange.setter
    def code_stock_exchange(self, code_stock_exchange):
        """Sets the code_stock_exchange of this RecordLabel.

        Description not available  # noqa: E501

        :param code_stock_exchange: The code_stock_exchange of this RecordLabel.
        :type code_stock_exchange: List[str]
        """

        self._code_stock_exchange = code_stock_exchange

    @property
    def headquarter(self):
        """Gets the headquarter of this RecordLabel.

        Description not available  # noqa: E501

        :return: The headquarter of this RecordLabel.
        :rtype: List[object]
        """
        return self._headquarter

    @headquarter.setter
    def headquarter(self, headquarter):
        """Sets the headquarter of this RecordLabel.

        Description not available  # noqa: E501

        :param headquarter: The headquarter of this RecordLabel.
        :type headquarter: List[object]
        """

        self._headquarter = headquarter

    @property
    def extinction_year(self):
        """Gets the extinction_year of this RecordLabel.

        Description not available  # noqa: E501

        :return: The extinction_year of this RecordLabel.
        :rtype: List[str]
        """
        return self._extinction_year

    @extinction_year.setter
    def extinction_year(self, extinction_year):
        """Sets the extinction_year of this RecordLabel.

        Description not available  # noqa: E501

        :param extinction_year: The extinction_year of this RecordLabel.
        :type extinction_year: List[str]
        """

        self._extinction_year = extinction_year

    @property
    def child_organisation(self):
        """Gets the child_organisation of this RecordLabel.

        Description not available  # noqa: E501

        :return: The child_organisation of this RecordLabel.
        :rtype: List[object]
        """
        return self._child_organisation

    @child_organisation.setter
    def child_organisation(self, child_organisation):
        """Sets the child_organisation of this RecordLabel.

        Description not available  # noqa: E501

        :param child_organisation: The child_organisation of this RecordLabel.
        :type child_organisation: List[object]
        """

        self._child_organisation = child_organisation

    @property
    def honours(self):
        """Gets the honours of this RecordLabel.

        Description not available  # noqa: E501

        :return: The honours of this RecordLabel.
        :rtype: List[object]
        """
        return self._honours

    @honours.setter
    def honours(self, honours):
        """Sets the honours of this RecordLabel.

        Description not available  # noqa: E501

        :param honours: The honours of this RecordLabel.
        :type honours: List[object]
        """

        self._honours = honours

    @property
    def parent_organisation(self):
        """Gets the parent_organisation of this RecordLabel.

        Description not available  # noqa: E501

        :return: The parent_organisation of this RecordLabel.
        :rtype: List[object]
        """
        return self._parent_organisation

    @parent_organisation.setter
    def parent_organisation(self, parent_organisation):
        """Sets the parent_organisation of this RecordLabel.

        Description not available  # noqa: E501

        :param parent_organisation: The parent_organisation of this RecordLabel.
        :type parent_organisation: List[object]
        """

        self._parent_organisation = parent_organisation

    @property
    def organisation_member(self):
        """Gets the organisation_member of this RecordLabel.

        Identify the members of an organisation.  # noqa: E501

        :return: The organisation_member of this RecordLabel.
        :rtype: List[object]
        """
        return self._organisation_member

    @organisation_member.setter
    def organisation_member(self, organisation_member):
        """Sets the organisation_member of this RecordLabel.

        Identify the members of an organisation.  # noqa: E501

        :param organisation_member: The organisation_member of this RecordLabel.
        :type organisation_member: List[object]
        """

        self._organisation_member = organisation_member

    @property
    def operating_income(self):
        """Gets the operating_income of this RecordLabel.

        Description not available  # noqa: E501

        :return: The operating_income of this RecordLabel.
        :rtype: List[float]
        """
        return self._operating_income

    @operating_income.setter
    def operating_income(self, operating_income):
        """Sets the operating_income of this RecordLabel.

        Description not available  # noqa: E501

        :param operating_income: The operating_income of this RecordLabel.
        :type operating_income: List[float]
        """

        self._operating_income = operating_income

    @property
    def number_of_staff(self):
        """Gets the number_of_staff of this RecordLabel.

        Description not available  # noqa: E501

        :return: The number_of_staff of this RecordLabel.
        :rtype: List[int]
        """
        return self._number_of_staff

    @number_of_staff.setter
    def number_of_staff(self, number_of_staff):
        """Sets the number_of_staff of this RecordLabel.

        Description not available  # noqa: E501

        :param number_of_staff: The number_of_staff of this RecordLabel.
        :type number_of_staff: List[int]
        """

        self._number_of_staff = number_of_staff

    @property
    def product(self):
        """Gets the product of this RecordLabel.

        Description not available  # noqa: E501

        :return: The product of this RecordLabel.
        :rtype: List[object]
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this RecordLabel.

        Description not available  # noqa: E501

        :param product: The product of this RecordLabel.
        :type product: List[object]
        """

        self._product = product

    @property
    def hometown(self):
        """Gets the hometown of this RecordLabel.

        Description not available  # noqa: E501

        :return: The hometown of this RecordLabel.
        :rtype: List[object]
        """
        return self._hometown

    @hometown.setter
    def hometown(self, hometown):
        """Sets the hometown of this RecordLabel.

        Description not available  # noqa: E501

        :param hometown: The hometown of this RecordLabel.
        :type hometown: List[object]
        """

        self._hometown = hometown

    @property
    def foundation_place(self):
        """Gets the foundation_place of this RecordLabel.

        Description not available  # noqa: E501

        :return: The foundation_place of this RecordLabel.
        :rtype: List[object]
        """
        return self._foundation_place

    @foundation_place.setter
    def foundation_place(self, foundation_place):
        """Sets the foundation_place of this RecordLabel.

        Description not available  # noqa: E501

        :param foundation_place: The foundation_place of this RecordLabel.
        :type foundation_place: List[object]
        """

        self._foundation_place = foundation_place

    @property
    def national_selection(self):
        """Gets the national_selection of this RecordLabel.

        Description not available  # noqa: E501

        :return: The national_selection of this RecordLabel.
        :rtype: List[object]
        """
        return self._national_selection

    @national_selection.setter
    def national_selection(self, national_selection):
        """Sets the national_selection of this RecordLabel.

        Description not available  # noqa: E501

        :param national_selection: The national_selection of this RecordLabel.
        :type national_selection: List[object]
        """

        self._national_selection = national_selection

    @property
    def asset_under_management(self):
        """Gets the asset_under_management of this RecordLabel.

        Description not available  # noqa: E501

        :return: The asset_under_management of this RecordLabel.
        :rtype: List[float]
        """
        return self._asset_under_management

    @asset_under_management.setter
    def asset_under_management(self, asset_under_management):
        """Sets the asset_under_management of this RecordLabel.

        Description not available  # noqa: E501

        :param asset_under_management: The asset_under_management of this RecordLabel.
        :type asset_under_management: List[float]
        """

        self._asset_under_management = asset_under_management

    @property
    def label(self):
        """Gets the label of this RecordLabel.

        short description of the resource  # noqa: E501

        :return: The label of this RecordLabel.
        :rtype: List[str]
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this RecordLabel.

        short description of the resource  # noqa: E501

        :param label: The label of this RecordLabel.
        :type label: List[str]
        """

        self._label = label

    @property
    def legal_form(self):
        """Gets the legal_form of this RecordLabel.

        There are many types of business entity defined in the legal systems of various countries. These include corporations, cooperatives, partnerships, sole traders, limited liability company and other specialized types of organization.  # noqa: E501

        :return: The legal_form of this RecordLabel.
        :rtype: List[object]
        """
        return self._legal_form

    @legal_form.setter
    def legal_form(self, legal_form):
        """Sets the legal_form of this RecordLabel.

        There are many types of business entity defined in the legal systems of various countries. These include corporations, cooperatives, partnerships, sole traders, limited liability company and other specialized types of organization.  # noqa: E501

        :param legal_form: The legal_form of this RecordLabel.
        :type legal_form: List[object]
        """

        self._legal_form = legal_form

    @property
    def market_capitalisation(self):
        """Gets the market_capitalisation of this RecordLabel.

        Description not available  # noqa: E501

        :return: The market_capitalisation of this RecordLabel.
        :rtype: List[float]
        """
        return self._market_capitalisation

    @market_capitalisation.setter
    def market_capitalisation(self, market_capitalisation):
        """Sets the market_capitalisation of this RecordLabel.

        Description not available  # noqa: E501

        :param market_capitalisation: The market_capitalisation of this RecordLabel.
        :type market_capitalisation: List[float]
        """

        self._market_capitalisation = market_capitalisation

    @property
    def service(self):
        """Gets the service of this RecordLabel.

        Description not available  # noqa: E501

        :return: The service of this RecordLabel.
        :rtype: List[object]
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this RecordLabel.

        Description not available  # noqa: E501

        :param service: The service of this RecordLabel.
        :type service: List[object]
        """

        self._service = service

    @property
    def general_council(self):
        """Gets the general_council of this RecordLabel.

        Description not available  # noqa: E501

        :return: The general_council of this RecordLabel.
        :rtype: List[object]
        """
        return self._general_council

    @general_council.setter
    def general_council(self, general_council):
        """Sets the general_council of this RecordLabel.

        Description not available  # noqa: E501

        :param general_council: The general_council of this RecordLabel.
        :type general_council: List[object]
        """

        self._general_council = general_council

    @property
    def net_income(self):
        """Gets the net_income of this RecordLabel.

        Description not available  # noqa: E501

        :return: The net_income of this RecordLabel.
        :rtype: List[float]
        """
        return self._net_income

    @net_income.setter
    def net_income(self, net_income):
        """Sets the net_income of this RecordLabel.

        Description not available  # noqa: E501

        :param net_income: The net_income of this RecordLabel.
        :type net_income: List[float]
        """

        self._net_income = net_income

    @property
    def trustee(self):
        """Gets the trustee of this RecordLabel.

        Description not available  # noqa: E501

        :return: The trustee of this RecordLabel.
        :rtype: List[object]
        """
        return self._trustee

    @trustee.setter
    def trustee(self, trustee):
        """Sets the trustee of this RecordLabel.

        Description not available  # noqa: E501

        :param trustee: The trustee of this RecordLabel.
        :type trustee: List[object]
        """

        self._trustee = trustee

    @property
    def age(self):
        """Gets the age of this RecordLabel.

        Description not available  # noqa: E501

        :return: The age of this RecordLabel.
        :rtype: List[int]
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this RecordLabel.

        Description not available  # noqa: E501

        :param age: The age of this RecordLabel.
        :type age: List[int]
        """

        self._age = age

    @property
    def main_organ(self):
        """Gets the main_organ of this RecordLabel.

        Description not available  # noqa: E501

        :return: The main_organ of this RecordLabel.
        :rtype: List[object]
        """
        return self._main_organ

    @main_organ.setter
    def main_organ(self, main_organ):
        """Sets the main_organ of this RecordLabel.

        Description not available  # noqa: E501

        :param main_organ: The main_organ of this RecordLabel.
        :type main_organ: List[object]
        """

        self._main_organ = main_organ
